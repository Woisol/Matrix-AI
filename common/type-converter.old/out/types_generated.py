# -*- coding: utf-8 -*-
"""
自动生成的 Pydantic 模型
从 TypeScript 类型定义转换而来

生成时间: 2025-09-14T14:39:05.611Z
生成工具: TypeScript to Pydantic Converter

⚠️  警告: 此文件由工具自动生成，请勿手动编辑！
如需修改，请编辑 TypeScript 类型定义文件，然后重新运行转换工具。
"""

from pydantic import BaseModel, Field\nfrom enum import Enum\nfrom typing import Optional, List, Dict, Union\nfrom datetime import datetime\n\n# 自定义类型别名\nMdContent = Annotated[str, Field(..., description='Markdown内容')]\nMdCodeContent = Annotated[str, Field(..., description='Markdown代码内容，注意包含```xxx```')]\nCodeContent = Annotated[str, Field(..., description='代码内容')]\nJSONStr = Annotated[str, Field(..., description='JSON字符串')]\nID = Annotated[str, Field(..., description='唯一标识符')]\n\n# 枚举类型\n# @fileoverview An enum to control who can call certain jsaction APIs.\nclass Restriction(str, Enum):\n    I_AM_THE_JSACTION_FRAMEWORK = "I_AM_THE_JSACTION_FRAMEWORK"\n\n# This enum is an exact copy of the `InjectFlags` enum above, but the difference is that this is a
const enum, so actual enum values would be inlined in generated code. The `InjectFlags` enum can
be turned into a const enum when ViewEngine is removed (see TODO at the `InjectFlags` enum
above). The benefit of inlining is that we can use these flags at the top level without affecting
tree-shaking (see "no-toplevel-property-access" tslint rule for more info).
Keep this enum in sync with `InjectFlags` enum above.\nclass InternalInjectFlags(str, Enum):\n    DEFAULT = "Default"\n    HOST = "Host"\n    SELF = "Self"\n    SKIPSELF = "SkipSelf"\n    OPTIONAL = "Optional"\n    FORPIPE = "ForPipe"\n\n# @deprecated Use a string literal instead. `NotificationKind` will be replaced with a type alias in v8.
It will not be replaced with a const enum as those are not compatible with isolated modules.\nclass NotificationKind(str, Enum):\n    N = "N"\n    E = "E"\n    C = "C"\n\nclass NotificationSource(str, Enum):\n    MARKANCESTORSFORTRAVERSAL = "MarkAncestorsForTraversal"\n    SETINPUT = "SetInput"\n    DEFERBLOCKSTATEUPDATE = "DeferBlockStateUpdate"\n    DEBUGAPPLYCHANGES = "DebugApplyChanges"\n    MARKFORCHECK = "MarkForCheck"\n    LISTENER = "Listener"\n    CUSTOMELEMENT = "CustomElement"\n    RENDERHOOK = "RenderHook"\n    VIEWATTACHED = "ViewAttached"\n    VIEWDETACHEDFROMDOM = "ViewDetachedFromDOM"\n    ASYNCANIMATIONSLOADED = "AsyncAnimationsLoaded"\n    PENDINGTASKREMOVED = "PendingTaskRemoved"\n    ROOTEFFECT = "RootEffect"\n    VIEWEFFECT = "ViewEffect"\n\n# Defines the ICU type of `select` or `plural`\nclass IcuType(str, Enum):\n    SELECT = "select"\n    PLURAL = "plural"\n\nclass I18nPlaceholderType(str, Enum):\n    ELEMENT = "ELEMENT"\n    SUBTEMPLATE = "SUBTEMPLATE"\n\nclass I18nNodeKind(str, Enum):\n    TEXT = "TEXT"\n    ELEMENT = "ELEMENT"\n    PLACEHOLDER = "PLACEHOLDER"\n    ICU = "ICU"\n\n# A set of marker values to be used in the attributes arrays. These markers indicate that some
items are not regular attributes and the processing should be adapted accordingly.\nclass AttributeMarker(str, Enum):\n    IMPLICITATTRIBUTES = "ImplicitAttributes"\n    NAMESPACEURI = "NamespaceURI"\n    CLASSES = "Classes"\n    STYLES = "Styles"\n    BINDINGS = "Bindings"\n    TEMPLATE = "Template"\n    PROJECTAS = "ProjectAs"\n    I18N = "I18n"\n\n# Flags used to build up CssSelectors\nclass SelectorFlags(str, Enum):\n    NOT = "NOT"\n    ATTRIBUTE = "ATTRIBUTE"\n    ELEMENT = "ELEMENT"\n    CLASS = "CLASS"\n\n# TNodeType corresponds to the {@link TNode} `type` property.
NOTE: type IDs are such that we use each bit to denote a type. This is done so that we can easily
check if the `TNode` is of more than one type.
`if (tNode.type === TNodeType.Text || tNode.type === TNode.Element)`
can be written as:
`if (tNode.type & (TNodeType.Text | TNodeType.Element))`
However any given `TNode` can only be of one type.\nclass TNodeType(str, Enum):\n    TEXT = "Text"\n    ELEMENT = "Element"\n    CONTAINER = "Container"\n    ELEMENTCONTAINER = "ElementContainer"\n    PROJECTION = "Projection"\n    ICU = "Icu"\n    PLACEHOLDER = "Placeholder"\n    LETDECLARATION = "LetDeclaration"\n    ANYRNODE = "AnyRNode"\n    ANYCONTAINER = "AnyContainer"\n\n# Corresponds to the TNode.flags property.\nclass TNodeFlags(str, Enum):\n    ISDIRECTIVEHOST = "isDirectiveHost"\n    ISPROJECTED = "isProjected"\n    HASCONTENTQUERY = "hasContentQuery"\n    HASCLASSINPUT = "hasClassInput"\n    HASSTYLEINPUT = "hasStyleInput"\n    ISDETACHED = "isDetached"\n    HASHOSTBINDINGS = "hasHostBindings"\n    INSKIPHYDRATIONBLOCK = "inSkipHydrationBlock"\n    ISCONTROLFLOWSTART = "isControlFlowStart"\n    ISINCONTROLFLOW = "isInControlFlow"\n\n# Corresponds to the TNode.providerIndexes property.\nclass TNodeProviderIndexes(str, Enum):\n    PROVIDERSSTARTINDEXMASK = "ProvidersStartIndexMask"\n    CPTVIEWPROVIDERSCOUNTSHIFT = "CptViewProvidersCountShift"\n    CPTVIEWPROVIDERSCOUNTSHIFTER = "CptViewProvidersCountShifter"\n\n# Flags associated with an LContainer (saved in LContainer[FLAGS])\nclass LContainerFlags(str, Enum):\n    NONE = "None"\n    HASTRANSPLANTEDVIEWS = "HasTransplantedViews"\n\n# Defines the CSS styles encapsulation policies for the {@link /api/core/Component Component} decorator's
`encapsulation` option.
See {@link Component#encapsulation encapsulation}.
@usageNotes
### Example
{@example core/ts/metadata/encapsulation.ts region='longform'}
@publicApi\nclass ViewEncapsulation(str, Enum):\n    EMULATED = "Emulated"\n    NONE = "None"\n    SHADOWDOM = "ShadowDom"\n\n# Flags describing an input for a directive.\nclass InputFlags(str, Enum):\n    NONE = "None"\n    SIGNALBASED = "SignalBased"\n    HASDECORATORINPUTTRANSFORM = "HasDecoratorInputTransform"\n\n# Flags passed into template functions to determine which blocks (i.e. creation, update)
should be executed.
Typically, a template runs both the creation block and the update block on initialization and
subsequent runs only execute the update block. However, dynamically created views require that
the creation block be executed separately from the update block (for backwards compat).\nclass RenderFlags(str, Enum):\n    CREATE = "Create"\n    UPDATE = "Update"\n\n# Describes the state of defer block dependency loading.\nclass DeferDependenciesLoadingState(str, Enum):\n    NOT_STARTED = "NOT_STARTED"\n    IN_PROGRESS = "IN_PROGRESS"\n    COMPLETE = "COMPLETE"\n    FAILED = "FAILED"\n\n# Specifies defer block flags, which should be used for all
instances of a given defer block (the flags that should be
placed into the `TDeferDetails` at runtime).\nclass TDeferDetailsFlags(str, Enum):\n    DEFAULT = "Default"\n    HASHYDRATETRIGGERS = "HasHydrateTriggers"\n\n# Describes the current state of this defer block instance.
@publicApi\nclass DeferBlockState(str, Enum):\n    PLACEHOLDER = "Placeholder"\n    LOADING = "Loading"\n    COMPLETE = "Complete"\n    ERROR = "Error"\n\n# Represents defer trigger types.\nclass DeferBlockTrigger(str, Enum):\n    IDLE = "Idle"\n    IMMEDIATE = "Immediate"\n    VIEWPORT = "Viewport"\n    INTERACTION = "Interaction"\n    HOVER = "Hover"\n    TIMER = "Timer"\n    WHEN = "When"\n    NEVER = "Never"\n\n# Options for configuring defer blocks behavior.
@publicApi\nclass DeferBlockBehavior(str, Enum):\n    MANUAL = "Manual"\n    PLAYTHROUGH = "Playthrough"\n\n# A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property
like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly
handled.
See DomSanitizer for more details on security in Angular applications.
@publicApi\nclass SecurityContext(str, Enum):\n    NONE = "NONE"\n    HTML = "HTML"\n    STYLE = "STYLE"\n    SCRIPT = "SCRIPT"\n    URL = "URL"\n    RESOURCE_URL = "RESOURCE_URL"\n\n# Actions that are supported by the tracing framework.\nclass TracingAction(str, Enum):\n    CHANGE_DETECTION = "CHANGE_DETECTION"\n    AFTER_NEXT_RENDER = "AFTER_NEXT_RENDER"\n\n# A set of flags to be used with Queries.
NOTE: Ensure changes here are reflected in `packages/compiler/src/render3/view/compiler.ts`\nclass QueryFlags(str, Enum):\n    NONE = "none"\n    DESCENDANTS = "descendants"\n    ISSTATIC = "isStatic"\n    EMITDISTINCTCHANGESONLY = "emitDistinctChangesOnly"\n\n# Flags for renderer-specific style modifiers.
@publicApi\nclass RendererStyleFlags2(str, Enum):\n    IMPORTANT = "Important"\n    DASHCASE = "DashCase"\n\n# This enum is meant to be used by `ɵtype` properties of the different renderers implemented
by the framework
We choose to not add `ɵtype` to `Renderer2` to no expose it to the public API.\nclass AnimationRendererType(str, Enum):\n    REGULAR = "Regular"\n    DELEGATED = "Delegated"\n\n# Flags associated with an LView (saved in LView[FLAGS])\nclass LViewFlags(str, Enum):\n    INITPHASESTATEINCREMENTER = "InitPhaseStateIncrementer"\n    INITPHASESTATEMASK = "InitPhaseStateMask"\n    CREATIONMODE = "CreationMode"\n    FIRSTLVIEWPASS = "FirstLViewPass"\n    CHECKALWAYS = "CheckAlways"\n    HASI18N = "HasI18n"\n    DIRTY = "Dirty"\n    ATTACHED = "Attached"\n    DESTROYED = "Destroyed"\n    ISROOT = "IsRoot"\n    REFRESHVIEW = "RefreshView"\n    HASEMBEDDEDVIEWINJECTOR = "HasEmbeddedViewInjector"\n    SIGNALVIEW = "SignalView"\n    HASCHILDVIEWSTOREFRESH = "HasChildViewsToRefresh"\n    INDEXWITHININITPHASESHIFT = "IndexWithinInitPhaseShift"\n    INDEXWITHININITPHASEINCREMENTER = "IndexWithinInitPhaseIncrementer"\n    INDEXWITHININITPHASERESET = "IndexWithinInitPhaseReset"\n\n# More flags associated with an LView (saved in LView[PREORDER_HOOK_FLAGS])\nclass PreOrderHookFlags(str, Enum):\n    INDEXOFTHENEXTPREORDERHOOKMASKMASK = "IndexOfTheNextPreOrderHookMaskMask"\n    NUMBEROFINITHOOKSCALLEDINCREMENTER = "NumberOfInitHooksCalledIncrementer"\n    NUMBEROFINITHOOKSCALLEDSHIFT = "NumberOfInitHooksCalledShift"\n    NUMBEROFINITHOOKSCALLEDMASK = "NumberOfInitHooksCalledMask"\n\n# Explicitly marks `TView` as a specific type in `ngDevMode`
It is useful to know conceptually what time of `TView` we are dealing with when
debugging an application (even if the runtime does not need it.) For this reason
we store this information in the `ngDevMode` `TView` and than use it for
better debugging experience.\nclass TViewType(str, Enum):\n    ROOT = "Root"\n    COMPONENT = "Component"\n    EMBEDDED = "Embedded"\n\n# The strategy that the default change detector uses to detect changes.
When set, takes effect the next time change detection is triggered.
@see {@link /api/core/ChangeDetectorRef?tab=usage-notes Change detection usage}
@see {@link /best-practices/skipping-subtrees Skipping component subtrees}
@publicApi\nclass ChangeDetectionStrategy(str, Enum):\n    ONPUSH = "OnPush"\n    DEFAULT = "Default"\n\n# Use this enum at bootstrap as an option of `bootstrapModule` to define the strategy
that the compiler should use in case of missing translations:
- Error: throw if you have missing translations.
- Warning (default): show a warning in the console and/or shell.
- Ignore: do nothing.
See the [i18n guide](guide/i18n/merge#report-missing-translations) for more information.
@usageNotes
### Example
```ts
import { MissingTranslationStrategy } from '@angular/core';
import { platformBrowser } from '@angular/platform-browser';
import { AppModule } from './app/app.module';
platformBrowser().bootstrapModule(AppModule, {
  missingTranslation: MissingTranslationStrategy.Error
});
```
@publicApi\nclass MissingTranslationStrategy(str, Enum):\n    ERROR = "Error"\n    WARNING = "Warning"\n    IGNORE = "Ignore"\n\n# The list of error codes used in runtime code of the `core` package.
Reserved error code range: 100-999.
Note: the minus sign denotes the fact that a particular code has a detailed guide on
angular.io. This extra annotation is needed to avoid introducing a separate set to store
error codes which have guides, which might leak into runtime code.
Full list of available error guides can be found at https://angular.dev/errors.
Error code ranges per package:
 - core (this package): 100-999
 - forms: 1000-1999
 - common: 2000-2999
 - animations: 3000-3999
 - router: 4000-4999
 - platform-browser: 5000-5500\nclass RuntimeErrorCode(str, Enum):\n    EXPRESSION_CHANGED_AFTER_CHECKED = "EXPRESSION_CHANGED_AFTER_CHECKED"\n    RECURSIVE_APPLICATION_REF_TICK = "RECURSIVE_APPLICATION_REF_TICK"\n    INFINITE_CHANGE_DETECTION = "INFINITE_CHANGE_DETECTION"\n    CYCLIC_DI_DEPENDENCY = "CYCLIC_DI_DEPENDENCY"\n    PROVIDER_NOT_FOUND = "PROVIDER_NOT_FOUND"\n    INVALID_FACTORY_DEPENDENCY = "INVALID_FACTORY_DEPENDENCY"\n    MISSING_INJECTION_CONTEXT = "MISSING_INJECTION_CONTEXT"\n    INVALID_INJECTION_TOKEN = "INVALID_INJECTION_TOKEN"\n    INJECTOR_ALREADY_DESTROYED = "INJECTOR_ALREADY_DESTROYED"\n    PROVIDER_IN_WRONG_CONTEXT = "PROVIDER_IN_WRONG_CONTEXT"\n    MISSING_INJECTION_TOKEN = "MISSING_INJECTION_TOKEN"\n    INVALID_MULTI_PROVIDER = "INVALID_MULTI_PROVIDER"\n    MISSING_DOCUMENT = "MISSING_DOCUMENT"\n    MULTIPLE_COMPONENTS_MATCH = "MULTIPLE_COMPONENTS_MATCH"\n    EXPORT_NOT_FOUND = "EXPORT_NOT_FOUND"\n    PIPE_NOT_FOUND = "PIPE_NOT_FOUND"\n    UNKNOWN_BINDING = "UNKNOWN_BINDING"\n    UNKNOWN_ELEMENT = "UNKNOWN_ELEMENT"\n    TEMPLATE_STRUCTURE_ERROR = "TEMPLATE_STRUCTURE_ERROR"\n    INVALID_EVENT_BINDING = "INVALID_EVENT_BINDING"\n    HOST_DIRECTIVE_UNRESOLVABLE = "HOST_DIRECTIVE_UNRESOLVABLE"\n    HOST_DIRECTIVE_NOT_STANDALONE = "HOST_DIRECTIVE_NOT_STANDALONE"\n    DUPLICATE_DIRECTIVE = "DUPLICATE_DIRECTIVE"\n    HOST_DIRECTIVE_COMPONENT = "HOST_DIRECTIVE_COMPONENT"\n    HOST_DIRECTIVE_UNDEFINED_BINDING = "HOST_DIRECTIVE_UNDEFINED_BINDING"\n    HOST_DIRECTIVE_CONFLICTING_ALIAS = "HOST_DIRECTIVE_CONFLICTING_ALIAS"\n    MULTIPLE_MATCHING_PIPES = "MULTIPLE_MATCHING_PIPES"\n    UNINITIALIZED_LET_ACCESS = "UNINITIALIZED_LET_ACCESS"\n    NO_BINDING_TARGET = "NO_BINDING_TARGET"\n    INVALID_BINDING_TARGET = "INVALID_BINDING_TARGET"\n    INVALID_SET_INPUT_CALL = "INVALID_SET_INPUT_CALL"\n    MULTIPLE_PLATFORMS = "MULTIPLE_PLATFORMS"\n    PLATFORM_NOT_FOUND = "PLATFORM_NOT_FOUND"\n    MISSING_REQUIRED_INJECTABLE_IN_BOOTSTRAP = "MISSING_REQUIRED_INJECTABLE_IN_BOOTSTRAP"\n    BOOTSTRAP_COMPONENTS_NOT_FOUND = "BOOTSTRAP_COMPONENTS_NOT_FOUND"\n    PLATFORM_ALREADY_DESTROYED = "PLATFORM_ALREADY_DESTROYED"\n    ASYNC_INITIALIZERS_STILL_RUNNING = "ASYNC_INITIALIZERS_STILL_RUNNING"\n    APPLICATION_REF_ALREADY_DESTROYED = "APPLICATION_REF_ALREADY_DESTROYED"\n    RENDERER_NOT_FOUND = "RENDERER_NOT_FOUND"\n    PROVIDED_BOTH_ZONE_AND_ZONELESS = "PROVIDED_BOTH_ZONE_AND_ZONELESS"\n    HYDRATION_NODE_MISMATCH = "HYDRATION_NODE_MISMATCH"\n    HYDRATION_MISSING_SIBLINGS = "HYDRATION_MISSING_SIBLINGS"\n    HYDRATION_MISSING_NODE = "HYDRATION_MISSING_NODE"\n    UNSUPPORTED_PROJECTION_DOM_NODES = "UNSUPPORTED_PROJECTION_DOM_NODES"\n    INVALID_SKIP_HYDRATION_HOST = "INVALID_SKIP_HYDRATION_HOST"\n    MISSING_HYDRATION_ANNOTATIONS = "MISSING_HYDRATION_ANNOTATIONS"\n    HYDRATION_STABLE_TIMEDOUT = "HYDRATION_STABLE_TIMEDOUT"\n    MISSING_SSR_CONTENT_INTEGRITY_MARKER = "MISSING_SSR_CONTENT_INTEGRITY_MARKER"\n    MISCONFIGURED_INCREMENTAL_HYDRATION = "MISCONFIGURED_INCREMENTAL_HYDRATION"\n    SIGNAL_WRITE_FROM_ILLEGAL_CONTEXT = "SIGNAL_WRITE_FROM_ILLEGAL_CONTEXT"\n    REQUIRE_SYNC_WITHOUT_SYNC_EMIT = "REQUIRE_SYNC_WITHOUT_SYNC_EMIT"\n    ASSERTION_NOT_INSIDE_REACTIVE_CONTEXT = "ASSERTION_NOT_INSIDE_REACTIVE_CONTEXT"\n    INVALID_I18N_STRUCTURE = "INVALID_I18N_STRUCTURE"\n    MISSING_LOCALE_DATA = "MISSING_LOCALE_DATA"\n    DEFER_LOADING_FAILED = "DEFER_LOADING_FAILED"\n    DEFER_IN_HMR_MODE = "DEFER_IN_HMR_MODE"\n    IMPORT_PROVIDERS_FROM_STANDALONE = "IMPORT_PROVIDERS_FROM_STANDALONE"\n    INVALID_DIFFER_INPUT = "INVALID_DIFFER_INPUT"\n    NO_SUPPORTING_DIFFER_FACTORY = "NO_SUPPORTING_DIFFER_FACTORY"\n    VIEW_ALREADY_ATTACHED = "VIEW_ALREADY_ATTACHED"\n    INVALID_INHERITANCE = "INVALID_INHERITANCE"\n    UNSAFE_VALUE_IN_RESOURCE_URL = "UNSAFE_VALUE_IN_RESOURCE_URL"\n    UNSAFE_VALUE_IN_SCRIPT = "UNSAFE_VALUE_IN_SCRIPT"\n    MISSING_GENERATED_DEF = "MISSING_GENERATED_DEF"\n    TYPE_IS_NOT_STANDALONE = "TYPE_IS_NOT_STANDALONE"\n    MISSING_ZONEJS = "MISSING_ZONEJS"\n    UNEXPECTED_ZONE_STATE = "UNEXPECTED_ZONE_STATE"\n    UNSAFE_IFRAME_ATTRS = "UNSAFE_IFRAME_ATTRS"\n    VIEW_ALREADY_DESTROYED = "VIEW_ALREADY_DESTROYED"\n    COMPONENT_ID_COLLISION = "COMPONENT_ID_COLLISION"\n    IMAGE_PERFORMANCE_WARNING = "IMAGE_PERFORMANCE_WARNING"\n    UNEXPECTED_ZONEJS_PRESENT_IN_ZONELESS_MODE = "UNEXPECTED_ZONEJS_PRESENT_IN_ZONELESS_MODE"\n    MISSING_NG_MODULE_DEFINITION = "MISSING_NG_MODULE_DEFINITION"\n    MISSING_DIRECTIVE_DEFINITION = "MISSING_DIRECTIVE_DEFINITION"\n    NO_COMPONENT_FACTORY_FOUND = "NO_COMPONENT_FACTORY_FOUND"\n    EXTERNAL_RESOURCE_LOADING_FAILED = "EXTERNAL_RESOURCE_LOADING_FAILED"\n    REQUIRED_INPUT_NO_VALUE = "REQUIRED_INPUT_NO_VALUE"\n    REQUIRED_QUERY_NO_VALUE = "REQUIRED_QUERY_NO_VALUE"\n    REQUIRED_MODEL_NO_VALUE = "REQUIRED_MODEL_NO_VALUE"\n    OUTPUT_REF_DESTROYED = "OUTPUT_REF_DESTROYED"\n    LOOP_TRACK_DUPLICATE_KEYS = "LOOP_TRACK_DUPLICATE_KEYS"\n    LOOP_TRACK_RECREATE = "LOOP_TRACK_RECREATE"\n    RUNTIME_DEPS_INVALID_IMPORTED_TYPE = "RUNTIME_DEPS_INVALID_IMPORTED_TYPE"\n    RUNTIME_DEPS_ORPHAN_COMPONENT = "RUNTIME_DEPS_ORPHAN_COMPONENT"\n    MUST_PROVIDE_STREAM_OPTION = "MUST_PROVIDE_STREAM_OPTION"\n    RESOURCE_COMPLETED_BEFORE_PRODUCING_VALUE = "RESOURCE_COMPLETED_BEFORE_PRODUCING_VALUE"\n\n# Internal type that represents a claimed node.
Only used in dev mode.\nclass HydrationStatus(str, Enum):\n    HYDRATED = "hydrated"\n    SKIPPED = "skipped"\n    MISMATCHED = "mismatched"\n\n# Index of each type of locale data from the locale data array\nclass LocaleDataIndex(str, Enum):\n    LOCALEID = "LocaleId"\n    DAYPERIODSFORMAT = "DayPeriodsFormat"\n    DAYPERIODSSTANDALONE = "DayPeriodsStandalone"\n    DAYSFORMAT = "DaysFormat"\n    DAYSSTANDALONE = "DaysStandalone"\n    MONTHSFORMAT = "MonthsFormat"\n    MONTHSSTANDALONE = "MonthsStandalone"\n    ERAS = "Eras"\n    FIRSTDAYOFWEEK = "FirstDayOfWeek"\n    WEEKENDRANGE = "WeekendRange"\n    DATEFORMAT = "DateFormat"\n    TIMEFORMAT = "TimeFormat"\n    DATETIMEFORMAT = "DateTimeFormat"\n    NUMBERSYMBOLS = "NumberSymbols"\n    NUMBERFORMATS = "NumberFormats"\n    CURRENCYCODE = "CurrencyCode"\n    CURRENCYSYMBOL = "CurrencySymbol"\n    CURRENCYNAME = "CurrencyName"\n    CURRENCIES = "Currencies"\n    DIRECTIONALITY = "Directionality"\n    PLURALCASE = "PluralCase"\n    EXTRADATA = "ExtraData"\n\n# Index of each type of locale data from the extra locale data array\nclass ExtraLocaleDataIndex(str, Enum):\n    EXTRADAYPERIODFORMATS = "ExtraDayPeriodFormats"\n    EXTRADAYPERIODSTANDALONE = "ExtraDayPeriodStandalone"\n    EXTRADAYPERIODSRULES = "ExtraDayPeriodsRules"\n\n# Index of each value in currency data (used to describe CURRENCIES_EN in currencies.ts)\nclass CurrencyIndex(str, Enum):\n    SYMBOL = "Symbol"\n    SYMBOLNARROW = "SymbolNarrow"\n    NBOFDIGITS = "NbOfDigits"\n\nclass BypassType(str, Enum):\n    URL = "URL"\n    HTML = "HTML"\n    RESOURCEURL = "ResourceURL"\n    SCRIPT = "Script"\n    STYLE = "Style"\n\n# The framework used to author a particular application or component.\nclass Framework(str, Enum):\n    ANGULAR = "angular"\n    ACX = "acx"\n    WIZ = "wiz"\n\n# ACX change detection strategies.\nclass AcxChangeDetectionStrategy(str, Enum):\n    DEFAULT = "Default"\n    ONPUSH = "OnPush"\n\n# ACX view encapsulation modes.\nclass AcxViewEncapsulation(str, Enum):\n    EMULATED = "Emulated"\n    NONE = "None"\n\nclass FactoryTarget(str, Enum):\n    DIRECTIVE = "Directive"\n    COMPONENT = "Component"\n    INJECTABLE = "Injectable"\n    PIPE = "Pipe"\n    NGMODULE = "NgModule"\n\nclass ViewEncapsulation(str, Enum):\n    EMULATED = "Emulated"\n    NONE = "None"\n    SHADOWDOM = "ShadowDom"\n\n# !
@license
Copyright Google LLC All Rights Reserved.
Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://angular.dev/license Profiler events is an enum used by the profiler to distinguish between different calls of user
code invoked throughout the application lifecycle.\nclass ProfilerEvent(str, Enum):\n    TEMPLATECREATESTART = "TemplateCreateStart"\n    TEMPLATECREATEEND = "TemplateCreateEnd"\n    TEMPLATEUPDATESTART = "TemplateUpdateStart"\n    TEMPLATEUPDATEEND = "TemplateUpdateEnd"\n    LIFECYCLEHOOKSTART = "LifecycleHookStart"\n    LIFECYCLEHOOKEND = "LifecycleHookEnd"\n    OUTPUTSTART = "OutputStart"\n    OUTPUTEND = "OutputEnd"\n    BOOTSTRAPAPPLICATIONSTART = "BootstrapApplicationStart"\n    BOOTSTRAPAPPLICATIONEND = "BootstrapApplicationEnd"\n    BOOTSTRAPCOMPONENTSTART = "BootstrapComponentStart"\n    BOOTSTRAPCOMPONENTEND = "BootstrapComponentEnd"\n    CHANGEDETECTIONSTART = "ChangeDetectionStart"\n    CHANGEDETECTIONEND = "ChangeDetectionEnd"\n    CHANGEDETECTIONSYNCSTART = "ChangeDetectionSyncStart"\n    CHANGEDETECTIONSYNCEND = "ChangeDetectionSyncEnd"\n    AFTERRENDERHOOKSSTART = "AfterRenderHooksStart"\n    AFTERRENDERHOOKSEND = "AfterRenderHooksEnd"\n    COMPONENTSTART = "ComponentStart"\n    COMPONENTEND = "ComponentEnd"\n    DEFERBLOCKSTATESTART = "DeferBlockStateStart"\n    DEFERBLOCKSTATEEND = "DeferBlockStateEnd"\n    DYNAMICCOMPONENTSTART = "DynamicComponentStart"\n    DYNAMICCOMPONENTEND = "DynamicComponentEnd"\n    HOSTBINDINGSUPDATESTART = "HostBindingsUpdateStart"\n    HOSTBINDINGSUPDATEEND = "HostBindingsUpdateEnd"\n\n# Format styles that can be used to represent numbers.
@see {@link getLocaleNumberFormat}
@see [Internationalization (i18n) Guide](guide/i18n)
@publicApi
@deprecated `getLocaleNumberFormat` is deprecated\nclass NumberFormatStyle(str, Enum):\n    DECIMAL = "Decimal"\n    PERCENT = "Percent"\n    CURRENCY = "Currency"\n    SCIENTIFIC = "Scientific"\n\n# Plurality cases used for translating plurals to different languages.
@see {@link NgPlural}
@see {@link NgPluralCase}
@see [Internationalization (i18n) Guide](guide/i18n)
@publicApi
@deprecated `getLocalePluralCase` is deprecated\nclass Plural(str, Enum):\n    ZERO = "Zero"\n    ONE = "One"\n    TWO = "Two"\n    FEW = "Few"\n    MANY = "Many"\n    OTHER = "Other"\n\n# Context-dependant translation forms for strings.
Typically the standalone version is for the nominative form of the word,
and the format version is used for the genitive case.
@see [CLDR website](http://cldr.unicode.org/translation/date-time-1/date-time#TOC-Standalone-vs.-Format-Styles)
@see [Internationalization (i18n) Guide](guide/i18n)
@publicApi
@deprecated locale data getters are deprecated\nclass FormStyle(str, Enum):\n    FORMAT = "Format"\n    STANDALONE = "Standalone"\n\n# String widths available for translations.
The specific character widths are locale-specific.
Examples are given for the word "Sunday" in English.
@publicApi
@deprecated locale data getters are deprecated\nclass TranslationWidth(str, Enum):\n    NARROW = "Narrow"\n    ABBREVIATED = "Abbreviated"\n    WIDE = "Wide"\n    SHORT = "Short"\n\n# String widths available for date-time formats.
The specific character widths are locale-specific.
Examples are given for `en-US`.
@see {@link getLocaleDateFormat}
@see {@link getLocaleTimeFormat}
@see {@link getLocaleDateTimeFormat}
@see [Internationalization (i18n) Guide](guide/i18n)
@publicApi
@deprecated 18.0
Date locale data getters are deprecated\nclass FormatWidth(str, Enum):\n    SHORT = "Short"\n    MEDIUM = "Medium"\n    LONG = "Long"\n    FULL = "Full"\n\n# The value for each day of the week, based on the `en-US` locale
@publicApi
@deprecated Week locale getters are deprecated\nclass WeekDay(str, Enum):\n    SUNDAY = "Sunday"\n    MONDAY = "Monday"\n    TUESDAY = "Tuesday"\n    WEDNESDAY = "Wednesday"\n    THURSDAY = "Thursday"\n    FRIDAY = "Friday"\n    SATURDAY = "Saturday"\n\n# Identifies the type of a router event.
@publicApi\nclass EventType(str, Enum):\n    NAVIGATIONSTART = "NavigationStart"\n    NAVIGATIONEND = "NavigationEnd"\n    NAVIGATIONCANCEL = "NavigationCancel"\n    NAVIGATIONERROR = "NavigationError"\n    ROUTESRECOGNIZED = "RoutesRecognized"\n    RESOLVESTART = "ResolveStart"\n    RESOLVEEND = "ResolveEnd"\n    GUARDSCHECKSTART = "GuardsCheckStart"\n    GUARDSCHECKEND = "GuardsCheckEnd"\n    ROUTECONFIGLOADSTART = "RouteConfigLoadStart"\n    ROUTECONFIGLOADEND = "RouteConfigLoadEnd"\n    CHILDACTIVATIONSTART = "ChildActivationStart"\n    CHILDACTIVATIONEND = "ChildActivationEnd"\n    ACTIVATIONSTART = "ActivationStart"\n    ACTIVATIONEND = "ActivationEnd"\n    SCROLL = "Scroll"\n    NAVIGATIONSKIPPED = "NavigationSkipped"\n\n# A code for the `NavigationCancel` event of the `Router` to indicate the
reason a navigation failed.
@publicApi\nclass NavigationCancellationCode(str, Enum):\n    REDIRECT = "Redirect"\n    SUPERSEDEDBYNEWNAVIGATION = "SupersededByNewNavigation"\n    NODATAFROMRESOLVER = "NoDataFromResolver"\n    GUARDREJECTED = "GuardRejected"\n    ABORTED = "Aborted"\n\n# A code for the `NavigationSkipped` event of the `Router` to indicate the
reason a navigation was skipped.
@publicApi\nclass NavigationSkippedCode(str, Enum):\n    IGNOREDSAMEURLNAVIGATION = "IgnoredSameUrlNavigation"\n    IGNOREDBYURLHANDLINGSTRATEGY = "IgnoredByUrlHandlingStrategy"\n\n# Type enumeration for the different kinds of `HttpEvent`.
@publicApi\nclass HttpEventType(str, Enum):\n    SENT = "Sent"\n    UPLOADPROGRESS = "UploadProgress"\n    RESPONSEHEADER = "ResponseHeader"\n    DOWNLOADPROGRESS = "DownloadProgress"\n    RESPONSE = "Response"\n    USER = "User"\n\n# Http status codes.
As per https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml
@publicApi\nclass HttpStatusCode(str, Enum):\n    CONTINUE = "Continue"\n    SWITCHINGPROTOCOLS = "SwitchingProtocols"\n    PROCESSING = "Processing"\n    EARLYHINTS = "EarlyHints"\n    OK = "Ok"\n    CREATED = "Created"\n    ACCEPTED = "Accepted"\n    NONAUTHORITATIVEINFORMATION = "NonAuthoritativeInformation"\n    NOCONTENT = "NoContent"\n    RESETCONTENT = "ResetContent"\n    PARTIALCONTENT = "PartialContent"\n    MULTISTATUS = "MultiStatus"\n    ALREADYREPORTED = "AlreadyReported"\n    IMUSED = "ImUsed"\n    MULTIPLECHOICES = "MultipleChoices"\n    MOVEDPERMANENTLY = "MovedPermanently"\n    FOUND = "Found"\n    SEEOTHER = "SeeOther"\n    NOTMODIFIED = "NotModified"\n    USEPROXY = "UseProxy"\n    UNUSED = "Unused"\n    TEMPORARYREDIRECT = "TemporaryRedirect"\n    PERMANENTREDIRECT = "PermanentRedirect"\n    BADREQUEST = "BadRequest"\n    UNAUTHORIZED = "Unauthorized"\n    PAYMENTREQUIRED = "PaymentRequired"\n    FORBIDDEN = "Forbidden"\n    NOTFOUND = "NotFound"\n    METHODNOTALLOWED = "MethodNotAllowed"\n    NOTACCEPTABLE = "NotAcceptable"\n    PROXYAUTHENTICATIONREQUIRED = "ProxyAuthenticationRequired"\n    REQUESTTIMEOUT = "RequestTimeout"\n    CONFLICT = "Conflict"\n    GONE = "Gone"\n    LENGTHREQUIRED = "LengthRequired"\n    PRECONDITIONFAILED = "PreconditionFailed"\n    PAYLOADTOOLARGE = "PayloadTooLarge"\n    URITOOLONG = "UriTooLong"\n    UNSUPPORTEDMEDIATYPE = "UnsupportedMediaType"\n    RANGENOTSATISFIABLE = "RangeNotSatisfiable"\n    EXPECTATIONFAILED = "ExpectationFailed"\n    IMATEAPOT = "ImATeapot"\n    MISDIRECTEDREQUEST = "MisdirectedRequest"\n    UNPROCESSABLEENTITY = "UnprocessableEntity"\n    LOCKED = "Locked"\n    FAILEDDEPENDENCY = "FailedDependency"\n    TOOEARLY = "TooEarly"\n    UPGRADEREQUIRED = "UpgradeRequired"\n    PRECONDITIONREQUIRED = "PreconditionRequired"\n    TOOMANYREQUESTS = "TooManyRequests"\n    REQUESTHEADERFIELDSTOOLARGE = "RequestHeaderFieldsTooLarge"\n    UNAVAILABLEFORLEGALREASONS = "UnavailableForLegalReasons"\n    INTERNALSERVERERROR = "InternalServerError"\n    NOTIMPLEMENTED = "NotImplemented"\n    BADGATEWAY = "BadGateway"\n    SERVICEUNAVAILABLE = "ServiceUnavailable"\n    GATEWAYTIMEOUT = "GatewayTimeout"\n    HTTPVERSIONNOTSUPPORTED = "HttpVersionNotSupported"\n    VARIANTALSONEGOTIATES = "VariantAlsoNegotiates"\n    INSUFFICIENTSTORAGE = "InsufficientStorage"\n    LOOPDETECTED = "LoopDetected"\n    NOTEXTENDED = "NotExtended"\n    NETWORKAUTHENTICATIONREQUIRED = "NetworkAuthenticationRequired"\n\n# Identifies a particular kind of `HttpFeature`.
@publicApi\nclass HttpFeatureKind(str, Enum):\n    INTERCEPTORS = "Interceptors"\n    LEGACYINTERCEPTORS = "LegacyInterceptors"\n    CUSTOMXSRFCONFIGURATION = "CustomXsrfConfiguration"\n    NOXSRFPROTECTION = "NoXsrfProtection"\n    JSONPSUPPORT = "JsonpSupport"\n    REQUESTSMADEVIAPARENT = "RequestsMadeViaParent"\n    FETCH = "Fetch"\n\n# The list of features as an enum to uniquely type each `HydrationFeature`.
@see {@link HydrationFeature}
@publicApi\nclass HydrationFeatureKind(str, Enum):\n    NOHTTPTRANSFERCACHE = "NoHttpTransferCache"\n    HTTPTRANSFERCACHEOPTIONS = "HttpTransferCacheOptions"\n    I18NSUPPORT = "I18nSupport"\n    EVENTREPLAY = "EventReplay"\n    INCREMENTALHYDRATION = "IncrementalHydration"\n\n# The list of error codes used in runtime code of the `platform-browser` package.
Reserved error code range: 5000-5500.\nclass RuntimeErrorCode(str, Enum):\n    UNSUPPORTED_ZONEJS_INSTANCE = "UNSUPPORTED_ZONEJS_INSTANCE"\n    HYDRATION_CONFLICTING_FEATURES = "HYDRATION_CONFLICTING_FEATURES"\n    BROWSER_MODULE_ALREADY_LOADED = "BROWSER_MODULE_ALREADY_LOADED"\n    NO_PLUGIN_FOR_EVENT = "NO_PLUGIN_FOR_EVENT"\n    UNSUPPORTED_EVENT_TARGET = "UNSUPPORTED_EVENT_TARGET"\n    TESTABILITY_NOT_FOUND = "TESTABILITY_NOT_FOUND"\n    ROOT_NODE_NOT_FOUND = "ROOT_NODE_NOT_FOUND"\n    UNEXPECTED_SYNTHETIC_PROPERTY = "UNEXPECTED_SYNTHETIC_PROPERTY"\n    SANITIZATION_UNSAFE_SCRIPT = "SANITIZATION_UNSAFE_SCRIPT"\n    SANITIZATION_UNSAFE_RESOURCE_URL = "SANITIZATION_UNSAFE_RESOURCE_URL"\n    SANITIZATION_UNEXPECTED_CTX = "SANITIZATION_UNEXPECTED_CTX"\n    ANIMATION_RENDERER_ASYNC_LOADING_FAILURE = "ANIMATION_RENDERER_ASYNC_LOADING_FAILURE"\n\n# The list of features as an enum to uniquely type each feature.\nclass RouterFeatureKind(str, Enum):\n    PRELOADINGFEATURE = "PreloadingFeature"\n    DEBUGTRACINGFEATURE = "DebugTracingFeature"\n    ENABLEDBLOCKINGINITIALNAVIGATIONFEATURE = "EnabledBlockingInitialNavigationFeature"\n    DISABLEDINITIALNAVIGATIONFEATURE = "DisabledInitialNavigationFeature"\n    INMEMORYSCROLLINGFEATURE = "InMemoryScrollingFeature"\n    ROUTERCONFIGURATIONFEATURE = "RouterConfigurationFeature"\n    ROUTERHASHLOCATIONFEATURE = "RouterHashLocationFeature"\n    NAVIGATIONERRORHANDLERFEATURE = "NavigationErrorHandlerFeature"\n    COMPONENTINPUTBINDINGFEATURE = "ComponentInputBindingFeature"\n    VIEWTRANSITIONSFEATURE = "ViewTransitionsFeature"\n\n# Detection mode used for attributing the origin of a focus event.\nclass FocusMonitorDetectionMode(str, Enum):\n    IMMEDIATE = "IMMEDIATE"\n    EVENTUAL = "EVENTUAL"\n\n# Set of possible high-contrast mode backgrounds.\nclass HighContrastMode(str, Enum):\n    NONE = "NONE"\n    BLACK_ON_WHITE = "BLACK_ON_WHITE"\n    WHITE_ON_BLACK = "WHITE_ON_BLACK"\n\nclass NzBreakpointEnum(str, Enum):\n    XXL = "xxl"\n    XL = "xl"\n    LG = "lg"\n    MD = "md"\n    SM = "sm"\n    XS = "xs"\n\nclass PrismPlugin(str, Enum):\n    COMMAND_LINE = "command-line"\n    LINE_HIGHLIGHT = "line-highlight"\n    LINE_NUMBERS = "line-numbers"\n\n# The possible ways the browser may handle the horizontal scroll axis in RTL languages.\nclass RtlScrollAxisType(str, Enum):\n    NORMAL = "NORMAL"\n    NEGATED = "NEGATED"\n    INVERTED = "INVERTED"\n\n# 数据模型\nclass Symbol(BaseModel):\n    pass\n\nclass PropertyDescriptor(BaseModel):\n    configurable: Optional[bool] = None\n    enumerable: Optional[bool] = None\n    value: Optional[any] = None\n    writable: Optional[bool] = None\n\nclass PropertyDescriptorMap(BaseModel):\n    pass\n\nclass Object(BaseModel):\n    # The initial value of Object.prototype.constructor is the standard built-in Object constructor.\n    constructor: Function = Field(..., description='The initial value of Object.prototype.constructor is the standard built-in Object constructor.')\n\nclass ObjectConstructor(BaseModel):\n    # A reference to the prototype for a class of objects.\n    prototype: Object = Field(..., description='A reference to the prototype for a class of objects.')\n\n# Creates a new function.\nclass Function(BaseModel):\n    prototype: any = Field(...)\n    length: float = Field(...)\n    # Non-standard extensions\n    arguments: any = Field(..., description='Non-standard extensions')\n    caller: Function = Field(...)\n\nclass FunctionConstructor(BaseModel):\n    prototype: Function = Field(...)\n\nclass CallableFunction(Function):\n    pass\n\nclass NewableFunction(Function):\n    pass\n\nclass IArguments(BaseModel):\n    length: float = Field(...)\n    callee: Function = Field(...)\n\nclass String(BaseModel):\n    # Returns the length of a String object.\n    length: float = Field(..., description='Returns the length of a String object.')\n\nclass StringConstructor(BaseModel):\n    prototype: String = Field(...)\n\nclass Boolean(BaseModel):\n    pass\n\nclass BooleanConstructor(BaseModel):\n    prototype: Boolean = Field(...)\n\nclass Number(BaseModel):\n    pass\n\nclass NumberConstructor(BaseModel):\n    prototype: Number = Field(...)\n    # The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308.\n    MAX_VALUE: float = Field(..., description='The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308.')\n    # The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324.\n    MIN_VALUE: float = Field(..., description='The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324.')\n    # A value that is not a number.
In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.\n    NaN: float = Field(..., description='A value that is not a number.
In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.')\n    # A value that is less than the largest negative number that can be represented in JavaScript.
JavaScript displays NEGATIVE_INFINITY values as -infinity.\n    NEGATIVE_INFINITY: float = Field(..., description='A value that is less than the largest negative number that can be represented in JavaScript.
JavaScript displays NEGATIVE_INFINITY values as -infinity.')\n    # A value greater than the largest number that can be represented in JavaScript.
JavaScript displays POSITIVE_INFINITY values as infinity.\n    POSITIVE_INFINITY: float = Field(..., description='A value greater than the largest number that can be represented in JavaScript.
JavaScript displays POSITIVE_INFINITY values as infinity.')\n\nclass TemplateStringsArray(ReadonlyArray):\n    raw: List[readonly string] = Field(...)\n\n# The type of `import.meta`.
If you need to declare that a given property exists on `import.meta`,
this type may be augmented via interface merging.\nclass ImportMeta(BaseModel):\n    pass\n\n# The type for the optional second argument to `import()`.
If your host environment supports additional options, this type may be
augmented via interface merging.\nclass ImportCallOptions(BaseModel):\n    # @deprecated\n    assert: Optional[ImportAssertions] = None = Field(..., description='@deprecated')\n    with: Optional[ImportAttributes] = None\n\n# The type for the `assert` property of the optional second argument to `import()`.
@deprecated\nclass ImportAssertions(BaseModel):\n    pass\n\n# The type for the `with` property of the optional second argument to `import()`.\nclass ImportAttributes(BaseModel):\n    pass\n\nclass Math(BaseModel):\n    # The mathematical constant e. This is Euler's number, the base of natural logarithms.\n    E: float = Field(..., description='The mathematical constant e. This is Euler\'s number, the base of natural logarithms.')\n    # The natural logarithm of 10.\n    LN10: float = Field(..., description='The natural logarithm of 10.')\n    # The natural logarithm of 2.\n    LN2: float = Field(..., description='The natural logarithm of 2.')\n    # The base-2 logarithm of e.\n    LOG2E: float = Field(..., description='The base-2 logarithm of e.')\n    # The base-10 logarithm of e.\n    LOG10E: float = Field(..., description='The base-10 logarithm of e.')\n    # Pi. This is the ratio of the circumference of a circle to its diameter.\n    PI: float = Field(..., description='Pi. This is the ratio of the circumference of a circle to its diameter.')\n    # The square root of 0.5, or, equivalently, one divided by the square root of 2.\n    SQRT1_2: float = Field(..., description='The square root of 0.5, or, equivalently, one divided by the square root of 2.')\n    # The square root of 2.\n    SQRT2: float = Field(..., description='The square root of 2.')\n\n# Enables basic storage and retrieval of dates and times.\nclass Date(BaseModel):\n    pass\n\nclass DateConstructor(BaseModel):\n    prototype: datetime = Field(...)\n\nclass RegExpMatchArray(Array):\n    # The index of the search at which the result was found.\n    index: Optional[float] = None = Field(..., description='The index of the search at which the result was found.')\n    # A copy of the search string.\n    input: Optional[str] = None = Field(..., description='A copy of the search string.')\n    # The first match. This will always be present because `null` will be returned if there are no matches.\n    0: str = Field(..., description='The first match. This will always be present because `null` will be returned if there are no matches.')\n\nclass RegExpExecArray(Array):\n    # The index of the search at which the result was found.\n    index: float = Field(..., description='The index of the search at which the result was found.')\n    # A copy of the search string.\n    input: str = Field(..., description='A copy of the search string.')\n    # The first match. This will always be present because `null` will be returned if there are no matches.\n    0: str = Field(..., description='The first match. This will always be present because `null` will be returned if there are no matches.')\n\nclass RegExp(BaseModel):\n    # Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal.\n    source: str = Field(..., description='Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal.')\n    # Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only.\n    global: bool = Field(..., description='Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only.')\n    # Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only.\n    ignoreCase: bool = Field(..., description='Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only.')\n    # Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only.\n    multiline: bool = Field(..., description='Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only.')\n    lastIndex: float = Field(...)\n\nclass RegExpConstructor(BaseModel):\n    prototype: RegExp = Field(...)\n    # Non-standard extensions @deprecated A legacy feature for browser compatibility\n    $1: str = Field(..., description='Non-standard extensions @deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    $2: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    $3: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    $4: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    $5: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    $6: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    $7: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    $8: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    $9: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    input: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    $_: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    lastMatch: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    $&: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    lastParen: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    $+: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    leftContext: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    $`: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    rightContext: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n    # @deprecated A legacy feature for browser compatibility\n    $: str = Field(..., description='@deprecated A legacy feature for browser compatibility')\n\nclass Error(BaseModel):\n    name: str = Field(...)\n    message: str = Field(...)\n    stack: Optional[str] = None\n\nclass ErrorConstructor(BaseModel):\n    prototype: Error = Field(...)\n\nclass EvalError(Error):\n    pass\n\nclass EvalErrorConstructor(ErrorConstructor):\n    prototype: EvalError = Field(...)\n\nclass RangeError(Error):\n    pass\n\nclass RangeErrorConstructor(ErrorConstructor):\n    prototype: RangeError = Field(...)\n\nclass ReferenceError(Error):\n    pass\n\nclass ReferenceErrorConstructor(ErrorConstructor):\n    prototype: ReferenceError = Field(...)\n\nclass SyntaxError(Error):\n    pass\n\nclass SyntaxErrorConstructor(ErrorConstructor):\n    prototype: SyntaxError = Field(...)\n\nclass TypeError(Error):\n    pass\n\nclass TypeErrorConstructor(ErrorConstructor):\n    prototype: TypeError = Field(...)\n\nclass URIError(Error):\n    pass\n\nclass URIErrorConstructor(ErrorConstructor):\n    prototype: URIError = Field(...)\n\nclass JSON(BaseModel):\n    pass\n\n# /////////////////////////// / ECMAScript Array API (specially handled by compiler) ///////////////////////////\nclass ReadonlyArray(BaseModel):\n    # Gets the length of the array. This is a number one higher than the highest element defined in an array.\n    length: float = Field(..., description='Gets the length of the array. This is a number one higher than the highest element defined in an array.')\n\nclass ConcatArray(BaseModel):\n    length: float = Field(...)\n\nclass Array(BaseModel):\n    # Gets or sets the length of the array. This is a number one higher than the highest index in the array.\n    length: float = Field(..., description='Gets or sets the length of the array. This is a number one higher than the highest index in the array.')\n\nclass ArrayConstructor(BaseModel):\n    prototype: List[List[any]] = Field(...)\n\nclass TypedPropertyDescriptor(BaseModel):\n    enumerable: Optional[bool] = None\n    configurable: Optional[bool] = None\n    writable: Optional[bool] = None\n    value: Optional[T] = None\n    get: Optional[() => T] = None\n    set: Optional[(value: T) => void] = None\n\nclass PromiseLike(BaseModel):\n    pass\n\n# Represents the completion of an asynchronous operation\nclass Promise(BaseModel):\n    pass\n\nclass ArrayLike(BaseModel):\n    length: float = Field(...)\n\n# Marker for contextual 'this' type\nclass ThisType(BaseModel):\n    pass\n\n# Stores types to be used with WeakSet, WeakMap, WeakRef, and FinalizationRegistry\nclass WeakKeyTypes(BaseModel):\n    object: Dict = Field(...)\n\n# Represents a raw buffer of binary data, which is used to store data for the
different typed arrays. ArrayBuffers cannot be read from or written to directly,
but can be passed to a typed array or DataView Object to interpret the raw
buffer as needed.\nclass ArrayBuffer(BaseModel):\n    # Read-only. The length of the ArrayBuffer (in bytes).\n    byteLength: float = Field(..., description='Read-only. The length of the ArrayBuffer (in bytes).')\n\n# Allowed ArrayBuffer types for the buffer of an ArrayBufferView and related Typed Arrays.\nclass ArrayBufferTypes(BaseModel):\n    ArrayBuffer: ArrayBuffer = Field(...)\n\nclass ArrayBufferConstructor(BaseModel):\n    prototype: ArrayBuffer = Field(...)\n\nclass ArrayBufferView(BaseModel):\n    # The ArrayBuffer instance referenced by the array.\n    buffer: TArrayBuffer = Field(..., description='The ArrayBuffer instance referenced by the array.')\n    # The length in bytes of the array.\n    byteLength: float = Field(..., description='The length in bytes of the array.')\n    # The offset in bytes of the array.\n    byteOffset: float = Field(..., description='The offset in bytes of the array.')\n\nclass DataView(BaseModel):\n    buffer: TArrayBuffer = Field(...)\n    byteLength: float = Field(...)\n    byteOffset: float = Field(...)\n\nclass DataViewConstructor(BaseModel):\n    prototype: DataView<ArrayBufferLike> = Field(...)\n\n# A typed array of 8-bit integer values. The contents are initialized to 0. If the requested
number of bytes could not be allocated an exception is raised.\nclass Int8Array(BaseModel):\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n    # The ArrayBuffer instance referenced by the array.\n    buffer: TArrayBuffer = Field(..., description='The ArrayBuffer instance referenced by the array.')\n    # The length in bytes of the array.\n    byteLength: float = Field(..., description='The length in bytes of the array.')\n    # The offset in bytes of the array.\n    byteOffset: float = Field(..., description='The offset in bytes of the array.')\n    # The length of the array.\n    length: float = Field(..., description='The length of the array.')\n\nclass Int8ArrayConstructor(BaseModel):\n    prototype: Int8Array<ArrayBufferLike> = Field(...)\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n\n# A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the
requested number of bytes could not be allocated an exception is raised.\nclass Uint8Array(BaseModel):\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n    # The ArrayBuffer instance referenced by the array.\n    buffer: TArrayBuffer = Field(..., description='The ArrayBuffer instance referenced by the array.')\n    # The length in bytes of the array.\n    byteLength: float = Field(..., description='The length in bytes of the array.')\n    # The offset in bytes of the array.\n    byteOffset: float = Field(..., description='The offset in bytes of the array.')\n    # The length of the array.\n    length: float = Field(..., description='The length of the array.')\n\nclass Uint8ArrayConstructor(BaseModel):\n    prototype: Uint8Array<ArrayBufferLike> = Field(...)\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n\n# A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.
If the requested number of bytes could not be allocated an exception is raised.\nclass Uint8ClampedArray(BaseModel):\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n    # The ArrayBuffer instance referenced by the array.\n    buffer: TArrayBuffer = Field(..., description='The ArrayBuffer instance referenced by the array.')\n    # The length in bytes of the array.\n    byteLength: float = Field(..., description='The length in bytes of the array.')\n    # The offset in bytes of the array.\n    byteOffset: float = Field(..., description='The offset in bytes of the array.')\n    # The length of the array.\n    length: float = Field(..., description='The length of the array.')\n\nclass Uint8ClampedArrayConstructor(BaseModel):\n    prototype: Uint8ClampedArray<ArrayBufferLike> = Field(...)\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n\n# A typed array of 16-bit signed integer values. The contents are initialized to 0. If the
requested number of bytes could not be allocated an exception is raised.\nclass Int16Array(BaseModel):\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n    # The ArrayBuffer instance referenced by the array.\n    buffer: TArrayBuffer = Field(..., description='The ArrayBuffer instance referenced by the array.')\n    # The length in bytes of the array.\n    byteLength: float = Field(..., description='The length in bytes of the array.')\n    # The offset in bytes of the array.\n    byteOffset: float = Field(..., description='The offset in bytes of the array.')\n    # The length of the array.\n    length: float = Field(..., description='The length of the array.')\n\nclass Int16ArrayConstructor(BaseModel):\n    prototype: Int16Array<ArrayBufferLike> = Field(...)\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n\n# A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the
requested number of bytes could not be allocated an exception is raised.\nclass Uint16Array(BaseModel):\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n    # The ArrayBuffer instance referenced by the array.\n    buffer: TArrayBuffer = Field(..., description='The ArrayBuffer instance referenced by the array.')\n    # The length in bytes of the array.\n    byteLength: float = Field(..., description='The length in bytes of the array.')\n    # The offset in bytes of the array.\n    byteOffset: float = Field(..., description='The offset in bytes of the array.')\n    # The length of the array.\n    length: float = Field(..., description='The length of the array.')\n\nclass Uint16ArrayConstructor(BaseModel):\n    prototype: Uint16Array<ArrayBufferLike> = Field(...)\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n\n# A typed array of 32-bit signed integer values. The contents are initialized to 0. If the
requested number of bytes could not be allocated an exception is raised.\nclass Int32Array(BaseModel):\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n    # The ArrayBuffer instance referenced by the array.\n    buffer: TArrayBuffer = Field(..., description='The ArrayBuffer instance referenced by the array.')\n    # The length in bytes of the array.\n    byteLength: float = Field(..., description='The length in bytes of the array.')\n    # The offset in bytes of the array.\n    byteOffset: float = Field(..., description='The offset in bytes of the array.')\n    # The length of the array.\n    length: float = Field(..., description='The length of the array.')\n\nclass Int32ArrayConstructor(BaseModel):\n    prototype: Int32Array<ArrayBufferLike> = Field(...)\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n\n# A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the
requested number of bytes could not be allocated an exception is raised.\nclass Uint32Array(BaseModel):\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n    # The ArrayBuffer instance referenced by the array.\n    buffer: TArrayBuffer = Field(..., description='The ArrayBuffer instance referenced by the array.')\n    # The length in bytes of the array.\n    byteLength: float = Field(..., description='The length in bytes of the array.')\n    # The offset in bytes of the array.\n    byteOffset: float = Field(..., description='The offset in bytes of the array.')\n    # The length of the array.\n    length: float = Field(..., description='The length of the array.')\n\nclass Uint32ArrayConstructor(BaseModel):\n    prototype: Uint32Array<ArrayBufferLike> = Field(...)\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n\n# A typed array of 32-bit float values. The contents are initialized to 0. If the requested number
of bytes could not be allocated an exception is raised.\nclass Float32Array(BaseModel):\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n    # The ArrayBuffer instance referenced by the array.\n    buffer: TArrayBuffer = Field(..., description='The ArrayBuffer instance referenced by the array.')\n    # The length in bytes of the array.\n    byteLength: float = Field(..., description='The length in bytes of the array.')\n    # The offset in bytes of the array.\n    byteOffset: float = Field(..., description='The offset in bytes of the array.')\n    # The length of the array.\n    length: float = Field(..., description='The length of the array.')\n\nclass Float32ArrayConstructor(BaseModel):\n    prototype: Float32Array<ArrayBufferLike> = Field(...)\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n\n# A typed array of 64-bit float values. The contents are initialized to 0. If the requested
number of bytes could not be allocated an exception is raised.\nclass Float64Array(BaseModel):\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n    # The ArrayBuffer instance referenced by the array.\n    buffer: TArrayBuffer = Field(..., description='The ArrayBuffer instance referenced by the array.')\n    # The length in bytes of the array.\n    byteLength: float = Field(..., description='The length in bytes of the array.')\n    # The offset in bytes of the array.\n    byteOffset: float = Field(..., description='The offset in bytes of the array.')\n    # The length of the array.\n    length: float = Field(..., description='The length of the array.')\n\nclass Float64ArrayConstructor(BaseModel):\n    prototype: Float64Array<ArrayBufferLike> = Field(...)\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n\nclass String(BaseModel):\n    pass\n\nclass Number(BaseModel):\n    pass\n\nclass Date(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> /////////////////////////// / Window APIs ///////////////////////////\nclass AddEventListenerOptions(EventListenerOptions):\n    once: Optional[bool] = None\n    passive: Optional[bool] = None\n    signal: Optional[AbortSignal] = None\n\nclass AddressErrors(BaseModel):\n    addressLine: Optional[str] = None\n    city: Optional[str] = None\n    country: Optional[str] = None\n    dependentLocality: Optional[str] = None\n    organization: Optional[str] = None\n    phone: Optional[str] = None\n    postalCode: Optional[str] = None\n    recipient: Optional[str] = None\n    region: Optional[str] = None\n    sortingCode: Optional[str] = None\n\nclass AesCbcParams(Algorithm):\n    iv: BufferSource = Field(...)\n\nclass AesCtrParams(Algorithm):\n    counter: BufferSource = Field(...)\n    length: float = Field(...)\n\nclass AesDerivedKeyParams(Algorithm):\n    length: float = Field(...)\n\nclass AesGcmParams(Algorithm):\n    additionalData: Optional[BufferSource] = None\n    iv: BufferSource = Field(...)\n    tagLength: Optional[float] = None\n\nclass AesKeyAlgorithm(KeyAlgorithm):\n    length: float = Field(...)\n\nclass AesKeyGenParams(Algorithm):\n    length: float = Field(...)\n\nclass Algorithm(BaseModel):\n    name: str = Field(...)\n\nclass AnalyserOptions(AudioNodeOptions):\n    fftSize: Optional[float] = None\n    maxDecibels: Optional[float] = None\n    minDecibels: Optional[float] = None\n    smoothingTimeConstant: Optional[float] = None\n\nclass AnimationEventInit(EventInit):\n    animationName: Optional[str] = None\n    elapsedTime: Optional[float] = None\n    pseudoElement: Optional[str] = None\n\nclass AnimationPlaybackEventInit(EventInit):\n    currentTime: Optional[Union[CSSNumberish, null]] = None\n    timelineTime: Optional[Union[CSSNumberish, null]] = None\n\nclass AssignedNodesOptions(BaseModel):\n    flatten: Optional[bool] = None\n\nclass AudioBufferOptions(BaseModel):\n    length: float = Field(...)\n    numberOfChannels: Optional[float] = None\n    sampleRate: float = Field(...)\n\nclass AudioBufferSourceOptions(BaseModel):\n    buffer: Optional[Union[AudioBuffer, null]] = None\n    detune: Optional[float] = None\n    loop: Optional[bool] = None\n    loopEnd: Optional[float] = None\n    loopStart: Optional[float] = None\n    playbackRate: Optional[float] = None\n\nclass AudioConfiguration(BaseModel):\n    bitrate: Optional[float] = None\n    channels: Optional[str] = None\n    contentType: str = Field(...)\n    samplerate: Optional[float] = None\n    spatialRendering: Optional[bool] = None\n\nclass AudioContextOptions(BaseModel):\n    latencyHint: Optional[Union[AudioContextLatencyCategory, float]] = None\n    sampleRate: Optional[float] = None\n\nclass AudioDataCopyToOptions(BaseModel):\n    format: Optional[AudioSampleFormat] = None\n    frameCount: Optional[float] = None\n    frameOffset: Optional[float] = None\n    planeIndex: float = Field(...)\n\nclass AudioDataInit(BaseModel):\n    data: BufferSource = Field(...)\n    format: AudioSampleFormat = Field(...)\n    numberOfChannels: float = Field(...)\n    numberOfFrames: float = Field(...)\n    sampleRate: float = Field(...)\n    timestamp: float = Field(...)\n    transfer: Optional[List[List[ArrayBuffer]]] = None\n\nclass AudioDecoderConfig(BaseModel):\n    codec: str = Field(...)\n    description: Optional[AllowSharedBufferSource] = None\n    numberOfChannels: float = Field(...)\n    sampleRate: float = Field(...)\n\nclass AudioDecoderInit(BaseModel):\n    error: WebCodecsErrorCallback = Field(...)\n    output: AudioDataOutputCallback = Field(...)\n\nclass AudioDecoderSupport(BaseModel):\n    config: Optional[AudioDecoderConfig] = None\n    supported: Optional[bool] = None\n\nclass AudioEncoderConfig(BaseModel):\n    bitrate: Optional[float] = None\n    bitrateMode: Optional[BitrateMode] = None\n    codec: str = Field(...)\n    numberOfChannels: float = Field(...)\n    opus: Optional[OpusEncoderConfig] = None\n    sampleRate: float = Field(...)\n\nclass AudioEncoderInit(BaseModel):\n    error: WebCodecsErrorCallback = Field(...)\n    output: EncodedAudioChunkOutputCallback = Field(...)\n\nclass AudioEncoderSupport(BaseModel):\n    config: Optional[AudioEncoderConfig] = None\n    supported: Optional[bool] = None\n\nclass AudioNodeOptions(BaseModel):\n    channelCount: Optional[float] = None\n    channelCountMode: Optional[ChannelCountMode] = None\n    channelInterpretation: Optional[ChannelInterpretation] = None\n\nclass AudioProcessingEventInit(EventInit):\n    inputBuffer: AudioBuffer = Field(...)\n    outputBuffer: AudioBuffer = Field(...)\n    playbackTime: float = Field(...)\n\nclass AudioTimestamp(BaseModel):\n    contextTime: Optional[float] = None\n    performanceTime: Optional[DOMHighResTimeStamp] = None\n\nclass AudioWorkletNodeOptions(AudioNodeOptions):\n    numberOfInputs: Optional[float] = None\n    numberOfOutputs: Optional[float] = None\n    outputChannelCount: Optional[List[List[float]]] = None\n    parameterData: Optional[Record<string, number>] = None\n    processorOptions: Optional[any] = None\n\nclass AuthenticationExtensionsClientInputs(BaseModel):\n    appid: Optional[str] = None\n    credProps: Optional[bool] = None\n    credentialProtectionPolicy: Optional[str] = None\n    enforceCredentialProtectionPolicy: Optional[bool] = None\n    hmacCreateSecret: Optional[bool] = None\n    largeBlob: Optional[AuthenticationExtensionsLargeBlobInputs] = None\n    minPinLength: Optional[bool] = None\n    prf: Optional[AuthenticationExtensionsPRFInputs] = None\n\nclass AuthenticationExtensionsClientInputsJSON(BaseModel):\n    appid: Optional[str] = None\n    credProps: Optional[bool] = None\n    largeBlob: Optional[AuthenticationExtensionsLargeBlobInputsJSON] = None\n    prf: Optional[AuthenticationExtensionsPRFInputsJSON] = None\n\nclass AuthenticationExtensionsClientOutputs(BaseModel):\n    appid: Optional[bool] = None\n    credProps: Optional[CredentialPropertiesOutput] = None\n    hmacCreateSecret: Optional[bool] = None\n    largeBlob: Optional[AuthenticationExtensionsLargeBlobOutputs] = None\n    prf: Optional[AuthenticationExtensionsPRFOutputs] = None\n\nclass AuthenticationExtensionsLargeBlobInputs(BaseModel):\n    read: Optional[bool] = None\n    support: Optional[str] = None\n    write: Optional[BufferSource] = None\n\nclass AuthenticationExtensionsLargeBlobInputsJSON(BaseModel):\n    read: Optional[bool] = None\n    support: Optional[str] = None\n    write: Optional[Base64URLString] = None\n\nclass AuthenticationExtensionsLargeBlobOutputs(BaseModel):\n    blob: Optional[ArrayBuffer] = None\n    supported: Optional[bool] = None\n    written: Optional[bool] = None\n\nclass AuthenticationExtensionsPRFInputs(BaseModel):\n    eval: Optional[AuthenticationExtensionsPRFValues] = None\n    evalByCredential: Optional[Record<string, AuthenticationExtensionsPRFValues>] = None\n\nclass AuthenticationExtensionsPRFInputsJSON(BaseModel):\n    eval: Optional[AuthenticationExtensionsPRFValuesJSON] = None\n    evalByCredential: Optional[Record<string, AuthenticationExtensionsPRFValuesJSON>] = None\n\nclass AuthenticationExtensionsPRFOutputs(BaseModel):\n    enabled: Optional[bool] = None\n    results: Optional[AuthenticationExtensionsPRFValues] = None\n\nclass AuthenticationExtensionsPRFValues(BaseModel):\n    first: BufferSource = Field(...)\n    second: Optional[BufferSource] = None\n\nclass AuthenticationExtensionsPRFValuesJSON(BaseModel):\n    first: Base64URLString = Field(...)\n    second: Optional[Base64URLString] = None\n\nclass AuthenticatorSelectionCriteria(BaseModel):\n    authenticatorAttachment: Optional[AuthenticatorAttachment] = None\n    requireResidentKey: Optional[bool] = None\n    residentKey: Optional[ResidentKeyRequirement] = None\n    userVerification: Optional[UserVerificationRequirement] = None\n\nclass AvcEncoderConfig(BaseModel):\n    format: Optional[AvcBitstreamFormat] = None\n\nclass BiquadFilterOptions(AudioNodeOptions):\n    Q: Optional[float] = None\n    detune: Optional[float] = None\n    frequency: Optional[float] = None\n    gain: Optional[float] = None\n    type: Optional[BiquadFilterType] = None\n\nclass BlobEventInit(EventInit):\n    data: Blob = Field(...)\n    timecode: Optional[DOMHighResTimeStamp] = None\n\nclass BlobPropertyBag(BaseModel):\n    endings: Optional[EndingType] = None\n    type: Optional[str] = None\n\nclass CSSMatrixComponentOptions(BaseModel):\n    is2D: Optional[bool] = None\n\nclass CSSNumericType(BaseModel):\n    angle: Optional[float] = None\n    flex: Optional[float] = None\n    frequency: Optional[float] = None\n    length: Optional[float] = None\n    percent: Optional[float] = None\n    percentHint: Optional[CSSNumericBaseType] = None\n    resolution: Optional[float] = None\n    time: Optional[float] = None\n\nclass CSSStyleSheetInit(BaseModel):\n    baseURL: Optional[str] = None\n    disabled: Optional[bool] = None\n    media: Optional[Union[MediaList, str]] = None\n\nclass CacheQueryOptions(BaseModel):\n    ignoreMethod: Optional[bool] = None\n    ignoreSearch: Optional[bool] = None\n    ignoreVary: Optional[bool] = None\n\nclass CanvasRenderingContext2DSettings(BaseModel):\n    alpha: Optional[bool] = None\n    colorSpace: Optional[PredefinedColorSpace] = None\n    desynchronized: Optional[bool] = None\n    willReadFrequently: Optional[bool] = None\n\nclass CaretPositionFromPointOptions(BaseModel):\n    shadowRoots: Optional[List[List[ShadowRoot]]] = None\n\nclass ChannelMergerOptions(AudioNodeOptions):\n    numberOfInputs: Optional[float] = None\n\nclass ChannelSplitterOptions(AudioNodeOptions):\n    numberOfOutputs: Optional[float] = None\n\nclass CheckVisibilityOptions(BaseModel):\n    checkOpacity: Optional[bool] = None\n    checkVisibilityCSS: Optional[bool] = None\n    contentVisibilityAuto: Optional[bool] = None\n    opacityProperty: Optional[bool] = None\n    visibilityProperty: Optional[bool] = None\n\nclass ClientQueryOptions(BaseModel):\n    includeUncontrolled: Optional[bool] = None\n    type: Optional[ClientTypes] = None\n\nclass ClipboardEventInit(EventInit):\n    clipboardData: Optional[Union[DataTransfer, null]] = None\n\nclass ClipboardItemOptions(BaseModel):\n    presentationStyle: Optional[PresentationStyle] = None\n\nclass CloseEventInit(EventInit):\n    code: Optional[float] = None\n    reason: Optional[str] = None\n    wasClean: Optional[bool] = None\n\nclass CompositionEventInit(UIEventInit):\n    data: Optional[str] = None\n\nclass ComputedEffectTiming(EffectTiming):\n    activeDuration: Optional[CSSNumberish] = None\n    currentIteration: Optional[Union[float, null]] = None\n    endTime: Optional[CSSNumberish] = None\n    localTime: Optional[Union[CSSNumberish, null]] = None\n    progress: Optional[Union[float, null]] = None\n    startTime: Optional[CSSNumberish] = None\n\nclass ComputedKeyframe(BaseModel):\n    composite: CompositeOperationOrAuto = Field(...)\n    computedOffset: float = Field(...)\n    easing: str = Field(...)\n    offset: Union[float, null] = Field(...)\n\nclass ConstantSourceOptions(BaseModel):\n    offset: Optional[float] = None\n\nclass ConstrainBooleanParameters(BaseModel):\n    exact: Optional[bool] = None\n    ideal: Optional[bool] = None\n\nclass ConstrainDOMStringParameters(BaseModel):\n    exact: Optional[Union[str, List[str]]] = None\n    ideal: Optional[Union[str, List[str]]] = None\n\nclass ConstrainDoubleRange(DoubleRange):\n    exact: Optional[float] = None\n    ideal: Optional[float] = None\n\nclass ConstrainULongRange(ULongRange):\n    exact: Optional[float] = None\n    ideal: Optional[float] = None\n\nclass ContentVisibilityAutoStateChangeEventInit(EventInit):\n    skipped: Optional[bool] = None\n\nclass ConvolverOptions(AudioNodeOptions):\n    buffer: Optional[Union[AudioBuffer, null]] = None\n    disableNormalization: Optional[bool] = None\n\nclass CookieChangeEventInit(EventInit):\n    changed: Optional[CookieList] = None\n    deleted: Optional[CookieList] = None\n\nclass CookieInit(BaseModel):\n    domain: Optional[Union[str, null]] = None\n    expires: Optional[Union[DOMHighResTimeStamp, null]] = None\n    name: str = Field(...)\n    partitioned: Optional[bool] = None\n    path: Optional[str] = None\n    sameSite: Optional[CookieSameSite] = None\n    value: str = Field(...)\n\nclass CookieListItem(BaseModel):\n    name: Optional[str] = None\n    value: Optional[str] = None\n\nclass CookieStoreDeleteOptions(BaseModel):\n    domain: Optional[Union[str, null]] = None\n    name: str = Field(...)\n    partitioned: Optional[bool] = None\n    path: Optional[str] = None\n\nclass CookieStoreGetOptions(BaseModel):\n    name: Optional[str] = None\n    url: Optional[str] = None\n\nclass CredentialCreationOptions(BaseModel):\n    publicKey: Optional[PublicKeyCredentialCreationOptions] = None\n    signal: Optional[AbortSignal] = None\n\nclass CredentialPropertiesOutput(BaseModel):\n    rk: Optional[bool] = None\n\nclass CredentialRequestOptions(BaseModel):\n    mediation: Optional[CredentialMediationRequirement] = None\n    publicKey: Optional[PublicKeyCredentialRequestOptions] = None\n    signal: Optional[AbortSignal] = None\n\nclass CryptoKeyPair(BaseModel):\n    privateKey: CryptoKey = Field(...)\n    publicKey: CryptoKey = Field(...)\n\nclass CustomEventInit(EventInit):\n    detail: Optional[T] = None\n\nclass DOMMatrix2DInit(BaseModel):\n    a: Optional[float] = None\n    b: Optional[float] = None\n    c: Optional[float] = None\n    d: Optional[float] = None\n    e: Optional[float] = None\n    f: Optional[float] = None\n    m11: Optional[float] = None\n    m12: Optional[float] = None\n    m21: Optional[float] = None\n    m22: Optional[float] = None\n    m41: Optional[float] = None\n    m42: Optional[float] = None\n\nclass DOMMatrixInit(DOMMatrix2DInit):\n    is2D: Optional[bool] = None\n    m13: Optional[float] = None\n    m14: Optional[float] = None\n    m23: Optional[float] = None\n    m24: Optional[float] = None\n    m31: Optional[float] = None\n    m32: Optional[float] = None\n    m33: Optional[float] = None\n    m34: Optional[float] = None\n    m43: Optional[float] = None\n    m44: Optional[float] = None\n\nclass DOMPointInit(BaseModel):\n    w: Optional[float] = None\n    x: Optional[float] = None\n    y: Optional[float] = None\n    z: Optional[float] = None\n\nclass DOMQuadInit(BaseModel):\n    p1: Optional[DOMPointInit] = None\n    p2: Optional[DOMPointInit] = None\n    p3: Optional[DOMPointInit] = None\n    p4: Optional[DOMPointInit] = None\n\nclass DOMRectInit(BaseModel):\n    height: Optional[float] = None\n    width: Optional[float] = None\n    x: Optional[float] = None\n    y: Optional[float] = None\n\nclass DelayOptions(AudioNodeOptions):\n    delayTime: Optional[float] = None\n    maxDelayTime: Optional[float] = None\n\nclass DeviceMotionEventAccelerationInit(BaseModel):\n    x: Optional[Union[float, null]] = None\n    y: Optional[Union[float, null]] = None\n    z: Optional[Union[float, null]] = None\n\nclass DeviceMotionEventInit(EventInit):\n    acceleration: Optional[DeviceMotionEventAccelerationInit] = None\n    accelerationIncludingGravity: Optional[DeviceMotionEventAccelerationInit] = None\n    interval: Optional[float] = None\n    rotationRate: Optional[DeviceMotionEventRotationRateInit] = None\n\nclass DeviceMotionEventRotationRateInit(BaseModel):\n    alpha: Optional[Union[float, null]] = None\n    beta: Optional[Union[float, null]] = None\n    gamma: Optional[Union[float, null]] = None\n\nclass DeviceOrientationEventInit(EventInit):\n    absolute: Optional[bool] = None\n    alpha: Optional[Union[float, null]] = None\n    beta: Optional[Union[float, null]] = None\n    gamma: Optional[Union[float, null]] = None\n\nclass DisplayMediaStreamOptions(BaseModel):\n    audio: Optional[Union[bool, MediaTrackConstraints]] = None\n    video: Optional[Union[bool, MediaTrackConstraints]] = None\n\nclass DocumentTimelineOptions(BaseModel):\n    originTime: Optional[DOMHighResTimeStamp] = None\n\nclass DoubleRange(BaseModel):\n    max: Optional[float] = None\n    min: Optional[float] = None\n\nclass DragEventInit(MouseEventInit):\n    dataTransfer: Optional[Union[DataTransfer, null]] = None\n\nclass DynamicsCompressorOptions(AudioNodeOptions):\n    attack: Optional[float] = None\n    knee: Optional[float] = None\n    ratio: Optional[float] = None\n    release: Optional[float] = None\n    threshold: Optional[float] = None\n\nclass EcKeyAlgorithm(KeyAlgorithm):\n    namedCurve: NamedCurve = Field(...)\n\nclass EcKeyGenParams(Algorithm):\n    namedCurve: NamedCurve = Field(...)\n\nclass EcKeyImportParams(Algorithm):\n    namedCurve: NamedCurve = Field(...)\n\nclass EcdhKeyDeriveParams(Algorithm):\n    public: CryptoKey = Field(...)\n\nclass EcdsaParams(Algorithm):\n    hash: HashAlgorithmIdentifier = Field(...)\n\nclass EffectTiming(BaseModel):\n    delay: Optional[float] = None\n    direction: Optional[PlaybackDirection] = None\n    duration: Optional[Union[float, CSSNumericValue, str]] = None\n    easing: Optional[str] = None\n    endDelay: Optional[float] = None\n    fill: Optional[FillMode] = None\n    iterationStart: Optional[float] = None\n    iterations: Optional[float] = None\n    playbackRate: Optional[float] = None\n\nclass ElementCreationOptions(BaseModel):\n    customElementRegistry: Optional[CustomElementRegistry] = None\n    is: Optional[str] = None\n\nclass ElementDefinitionOptions(BaseModel):\n    extends: Optional[str] = None\n\nclass EncodedAudioChunkInit(BaseModel):\n    data: AllowSharedBufferSource = Field(...)\n    duration: Optional[float] = None\n    timestamp: float = Field(...)\n    transfer: Optional[List[List[ArrayBuffer]]] = None\n    type: EncodedAudioChunkType = Field(...)\n\nclass EncodedAudioChunkMetadata(BaseModel):\n    decoderConfig: Optional[AudioDecoderConfig] = None\n\nclass EncodedVideoChunkInit(BaseModel):\n    data: AllowSharedBufferSource = Field(...)\n    duration: Optional[float] = None\n    timestamp: float = Field(...)\n    type: EncodedVideoChunkType = Field(...)\n\nclass EncodedVideoChunkMetadata(BaseModel):\n    decoderConfig: Optional[VideoDecoderConfig] = None\n\nclass ErrorEventInit(EventInit):\n    colno: Optional[float] = None\n    error: Optional[any] = None\n    filename: Optional[str] = None\n    lineno: Optional[float] = None\n    message: Optional[str] = None\n\nclass EventInit(BaseModel):\n    bubbles: Optional[bool] = None\n    cancelable: Optional[bool] = None\n    composed: Optional[bool] = None\n\nclass EventListenerOptions(BaseModel):\n    capture: Optional[bool] = None\n\nclass EventModifierInit(UIEventInit):\n    altKey: Optional[bool] = None\n    ctrlKey: Optional[bool] = None\n    metaKey: Optional[bool] = None\n    modifierAltGraph: Optional[bool] = None\n    modifierCapsLock: Optional[bool] = None\n    modifierFn: Optional[bool] = None\n    modifierFnLock: Optional[bool] = None\n    modifierHyper: Optional[bool] = None\n    modifierNumLock: Optional[bool] = None\n    modifierScrollLock: Optional[bool] = None\n    modifierSuper: Optional[bool] = None\n    modifierSymbol: Optional[bool] = None\n    modifierSymbolLock: Optional[bool] = None\n    shiftKey: Optional[bool] = None\n\nclass EventSourceInit(BaseModel):\n    withCredentials: Optional[bool] = None\n\nclass FilePropertyBag(BlobPropertyBag):\n    lastModified: Optional[float] = None\n\nclass FileSystemCreateWritableOptions(BaseModel):\n    keepExistingData: Optional[bool] = None\n\nclass FileSystemFlags(BaseModel):\n    create: Optional[bool] = None\n    exclusive: Optional[bool] = None\n\nclass FileSystemGetDirectoryOptions(BaseModel):\n    create: Optional[bool] = None\n\nclass FileSystemGetFileOptions(BaseModel):\n    create: Optional[bool] = None\n\nclass FileSystemRemoveOptions(BaseModel):\n    recursive: Optional[bool] = None\n\nclass FocusEventInit(UIEventInit):\n    relatedTarget: Optional[Union[EventTarget, null]] = None\n\nclass FocusOptions(BaseModel):\n    preventScroll: Optional[bool] = None\n\nclass FontFaceDescriptors(BaseModel):\n    ascentOverride: Optional[str] = None\n    descentOverride: Optional[str] = None\n    display: Optional[FontDisplay] = None\n    featureSettings: Optional[str] = None\n    lineGapOverride: Optional[str] = None\n    stretch: Optional[str] = None\n    style: Optional[str] = None\n    unicodeRange: Optional[str] = None\n    weight: Optional[str] = None\n\nclass FontFaceSetLoadEventInit(EventInit):\n    fontfaces: Optional[List[List[FontFace]]] = None\n\nclass FormDataEventInit(EventInit):\n    formData: FormData = Field(...)\n\nclass FullscreenOptions(BaseModel):\n    navigationUI: Optional[FullscreenNavigationUI] = None\n\nclass GainOptions(AudioNodeOptions):\n    gain: Optional[float] = None\n\nclass GamepadEffectParameters(BaseModel):\n    duration: Optional[float] = None\n    leftTrigger: Optional[float] = None\n    rightTrigger: Optional[float] = None\n    startDelay: Optional[float] = None\n    strongMagnitude: Optional[float] = None\n    weakMagnitude: Optional[float] = None\n\nclass GamepadEventInit(EventInit):\n    gamepad: Gamepad = Field(...)\n\nclass GetAnimationsOptions(BaseModel):\n    subtree: Optional[bool] = None\n\nclass GetComposedRangesOptions(BaseModel):\n    shadowRoots: Optional[List[List[ShadowRoot]]] = None\n\nclass GetHTMLOptions(BaseModel):\n    serializableShadowRoots: Optional[bool] = None\n    shadowRoots: Optional[List[List[ShadowRoot]]] = None\n\nclass GetNotificationOptions(BaseModel):\n    tag: Optional[str] = None\n\nclass GetRootNodeOptions(BaseModel):\n    composed: Optional[bool] = None\n\nclass HashChangeEventInit(EventInit):\n    newURL: Optional[str] = None\n    oldURL: Optional[str] = None\n\nclass HkdfParams(Algorithm):\n    hash: HashAlgorithmIdentifier = Field(...)\n    info: BufferSource = Field(...)\n    salt: BufferSource = Field(...)\n\nclass HmacImportParams(Algorithm):\n    hash: HashAlgorithmIdentifier = Field(...)\n    length: Optional[float] = None\n\nclass HmacKeyAlgorithm(KeyAlgorithm):\n    hash: KeyAlgorithm = Field(...)\n    length: float = Field(...)\n\nclass HmacKeyGenParams(Algorithm):\n    hash: HashAlgorithmIdentifier = Field(...)\n    length: Optional[float] = None\n\nclass IDBDatabaseInfo(BaseModel):\n    name: Optional[str] = None\n    version: Optional[float] = None\n\nclass IDBIndexParameters(BaseModel):\n    multiEntry: Optional[bool] = None\n    unique: Optional[bool] = None\n\nclass IDBObjectStoreParameters(BaseModel):\n    autoIncrement: Optional[bool] = None\n    keyPath: Optional[Union[str, List[str], null]] = None\n\nclass IDBTransactionOptions(BaseModel):\n    durability: Optional[IDBTransactionDurability] = None\n\nclass IDBVersionChangeEventInit(EventInit):\n    newVersion: Optional[Union[float, null]] = None\n    oldVersion: Optional[float] = None\n\nclass IIRFilterOptions(AudioNodeOptions):\n    feedback: List[List[float]] = Field(...)\n    feedforward: List[List[float]] = Field(...)\n\nclass IdleRequestOptions(BaseModel):\n    timeout: Optional[float] = None\n\nclass ImageBitmapOptions(BaseModel):\n    colorSpaceConversion: Optional[ColorSpaceConversion] = None\n    imageOrientation: Optional[ImageOrientation] = None\n    premultiplyAlpha: Optional[PremultiplyAlpha] = None\n    resizeHeight: Optional[float] = None\n    resizeQuality: Optional[ResizeQuality] = None\n    resizeWidth: Optional[float] = None\n\nclass ImageBitmapRenderingContextSettings(BaseModel):\n    alpha: Optional[bool] = None\n\nclass ImageDataSettings(BaseModel):\n    colorSpace: Optional[PredefinedColorSpace] = None\n\nclass ImageDecodeOptions(BaseModel):\n    completeFramesOnly: Optional[bool] = None\n    frameIndex: Optional[float] = None\n\nclass ImageDecodeResult(BaseModel):\n    complete: bool = Field(...)\n    image: VideoFrame = Field(...)\n\nclass ImageDecoderInit(BaseModel):\n    colorSpaceConversion: Optional[ColorSpaceConversion] = None\n    data: ImageBufferSource = Field(...)\n    desiredHeight: Optional[float] = None\n    desiredWidth: Optional[float] = None\n    preferAnimation: Optional[bool] = None\n    transfer: Optional[List[List[ArrayBuffer]]] = None\n    type: str = Field(...)\n\nclass ImageEncodeOptions(BaseModel):\n    quality: Optional[float] = None\n    type: Optional[str] = None\n\nclass ImportNodeOptions(BaseModel):\n    customElementRegistry: Optional[CustomElementRegistry] = None\n    selfOnly: Optional[bool] = None\n\nclass InputEventInit(UIEventInit):\n    data: Optional[Union[str, null]] = None\n    dataTransfer: Optional[Union[DataTransfer, null]] = None\n    inputType: Optional[str] = None\n    isComposing: Optional[bool] = None\n    targetRanges: Optional[List[List[StaticRange]]] = None\n\nclass IntersectionObserverInit(BaseModel):\n    root: Optional[Union[Element, Document, null]] = None\n    rootMargin: Optional[str] = None\n    threshold: Optional[Union[float, List[float]]] = None\n\nclass JsonWebKey(BaseModel):\n    alg: Optional[str] = None\n    crv: Optional[str] = None\n    d: Optional[str] = None\n    dp: Optional[str] = None\n    dq: Optional[str] = None\n    e: Optional[str] = None\n    ext: Optional[bool] = None\n    k: Optional[str] = None\n    key_ops: Optional[List[List[str]]] = None\n    kty: Optional[str] = None\n    n: Optional[str] = None\n    oth: Optional[List[List[RsaOtherPrimesInfo]]] = None\n    p: Optional[str] = None\n    q: Optional[str] = None\n    qi: Optional[str] = None\n    use: Optional[str] = None\n    x: Optional[str] = None\n    y: Optional[str] = None\n\nclass KeyAlgorithm(BaseModel):\n    name: str = Field(...)\n\nclass KeySystemTrackConfiguration(BaseModel):\n    robustness: Optional[str] = None\n\nclass KeyboardEventInit(EventModifierInit):\n    # @deprecated\n    charCode: Optional[float] = None = Field(..., description='@deprecated')\n    code: Optional[str] = None\n    isComposing: Optional[bool] = None\n    key: Optional[str] = None\n    # @deprecated\n    keyCode: Optional[float] = None = Field(..., description='@deprecated')\n    location: Optional[float] = None\n    repeat: Optional[bool] = None\n\nclass Keyframe(BaseModel):\n    composite: Optional[CompositeOperationOrAuto] = None\n    easing: Optional[str] = None\n    offset: Optional[Union[float, null]] = None\n\nclass KeyframeAnimationOptions(KeyframeEffectOptions):\n    id: Optional[str] = None\n    timeline: Optional[Union[AnimationTimeline, null]] = None\n\nclass KeyframeEffectOptions(EffectTiming):\n    composite: Optional[CompositeOperation] = None\n    iterationComposite: Optional[IterationCompositeOperation] = None\n    pseudoElement: Optional[Union[str, null]] = None\n\nclass LockInfo(BaseModel):\n    clientId: Optional[str] = None\n    mode: Optional[LockMode] = None\n    name: Optional[str] = None\n\nclass LockManagerSnapshot(BaseModel):\n    held: Optional[List[List[LockInfo]]] = None\n    pending: Optional[List[List[LockInfo]]] = None\n\nclass LockOptions(BaseModel):\n    ifAvailable: Optional[bool] = None\n    mode: Optional[LockMode] = None\n    signal: Optional[AbortSignal] = None\n    steal: Optional[bool] = None\n\nclass MIDIConnectionEventInit(EventInit):\n    port: Optional[MIDIPort] = None\n\nclass MIDIMessageEventInit(EventInit):\n    data: Optional[Uint8Array<ArrayBuffer>] = None\n\nclass MIDIOptions(BaseModel):\n    software: Optional[bool] = None\n    sysex: Optional[bool] = None\n\nclass MediaCapabilitiesDecodingInfo(MediaCapabilitiesInfo):\n    keySystemAccess: Union[MediaKeySystemAccess, null] = Field(...)\n\nclass MediaCapabilitiesEncodingInfo(MediaCapabilitiesInfo):\n    pass\n\nclass MediaCapabilitiesInfo(BaseModel):\n    powerEfficient: bool = Field(...)\n    smooth: bool = Field(...)\n    supported: bool = Field(...)\n\nclass MediaCapabilitiesKeySystemConfiguration(BaseModel):\n    audio: Optional[KeySystemTrackConfiguration] = None\n    distinctiveIdentifier: Optional[MediaKeysRequirement] = None\n    initDataType: Optional[str] = None\n    keySystem: str = Field(...)\n    persistentState: Optional[MediaKeysRequirement] = None\n    sessionTypes: Optional[List[List[str]]] = None\n    video: Optional[KeySystemTrackConfiguration] = None\n\nclass MediaConfiguration(BaseModel):\n    audio: Optional[AudioConfiguration] = None\n    video: Optional[VideoConfiguration] = None\n\nclass MediaDecodingConfiguration(MediaConfiguration):\n    keySystemConfiguration: Optional[MediaCapabilitiesKeySystemConfiguration] = None\n    type: MediaDecodingType = Field(...)\n\nclass MediaElementAudioSourceOptions(BaseModel):\n    mediaElement: HTMLMediaElement = Field(...)\n\nclass MediaEncodingConfiguration(MediaConfiguration):\n    type: MediaEncodingType = Field(...)\n\nclass MediaEncryptedEventInit(EventInit):\n    initData: Optional[Union[ArrayBuffer, null]] = None\n    initDataType: Optional[str] = None\n\nclass MediaImage(BaseModel):\n    sizes: Optional[str] = None\n    src: str = Field(...)\n    type: Optional[str] = None\n\nclass MediaKeyMessageEventInit(EventInit):\n    message: ArrayBuffer = Field(...)\n    messageType: MediaKeyMessageType = Field(...)\n\nclass MediaKeySystemConfiguration(BaseModel):\n    audioCapabilities: Optional[List[List[MediaKeySystemMediaCapability]]] = None\n    distinctiveIdentifier: Optional[MediaKeysRequirement] = None\n    initDataTypes: Optional[List[List[str]]] = None\n    label: Optional[str] = None\n    persistentState: Optional[MediaKeysRequirement] = None\n    sessionTypes: Optional[List[List[str]]] = None\n    videoCapabilities: Optional[List[List[MediaKeySystemMediaCapability]]] = None\n\nclass MediaKeySystemMediaCapability(BaseModel):\n    contentType: Optional[str] = None\n    encryptionScheme: Optional[Union[str, null]] = None\n    robustness: Optional[str] = None\n\nclass MediaKeysPolicy(BaseModel):\n    minHdcpVersion: Optional[str] = None\n\nclass MediaMetadataInit(BaseModel):\n    album: Optional[str] = None\n    artist: Optional[str] = None\n    artwork: Optional[List[List[MediaImage]]] = None\n    title: Optional[str] = None\n\nclass MediaPositionState(BaseModel):\n    duration: Optional[float] = None\n    playbackRate: Optional[float] = None\n    position: Optional[float] = None\n\nclass MediaQueryListEventInit(EventInit):\n    matches: Optional[bool] = None\n    media: Optional[str] = None\n\nclass MediaRecorderOptions(BaseModel):\n    audioBitsPerSecond: Optional[float] = None\n    bitsPerSecond: Optional[float] = None\n    mimeType: Optional[str] = None\n    videoBitsPerSecond: Optional[float] = None\n\nclass MediaSessionActionDetails(BaseModel):\n    action: MediaSessionAction = Field(...)\n    fastSeek: Optional[bool] = None\n    seekOffset: Optional[float] = None\n    seekTime: Optional[float] = None\n\nclass MediaSettingsRange(BaseModel):\n    max: Optional[float] = None\n    min: Optional[float] = None\n    step: Optional[float] = None\n\nclass MediaStreamAudioSourceOptions(BaseModel):\n    mediaStream: MediaStream = Field(...)\n\nclass MediaStreamConstraints(BaseModel):\n    audio: Optional[Union[bool, MediaTrackConstraints]] = None\n    peerIdentity: Optional[str] = None\n    preferCurrentTab: Optional[bool] = None\n    video: Optional[Union[bool, MediaTrackConstraints]] = None\n\nclass MediaStreamTrackEventInit(EventInit):\n    track: MediaStreamTrack = Field(...)\n\nclass MediaTrackCapabilities(BaseModel):\n    aspectRatio: Optional[DoubleRange] = None\n    autoGainControl: Optional[List[List[bool]]] = None\n    backgroundBlur: Optional[List[List[bool]]] = None\n    channelCount: Optional[ULongRange] = None\n    deviceId: Optional[str] = None\n    displaySurface: Optional[str] = None\n    echoCancellation: Optional[List[List[bool]]] = None\n    facingMode: Optional[List[List[str]]] = None\n    frameRate: Optional[DoubleRange] = None\n    groupId: Optional[str] = None\n    height: Optional[ULongRange] = None\n    noiseSuppression: Optional[List[List[bool]]] = None\n    sampleRate: Optional[ULongRange] = None\n    sampleSize: Optional[ULongRange] = None\n    width: Optional[ULongRange] = None\n\nclass MediaTrackConstraintSet(BaseModel):\n    aspectRatio: Optional[ConstrainDouble] = None\n    autoGainControl: Optional[ConstrainBoolean] = None\n    backgroundBlur: Optional[ConstrainBoolean] = None\n    channelCount: Optional[ConstrainULong] = None\n    deviceId: Optional[ConstrainDOMString] = None\n    displaySurface: Optional[ConstrainDOMString] = None\n    echoCancellation: Optional[ConstrainBoolean] = None\n    facingMode: Optional[ConstrainDOMString] = None\n    frameRate: Optional[ConstrainDouble] = None\n    groupId: Optional[ConstrainDOMString] = None\n    height: Optional[ConstrainULong] = None\n    noiseSuppression: Optional[ConstrainBoolean] = None\n    sampleRate: Optional[ConstrainULong] = None\n    sampleSize: Optional[ConstrainULong] = None\n    width: Optional[ConstrainULong] = None\n\nclass MediaTrackConstraints(MediaTrackConstraintSet):\n    advanced: Optional[List[List[MediaTrackConstraintSet]]] = None\n\nclass MediaTrackSettings(BaseModel):\n    aspectRatio: Optional[float] = None\n    autoGainControl: Optional[bool] = None\n    backgroundBlur: Optional[bool] = None\n    channelCount: Optional[float] = None\n    deviceId: Optional[str] = None\n    displaySurface: Optional[str] = None\n    echoCancellation: Optional[bool] = None\n    facingMode: Optional[str] = None\n    frameRate: Optional[float] = None\n    groupId: Optional[str] = None\n    height: Optional[float] = None\n    noiseSuppression: Optional[bool] = None\n    sampleRate: Optional[float] = None\n    sampleSize: Optional[float] = None\n    torch: Optional[bool] = None\n    whiteBalanceMode: Optional[str] = None\n    width: Optional[float] = None\n    zoom: Optional[float] = None\n\nclass MediaTrackSupportedConstraints(BaseModel):\n    aspectRatio: Optional[bool] = None\n    autoGainControl: Optional[bool] = None\n    backgroundBlur: Optional[bool] = None\n    channelCount: Optional[bool] = None\n    deviceId: Optional[bool] = None\n    displaySurface: Optional[bool] = None\n    echoCancellation: Optional[bool] = None\n    facingMode: Optional[bool] = None\n    frameRate: Optional[bool] = None\n    groupId: Optional[bool] = None\n    height: Optional[bool] = None\n    noiseSuppression: Optional[bool] = None\n    sampleRate: Optional[bool] = None\n    sampleSize: Optional[bool] = None\n    width: Optional[bool] = None\n\nclass MessageEventInit(EventInit):\n    data: Optional[T] = None\n    lastEventId: Optional[str] = None\n    origin: Optional[str] = None\n    ports: Optional[List[List[MessagePort]]] = None\n    source: Optional[Union[MessageEventSource, null]] = None\n\nclass MouseEventInit(EventModifierInit):\n    button: Optional[float] = None\n    buttons: Optional[float] = None\n    clientX: Optional[float] = None\n    clientY: Optional[float] = None\n    movementX: Optional[float] = None\n    movementY: Optional[float] = None\n    relatedTarget: Optional[Union[EventTarget, null]] = None\n    screenX: Optional[float] = None\n    screenY: Optional[float] = None\n\nclass MultiCacheQueryOptions(CacheQueryOptions):\n    cacheName: Optional[str] = None\n\nclass MutationObserverInit(BaseModel):\n    # Set to a list of attribute local names (without namespace) if not all attribute mutations need to be observed and attributes is true or omitted.\n    attributeFilter: Optional[List[List[str]]] = None = Field(..., description='Set to a list of attribute local names (without namespace) if not all attribute mutations need to be observed and attributes is true or omitted.')\n    # Set to true if attributes is true or omitted and target's attribute value before the mutation needs to be recorded.\n    attributeOldValue: Optional[bool] = None = Field(..., description='Set to true if attributes is true or omitted and target\'s attribute value before the mutation needs to be recorded.')\n    # Set to true if mutations to target's attributes are to be observed. Can be omitted if attributeOldValue or attributeFilter is specified.\n    attributes: Optional[bool] = None = Field(..., description='Set to true if mutations to target\'s attributes are to be observed. Can be omitted if attributeOldValue or attributeFilter is specified.')\n    # Set to true if mutations to target's data are to be observed. Can be omitted if characterDataOldValue is specified.\n    characterData: Optional[bool] = None = Field(..., description='Set to true if mutations to target\'s data are to be observed. Can be omitted if characterDataOldValue is specified.')\n    # Set to true if characterData is set to true or omitted and target's data before the mutation needs to be recorded.\n    characterDataOldValue: Optional[bool] = None = Field(..., description='Set to true if characterData is set to true or omitted and target\'s data before the mutation needs to be recorded.')\n    # Set to true if mutations to target's children are to be observed.\n    childList: Optional[bool] = None = Field(..., description='Set to true if mutations to target\'s children are to be observed.')\n    # Set to true if mutations to not just target, but also target's descendants are to be observed.\n    subtree: Optional[bool] = None = Field(..., description='Set to true if mutations to not just target, but also target\'s descendants are to be observed.')\n\nclass NavigationPreloadState(BaseModel):\n    enabled: Optional[bool] = None\n    headerValue: Optional[str] = None\n\nclass NotificationOptions(BaseModel):\n    badge: Optional[str] = None\n    body: Optional[str] = None\n    data: Optional[any] = None\n    dir: Optional[NotificationDirection] = None\n    icon: Optional[str] = None\n    lang: Optional[str] = None\n    requireInteraction: Optional[bool] = None\n    silent: Optional[Union[bool, null]] = None\n    tag: Optional[str] = None\n\nclass OfflineAudioCompletionEventInit(EventInit):\n    renderedBuffer: AudioBuffer = Field(...)\n\nclass OfflineAudioContextOptions(BaseModel):\n    length: float = Field(...)\n    numberOfChannels: Optional[float] = None\n    sampleRate: float = Field(...)\n\nclass OptionalEffectTiming(BaseModel):\n    delay: Optional[float] = None\n    direction: Optional[PlaybackDirection] = None\n    duration: Optional[Union[float, str]] = None\n    easing: Optional[str] = None\n    endDelay: Optional[float] = None\n    fill: Optional[FillMode] = None\n    iterationStart: Optional[float] = None\n    iterations: Optional[float] = None\n    playbackRate: Optional[float] = None\n\nclass OpusEncoderConfig(BaseModel):\n    complexity: Optional[float] = None\n    format: Optional[OpusBitstreamFormat] = None\n    frameDuration: Optional[float] = None\n    packetlossperc: Optional[float] = None\n    usedtx: Optional[bool] = None\n    useinbandfec: Optional[bool] = None\n\nclass OscillatorOptions(AudioNodeOptions):\n    detune: Optional[float] = None\n    frequency: Optional[float] = None\n    periodicWave: Optional[PeriodicWave] = None\n    type: Optional[OscillatorType] = None\n\nclass PageRevealEventInit(EventInit):\n    viewTransition: Optional[Union[ViewTransition, null]] = None\n\nclass PageSwapEventInit(EventInit):\n    activation: Optional[Union[NavigationActivation, null]] = None\n    viewTransition: Optional[Union[ViewTransition, null]] = None\n\nclass PageTransitionEventInit(EventInit):\n    persisted: Optional[bool] = None\n\nclass PannerOptions(AudioNodeOptions):\n    coneInnerAngle: Optional[float] = None\n    coneOuterAngle: Optional[float] = None\n    coneOuterGain: Optional[float] = None\n    distanceModel: Optional[DistanceModelType] = None\n    maxDistance: Optional[float] = None\n    orientationX: Optional[float] = None\n    orientationY: Optional[float] = None\n    orientationZ: Optional[float] = None\n    panningModel: Optional[PanningModelType] = None\n    positionX: Optional[float] = None\n    positionY: Optional[float] = None\n    positionZ: Optional[float] = None\n    refDistance: Optional[float] = None\n    rolloffFactor: Optional[float] = None\n\nclass PayerErrors(BaseModel):\n    email: Optional[str] = None\n    name: Optional[str] = None\n    phone: Optional[str] = None\n\nclass PaymentCurrencyAmount(BaseModel):\n    currency: str = Field(...)\n    value: str = Field(...)\n\nclass PaymentDetailsBase(BaseModel):\n    displayItems: Optional[List[List[PaymentItem]]] = None\n    modifiers: Optional[List[List[PaymentDetailsModifier]]] = None\n    shippingOptions: Optional[List[List[PaymentShippingOption]]] = None\n\nclass PaymentDetailsInit(PaymentDetailsBase):\n    id: Optional[str] = None\n    total: PaymentItem = Field(...)\n\nclass PaymentDetailsModifier(BaseModel):\n    additionalDisplayItems: Optional[List[List[PaymentItem]]] = None\n    data: Optional[any] = None\n    supportedMethods: str = Field(...)\n    total: Optional[PaymentItem] = None\n\nclass PaymentDetailsUpdate(PaymentDetailsBase):\n    error: Optional[str] = None\n    paymentMethodErrors: Optional[any] = None\n    shippingAddressErrors: Optional[AddressErrors] = None\n    total: Optional[PaymentItem] = None\n\nclass PaymentItem(BaseModel):\n    amount: PaymentCurrencyAmount = Field(...)\n    label: str = Field(...)\n    pending: Optional[bool] = None\n\nclass PaymentMethodChangeEventInit(PaymentRequestUpdateEventInit):\n    methodDetails: Optional[any] = None\n    methodName: Optional[str] = None\n\nclass PaymentMethodData(BaseModel):\n    data: Optional[any] = None\n    supportedMethods: str = Field(...)\n\nclass PaymentOptions(BaseModel):\n    requestPayerEmail: Optional[bool] = None\n    requestPayerName: Optional[bool] = None\n    requestPayerPhone: Optional[bool] = None\n    requestShipping: Optional[bool] = None\n    shippingType: Optional[PaymentShippingType] = None\n\nclass PaymentRequestUpdateEventInit(EventInit):\n    pass\n\nclass PaymentShippingOption(BaseModel):\n    amount: PaymentCurrencyAmount = Field(...)\n    id: str = Field(...)\n    label: str = Field(...)\n    selected: Optional[bool] = None\n\nclass PaymentValidationErrors(BaseModel):\n    error: Optional[str] = None\n    payer: Optional[PayerErrors] = None\n    shippingAddress: Optional[AddressErrors] = None\n\nclass Pbkdf2Params(Algorithm):\n    hash: HashAlgorithmIdentifier = Field(...)\n    iterations: float = Field(...)\n    salt: BufferSource = Field(...)\n\nclass PerformanceMarkOptions(BaseModel):\n    detail: Optional[any] = None\n    startTime: Optional[DOMHighResTimeStamp] = None\n\nclass PerformanceMeasureOptions(BaseModel):\n    detail: Optional[any] = None\n    duration: Optional[DOMHighResTimeStamp] = None\n    end: Optional[Union[str, DOMHighResTimeStamp]] = None\n    start: Optional[Union[str, DOMHighResTimeStamp]] = None\n\nclass PerformanceObserverInit(BaseModel):\n    buffered: Optional[bool] = None\n    entryTypes: Optional[List[List[str]]] = None\n    type: Optional[str] = None\n\nclass PeriodicWaveConstraints(BaseModel):\n    disableNormalization: Optional[bool] = None\n\nclass PeriodicWaveOptions(PeriodicWaveConstraints):\n    imag: Optional[Union[List[float], Float32Array]] = None\n    real: Optional[Union[List[float], Float32Array]] = None\n\nclass PermissionDescriptor(BaseModel):\n    name: PermissionName = Field(...)\n\nclass PhotoCapabilities(BaseModel):\n    fillLightMode: Optional[List[List[FillLightMode]]] = None\n    imageHeight: Optional[MediaSettingsRange] = None\n    imageWidth: Optional[MediaSettingsRange] = None\n    redEyeReduction: Optional[RedEyeReduction] = None\n\nclass PhotoSettings(BaseModel):\n    fillLightMode: Optional[FillLightMode] = None\n    imageHeight: Optional[float] = None\n    imageWidth: Optional[float] = None\n    redEyeReduction: Optional[bool] = None\n\nclass PictureInPictureEventInit(EventInit):\n    pictureInPictureWindow: PictureInPictureWindow = Field(...)\n\nclass PlaneLayout(BaseModel):\n    offset: float = Field(...)\n    stride: float = Field(...)\n\nclass PointerEventInit(MouseEventInit):\n    altitudeAngle: Optional[float] = None\n    azimuthAngle: Optional[float] = None\n    coalescedEvents: Optional[List[List[PointerEvent]]] = None\n    height: Optional[float] = None\n    isPrimary: Optional[bool] = None\n    pointerId: Optional[float] = None\n    pointerType: Optional[str] = None\n    predictedEvents: Optional[List[List[PointerEvent]]] = None\n    pressure: Optional[float] = None\n    tangentialPressure: Optional[float] = None\n    tiltX: Optional[float] = None\n    tiltY: Optional[float] = None\n    twist: Optional[float] = None\n    width: Optional[float] = None\n\nclass PointerLockOptions(BaseModel):\n    unadjustedMovement: Optional[bool] = None\n\nclass PopStateEventInit(EventInit):\n    state: Optional[any] = None\n\nclass PositionOptions(BaseModel):\n    enableHighAccuracy: Optional[bool] = None\n    maximumAge: Optional[float] = None\n    timeout: Optional[float] = None\n\nclass ProgressEventInit(EventInit):\n    lengthComputable: Optional[bool] = None\n    loaded: Optional[float] = None\n    total: Optional[float] = None\n\nclass PromiseRejectionEventInit(EventInit):\n    promise: Promise<any> = Field(...)\n    reason: Optional[any] = None\n\nclass PropertyDefinition(BaseModel):\n    inherits: bool = Field(...)\n    initialValue: Optional[str] = None\n    name: str = Field(...)\n    syntax: Optional[str] = None\n\nclass PropertyIndexedKeyframes(BaseModel):\n    composite: Optional[Union[CompositeOperationOrAuto, List[CompositeOperationOrAuto]]] = None\n    easing: Optional[Union[str, List[str]]] = None\n    offset: Optional[Union[float, List[Union[(number, null)]]]] = None\n\nclass PublicKeyCredentialCreationOptions(BaseModel):\n    attestation: Optional[AttestationConveyancePreference] = None\n    authenticatorSelection: Optional[AuthenticatorSelectionCriteria] = None\n    challenge: BufferSource = Field(...)\n    excludeCredentials: Optional[List[List[PublicKeyCredentialDescriptor]]] = None\n    extensions: Optional[AuthenticationExtensionsClientInputs] = None\n    pubKeyCredParams: List[List[PublicKeyCredentialParameters]] = Field(...)\n    rp: PublicKeyCredentialRpEntity = Field(...)\n    timeout: Optional[float] = None\n    user: PublicKeyCredentialUserEntity = Field(...)\n\nclass PublicKeyCredentialCreationOptionsJSON(BaseModel):\n    attestation: Optional[str] = None\n    authenticatorSelection: Optional[AuthenticatorSelectionCriteria] = None\n    challenge: Base64URLString = Field(...)\n    excludeCredentials: Optional[List[List[PublicKeyCredentialDescriptorJSON]]] = None\n    extensions: Optional[AuthenticationExtensionsClientInputsJSON] = None\n    hints: Optional[List[List[str]]] = None\n    pubKeyCredParams: List[List[PublicKeyCredentialParameters]] = Field(...)\n    rp: PublicKeyCredentialRpEntity = Field(...)\n    timeout: Optional[float] = None\n    user: PublicKeyCredentialUserEntityJSON = Field(...)\n\nclass PublicKeyCredentialDescriptor(BaseModel):\n    id: BufferSource = Field(...)\n    transports: Optional[List[List[AuthenticatorTransport]]] = None\n    type: PublicKeyCredentialType = Field(...)\n\nclass PublicKeyCredentialDescriptorJSON(BaseModel):\n    id: Base64URLString = Field(...)\n    transports: Optional[List[List[str]]] = None\n    type: str = Field(...)\n\nclass PublicKeyCredentialEntity(BaseModel):\n    name: str = Field(...)\n\nclass PublicKeyCredentialParameters(BaseModel):\n    alg: COSEAlgorithmIdentifier = Field(...)\n    type: PublicKeyCredentialType = Field(...)\n\nclass PublicKeyCredentialRequestOptions(BaseModel):\n    allowCredentials: Optional[List[List[PublicKeyCredentialDescriptor]]] = None\n    challenge: BufferSource = Field(...)\n    extensions: Optional[AuthenticationExtensionsClientInputs] = None\n    rpId: Optional[str] = None\n    timeout: Optional[float] = None\n    userVerification: Optional[UserVerificationRequirement] = None\n\nclass PublicKeyCredentialRequestOptionsJSON(BaseModel):\n    allowCredentials: Optional[List[List[PublicKeyCredentialDescriptorJSON]]] = None\n    challenge: Base64URLString = Field(...)\n    extensions: Optional[AuthenticationExtensionsClientInputsJSON] = None\n    hints: Optional[List[List[str]]] = None\n    rpId: Optional[str] = None\n    timeout: Optional[float] = None\n    userVerification: Optional[str] = None\n\nclass PublicKeyCredentialRpEntity(PublicKeyCredentialEntity):\n    id: Optional[str] = None\n\nclass PublicKeyCredentialUserEntity(PublicKeyCredentialEntity):\n    displayName: str = Field(...)\n    id: BufferSource = Field(...)\n\nclass PublicKeyCredentialUserEntityJSON(BaseModel):\n    displayName: str = Field(...)\n    id: Base64URLString = Field(...)\n    name: str = Field(...)\n\nclass PushSubscriptionJSON(BaseModel):\n    endpoint: Optional[str] = None\n    expirationTime: Optional[Union[EpochTimeStamp, null]] = None\n    keys: Optional[Record<string, string>] = None\n\nclass PushSubscriptionOptionsInit(BaseModel):\n    applicationServerKey: Optional[Union[BufferSource, str, null]] = None\n    userVisibleOnly: Optional[bool] = None\n\nclass QueuingStrategy(BaseModel):\n    highWaterMark: Optional[float] = None\n    size: Optional[QueuingStrategySize<T>] = None\n\nclass QueuingStrategyInit(BaseModel):\n    # Creates a new ByteLengthQueuingStrategy with the provided high water mark.
Note that the provided high water mark will not be validated ahead of time. Instead, if it is negative, NaN, or not a number, the resulting ByteLengthQueuingStrategy will cause the corresponding stream constructor to throw.\n    highWaterMark: float = Field(..., description='Creates a new ByteLengthQueuingStrategy with the provided high water mark.
Note that the provided high water mark will not be validated ahead of time. Instead, if it is negative, NaN, or not a number, the resulting ByteLengthQueuingStrategy will cause the corresponding stream constructor to throw.')\n\nclass RTCAnswerOptions(RTCOfferAnswerOptions):\n    pass\n\nclass RTCCertificateExpiration(BaseModel):\n    expires: Optional[float] = None\n\nclass RTCConfiguration(BaseModel):\n    bundlePolicy: Optional[RTCBundlePolicy] = None\n    certificates: Optional[List[List[RTCCertificate]]] = None\n    iceCandidatePoolSize: Optional[float] = None\n    iceServers: Optional[List[List[RTCIceServer]]] = None\n    iceTransportPolicy: Optional[RTCIceTransportPolicy] = None\n    rtcpMuxPolicy: Optional[RTCRtcpMuxPolicy] = None\n\nclass RTCDTMFToneChangeEventInit(EventInit):\n    tone: Optional[str] = None\n\nclass RTCDataChannelEventInit(EventInit):\n    channel: RTCDataChannel = Field(...)\n\nclass RTCDataChannelInit(BaseModel):\n    id: Optional[float] = None\n    maxPacketLifeTime: Optional[float] = None\n    maxRetransmits: Optional[float] = None\n    negotiated: Optional[bool] = None\n    ordered: Optional[bool] = None\n    protocol: Optional[str] = None\n\nclass RTCDtlsFingerprint(BaseModel):\n    algorithm: Optional[str] = None\n    value: Optional[str] = None\n\nclass RTCEncodedAudioFrameMetadata(RTCEncodedFrameMetadata):\n    sequenceNumber: Optional[float] = None\n\nclass RTCEncodedFrameMetadata(BaseModel):\n    contributingSources: Optional[List[List[float]]] = None\n    mimeType: Optional[str] = None\n    payloadType: Optional[float] = None\n    rtpTimestamp: Optional[float] = None\n    synchronizationSource: Optional[float] = None\n\nclass RTCEncodedVideoFrameMetadata(RTCEncodedFrameMetadata):\n    dependencies: Optional[List[List[float]]] = None\n    frameId: Optional[float] = None\n    height: Optional[float] = None\n    spatialIndex: Optional[float] = None\n    temporalIndex: Optional[float] = None\n    timestamp: Optional[float] = None\n    width: Optional[float] = None\n\nclass RTCErrorEventInit(EventInit):\n    error: RTCError = Field(...)\n\nclass RTCErrorInit(BaseModel):\n    errorDetail: RTCErrorDetailType = Field(...)\n    httpRequestStatusCode: Optional[float] = None\n    receivedAlert: Optional[float] = None\n    sctpCauseCode: Optional[float] = None\n    sdpLineNumber: Optional[float] = None\n    sentAlert: Optional[float] = None\n\nclass RTCIceCandidateInit(BaseModel):\n    candidate: Optional[str] = None\n    sdpMLineIndex: Optional[Union[float, null]] = None\n    sdpMid: Optional[Union[str, null]] = None\n    usernameFragment: Optional[Union[str, null]] = None\n\nclass RTCIceCandidatePairStats(RTCStats):\n    availableIncomingBitrate: Optional[float] = None\n    availableOutgoingBitrate: Optional[float] = None\n    bytesDiscardedOnSend: Optional[float] = None\n    bytesReceived: Optional[float] = None\n    bytesSent: Optional[float] = None\n    consentRequestsSent: Optional[float] = None\n    currentRoundTripTime: Optional[float] = None\n    lastPacketReceivedTimestamp: Optional[DOMHighResTimeStamp] = None\n    lastPacketSentTimestamp: Optional[DOMHighResTimeStamp] = None\n    localCandidateId: str = Field(...)\n    nominated: Optional[bool] = None\n    packetsDiscardedOnSend: Optional[float] = None\n    packetsReceived: Optional[float] = None\n    packetsSent: Optional[float] = None\n    remoteCandidateId: str = Field(...)\n    requestsReceived: Optional[float] = None\n    requestsSent: Optional[float] = None\n    responsesReceived: Optional[float] = None\n    responsesSent: Optional[float] = None\n    state: RTCStatsIceCandidatePairState = Field(...)\n    totalRoundTripTime: Optional[float] = None\n    transportId: str = Field(...)\n\nclass RTCIceServer(BaseModel):\n    credential: Optional[str] = None\n    urls: Union[str, List[str]] = Field(...)\n    username: Optional[str] = None\n\nclass RTCInboundRtpStreamStats(RTCReceivedRtpStreamStats):\n    audioLevel: Optional[float] = None\n    bytesReceived: Optional[float] = None\n    concealedSamples: Optional[float] = None\n    concealmentEvents: Optional[float] = None\n    decoderImplementation: Optional[str] = None\n    estimatedPlayoutTimestamp: Optional[DOMHighResTimeStamp] = None\n    fecBytesReceived: Optional[float] = None\n    fecPacketsDiscarded: Optional[float] = None\n    fecPacketsReceived: Optional[float] = None\n    fecSsrc: Optional[float] = None\n    firCount: Optional[float] = None\n    frameHeight: Optional[float] = None\n    frameWidth: Optional[float] = None\n    framesAssembledFromMultiplePackets: Optional[float] = None\n    framesDecoded: Optional[float] = None\n    framesDropped: Optional[float] = None\n    framesPerSecond: Optional[float] = None\n    framesReceived: Optional[float] = None\n    framesRendered: Optional[float] = None\n    freezeCount: Optional[float] = None\n    headerBytesReceived: Optional[float] = None\n    insertedSamplesForDeceleration: Optional[float] = None\n    jitterBufferDelay: Optional[float] = None\n    jitterBufferEmittedCount: Optional[float] = None\n    jitterBufferMinimumDelay: Optional[float] = None\n    jitterBufferTargetDelay: Optional[float] = None\n    keyFramesDecoded: Optional[float] = None\n    lastPacketReceivedTimestamp: Optional[DOMHighResTimeStamp] = None\n    mid: Optional[str] = None\n    nackCount: Optional[float] = None\n    packetsDiscarded: Optional[float] = None\n    pauseCount: Optional[float] = None\n    playoutId: Optional[str] = None\n    pliCount: Optional[float] = None\n    qpSum: Optional[float] = None\n    remoteId: Optional[str] = None\n    removedSamplesForAcceleration: Optional[float] = None\n    retransmittedBytesReceived: Optional[float] = None\n    retransmittedPacketsReceived: Optional[float] = None\n    rtxSsrc: Optional[float] = None\n    silentConcealedSamples: Optional[float] = None\n    totalAssemblyTime: Optional[float] = None\n    totalAudioEnergy: Optional[float] = None\n    totalDecodeTime: Optional[float] = None\n    totalFreezesDuration: Optional[float] = None\n    totalInterFrameDelay: Optional[float] = None\n    totalPausesDuration: Optional[float] = None\n    totalProcessingDelay: Optional[float] = None\n    totalSamplesDuration: Optional[float] = None\n    totalSamplesReceived: Optional[float] = None\n    totalSquaredInterFrameDelay: Optional[float] = None\n    trackIdentifier: str = Field(...)\n\nclass RTCLocalIceCandidateInit(RTCIceCandidateInit):\n    pass\n\nclass RTCLocalSessionDescriptionInit(BaseModel):\n    sdp: Optional[str] = None\n    type: Optional[RTCSdpType] = None\n\nclass RTCOfferAnswerOptions(BaseModel):\n    pass\n\nclass RTCOfferOptions(RTCOfferAnswerOptions):\n    iceRestart: Optional[bool] = None\n    offerToReceiveAudio: Optional[bool] = None\n    offerToReceiveVideo: Optional[bool] = None\n\nclass RTCOutboundRtpStreamStats(RTCSentRtpStreamStats):\n    active: Optional[bool] = None\n    firCount: Optional[float] = None\n    frameHeight: Optional[float] = None\n    frameWidth: Optional[float] = None\n    framesEncoded: Optional[float] = None\n    framesPerSecond: Optional[float] = None\n    framesSent: Optional[float] = None\n    headerBytesSent: Optional[float] = None\n    hugeFramesSent: Optional[float] = None\n    keyFramesEncoded: Optional[float] = None\n    mediaSourceId: Optional[str] = None\n    mid: Optional[str] = None\n    nackCount: Optional[float] = None\n    pliCount: Optional[float] = None\n    qpSum: Optional[float] = None\n    qualityLimitationDurations: Optional[Record<string, number>] = None\n    qualityLimitationReason: Optional[RTCQualityLimitationReason] = None\n    qualityLimitationResolutionChanges: Optional[float] = None\n    remoteId: Optional[str] = None\n    retransmittedBytesSent: Optional[float] = None\n    retransmittedPacketsSent: Optional[float] = None\n    rid: Optional[str] = None\n    rtxSsrc: Optional[float] = None\n    scalabilityMode: Optional[str] = None\n    targetBitrate: Optional[float] = None\n    totalEncodeTime: Optional[float] = None\n    totalEncodedBytesTarget: Optional[float] = None\n    totalPacketSendDelay: Optional[float] = None\n\nclass RTCPeerConnectionIceErrorEventInit(EventInit):\n    address: Optional[Union[str, null]] = None\n    errorCode: float = Field(...)\n    errorText: Optional[str] = None\n    port: Optional[Union[float, null]] = None\n    url: Optional[str] = None\n\nclass RTCPeerConnectionIceEventInit(EventInit):\n    candidate: Optional[Union[RTCIceCandidate, null]] = None\n\nclass RTCReceivedRtpStreamStats(RTCRtpStreamStats):\n    jitter: Optional[float] = None\n    packetsLost: Optional[float] = None\n    packetsReceived: Optional[float] = None\n\nclass RTCRtcpParameters(BaseModel):\n    cname: Optional[str] = None\n    reducedSize: Optional[bool] = None\n\nclass RTCRtpCapabilities(BaseModel):\n    codecs: List[List[RTCRtpCodec]] = Field(...)\n    headerExtensions: List[List[RTCRtpHeaderExtensionCapability]] = Field(...)\n\nclass RTCRtpCodec(BaseModel):\n    channels: Optional[float] = None\n    clockRate: float = Field(...)\n    mimeType: str = Field(...)\n    sdpFmtpLine: Optional[str] = None\n\nclass RTCRtpCodecParameters(RTCRtpCodec):\n    payloadType: float = Field(...)\n\nclass RTCRtpCodingParameters(BaseModel):\n    rid: Optional[str] = None\n\nclass RTCRtpContributingSource(BaseModel):\n    audioLevel: Optional[float] = None\n    rtpTimestamp: float = Field(...)\n    source: float = Field(...)\n    timestamp: DOMHighResTimeStamp = Field(...)\n\nclass RTCRtpEncodingParameters(RTCRtpCodingParameters):\n    active: Optional[bool] = None\n    maxBitrate: Optional[float] = None\n    maxFramerate: Optional[float] = None\n    networkPriority: Optional[RTCPriorityType] = None\n    priority: Optional[RTCPriorityType] = None\n    scaleResolutionDownBy: Optional[float] = None\n\nclass RTCRtpHeaderExtensionCapability(BaseModel):\n    uri: str = Field(...)\n\nclass RTCRtpHeaderExtensionParameters(BaseModel):\n    encrypted: Optional[bool] = None\n    id: float = Field(...)\n    uri: str = Field(...)\n\nclass RTCRtpParameters(BaseModel):\n    codecs: List[List[RTCRtpCodecParameters]] = Field(...)\n    headerExtensions: List[List[RTCRtpHeaderExtensionParameters]] = Field(...)\n    rtcp: RTCRtcpParameters = Field(...)\n\nclass RTCRtpReceiveParameters(RTCRtpParameters):\n    pass\n\nclass RTCRtpSendParameters(RTCRtpParameters):\n    degradationPreference: Optional[RTCDegradationPreference] = None\n    encodings: List[List[RTCRtpEncodingParameters]] = Field(...)\n    transactionId: str = Field(...)\n\nclass RTCRtpStreamStats(RTCStats):\n    codecId: Optional[str] = None\n    kind: str = Field(...)\n    ssrc: float = Field(...)\n    transportId: Optional[str] = None\n\nclass RTCRtpSynchronizationSource(RTCRtpContributingSource):\n    pass\n\nclass RTCRtpTransceiverInit(BaseModel):\n    direction: Optional[RTCRtpTransceiverDirection] = None\n    sendEncodings: Optional[List[List[RTCRtpEncodingParameters]]] = None\n    streams: Optional[List[List[MediaStream]]] = None\n\nclass RTCSentRtpStreamStats(RTCRtpStreamStats):\n    bytesSent: Optional[float] = None\n    packetsSent: Optional[float] = None\n\nclass RTCSessionDescriptionInit(BaseModel):\n    sdp: Optional[str] = None\n    type: RTCSdpType = Field(...)\n\nclass RTCSetParameterOptions(BaseModel):\n    pass\n\nclass RTCStats(BaseModel):\n    id: str = Field(...)\n    timestamp: DOMHighResTimeStamp = Field(...)\n    type: RTCStatsType = Field(...)\n\nclass RTCTrackEventInit(EventInit):\n    receiver: RTCRtpReceiver = Field(...)\n    streams: Optional[List[List[MediaStream]]] = None\n    track: MediaStreamTrack = Field(...)\n    transceiver: RTCRtpTransceiver = Field(...)\n\nclass RTCTransportStats(RTCStats):\n    bytesReceived: Optional[float] = None\n    bytesSent: Optional[float] = None\n    dtlsCipher: Optional[str] = None\n    dtlsRole: Optional[RTCDtlsRole] = None\n    dtlsState: RTCDtlsTransportState = Field(...)\n    iceLocalUsernameFragment: Optional[str] = None\n    iceRole: Optional[RTCIceRole] = None\n    iceState: Optional[RTCIceTransportState] = None\n    localCertificateId: Optional[str] = None\n    packetsReceived: Optional[float] = None\n    packetsSent: Optional[float] = None\n    remoteCertificateId: Optional[str] = None\n    selectedCandidatePairChanges: Optional[float] = None\n    selectedCandidatePairId: Optional[str] = None\n    srtpCipher: Optional[str] = None\n    tlsVersion: Optional[str] = None\n\nclass ReadableStreamGetReaderOptions(BaseModel):\n    # Creates a ReadableStreamBYOBReader and locks the stream to the new reader.
This call behaves the same way as the no-argument variant, except that it only works on readable byte streams, i.e. streams which were constructed specifically with the ability to handle "bring your own buffer" reading. The returned BYOB reader provides the ability to directly read individual chunks from the stream via its read() method, into developer-supplied buffers, allowing more precise control over allocation.\n    mode: Optional[ReadableStreamReaderMode] = None = Field(..., description='Creates a ReadableStreamBYOBReader and locks the stream to the new reader.
This call behaves the same way as the no-argument variant, except that it only works on readable byte streams, i.e. streams which were constructed specifically with the ability to handle "bring your own buffer" reading. The returned BYOB reader provides the ability to directly read individual chunks from the stream via its read() method, into developer-supplied buffers, allowing more precise control over allocation.')\n\nclass ReadableStreamIteratorOptions(BaseModel):\n    # Asynchronously iterates over the chunks in the stream's internal queue.
Asynchronously iterating over the stream will lock it, preventing any other consumer from acquiring a reader. The lock will be released if the async iterator's return() method is called, e.g. by breaking out of the loop.
By default, calling the async iterator's return() method will also cancel the stream. To prevent this, use the stream's values() method, passing true for the preventCancel option.\n    preventCancel: Optional[bool] = None = Field(..., description='Asynchronously iterates over the chunks in the stream\'s internal queue.
Asynchronously iterating over the stream will lock it, preventing any other consumer from acquiring a reader. The lock will be released if the async iterator\'s return() method is called, e.g. by breaking out of the loop.
By default, calling the async iterator\'s return() method will also cancel the stream. To prevent this, use the stream\'s values() method, passing true for the preventCancel option.')\n\nclass ReadableStreamReadDoneResult(BaseModel):\n    done: true = Field(...)\n    value: Union[T, undefined] = Field(...)\n\nclass ReadableStreamReadValueResult(BaseModel):\n    done: false = Field(...)\n    value: T = Field(...)\n\nclass ReadableWritablePair(BaseModel):\n    readable: ReadableStream<R> = Field(...)\n    # Provides a convenient, chainable way of piping this readable stream through a transform stream (or any other { writable, readable } pair). It simply pipes the stream into the writable side of the supplied pair, and returns the readable side for further use.
Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.\n    writable: WritableStream<W> = Field(..., description='Provides a convenient, chainable way of piping this readable stream through a transform stream (or any other { writable, readable } pair). It simply pipes the stream into the writable side of the supplied pair, and returns the readable side for further use.
Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.')\n\nclass RegistrationOptions(BaseModel):\n    scope: Optional[str] = None\n    type: Optional[WorkerType] = None\n    updateViaCache: Optional[ServiceWorkerUpdateViaCache] = None\n\nclass ReportingObserverOptions(BaseModel):\n    buffered: Optional[bool] = None\n    types: Optional[List[List[str]]] = None\n\nclass RequestInit(BaseModel):\n    # A BodyInit object or null to set request's body.\n    body: Optional[Union[BodyInit, null]] = None = Field(..., description='A BodyInit object or null to set request\'s body.')\n    # A string indicating how the request will interact with the browser's cache to set request's cache.\n    cache: Optional[RequestCache] = None = Field(..., description='A string indicating how the request will interact with the browser\'s cache to set request\'s cache.')\n    # A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request's credentials.\n    credentials: Optional[RequestCredentials] = None = Field(..., description='A string indicating whether credentials will be sent with the request always, never, or only when sent to a same-origin URL. Sets request\'s credentials.')\n    # A Headers object, an object literal, or an array of two-item arrays to set request's headers.\n    headers: Optional[HeadersInit] = None = Field(..., description='A Headers object, an object literal, or an array of two-item arrays to set request\'s headers.')\n    # A cryptographic hash of the resource to be fetched by request. Sets request's integrity.\n    integrity: Optional[str] = None = Field(..., description='A cryptographic hash of the resource to be fetched by request. Sets request\'s integrity.')\n    # A boolean to set request's keepalive.\n    keepalive: Optional[bool] = None = Field(..., description='A boolean to set request\'s keepalive.')\n    # A string to set request's method.\n    method: Optional[str] = None = Field(..., description='A string to set request\'s method.')\n    # A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request's mode.\n    mode: Optional[RequestMode] = None = Field(..., description='A string to indicate whether the request will use CORS, or will be restricted to same-origin URLs. Sets request\'s mode.')\n    priority: Optional[RequestPriority] = None\n    # A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request's redirect.\n    redirect: Optional[RequestRedirect] = None = Field(..., description='A string indicating whether request follows redirects, results in an error upon encountering a redirect, or returns the redirect (in an opaque fashion). Sets request\'s redirect.')\n    # A string whose value is a same-origin URL, "about:client", or the empty string, to set request's referrer.\n    referrer: Optional[str] = None = Field(..., description='A string whose value is a same-origin URL, "about:client", or the empty string, to set request\'s referrer.')\n    # A referrer policy to set request's referrerPolicy.\n    referrerPolicy: Optional[ReferrerPolicy] = None = Field(..., description='A referrer policy to set request\'s referrerPolicy.')\n    # An AbortSignal to set request's signal.\n    signal: Optional[Union[AbortSignal, null]] = None = Field(..., description='An AbortSignal to set request\'s signal.')\n    # Can only be null. Used to disassociate request from any Window.\n    window: Optional[null] = None = Field(..., description='Can only be null. Used to disassociate request from any Window.')\n\nclass ResizeObserverOptions(BaseModel):\n    box: Optional[ResizeObserverBoxOptions] = None\n\nclass ResponseInit(BaseModel):\n    headers: Optional[HeadersInit] = None\n    status: Optional[float] = None\n    statusText: Optional[str] = None\n\nclass RsaHashedImportParams(Algorithm):\n    hash: HashAlgorithmIdentifier = Field(...)\n\nclass RsaHashedKeyAlgorithm(RsaKeyAlgorithm):\n    hash: KeyAlgorithm = Field(...)\n\nclass RsaHashedKeyGenParams(RsaKeyGenParams):\n    hash: HashAlgorithmIdentifier = Field(...)\n\nclass RsaKeyAlgorithm(KeyAlgorithm):\n    modulusLength: float = Field(...)\n    publicExponent: BigInteger = Field(...)\n\nclass RsaKeyGenParams(Algorithm):\n    modulusLength: float = Field(...)\n    publicExponent: BigInteger = Field(...)\n\nclass RsaOaepParams(Algorithm):\n    label: Optional[BufferSource] = None\n\nclass RsaOtherPrimesInfo(BaseModel):\n    d: Optional[str] = None\n    r: Optional[str] = None\n    t: Optional[str] = None\n\nclass RsaPssParams(Algorithm):\n    saltLength: float = Field(...)\n\nclass SVGBoundingBoxOptions(BaseModel):\n    clipped: Optional[bool] = None\n    fill: Optional[bool] = None\n    markers: Optional[bool] = None\n    stroke: Optional[bool] = None\n\nclass ScrollIntoViewOptions(ScrollOptions):\n    block: Optional[ScrollLogicalPosition] = None\n    inline: Optional[ScrollLogicalPosition] = None\n\nclass ScrollOptions(BaseModel):\n    behavior: Optional[ScrollBehavior] = None\n\nclass ScrollToOptions(ScrollOptions):\n    left: Optional[float] = None\n    top: Optional[float] = None\n\nclass SecurityPolicyViolationEventInit(EventInit):\n    blockedURI: Optional[str] = None\n    columnNumber: Optional[float] = None\n    disposition: Optional[SecurityPolicyViolationEventDisposition] = None\n    documentURI: Optional[str] = None\n    effectiveDirective: Optional[str] = None\n    lineNumber: Optional[float] = None\n    originalPolicy: Optional[str] = None\n    referrer: Optional[str] = None\n    sample: Optional[str] = None\n    sourceFile: Optional[str] = None\n    statusCode: Optional[float] = None\n    violatedDirective: Optional[str] = None\n\nclass ShadowRootInit(BaseModel):\n    clonable: Optional[bool] = None\n    customElementRegistry: Optional[CustomElementRegistry] = None\n    delegatesFocus: Optional[bool] = None\n    mode: ShadowRootMode = Field(...)\n    serializable: Optional[bool] = None\n    slotAssignment: Optional[SlotAssignmentMode] = None\n\nclass ShareData(BaseModel):\n    files: Optional[List[List[File]]] = None\n    text: Optional[str] = None\n    title: Optional[str] = None\n    url: Optional[str] = None\n\nclass SpeechSynthesisErrorEventInit(SpeechSynthesisEventInit):\n    error: SpeechSynthesisErrorCode = Field(...)\n\nclass SpeechSynthesisEventInit(EventInit):\n    charIndex: Optional[float] = None\n    charLength: Optional[float] = None\n    elapsedTime: Optional[float] = None\n    name: Optional[str] = None\n    utterance: SpeechSynthesisUtterance = Field(...)\n\nclass StartViewTransitionOptions(BaseModel):\n    types: Optional[Union[List[str], null]] = None\n    update: Optional[Union[ViewTransitionUpdateCallback, null]] = None\n\nclass StaticRangeInit(BaseModel):\n    endContainer: Node = Field(...)\n    endOffset: float = Field(...)\n    startContainer: Node = Field(...)\n    startOffset: float = Field(...)\n\nclass StereoPannerOptions(AudioNodeOptions):\n    pan: Optional[float] = None\n\nclass StorageEstimate(BaseModel):\n    quota: Optional[float] = None\n    usage: Optional[float] = None\n\nclass StorageEventInit(EventInit):\n    key: Optional[Union[str, null]] = None\n    newValue: Optional[Union[str, null]] = None\n    oldValue: Optional[Union[str, null]] = None\n    storageArea: Optional[Union[Storage, null]] = None\n    url: Optional[str] = None\n\nclass StreamPipeOptions(BaseModel):\n    preventAbort: Optional[bool] = None\n    preventCancel: Optional[bool] = None\n    # Pipes this readable stream to a given writable stream destination. The way in which the piping process behaves under various error conditions can be customized with a number of passed options. It returns a promise that fulfills when the piping process completes successfully, or rejects if any errors were encountered.
Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.
Errors and closures of the source and destination streams propagate as follows:
An error in this source readable stream will abort destination, unless preventAbort is truthy. The returned promise will be rejected with the source's error, or with any error that occurs during aborting the destination.
An error in destination will cancel this source readable stream, unless preventCancel is truthy. The returned promise will be rejected with the destination's error, or with any error that occurs during canceling the source.
When this source readable stream closes, destination will be closed, unless preventClose is truthy. The returned promise will be fulfilled once this process completes, unless an error is encountered while closing the destination, in which case it will be rejected with that error.
If destination starts out closed or closing, this source readable stream will be canceled, unless preventCancel is true. The returned promise will be rejected with an error indicating piping to a closed stream failed, or with any error that occurs during canceling the source.
The signal option can be set to an AbortSignal to allow aborting an ongoing pipe operation via the corresponding AbortController. In this case, this source readable stream will be canceled, and destination aborted, unless the respective options preventCancel or preventAbort are set.\n    preventClose: Optional[bool] = None = Field(..., description='Pipes this readable stream to a given writable stream destination. The way in which the piping process behaves under various error conditions can be customized with a number of passed options. It returns a promise that fulfills when the piping process completes successfully, or rejects if any errors were encountered.
Piping a stream will lock it for the duration of the pipe, preventing any other consumer from acquiring a reader.
Errors and closures of the source and destination streams propagate as follows:
An error in this source readable stream will abort destination, unless preventAbort is truthy. The returned promise will be rejected with the source\'s error, or with any error that occurs during aborting the destination.
An error in destination will cancel this source readable stream, unless preventCancel is truthy. The returned promise will be rejected with the destination\'s error, or with any error that occurs during canceling the source.
When this source readable stream closes, destination will be closed, unless preventClose is truthy. The returned promise will be fulfilled once this process completes, unless an error is encountered while closing the destination, in which case it will be rejected with that error.
If destination starts out closed or closing, this source readable stream will be canceled, unless preventCancel is true. The returned promise will be rejected with an error indicating piping to a closed stream failed, or with any error that occurs during canceling the source.
The signal option can be set to an AbortSignal to allow aborting an ongoing pipe operation via the corresponding AbortController. In this case, this source readable stream will be canceled, and destination aborted, unless the respective options preventCancel or preventAbort are set.')\n    signal: Optional[AbortSignal] = None\n\nclass StructuredSerializeOptions(BaseModel):\n    transfer: Optional[List[List[Transferable]]] = None\n\nclass SubmitEventInit(EventInit):\n    submitter: Optional[Union[HTMLElement, null]] = None\n\nclass TextDecodeOptions(BaseModel):\n    stream: Optional[bool] = None\n\nclass TextDecoderOptions(BaseModel):\n    fatal: Optional[bool] = None\n    ignoreBOM: Optional[bool] = None\n\nclass TextEncoderEncodeIntoResult(BaseModel):\n    read: float = Field(...)\n    written: float = Field(...)\n\nclass ToggleEventInit(EventInit):\n    newState: Optional[str] = None\n    oldState: Optional[str] = None\n\nclass TouchEventInit(EventModifierInit):\n    changedTouches: Optional[List[List[Touch]]] = None\n    targetTouches: Optional[List[List[Touch]]] = None\n    touches: Optional[List[List[Touch]]] = None\n\nclass TouchInit(BaseModel):\n    altitudeAngle: Optional[float] = None\n    azimuthAngle: Optional[float] = None\n    clientX: Optional[float] = None\n    clientY: Optional[float] = None\n    force: Optional[float] = None\n    identifier: float = Field(...)\n    pageX: Optional[float] = None\n    pageY: Optional[float] = None\n    radiusX: Optional[float] = None\n    radiusY: Optional[float] = None\n    rotationAngle: Optional[float] = None\n    screenX: Optional[float] = None\n    screenY: Optional[float] = None\n    target: EventTarget = Field(...)\n    touchType: Optional[TouchType] = None\n\nclass TrackEventInit(EventInit):\n    track: Optional[Union[TextTrack, null]] = None\n\nclass Transformer(BaseModel):\n    flush: Optional[TransformerFlushCallback<O>] = None\n    readableType: Optional[undefined] = None\n    start: Optional[TransformerStartCallback<O>] = None\n    transform: Optional[TransformerTransformCallback<I, O>] = None\n    writableType: Optional[undefined] = None\n\nclass TransitionEventInit(EventInit):\n    elapsedTime: Optional[float] = None\n    propertyName: Optional[str] = None\n    pseudoElement: Optional[str] = None\n\nclass UIEventInit(EventInit):\n    detail: Optional[float] = None\n    view: Optional[Union[Window, null]] = None\n    # @deprecated\n    which: Optional[float] = None = Field(..., description='@deprecated')\n\nclass ULongRange(BaseModel):\n    max: Optional[float] = None\n    min: Optional[float] = None\n\nclass UnderlyingByteSource(BaseModel):\n    autoAllocateChunkSize: Optional[float] = None\n    cancel: Optional[UnderlyingSourceCancelCallback] = None\n    pull: Optional[Union[(controller: ReadableByteStreamController) => void, PromiseLike<void>]] = None\n    start: Optional[(controller: ReadableByteStreamController) => any] = None\n    type: "bytes" = Field(...)\n\nclass UnderlyingDefaultSource(BaseModel):\n    cancel: Optional[UnderlyingSourceCancelCallback] = None\n    pull: Optional[Union[(controller: ReadableStreamDefaultController<R>) => void, PromiseLike<void>]] = None\n    start: Optional[(controller: ReadableStreamDefaultController<R>) => any] = None\n    type: Optional[undefined] = None\n\nclass UnderlyingSink(BaseModel):\n    abort: Optional[UnderlyingSinkAbortCallback] = None\n    close: Optional[UnderlyingSinkCloseCallback] = None\n    start: Optional[UnderlyingSinkStartCallback] = None\n    type: Optional[undefined] = None\n    write: Optional[UnderlyingSinkWriteCallback<W>] = None\n\nclass UnderlyingSource(BaseModel):\n    autoAllocateChunkSize: Optional[float] = None\n    cancel: Optional[UnderlyingSourceCancelCallback] = None\n    pull: Optional[UnderlyingSourcePullCallback<R>] = None\n    start: Optional[UnderlyingSourceStartCallback<R>] = None\n    type: Optional[ReadableStreamType] = None\n\nclass ValidityStateFlags(BaseModel):\n    badInput: Optional[bool] = None\n    customError: Optional[bool] = None\n    patternMismatch: Optional[bool] = None\n    rangeOverflow: Optional[bool] = None\n    rangeUnderflow: Optional[bool] = None\n    stepMismatch: Optional[bool] = None\n    tooLong: Optional[bool] = None\n    tooShort: Optional[bool] = None\n    typeMismatch: Optional[bool] = None\n    valueMissing: Optional[bool] = None\n\nclass VideoColorSpaceInit(BaseModel):\n    fullRange: Optional[Union[bool, null]] = None\n    matrix: Optional[Union[VideoMatrixCoefficients, null]] = None\n    primaries: Optional[Union[VideoColorPrimaries, null]] = None\n    transfer: Optional[Union[VideoTransferCharacteristics, null]] = None\n\nclass VideoConfiguration(BaseModel):\n    bitrate: float = Field(...)\n    colorGamut: Optional[ColorGamut] = None\n    contentType: str = Field(...)\n    framerate: float = Field(...)\n    hasAlphaChannel: Optional[bool] = None\n    hdrMetadataType: Optional[HdrMetadataType] = None\n    height: float = Field(...)\n    scalabilityMode: Optional[str] = None\n    transferFunction: Optional[TransferFunction] = None\n    width: float = Field(...)\n\nclass VideoDecoderConfig(BaseModel):\n    codec: str = Field(...)\n    codedHeight: Optional[float] = None\n    codedWidth: Optional[float] = None\n    colorSpace: Optional[VideoColorSpaceInit] = None\n    description: Optional[AllowSharedBufferSource] = None\n    displayAspectHeight: Optional[float] = None\n    displayAspectWidth: Optional[float] = None\n    hardwareAcceleration: Optional[HardwareAcceleration] = None\n    optimizeForLatency: Optional[bool] = None\n\nclass VideoDecoderInit(BaseModel):\n    error: WebCodecsErrorCallback = Field(...)\n    output: VideoFrameOutputCallback = Field(...)\n\nclass VideoDecoderSupport(BaseModel):\n    config: Optional[VideoDecoderConfig] = None\n    supported: Optional[bool] = None\n\nclass VideoEncoderConfig(BaseModel):\n    alpha: Optional[AlphaOption] = None\n    avc: Optional[AvcEncoderConfig] = None\n    bitrate: Optional[float] = None\n    bitrateMode: Optional[VideoEncoderBitrateMode] = None\n    codec: str = Field(...)\n    contentHint: Optional[str] = None\n    displayHeight: Optional[float] = None\n    displayWidth: Optional[float] = None\n    framerate: Optional[float] = None\n    hardwareAcceleration: Optional[HardwareAcceleration] = None\n    height: float = Field(...)\n    latencyMode: Optional[LatencyMode] = None\n    scalabilityMode: Optional[str] = None\n    width: float = Field(...)\n\nclass VideoEncoderEncodeOptions(BaseModel):\n    avc: Optional[VideoEncoderEncodeOptionsForAvc] = None\n    keyFrame: Optional[bool] = None\n\nclass VideoEncoderEncodeOptionsForAvc(BaseModel):\n    quantizer: Optional[Union[float, null]] = None\n\nclass VideoEncoderInit(BaseModel):\n    error: WebCodecsErrorCallback = Field(...)\n    output: EncodedVideoChunkOutputCallback = Field(...)\n\nclass VideoEncoderSupport(BaseModel):\n    config: Optional[VideoEncoderConfig] = None\n    supported: Optional[bool] = None\n\nclass VideoFrameBufferInit(BaseModel):\n    codedHeight: float = Field(...)\n    codedWidth: float = Field(...)\n    colorSpace: Optional[VideoColorSpaceInit] = None\n    displayHeight: Optional[float] = None\n    displayWidth: Optional[float] = None\n    duration: Optional[float] = None\n    format: VideoPixelFormat = Field(...)\n    layout: Optional[List[List[PlaneLayout]]] = None\n    timestamp: float = Field(...)\n    visibleRect: Optional[DOMRectInit] = None\n\nclass VideoFrameCallbackMetadata(BaseModel):\n    captureTime: Optional[DOMHighResTimeStamp] = None\n    expectedDisplayTime: DOMHighResTimeStamp = Field(...)\n    height: float = Field(...)\n    mediaTime: float = Field(...)\n    presentationTime: DOMHighResTimeStamp = Field(...)\n    presentedFrames: float = Field(...)\n    processingDuration: Optional[float] = None\n    receiveTime: Optional[DOMHighResTimeStamp] = None\n    rtpTimestamp: Optional[float] = None\n    width: float = Field(...)\n\nclass VideoFrameCopyToOptions(BaseModel):\n    colorSpace: Optional[PredefinedColorSpace] = None\n    format: Optional[VideoPixelFormat] = None\n    layout: Optional[List[List[PlaneLayout]]] = None\n    rect: Optional[DOMRectInit] = None\n\nclass VideoFrameInit(BaseModel):\n    alpha: Optional[AlphaOption] = None\n    displayHeight: Optional[float] = None\n    displayWidth: Optional[float] = None\n    duration: Optional[float] = None\n    timestamp: Optional[float] = None\n    visibleRect: Optional[DOMRectInit] = None\n\nclass WaveShaperOptions(AudioNodeOptions):\n    curve: Optional[Union[List[float], Float32Array]] = None\n    oversample: Optional[OverSampleType] = None\n\nclass WebGLContextAttributes(BaseModel):\n    alpha: Optional[bool] = None\n    antialias: Optional[bool] = None\n    depth: Optional[bool] = None\n    desynchronized: Optional[bool] = None\n    failIfMajorPerformanceCaveat: Optional[bool] = None\n    powerPreference: Optional[WebGLPowerPreference] = None\n    premultipliedAlpha: Optional[bool] = None\n    preserveDrawingBuffer: Optional[bool] = None\n    stencil: Optional[bool] = None\n\nclass WebGLContextEventInit(EventInit):\n    statusMessage: Optional[str] = None\n\nclass WebTransportCloseInfo(BaseModel):\n    closeCode: Optional[float] = None\n    reason: Optional[str] = None\n\nclass WebTransportErrorOptions(BaseModel):\n    source: Optional[WebTransportErrorSource] = None\n    streamErrorCode: Optional[Union[float, null]] = None\n\nclass WebTransportHash(BaseModel):\n    algorithm: Optional[str] = None\n    value: Optional[BufferSource] = None\n\nclass WebTransportOptions(BaseModel):\n    allowPooling: Optional[bool] = None\n    congestionControl: Optional[WebTransportCongestionControl] = None\n    requireUnreliable: Optional[bool] = None\n    serverCertificateHashes: Optional[List[List[WebTransportHash]]] = None\n\nclass WebTransportSendOptions(BaseModel):\n    sendOrder: Optional[float] = None\n\nclass WebTransportSendStreamOptions(WebTransportSendOptions):\n    pass\n\nclass WheelEventInit(MouseEventInit):\n    deltaMode: Optional[float] = None\n    deltaX: Optional[float] = None\n    deltaY: Optional[float] = None\n    deltaZ: Optional[float] = None\n\nclass WindowPostMessageOptions(StructuredSerializeOptions):\n    targetOrigin: Optional[str] = None\n\nclass WorkerOptions(BaseModel):\n    credentials: Optional[RequestCredentials] = None\n    name: Optional[str] = None\n    type: Optional[WorkerType] = None\n\nclass WorkletOptions(BaseModel):\n    credentials: Optional[RequestCredentials] = None\n\nclass WriteParams(BaseModel):\n    data: Optional[Union[BufferSource, Blob, str, null]] = None\n    position: Optional[Union[float, null]] = None\n    size: Optional[Union[float, null]] = None\n    type: WriteCommandType = Field(...)\n\n# The **`ANGLE_instanced_arrays`** extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays)\nclass ANGLE_instanced_arrays(BaseModel):\n    VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 0x88FE = Field(...)\n\nclass ARIAMixin(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaActiveDescendantElement)\n    ariaActiveDescendantElement: Union[Element, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaActiveDescendantElement)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaAtomic)\n    ariaAtomic: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaAtomic)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaAutoComplete)\n    ariaAutoComplete: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaAutoComplete)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaBrailleLabel)\n    ariaBrailleLabel: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaBrailleLabel)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaBrailleRoleDescription)\n    ariaBrailleRoleDescription: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaBrailleRoleDescription)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaBusy)\n    ariaBusy: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaBusy)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaChecked)\n    ariaChecked: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaChecked)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColCount)\n    ariaColCount: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColCount)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColIndex)\n    ariaColIndex: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColIndex)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColIndexText)\n    ariaColIndexText: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColIndexText)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColSpan)\n    ariaColSpan: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColSpan)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaControlsElements)\n    ariaControlsElements: Union[ReadonlyArray<Element>, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaControlsElements)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaCurrent)\n    ariaCurrent: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaCurrent)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaDescribedByElements)\n    ariaDescribedByElements: Union[ReadonlyArray<Element>, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaDescribedByElements)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaDescription)\n    ariaDescription: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaDescription)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaDetailsElements)\n    ariaDetailsElements: Union[ReadonlyArray<Element>, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaDetailsElements)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaDisabled)\n    ariaDisabled: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaDisabled)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaErrorMessageElements)\n    ariaErrorMessageElements: Union[ReadonlyArray<Element>, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaErrorMessageElements)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaExpanded)\n    ariaExpanded: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaExpanded)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaFlowToElements)\n    ariaFlowToElements: Union[ReadonlyArray<Element>, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaFlowToElements)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaHasPopup)\n    ariaHasPopup: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaHasPopup)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaHidden)\n    ariaHidden: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaHidden)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaInvalid)\n    ariaInvalid: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaInvalid)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaKeyShortcuts)\n    ariaKeyShortcuts: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaKeyShortcuts)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLabel)\n    ariaLabel: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLabel)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLabelledByElements)\n    ariaLabelledByElements: Union[ReadonlyArray<Element>, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLabelledByElements)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLevel)\n    ariaLevel: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLevel)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLive)\n    ariaLive: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLive)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaModal)\n    ariaModal: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaModal)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaMultiLine)\n    ariaMultiLine: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaMultiLine)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaMultiSelectable)\n    ariaMultiSelectable: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaMultiSelectable)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaOrientation)\n    ariaOrientation: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaOrientation)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaOwnsElements)\n    ariaOwnsElements: Union[ReadonlyArray<Element>, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaOwnsElements)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPlaceholder)\n    ariaPlaceholder: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPlaceholder)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPosInSet)\n    ariaPosInSet: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPosInSet)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPressed)\n    ariaPressed: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPressed)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaReadOnly)\n    ariaReadOnly: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaReadOnly)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRelevant)\n    ariaRelevant: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRelevant)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRequired)\n    ariaRequired: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRequired)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRoleDescription)\n    ariaRoleDescription: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRoleDescription)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowCount)\n    ariaRowCount: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowCount)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowIndex)\n    ariaRowIndex: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowIndex)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowIndexText)\n    ariaRowIndexText: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowIndexText)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowSpan)\n    ariaRowSpan: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowSpan)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSelected)\n    ariaSelected: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSelected)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSetSize)\n    ariaSetSize: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSetSize)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSort)\n    ariaSort: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSort)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueMax)\n    ariaValueMax: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueMax)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueMin)\n    ariaValueMin: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueMin)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueNow)\n    ariaValueNow: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueNow)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueText)\n    ariaValueText: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueText)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/role)\n    role: Union[str, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/role)')\n\n# The **`AbortController`** interface represents a controller object that allows you to abort one or more Web requests as and when desired.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortController)\nclass AbortController(BaseModel):\n    # The **`signal`** read-only property of the AbortController interface returns an AbortSignal object instance, which can be used to communicate with/abort an asynchronous operation as desired.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortController/signal)\n    signal: AbortSignal = Field(..., description='The **`signal`** read-only property of the AbortController interface returns an AbortSignal object instance, which can be used to communicate with/abort an asynchronous operation as desired.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortController/signal)')\n\nclass AbortSignalEventMap(BaseModel):\n    abort: Event = Field(...)\n\n# The **`AbortSignal`** interface represents a signal object that allows you to communicate with an asynchronous operation (such as a fetch request) and abort it if required via an AbortController object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal)\nclass AbortSignal(EventTarget):\n    # The **`aborted`** read-only property returns a value that indicates whether the asynchronous operations the signal is communicating with are aborted (`true`) or not (`false`).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/aborted)\n    aborted: bool = Field(..., description='The **`aborted`** read-only property returns a value that indicates whether the asynchronous operations the signal is communicating with are aborted (`true`) or not (`false`).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/aborted)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_event)\n    onabort: Union[((this: AbortSignal, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_event)')\n    # The **`reason`** read-only property returns a JavaScript value that indicates the abort reason.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/reason)\n    reason: any = Field(..., description='The **`reason`** read-only property returns a JavaScript value that indicates the abort reason.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/reason)')\n\n# The **`AbstractRange`** abstract interface is the base class upon which all DOM range types are defined.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange)\nclass AbstractRange(BaseModel):\n    # The read-only **`collapsed`** property of the AbstractRange interface returns `true` if the range's start position and end position are the same.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/collapsed)\n    collapsed: bool = Field(..., description='The read-only **`collapsed`** property of the AbstractRange interface returns `true` if the range\'s start position and end position are the same.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/collapsed)')\n    # The read-only **`endContainer`** property of the AbstractRange interface returns the Node in which the end of the range is located.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/endContainer)\n    endContainer: Node = Field(..., description='The read-only **`endContainer`** property of the AbstractRange interface returns the Node in which the end of the range is located.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/endContainer)')\n    # The **`endOffset`** property of the AbstractRange interface returns the offset into the end node of the range's end position.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/endOffset)\n    endOffset: float = Field(..., description='The **`endOffset`** property of the AbstractRange interface returns the offset into the end node of the range\'s end position.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/endOffset)')\n    # The read-only **`startContainer`** property of the AbstractRange interface returns the start Node for the range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/startContainer)\n    startContainer: Node = Field(..., description='The read-only **`startContainer`** property of the AbstractRange interface returns the start Node for the range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/startContainer)')\n    # The read-only **`startOffset`** property of the AbstractRange interface returns the offset into the start node of the range's start position.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/startOffset)\n    startOffset: float = Field(..., description='The read-only **`startOffset`** property of the AbstractRange interface returns the offset into the start node of the range\'s start position.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/startOffset)')\n\nclass AbstractWorkerEventMap(BaseModel):\n    error: ErrorEvent = Field(...)\n\nclass AbstractWorker(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/error_event)\n    onerror: Union[((this: AbstractWorker, ev: ErrorEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/error_event)')\n\n# The **`AnalyserNode`** interface represents a node able to provide real-time frequency and time-domain analysis information.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode)\nclass AnalyserNode(AudioNode):\n    # The **`fftSize`** property of the AnalyserNode interface is an unsigned long value and represents the window size in samples that is used when performing a Fast Fourier Transform (FFT) to get frequency domain data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/fftSize)\n    fftSize: float = Field(..., description='The **`fftSize`** property of the AnalyserNode interface is an unsigned long value and represents the window size in samples that is used when performing a Fast Fourier Transform (FFT) to get frequency domain data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/fftSize)')\n    # The **`frequencyBinCount`** read-only property of the AnalyserNode interface contains the total number of data points available to AudioContext BaseAudioContext.sampleRate.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/frequencyBinCount)\n    frequencyBinCount: float = Field(..., description='The **`frequencyBinCount`** read-only property of the AnalyserNode interface contains the total number of data points available to AudioContext BaseAudioContext.sampleRate.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/frequencyBinCount)')\n    # The **`maxDecibels`** property of the AnalyserNode interface is a double value representing the maximum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the maximum value for the range of results when using `getByteFrequencyData()`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/maxDecibels)\n    maxDecibels: float = Field(..., description='The **`maxDecibels`** property of the AnalyserNode interface is a double value representing the maximum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the maximum value for the range of results when using `getByteFrequencyData()`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/maxDecibels)')\n    # The **`minDecibels`** property of the AnalyserNode interface is a double value representing the minimum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the minimum value for the range of results when using `getByteFrequencyData()`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/minDecibels)\n    minDecibels: float = Field(..., description='The **`minDecibels`** property of the AnalyserNode interface is a double value representing the minimum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the minimum value for the range of results when using `getByteFrequencyData()`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/minDecibels)')\n    # The **`smoothingTimeConstant`** property of the AnalyserNode interface is a double value representing the averaging constant with the last analysis frame.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/smoothingTimeConstant)\n    smoothingTimeConstant: float = Field(..., description='The **`smoothingTimeConstant`** property of the AnalyserNode interface is a double value representing the averaging constant with the last analysis frame.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/smoothingTimeConstant)')\n\nclass Animatable(BaseModel):\n    pass\n\nclass AnimationEventMap(BaseModel):\n    cancel: AnimationPlaybackEvent = Field(...)\n    finish: AnimationPlaybackEvent = Field(...)\n    remove: AnimationPlaybackEvent = Field(...)\n\n# The **`Animation`** interface of the Web Animations API represents a single animation player and provides playback controls and a timeline for an animation node or source.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation)\nclass Animation(EventTarget):\n    # The **`Animation.currentTime`** property of the Web Animations API returns and sets the current time value of the animation in milliseconds, whether running or paused.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/currentTime)\n    currentTime: Union[CSSNumberish, null] = Field(..., description='The **`Animation.currentTime`** property of the Web Animations API returns and sets the current time value of the animation in milliseconds, whether running or paused.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/currentTime)')\n    # The **`Animation.effect`** property of the Web Animations API gets and sets the target effect of an animation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/effect)\n    effect: Union[AnimationEffect, null] = Field(..., description='The **`Animation.effect`** property of the Web Animations API gets and sets the target effect of an animation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/effect)')\n    # The **`Animation.finished`** read-only property of the Web Animations API returns a Promise which resolves once the animation has finished playing.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/finished)\n    finished: Promise<Animation> = Field(..., description='The **`Animation.finished`** read-only property of the Web Animations API returns a Promise which resolves once the animation has finished playing.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/finished)')\n    # The **`Animation.id`** property of the Web Animations API returns or sets a string used to identify the animation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/id)\n    id: str = Field(..., description='The **`Animation.id`** property of the Web Animations API returns or sets a string used to identify the animation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/id)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/cancel_event)\n    oncancel: Union[((this: Animation, ev: AnimationPlaybackEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/cancel_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/finish_event)\n    onfinish: Union[((this: Animation, ev: AnimationPlaybackEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/finish_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/remove_event)\n    onremove: Union[((this: Animation, ev: AnimationPlaybackEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/remove_event)')\n    # The read-only **`Animation.pending`** property of the Web Animations API indicates whether the animation is currently waiting for an asynchronous operation such as initiating playback or pausing a running animation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/pending)\n    pending: bool = Field(..., description='The read-only **`Animation.pending`** property of the Web Animations API indicates whether the animation is currently waiting for an asynchronous operation such as initiating playback or pausing a running animation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/pending)')\n    # The read-only **`Animation.playState`** property of the Web Animations API returns an enumerated value describing the playback state of an animation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/playState)\n    playState: AnimationPlayState = Field(..., description='The read-only **`Animation.playState`** property of the Web Animations API returns an enumerated value describing the playback state of an animation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/playState)')\n    # The **`Animation.playbackRate`** property of the Web Animations API returns or sets the playback rate of the animation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/playbackRate)\n    playbackRate: float = Field(..., description='The **`Animation.playbackRate`** property of the Web Animations API returns or sets the playback rate of the animation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/playbackRate)')\n    # The read-only **`Animation.ready`** property of the Web Animations API returns a Promise which resolves when the animation is ready to play.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/ready)\n    ready: Promise<Animation> = Field(..., description='The read-only **`Animation.ready`** property of the Web Animations API returns a Promise which resolves when the animation is ready to play.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/ready)')\n    # The read-only **`Animation.replaceState`** property of the Web Animations API indicates whether the animation has been removed by the browser automatically after being replaced by another animation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/replaceState)\n    replaceState: AnimationReplaceState = Field(..., description='The read-only **`Animation.replaceState`** property of the Web Animations API indicates whether the animation has been removed by the browser automatically after being replaced by another animation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/replaceState)')\n    # The **`Animation.startTime`** property of the Animation interface is a double-precision floating-point value which indicates the scheduled time when an animation's playback should begin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/startTime)\n    startTime: Union[CSSNumberish, null] = Field(..., description='The **`Animation.startTime`** property of the Animation interface is a double-precision floating-point value which indicates the scheduled time when an animation\'s playback should begin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/startTime)')\n    # The **`Animation.timeline`** property of the Animation interface returns or sets the AnimationTimeline associated with this animation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/timeline)\n    timeline: Union[AnimationTimeline, null] = Field(..., description='The **`Animation.timeline`** property of the Animation interface returns or sets the AnimationTimeline associated with this animation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/timeline)')\n\n# The `AnimationEffect` interface of the Web Animations API is an interface representing animation effects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEffect)\nclass AnimationEffect(BaseModel):\n    pass\n\n# The **`AnimationEvent`** interface represents events providing information related to animations.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent)\nclass AnimationEvent(Event):\n    # The **`AnimationEvent.animationName`** read-only property is a string containing the value of the animation-name CSS property associated with the transition.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent/animationName)\n    animationName: str = Field(..., description='The **`AnimationEvent.animationName`** read-only property is a string containing the value of the animation-name CSS property associated with the transition.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent/animationName)')\n    # The **`AnimationEvent.elapsedTime`** read-only property is a `float` giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent/elapsedTime)\n    elapsedTime: float = Field(..., description='The **`AnimationEvent.elapsedTime`** read-only property is a `float` giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent/elapsedTime)')\n    # The **`AnimationEvent.pseudoElement`** read-only property is a string, starting with `'::'`, containing the name of the pseudo-element the animation runs on.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent/pseudoElement)\n    pseudoElement: str = Field(..., description='The **`AnimationEvent.pseudoElement`** read-only property is a string, starting with `\'::\'`, containing the name of the pseudo-element the animation runs on.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent/pseudoElement)')\n\nclass AnimationFrameProvider(BaseModel):\n    pass\n\n# The AnimationPlaybackEvent interface of the Web Animations API represents animation events.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent)\nclass AnimationPlaybackEvent(Event):\n    # The **`currentTime`** read-only property of the AnimationPlaybackEvent interface represents the current time of the animation that generated the event at the moment the event is queued.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent/currentTime)\n    currentTime: Union[CSSNumberish, null] = Field(..., description='The **`currentTime`** read-only property of the AnimationPlaybackEvent interface represents the current time of the animation that generated the event at the moment the event is queued.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent/currentTime)')\n    # The **`timelineTime`** read-only property of the AnimationPlaybackEvent interface represents the time value of the animation's AnimationTimeline at the moment the event is queued.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent/timelineTime)\n    timelineTime: Union[CSSNumberish, null] = Field(..., description='The **`timelineTime`** read-only property of the AnimationPlaybackEvent interface represents the time value of the animation\'s AnimationTimeline at the moment the event is queued.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent/timelineTime)')\n\n# The `AnimationTimeline` interface of the Web Animations API represents the timeline of an animation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationTimeline)\nclass AnimationTimeline(BaseModel):\n    # The **`currentTime`** read-only property of the Web Animations API's AnimationTimeline interface returns the timeline's current time in milliseconds, or `null` if the timeline is inactive.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationTimeline/currentTime)\n    currentTime: Union[CSSNumberish, null] = Field(..., description='The **`currentTime`** read-only property of the Web Animations API\'s AnimationTimeline interface returns the timeline\'s current time in milliseconds, or `null` if the timeline is inactive.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationTimeline/currentTime)')\n\n# The **`Attr`** interface represents one of an element's attributes as an object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr)\nclass Attr(Node):\n    # The read-only **`localName`** property of the Attr interface returns the _local part_ of the _qualified name_ of an attribute, that is the name of the attribute, stripped from any namespace in front of it.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/localName)\n    localName: str = Field(..., description='The read-only **`localName`** property of the Attr interface returns the _local part_ of the _qualified name_ of an attribute, that is the name of the attribute, stripped from any namespace in front of it.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/localName)')\n    # The read-only **`name`** property of the Attr interface returns the _qualified name_ of an attribute, that is the name of the attribute, with the namespace prefix, if any, in front of it.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/name)\n    name: str = Field(..., description='The read-only **`name`** property of the Attr interface returns the _qualified name_ of an attribute, that is the name of the attribute, with the namespace prefix, if any, in front of it.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/name)')\n    # The read-only **`namespaceURI`** property of the Attr interface returns the namespace URI of the attribute, or `null` if the element is not in a namespace.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/namespaceURI)\n    namespaceURI: Union[str, null] = Field(..., description='The read-only **`namespaceURI`** property of the Attr interface returns the namespace URI of the attribute, or `null` if the element is not in a namespace.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/namespaceURI)')\n    ownerDocument: Document = Field(...)\n    # The read-only **`ownerElement`** property of the Attr interface returns the Element the attribute belongs to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/ownerElement)\n    ownerElement: Union[Element, null] = Field(..., description='The read-only **`ownerElement`** property of the Attr interface returns the Element the attribute belongs to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/ownerElement)')\n    # The read-only **`prefix`** property of the Attr returns the namespace prefix of the attribute, or `null` if no prefix is specified.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/prefix)\n    prefix: Union[str, null] = Field(..., description='The read-only **`prefix`** property of the Attr returns the namespace prefix of the attribute, or `null` if no prefix is specified.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/prefix)')\n    # The read-only **`specified`** property of the Attr interface always returns `true`.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/specified)\n    specified: bool = Field(..., description='The read-only **`specified`** property of the Attr interface always returns `true`.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/specified)')\n    # The **`value`** property of the Attr interface contains the value of the attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/value)\n    value: str = Field(..., description='The **`value`** property of the Attr interface contains the value of the attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/value)')\n\n# The **`AudioBuffer`** interface represents a short audio asset residing in memory, created from an audio file using the BaseAudioContext/decodeAudioData method, or from raw data using BaseAudioContext/createBuffer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer)\nclass AudioBuffer(BaseModel):\n    # The **`duration`** property of the AudioBuffer interface returns a double representing the duration, in seconds, of the PCM data stored in the buffer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/duration)\n    duration: float = Field(..., description='The **`duration`** property of the AudioBuffer interface returns a double representing the duration, in seconds, of the PCM data stored in the buffer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/duration)')\n    # The **`length`** property of the AudioBuffer interface returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/length)\n    length: float = Field(..., description='The **`length`** property of the AudioBuffer interface returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/length)')\n    # The `numberOfChannels` property of the AudioBuffer interface returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/numberOfChannels)\n    numberOfChannels: float = Field(..., description='The `numberOfChannels` property of the AudioBuffer interface returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/numberOfChannels)')\n    # The **`sampleRate`** property of the AudioBuffer interface returns a float representing the sample rate, in samples per second, of the PCM data stored in the buffer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/sampleRate)\n    sampleRate: float = Field(..., description='The **`sampleRate`** property of the AudioBuffer interface returns a float representing the sample rate, in samples per second, of the PCM data stored in the buffer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/sampleRate)')\n\n# The **`AudioBufferSourceNode`** interface is an AudioScheduledSourceNode which represents an audio source consisting of in-memory audio data, stored in an AudioBuffer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode)\nclass AudioBufferSourceNode(AudioScheduledSourceNode):\n    # The **`buffer`** property of the AudioBufferSourceNode interface provides the ability to play back audio using an AudioBuffer as the source of the sound data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/buffer)\n    buffer: Union[AudioBuffer, null] = Field(..., description='The **`buffer`** property of the AudioBufferSourceNode interface provides the ability to play back audio using an AudioBuffer as the source of the sound data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/buffer)')\n    # The **`detune`** property of the representing detuning of oscillation in cents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/detune)\n    detune: AudioParam = Field(..., description='The **`detune`** property of the representing detuning of oscillation in cents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/detune)')\n    # The `loop` property of the AudioBufferSourceNode interface is a Boolean indicating if the audio asset must be replayed when the end of the AudioBuffer is reached.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loop)\n    loop: bool = Field(..., description='The `loop` property of the AudioBufferSourceNode interface is a Boolean indicating if the audio asset must be replayed when the end of the AudioBuffer is reached.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loop)')\n    # The `loopEnd` property of the AudioBufferSourceNode interface specifies is a floating point number specifying, in seconds, at what offset into playing the AudioBuffer playback should loop back to the time indicated by the AudioBufferSourceNode.loopStart property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loopEnd)\n    loopEnd: float = Field(..., description='The `loopEnd` property of the AudioBufferSourceNode interface specifies is a floating point number specifying, in seconds, at what offset into playing the AudioBuffer playback should loop back to the time indicated by the AudioBufferSourceNode.loopStart property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loopEnd)')\n    # The **`loopStart`** property of the AudioBufferSourceNode interface is a floating-point value indicating, in seconds, where in the AudioBuffer the restart of the play must happen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loopStart)\n    loopStart: float = Field(..., description='The **`loopStart`** property of the AudioBufferSourceNode interface is a floating-point value indicating, in seconds, where in the AudioBuffer the restart of the play must happen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loopStart)')\n    # The **`playbackRate`** property of the AudioBufferSourceNode interface Is a k-rate AudioParam that defines the speed at which the audio asset will be played.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/playbackRate)\n    playbackRate: AudioParam = Field(..., description='The **`playbackRate`** property of the AudioBufferSourceNode interface Is a k-rate AudioParam that defines the speed at which the audio asset will be played.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/playbackRate)')\n\n# The `AudioContext` interface represents an audio-processing graph built from audio modules linked together, each represented by an AudioNode.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext)\nclass AudioContext(BaseAudioContext):\n    # The **`baseLatency`** read-only property of the seconds of processing latency incurred by the `AudioContext` passing an audio buffer from the AudioDestinationNode — i.e., the end of the audio graph — into the host system's audio subsystem ready for playing.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/baseLatency)\n    baseLatency: float = Field(..., description='The **`baseLatency`** read-only property of the seconds of processing latency incurred by the `AudioContext` passing an audio buffer from the AudioDestinationNode — i.e., the end of the audio graph — into the host system\'s audio subsystem ready for playing.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/baseLatency)')\n    # The **`outputLatency`** read-only property of the AudioContext Interface provides an estimation of the output latency of the current audio context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/outputLatency)\n    outputLatency: float = Field(..., description='The **`outputLatency`** read-only property of the AudioContext Interface provides an estimation of the output latency of the current audio context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/outputLatency)')\n\n# The **`AudioData`** interface of the WebCodecs API represents an audio sample.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData)\nclass AudioData(BaseModel):\n    # The **`duration`** read-only property of the AudioData interface returns the duration in microseconds of this `AudioData` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/duration)\n    duration: float = Field(..., description='The **`duration`** read-only property of the AudioData interface returns the duration in microseconds of this `AudioData` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/duration)')\n    # The **`format`** read-only property of the AudioData interface returns the sample format of the `AudioData` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/format)\n    format: Union[AudioSampleFormat, null] = Field(..., description='The **`format`** read-only property of the AudioData interface returns the sample format of the `AudioData` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/format)')\n    # The **`numberOfChannels`** read-only property of the AudioData interface returns the number of channels in the `AudioData` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/numberOfChannels)\n    numberOfChannels: float = Field(..., description='The **`numberOfChannels`** read-only property of the AudioData interface returns the number of channels in the `AudioData` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/numberOfChannels)')\n    # The **`numberOfFrames`** read-only property of the AudioData interface returns the number of frames in the `AudioData` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/numberOfFrames)\n    numberOfFrames: float = Field(..., description='The **`numberOfFrames`** read-only property of the AudioData interface returns the number of frames in the `AudioData` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/numberOfFrames)')\n    # The **`sampleRate`** read-only property of the AudioData interface returns the sample rate in Hz.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/sampleRate)\n    sampleRate: float = Field(..., description='The **`sampleRate`** read-only property of the AudioData interface returns the sample rate in Hz.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/sampleRate)')\n    # The **`timestamp`** read-only property of the AudioData interface returns the timestamp of this `AudioData` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/timestamp)\n    timestamp: float = Field(..., description='The **`timestamp`** read-only property of the AudioData interface returns the timestamp of this `AudioData` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/timestamp)')\n\nclass AudioDecoderEventMap(BaseModel):\n    dequeue: Event = Field(...)\n\n# The **`AudioDecoder`** interface of the WebCodecs API decodes chunks of audio.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDecoder)\nclass AudioDecoder(EventTarget):\n    # The **`decodeQueueSize`** read-only property of the AudioDecoder interface returns the number of pending decode requests in the queue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDecoder/decodeQueueSize)\n    decodeQueueSize: float = Field(..., description='The **`decodeQueueSize`** read-only property of the AudioDecoder interface returns the number of pending decode requests in the queue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDecoder/decodeQueueSize)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDecoder/dequeue_event)\n    ondequeue: Union[((this: AudioDecoder, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDecoder/dequeue_event)')\n    # The **`state`** read-only property of the AudioDecoder interface returns the current state of the underlying codec.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDecoder/state)\n    state: CodecState = Field(..., description='The **`state`** read-only property of the AudioDecoder interface returns the current state of the underlying codec.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDecoder/state)')\n\n# The `AudioDestinationNode` interface represents the end destination of an audio graph in a given context — usually the speakers of your device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDestinationNode)\nclass AudioDestinationNode(AudioNode):\n    # The `maxChannelCount` property of the AudioDestinationNode interface is an `unsigned long` defining the maximum amount of channels that the physical device can handle.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDestinationNode/maxChannelCount)\n    maxChannelCount: float = Field(..., description='The `maxChannelCount` property of the AudioDestinationNode interface is an `unsigned long` defining the maximum amount of channels that the physical device can handle.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDestinationNode/maxChannelCount)')\n\nclass AudioEncoderEventMap(BaseModel):\n    dequeue: Event = Field(...)\n\n# The **`AudioEncoder`** interface of the WebCodecs API encodes AudioData objects.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioEncoder)\nclass AudioEncoder(EventTarget):\n    # The **`encodeQueueSize`** read-only property of the AudioEncoder interface returns the number of pending encode requests in the queue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioEncoder/encodeQueueSize)\n    encodeQueueSize: float = Field(..., description='The **`encodeQueueSize`** read-only property of the AudioEncoder interface returns the number of pending encode requests in the queue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioEncoder/encodeQueueSize)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioEncoder/dequeue_event)\n    ondequeue: Union[((this: AudioEncoder, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioEncoder/dequeue_event)')\n    # The **`state`** read-only property of the AudioEncoder interface returns the current state of the underlying codec.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioEncoder/state)\n    state: CodecState = Field(..., description='The **`state`** read-only property of the AudioEncoder interface returns the current state of the underlying codec.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioEncoder/state)')\n\n# The `AudioListener` interface represents the position and orientation of the unique person listening to the audio scene, and is used in audio spatialization.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener)\nclass AudioListener(BaseModel):\n    # The `forwardX` read-only property of the AudioListener interface is an AudioParam representing the x value of the direction vector defining the forward direction the listener is pointing in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardX)\n    forwardX: AudioParam = Field(..., description='The `forwardX` read-only property of the AudioListener interface is an AudioParam representing the x value of the direction vector defining the forward direction the listener is pointing in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardX)')\n    # The `forwardY` read-only property of the AudioListener interface is an AudioParam representing the y value of the direction vector defining the forward direction the listener is pointing in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardY)\n    forwardY: AudioParam = Field(..., description='The `forwardY` read-only property of the AudioListener interface is an AudioParam representing the y value of the direction vector defining the forward direction the listener is pointing in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardY)')\n    # The `forwardZ` read-only property of the AudioListener interface is an AudioParam representing the z value of the direction vector defining the forward direction the listener is pointing in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardZ)\n    forwardZ: AudioParam = Field(..., description='The `forwardZ` read-only property of the AudioListener interface is an AudioParam representing the z value of the direction vector defining the forward direction the listener is pointing in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardZ)')\n    # The `positionX` read-only property of the AudioListener interface is an AudioParam representing the x position of the listener in 3D cartesian space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/positionX)\n    positionX: AudioParam = Field(..., description='The `positionX` read-only property of the AudioListener interface is an AudioParam representing the x position of the listener in 3D cartesian space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/positionX)')\n    # The `positionY` read-only property of the AudioListener interface is an AudioParam representing the y position of the listener in 3D cartesian space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/positionY)\n    positionY: AudioParam = Field(..., description='The `positionY` read-only property of the AudioListener interface is an AudioParam representing the y position of the listener in 3D cartesian space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/positionY)')\n    # The `positionZ` read-only property of the AudioListener interface is an AudioParam representing the z position of the listener in 3D cartesian space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/positionZ)\n    positionZ: AudioParam = Field(..., description='The `positionZ` read-only property of the AudioListener interface is an AudioParam representing the z position of the listener in 3D cartesian space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/positionZ)')\n    # The `upX` read-only property of the AudioListener interface is an AudioParam representing the x value of the direction vector defining the up direction the listener is pointing in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/upX)\n    upX: AudioParam = Field(..., description='The `upX` read-only property of the AudioListener interface is an AudioParam representing the x value of the direction vector defining the up direction the listener is pointing in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/upX)')\n    # The `upY` read-only property of the AudioListener interface is an AudioParam representing the y value of the direction vector defining the up direction the listener is pointing in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/upY)\n    upY: AudioParam = Field(..., description='The `upY` read-only property of the AudioListener interface is an AudioParam representing the y value of the direction vector defining the up direction the listener is pointing in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/upY)')\n    # The `upZ` read-only property of the AudioListener interface is an AudioParam representing the z value of the direction vector defining the up direction the listener is pointing in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/upZ)\n    upZ: AudioParam = Field(..., description='The `upZ` read-only property of the AudioListener interface is an AudioParam representing the z value of the direction vector defining the up direction the listener is pointing in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/upZ)')\n\n# The **`AudioNode`** interface is a generic interface for representing an audio processing module.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode)\nclass AudioNode(EventTarget):\n    # The **`channelCount`** property of the AudioNode interface represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/channelCount)\n    channelCount: float = Field(..., description='The **`channelCount`** property of the AudioNode interface represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/channelCount)')\n    # The `channelCountMode` property of the AudioNode interface represents an enumerated value describing the way channels must be matched between the node's inputs and outputs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/channelCountMode)\n    channelCountMode: ChannelCountMode = Field(..., description='The `channelCountMode` property of the AudioNode interface represents an enumerated value describing the way channels must be matched between the node\'s inputs and outputs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/channelCountMode)')\n    # The **`channelInterpretation`** property of the AudioNode interface represents an enumerated value describing how input channels are mapped to output channels when the number of inputs/outputs is different.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/channelInterpretation)\n    channelInterpretation: ChannelInterpretation = Field(..., description='The **`channelInterpretation`** property of the AudioNode interface represents an enumerated value describing how input channels are mapped to output channels when the number of inputs/outputs is different.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/channelInterpretation)')\n    # The read-only `context` property of the the node is participating in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/context)\n    context: BaseAudioContext = Field(..., description='The read-only `context` property of the the node is participating in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/context)')\n    # The `numberOfInputs` property of the AudioNode interface returns the number of inputs feeding the node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/numberOfInputs)\n    numberOfInputs: float = Field(..., description='The `numberOfInputs` property of the AudioNode interface returns the number of inputs feeding the node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/numberOfInputs)')\n    # The `numberOfOutputs` property of the AudioNode interface returns the number of outputs coming out of the node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/numberOfOutputs)\n    numberOfOutputs: float = Field(..., description='The `numberOfOutputs` property of the AudioNode interface returns the number of outputs coming out of the node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/numberOfOutputs)')\n\n# The Web Audio API's `AudioParam` interface represents an audio-related parameter, usually a parameter of an AudioNode (such as GainNode.gain).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam)\nclass AudioParam(BaseModel):\n    automationRate: AutomationRate = Field(...)\n    # The **`defaultValue`** read-only property of the AudioParam interface represents the initial value of the attributes as defined by the specific AudioNode creating the `AudioParam`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/defaultValue)\n    defaultValue: float = Field(..., description='The **`defaultValue`** read-only property of the AudioParam interface represents the initial value of the attributes as defined by the specific AudioNode creating the `AudioParam`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/defaultValue)')\n    # The **`maxValue`** read-only property of the AudioParam interface represents the maximum possible value for the parameter's nominal (effective) range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/maxValue)\n    maxValue: float = Field(..., description='The **`maxValue`** read-only property of the AudioParam interface represents the maximum possible value for the parameter\'s nominal (effective) range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/maxValue)')\n    # The **`minValue`** read-only property of the AudioParam interface represents the minimum possible value for the parameter's nominal (effective) range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/minValue)\n    minValue: float = Field(..., description='The **`minValue`** read-only property of the AudioParam interface represents the minimum possible value for the parameter\'s nominal (effective) range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/minValue)')\n    # The **`value`** property of the AudioParam interface gets or sets the value of this `AudioParam` at the current time.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/value)\n    value: float = Field(..., description='The **`value`** property of the AudioParam interface gets or sets the value of this `AudioParam` at the current time.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/value)')\n\n# The **`AudioParamMap`** interface of the Web Audio API represents an iterable and read-only set of multiple audio parameters.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParamMap)\nclass AudioParamMap(BaseModel):\n    pass\n\n# The `AudioProcessingEvent` interface of the Web Audio API represents events that occur when a ScriptProcessorNode input buffer is ready to be processed.
@deprecated As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and is soon to be replaced by AudioWorklet.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent)\nclass AudioProcessingEvent(Event):\n    # The **`inputBuffer`** read-only property of the AudioProcessingEvent interface represents the input buffer of an audio processing event.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent/inputBuffer)\n    inputBuffer: AudioBuffer = Field(..., description='The **`inputBuffer`** read-only property of the AudioProcessingEvent interface represents the input buffer of an audio processing event.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent/inputBuffer)')\n    # The **`outputBuffer`** read-only property of the AudioProcessingEvent interface represents the output buffer of an audio processing event.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent/outputBuffer)\n    outputBuffer: AudioBuffer = Field(..., description='The **`outputBuffer`** read-only property of the AudioProcessingEvent interface represents the output buffer of an audio processing event.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent/outputBuffer)')\n    # The **`playbackTime`** read-only property of the AudioProcessingEvent interface represents the time when the audio will be played.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent/playbackTime)\n    playbackTime: float = Field(..., description='The **`playbackTime`** read-only property of the AudioProcessingEvent interface represents the time when the audio will be played.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent/playbackTime)')\n\nclass AudioScheduledSourceNodeEventMap(BaseModel):\n    ended: Event = Field(...)\n\n# The `AudioScheduledSourceNode` interface—part of the Web Audio API—is a parent interface for several types of audio source node interfaces which share the ability to be started and stopped, optionally at specified times.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode)\nclass AudioScheduledSourceNode(AudioNode):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode/ended_event)\n    onended: Union[((this: AudioScheduledSourceNode, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode/ended_event)')\n\n# The **`AudioWorklet`** interface of the Web Audio API is used to supply custom audio processing scripts that execute in a separate thread to provide very low latency audio processing.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorklet)\nclass AudioWorklet(Worklet):\n    pass\n\nclass AudioWorkletNodeEventMap(BaseModel):\n    processorerror: ErrorEvent = Field(...)\n\n# The **`AudioWorkletNode`** interface of the Web Audio API represents a base class for a user-defined AudioNode, which can be connected to an audio routing graph along with other nodes.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode)\nclass AudioWorkletNode(AudioNode):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/processorerror_event)\n    onprocessorerror: Union[((this: AudioWorkletNode, ev: ErrorEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/processorerror_event)')\n    # The read-only **`parameters`** property of the underlying AudioWorkletProcessor according to its getter.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/parameters)\n    parameters: AudioParamMap = Field(..., description='The read-only **`parameters`** property of the underlying AudioWorkletProcessor according to its getter.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/parameters)')\n    # The read-only **`port`** property of the associated AudioWorkletProcessor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/port)\n    port: MessagePort = Field(..., description='The read-only **`port`** property of the associated AudioWorkletProcessor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/port)')\n\n# The **`AuthenticatorAssertionResponse`** interface of the Web Authentication API contains a digital signature from the private key of a particular WebAuthn credential.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse)\nclass AuthenticatorAssertionResponse(AuthenticatorResponse):\n    # The **`authenticatorData`** property of the AuthenticatorAssertionResponse interface returns an ArrayBuffer containing information from the authenticator such as the Relying Party ID Hash (rpIdHash), a signature counter, test of user presence, user verification flags, and any extensions processed by the authenticator.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/authenticatorData)\n    authenticatorData: ArrayBuffer = Field(..., description='The **`authenticatorData`** property of the AuthenticatorAssertionResponse interface returns an ArrayBuffer containing information from the authenticator such as the Relying Party ID Hash (rpIdHash), a signature counter, test of user presence, user verification flags, and any extensions processed by the authenticator.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/authenticatorData)')\n    # The **`signature`** read-only property of the object which is the signature of the authenticator for both the client data (AuthenticatorResponse.clientDataJSON).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/signature)\n    signature: ArrayBuffer = Field(..., description='The **`signature`** read-only property of the object which is the signature of the authenticator for both the client data (AuthenticatorResponse.clientDataJSON).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/signature)')\n    # The **`userHandle`** read-only property of the AuthenticatorAssertionResponse interface is an ArrayBuffer object providing an opaque identifier for the given user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/userHandle)\n    userHandle: Union[ArrayBuffer, null] = Field(..., description='The **`userHandle`** read-only property of the AuthenticatorAssertionResponse interface is an ArrayBuffer object providing an opaque identifier for the given user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/userHandle)')\n\n# The **`AuthenticatorAttestationResponse`** interface of the Web Authentication API is the result of a WebAuthn credential registration.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse)\nclass AuthenticatorAttestationResponse(AuthenticatorResponse):\n    # The **`attestationObject`** property of the entire `attestationObject` with a private key that is stored in the authenticator when it is manufactured.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/attestationObject)\n    attestationObject: ArrayBuffer = Field(..., description='The **`attestationObject`** property of the entire `attestationObject` with a private key that is stored in the authenticator when it is manufactured.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/attestationObject)')\n\n# The **`AuthenticatorResponse`** interface of the Web Authentication API is the base interface for interfaces that provide a cryptographic root of trust for a key pair.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorResponse)\nclass AuthenticatorResponse(BaseModel):\n    # The **`clientDataJSON`** property of the AuthenticatorResponse interface stores a JSON string in an An ArrayBuffer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorResponse/clientDataJSON)\n    clientDataJSON: ArrayBuffer = Field(..., description='The **`clientDataJSON`** property of the AuthenticatorResponse interface stores a JSON string in an An ArrayBuffer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorResponse/clientDataJSON)')\n\n# The **`BarProp`** interface of the Document Object Model represents the web browser user interface elements that are exposed to scripts in web pages.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BarProp)\nclass BarProp(BaseModel):\n    # The **`visible`** read-only property of the BarProp interface returns `true` if the user interface element it represents is visible.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BarProp/visible)\n    visible: bool = Field(..., description='The **`visible`** read-only property of the BarProp interface returns `true` if the user interface element it represents is visible.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BarProp/visible)')\n\nclass BaseAudioContextEventMap(BaseModel):\n    statechange: Event = Field(...)\n\n# The `BaseAudioContext` interface of the Web Audio API acts as a base definition for online and offline audio-processing graphs, as represented by AudioContext and OfflineAudioContext respectively.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext)\nclass BaseAudioContext(EventTarget):\n    # The `audioWorklet` read-only property of the processing.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/audioWorklet)\n    audioWorklet: AudioWorklet = Field(..., description='The `audioWorklet` read-only property of the processing.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/audioWorklet)')\n    # The `currentTime` read-only property of the BaseAudioContext interface returns a double representing an ever-increasing hardware timestamp in seconds that can be used for scheduling audio playback, visualizing timelines, etc.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/currentTime)\n    currentTime: float = Field(..., description='The `currentTime` read-only property of the BaseAudioContext interface returns a double representing an ever-increasing hardware timestamp in seconds that can be used for scheduling audio playback, visualizing timelines, etc.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/currentTime)')\n    # The `destination` property of the BaseAudioContext interface returns an AudioDestinationNode representing the final destination of all audio in the context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/destination)\n    destination: AudioDestinationNode = Field(..., description='The `destination` property of the BaseAudioContext interface returns an AudioDestinationNode representing the final destination of all audio in the context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/destination)')\n    # The `listener` property of the BaseAudioContext interface returns an AudioListener object that can then be used for implementing 3D audio spatialization.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/listener)\n    listener: AudioListener = Field(..., description='The `listener` property of the BaseAudioContext interface returns an AudioListener object that can then be used for implementing 3D audio spatialization.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/listener)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/statechange_event)\n    onstatechange: Union[((this: BaseAudioContext, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/statechange_event)')\n    # The `sampleRate` property of the BaseAudioContext interface returns a floating point number representing the sample rate, in samples per second, used by all nodes in this audio context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/sampleRate)\n    sampleRate: float = Field(..., description='The `sampleRate` property of the BaseAudioContext interface returns a floating point number representing the sample rate, in samples per second, used by all nodes in this audio context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/sampleRate)')\n    # The `state` read-only property of the BaseAudioContext interface returns the current state of the `AudioContext`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/state)\n    state: AudioContextState = Field(..., description='The `state` read-only property of the BaseAudioContext interface returns the current state of the `AudioContext`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/state)')\n\n# The **`BeforeUnloadEvent`** interface represents the event object for the Window/beforeunload_event event, which is fired when the current window, contained document, and associated resources are about to be unloaded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BeforeUnloadEvent)\nclass BeforeUnloadEvent(Event):\n    # The **`returnValue`** property of the `returnValue` is initialized to an empty string (`''`) value.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BeforeUnloadEvent/returnValue)\n    returnValue: any = Field(..., description='The **`returnValue`** property of the `returnValue` is initialized to an empty string (`\'\'`) value.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BeforeUnloadEvent/returnValue)')\n\n# The `BiquadFilterNode` interface represents a simple low-order filter, and is created using the BaseAudioContext/createBiquadFilter method.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode)\nclass BiquadFilterNode(AudioNode):\n    # The `Q` property of the BiquadFilterNode interface is an a-rate AudioParam, a double representing a Q factor, or _quality factor_.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/Q)\n    Q: AudioParam = Field(..., description='The `Q` property of the BiquadFilterNode interface is an a-rate AudioParam, a double representing a Q factor, or _quality factor_.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/Q)')\n    # The `detune` property of the BiquadFilterNode interface is an a-rate AudioParam representing detuning of the frequency in cents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/detune)\n    detune: AudioParam = Field(..., description='The `detune` property of the BiquadFilterNode interface is an a-rate AudioParam representing detuning of the frequency in cents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/detune)')\n    # The `frequency` property of the BiquadFilterNode interface is an a-rate AudioParam — a double representing a frequency in the current filtering algorithm measured in hertz (Hz).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/frequency)\n    frequency: AudioParam = Field(..., description='The `frequency` property of the BiquadFilterNode interface is an a-rate AudioParam — a double representing a frequency in the current filtering algorithm measured in hertz (Hz).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/frequency)')\n    # The `gain` property of the BiquadFilterNode interface is an a-rate AudioParam — a double representing the gain used in the current filtering algorithm.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/gain)\n    gain: AudioParam = Field(..., description='The `gain` property of the BiquadFilterNode interface is an a-rate AudioParam — a double representing the gain used in the current filtering algorithm.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/gain)')\n    # The `type` property of the BiquadFilterNode interface is a string (enum) value defining the kind of filtering algorithm the node is implementing.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/type)\n    type: BiquadFilterType = Field(..., description='The `type` property of the BiquadFilterNode interface is a string (enum) value defining the kind of filtering algorithm the node is implementing.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/type)')\n\n# The **`Blob`** interface represents a blob, which is a file-like object of immutable, raw data; they can be read as text or binary data, or converted into a ReadableStream so its methods can be used for processing the data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob)\nclass Blob(BaseModel):\n    # The **`size`** read-only property of the Blob interface returns the size of the Blob or File in bytes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size)\n    size: float = Field(..., description='The **`size`** read-only property of the Blob interface returns the size of the Blob or File in bytes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size)')\n    # The **`type`** read-only property of the Blob interface returns the MIME type of the file.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type)\n    type: str = Field(..., description='The **`type`** read-only property of the Blob interface returns the MIME type of the file.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type)')\n\n# The **`BlobEvent`** interface of the MediaStream Recording API represents events associated with a Blob.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BlobEvent)\nclass BlobEvent(Event):\n    # The **`data`** read-only property of the BlobEvent interface represents a Blob associated with the event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BlobEvent/data)\n    data: Blob = Field(..., description='The **`data`** read-only property of the BlobEvent interface represents a Blob associated with the event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BlobEvent/data)')\n    # The **`timecode`** read-only property of the BlobEvent interface indicates the difference between the timestamp of the first chunk of data, and the timestamp of the first chunk in the first `BlobEvent` produced by this recorder.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BlobEvent/timecode)\n    timecode: DOMHighResTimeStamp = Field(..., description='The **`timecode`** read-only property of the BlobEvent interface indicates the difference between the timestamp of the first chunk of data, and the timestamp of the first chunk in the first `BlobEvent` produced by this recorder.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BlobEvent/timecode)')\n\nclass Body(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/body)\n    body: Union[ReadableStream<Uint8Array<ArrayBuffer>>, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/body)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/bodyUsed)\n    bodyUsed: bool = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/bodyUsed)')\n\nclass BroadcastChannelEventMap(BaseModel):\n    message: MessageEvent = Field(...)\n    messageerror: MessageEvent = Field(...)\n\n# The **`BroadcastChannel`** interface represents a named channel that any browsing context of a given origin can subscribe to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel)\nclass BroadcastChannel(EventTarget):\n    # The **`name`** read-only property of the BroadcastChannel interface returns a string, which uniquely identifies the given channel with its name.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/name)\n    name: str = Field(..., description='The **`name`** read-only property of the BroadcastChannel interface returns a string, which uniquely identifies the given channel with its name.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/name)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/message_event)\n    onmessage: Union[((this: BroadcastChannel, ev: MessageEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/message_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/messageerror_event)\n    onmessageerror: Union[((this: BroadcastChannel, ev: MessageEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/messageerror_event)')\n\n# The **`ByteLengthQueuingStrategy`** interface of the Streams API provides a built-in byte length queuing strategy that can be used when constructing streams.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy)\nclass ByteLengthQueuingStrategy(QueuingStrategy):\n    # The read-only **`ByteLengthQueuingStrategy.highWaterMark`** property returns the total number of bytes that can be contained in the internal queue before backpressure is applied.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/highWaterMark)\n    highWaterMark: float = Field(..., description='The read-only **`ByteLengthQueuingStrategy.highWaterMark`** property returns the total number of bytes that can be contained in the internal queue before backpressure is applied.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/highWaterMark)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/size)\n    size: QueuingStrategySize<ArrayBufferView> = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/size)')\n\n# The **`CDATASection`** interface represents a CDATA section that can be used within XML to include extended portions of unescaped text.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CDATASection)\nclass CDATASection(Text):\n    pass\n\n# The `CSPViolationReportBody` interface is an extension of the Reporting API that represents the body of a Content Security Policy (CSP) violation report.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody)\nclass CSPViolationReportBody(ReportBody):\n    # The **`blockedURL`** read-only property of the CSPViolationReportBody interface is a string value that represents the resource that was blocked because it violates a Content Security Policy (CSP).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/blockedURL)\n    blockedURL: Union[str, null] = Field(..., description='The **`blockedURL`** read-only property of the CSPViolationReportBody interface is a string value that represents the resource that was blocked because it violates a Content Security Policy (CSP).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/blockedURL)')\n    # The **`columnNumber`** read-only property of the CSPViolationReportBody interface indicates the column number in the source file that triggered the Content Security Policy (CSP) violation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/columnNumber)\n    columnNumber: Union[float, null] = Field(..., description='The **`columnNumber`** read-only property of the CSPViolationReportBody interface indicates the column number in the source file that triggered the Content Security Policy (CSP) violation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/columnNumber)')\n    # The **`disposition`** read-only property of the CSPViolationReportBody interface indicates whether the user agent is configured to enforce Content Security Policy (CSP) violations or only report them.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/disposition)\n    disposition: SecurityPolicyViolationEventDisposition = Field(..., description='The **`disposition`** read-only property of the CSPViolationReportBody interface indicates whether the user agent is configured to enforce Content Security Policy (CSP) violations or only report them.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/disposition)')\n    # The **`documentURL`** read-only property of the CSPViolationReportBody interface is a string that represents the URL of the document or worker that violated the Content Security Policy (CSP).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/documentURL)\n    documentURL: str = Field(..., description='The **`documentURL`** read-only property of the CSPViolationReportBody interface is a string that represents the URL of the document or worker that violated the Content Security Policy (CSP).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/documentURL)')\n    # The **`effectiveDirective`** read-only property of the CSPViolationReportBody interface is a string that represents the effective Content Security Policy (CSP) directive that was violated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/effectiveDirective)\n    effectiveDirective: str = Field(..., description='The **`effectiveDirective`** read-only property of the CSPViolationReportBody interface is a string that represents the effective Content Security Policy (CSP) directive that was violated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/effectiveDirective)')\n    # The **`lineNumber`** read-only property of the CSPViolationReportBody interface indicates the line number in the source file that triggered the Content Security Policy (CSP) violation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/lineNumber)\n    lineNumber: Union[float, null] = Field(..., description='The **`lineNumber`** read-only property of the CSPViolationReportBody interface indicates the line number in the source file that triggered the Content Security Policy (CSP) violation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/lineNumber)')\n    # The **`originalPolicy`** read-only property of the CSPViolationReportBody interface is a string that represents the Content Security Policy (CSP) whose enforcement uncovered the violation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/originalPolicy)\n    originalPolicy: str = Field(..., description='The **`originalPolicy`** read-only property of the CSPViolationReportBody interface is a string that represents the Content Security Policy (CSP) whose enforcement uncovered the violation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/originalPolicy)')\n    # The **`referrer`** read-only property of the CSPViolationReportBody interface is a string that represents the URL of the referring page of the resource who's Content Security Policy (CSP) was violated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/referrer)\n    referrer: Union[str, null] = Field(..., description='The **`referrer`** read-only property of the CSPViolationReportBody interface is a string that represents the URL of the referring page of the resource who\'s Content Security Policy (CSP) was violated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/referrer)')\n    # The **`sample`** read-only property of the CSPViolationReportBody interface is a string that contains a part of the resource that violated the Content Security Policy (CSP).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/sample)\n    sample: Union[str, null] = Field(..., description='The **`sample`** read-only property of the CSPViolationReportBody interface is a string that contains a part of the resource that violated the Content Security Policy (CSP).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/sample)')\n    # The **`sourceFile`** read-only property of the CSPViolationReportBody interface indicates the URL of the source file that violated the Content Security Policy (CSP).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/sourceFile)\n    sourceFile: Union[str, null] = Field(..., description='The **`sourceFile`** read-only property of the CSPViolationReportBody interface indicates the URL of the source file that violated the Content Security Policy (CSP).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/sourceFile)')\n    # The **`statusCode`** read-only property of the CSPViolationReportBody interface is a number representing the HTTP status code of the response to the request that triggered a Content Security Policy (CSP) violation (when loading a window or worker).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/statusCode)\n    statusCode: float = Field(..., description='The **`statusCode`** read-only property of the CSPViolationReportBody interface is a number representing the HTTP status code of the response to the request that triggered a Content Security Policy (CSP) violation (when loading a window or worker).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/statusCode)')\n\n# The **`CSSAnimation`** interface of the Web Animations API represents an Animation object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSAnimation)\nclass CSSAnimation(Animation):\n    # The **`animationName`** property of the specifies one or more keyframe at-rules which describe the animation applied to the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSAnimation/animationName)\n    animationName: str = Field(..., description='The **`animationName`** property of the specifies one or more keyframe at-rules which describe the animation applied to the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSAnimation/animationName)')\n\n# An object implementing the **`CSSConditionRule`** interface represents a single condition CSS at-rule, which consists of a condition and a statement block.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSConditionRule)\nclass CSSConditionRule(CSSGroupingRule):\n    # The read-only **`conditionText`** property of the CSSConditionRule interface returns or sets the text of the CSS rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSConditionRule/conditionText)\n    conditionText: str = Field(..., description='The read-only **`conditionText`** property of the CSSConditionRule interface returns or sets the text of the CSS rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSConditionRule/conditionText)')\n\n# The **`CSSContainerRule`** interface represents a single CSS @container rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSContainerRule)\nclass CSSContainerRule(CSSConditionRule):\n    # The read-only **`containerName`** property of the CSSContainerRule interface represents the container name of the associated CSS @container at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSContainerRule/containerName)\n    containerName: str = Field(..., description='The read-only **`containerName`** property of the CSSContainerRule interface represents the container name of the associated CSS @container at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSContainerRule/containerName)')\n    # The read-only **`containerQuery`** property of the CSSContainerRule interface returns a string representing the container conditions that are evaluated when the container changes size in order to determine if the styles in the associated @container are applied.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSContainerRule/containerQuery)\n    containerQuery: str = Field(..., description='The read-only **`containerQuery`** property of the CSSContainerRule interface returns a string representing the container conditions that are evaluated when the container changes size in order to determine if the styles in the associated @container are applied.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSContainerRule/containerQuery)')\n\n# The **`CSSCounterStyleRule`** interface represents an @counter-style at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule)\nclass CSSCounterStyleRule(CSSRule):\n    # The **`additiveSymbols`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/additive-symbols descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/additiveSymbols)\n    additiveSymbols: str = Field(..., description='The **`additiveSymbols`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/additive-symbols descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/additiveSymbols)')\n    # The **`fallback`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/fallback descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/fallback)\n    fallback: str = Field(..., description='The **`fallback`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/fallback descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/fallback)')\n    # The **`name`** property of the CSSCounterStyleRule interface gets and sets the &lt;custom-ident&gt; defined as the `name` for the associated rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/name)\n    name: str = Field(..., description='The **`name`** property of the CSSCounterStyleRule interface gets and sets the &lt;custom-ident&gt; defined as the `name` for the associated rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/name)')\n    # The **`negative`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/negative descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/negative)\n    negative: str = Field(..., description='The **`negative`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/negative descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/negative)')\n    # The **`pad`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/pad descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/pad)\n    pad: str = Field(..., description='The **`pad`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/pad descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/pad)')\n    # The **`prefix`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/prefix descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/prefix)\n    prefix: str = Field(..., description='The **`prefix`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/prefix descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/prefix)')\n    # The **`range`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/range descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/range)\n    range: str = Field(..., description='The **`range`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/range descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/range)')\n    # The **`speakAs`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/speak-as descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/speakAs)\n    speakAs: str = Field(..., description='The **`speakAs`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/speak-as descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/speakAs)')\n    # The **`suffix`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/suffix descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/suffix)\n    suffix: str = Field(..., description='The **`suffix`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/suffix descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/suffix)')\n    # The **`symbols`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/symbols descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/symbols)\n    symbols: str = Field(..., description='The **`symbols`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/symbols descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/symbols)')\n    # The **`system`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/system descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/system)\n    system: str = Field(..., description='The **`system`** property of the CSSCounterStyleRule interface gets and sets the value of the @counter-style/system descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/system)')\n\n# The **`CSSFontFaceRule`** interface represents an @font-face at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFaceRule)\nclass CSSFontFaceRule(CSSRule):\n    pass\n\n# The **`CSSFontFeatureValuesRule`** interface represents an @font-feature-values at-rule, letting developers assign for each font face a common name to specify features indices to be used in font-variant-alternates.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFeatureValuesRule)\nclass CSSFontFeatureValuesRule(CSSRule):\n    # The **`fontFamily`** property of the CSSConditionRule interface represents the name of the font family it applies to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFeatureValuesRule/fontFamily)\n    fontFamily: str = Field(..., description='The **`fontFamily`** property of the CSSConditionRule interface represents the name of the font family it applies to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFeatureValuesRule/fontFamily)')\n\n# The **`CSSFontPaletteValuesRule`** interface represents an @font-palette-values at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule)\nclass CSSFontPaletteValuesRule(CSSRule):\n    # The read-only **`basePalette`** property of the CSSFontPaletteValuesRule interface indicates the base palette associated with the rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/basePalette)\n    basePalette: str = Field(..., description='The read-only **`basePalette`** property of the CSSFontPaletteValuesRule interface indicates the base palette associated with the rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/basePalette)')\n    # The read-only **`fontFamily`** property of the CSSFontPaletteValuesRule interface lists the font families the rule can be applied to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/fontFamily)\n    fontFamily: str = Field(..., description='The read-only **`fontFamily`** property of the CSSFontPaletteValuesRule interface lists the font families the rule can be applied to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/fontFamily)')\n    # The read-only **`name`** property of the CSSFontPaletteValuesRule interface represents the name identifying the associated @font-palette-values at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/name)\n    name: str = Field(..., description='The read-only **`name`** property of the CSSFontPaletteValuesRule interface represents the name identifying the associated @font-palette-values at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/name)')\n    # The read-only **`overrideColors`** property of the CSSFontPaletteValuesRule interface is a string containing a list of color index and color pair that are to be used instead.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/overrideColors)\n    overrideColors: str = Field(..., description='The read-only **`overrideColors`** property of the CSSFontPaletteValuesRule interface is a string containing a list of color index and color pair that are to be used instead.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/overrideColors)')\n\n# The **`CSSGroupingRule`** interface of the CSS Object Model represents any CSS at-rule that contains other rules nested within it.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule)\nclass CSSGroupingRule(CSSRule):\n    # The **`cssRules`** property of the a collection of CSSRule objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule/cssRules)\n    cssRules: CSSRuleList = Field(..., description='The **`cssRules`** property of the a collection of CSSRule objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule/cssRules)')\n\n# The **`CSSImageValue`** interface of the CSS Typed Object Model API represents values for properties that take an image, for example background-image, list-style-image, or border-image-source.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImageValue)\nclass CSSImageValue(CSSStyleValue):\n    pass\n\n# The **`CSSImportRule`** interface represents an @import at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule)\nclass CSSImportRule(CSSRule):\n    # The read-only **`href`** property of the The resolved URL will be the `href` attribute of the associated stylesheet.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/href)\n    href: str = Field(..., description='The read-only **`href`** property of the The resolved URL will be the `href` attribute of the associated stylesheet.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/href)')\n    # The read-only **`layerName`** property of the CSSImportRule interface returns the name of the cascade layer created by the @import at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/layerName)\n    layerName: Union[str, null] = Field(..., description='The read-only **`layerName`** property of the CSSImportRule interface returns the name of the cascade layer created by the @import at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/layerName)')\n    # The read-only **`styleSheet`** property of the in the form of a CSSStyleSheet object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/styleSheet)\n    styleSheet: Union[CSSStyleSheet, null] = Field(..., description='The read-only **`styleSheet`** property of the in the form of a CSSStyleSheet object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/styleSheet)')\n    # The read-only **`supportsText`** property of the CSSImportRule interface returns the supports condition specified by the @import at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/supportsText)\n    supportsText: Union[str, null] = Field(..., description='The read-only **`supportsText`** property of the CSSImportRule interface returns the supports condition specified by the @import at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/supportsText)')\n\n# The **`CSSKeyframeRule`** interface describes an object representing a set of styles for a given keyframe.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframeRule)\nclass CSSKeyframeRule(CSSRule):\n    # The **`keyText`** property of the CSSKeyframeRule interface represents the keyframe selector as a comma-separated list of percentage values.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframeRule/keyText)\n    keyText: str = Field(..., description='The **`keyText`** property of the CSSKeyframeRule interface represents the keyframe selector as a comma-separated list of percentage values.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframeRule/keyText)')\n\n# The **`CSSKeyframesRule`** interface describes an object representing a complete set of keyframes for a CSS animation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule)\nclass CSSKeyframesRule(CSSRule):\n    # The read-only **`cssRules`** property of the CSSKeyframeRule interface returns a CSSRuleList containing the rules in the keyframes at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/cssRules)\n    cssRules: CSSRuleList = Field(..., description='The read-only **`cssRules`** property of the CSSKeyframeRule interface returns a CSSRuleList containing the rules in the keyframes at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/cssRules)')\n    # The read-only **`length`** property of the CSSKeyframeRule interface returns the number of CSSKeyframeRule objects in its list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/length)\n    length: float = Field(..., description='The read-only **`length`** property of the CSSKeyframeRule interface returns the number of CSSKeyframeRule objects in its list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/length)')\n    # The **`name`** property of the CSSKeyframeRule interface gets and sets the name of the animation as used by the animation-name property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/name)\n    name: str = Field(..., description='The **`name`** property of the CSSKeyframeRule interface gets and sets the name of the animation as used by the animation-name property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/name)')\n\n# The **`CSSKeywordValue`** interface of the CSS Typed Object Model API creates an object to represent CSS keywords and other identifiers.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue)\nclass CSSKeywordValue(CSSStyleValue):\n    # The **`value`** property of the `CSSKeywordValue`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue/value)\n    value: str = Field(..., description='The **`value`** property of the `CSSKeywordValue`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue/value)')\n\n# The **`CSSLayerBlockRule`** represents a @layer block rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerBlockRule)\nclass CSSLayerBlockRule(CSSGroupingRule):\n    # The read-only **`name`** property of the CSSLayerBlockRule interface represents the name of the associated cascade layer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerBlockRule/name)\n    name: str = Field(..., description='The read-only **`name`** property of the CSSLayerBlockRule interface represents the name of the associated cascade layer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerBlockRule/name)')\n\n# The **`CSSLayerStatementRule`** represents a @layer statement rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerStatementRule)\nclass CSSLayerStatementRule(CSSRule):\n    # The read-only **`nameList`** property of the CSSLayerStatementRule interface return the list of associated cascade layer names.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerStatementRule/nameList)\n    nameList: ReadonlyArray<string> = Field(..., description='The read-only **`nameList`** property of the CSSLayerStatementRule interface return the list of associated cascade layer names.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerStatementRule/nameList)')\n\nclass CSSMathClamp(CSSMathValue):\n    lower: CSSNumericValue = Field(...)\n    upper: CSSNumericValue = Field(...)\n    value: CSSNumericValue = Field(...)\n\n# The **`CSSMathInvert`** interface of the CSS Typed Object Model API represents a CSS calc used as `calc(1 / <value>)`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathInvert)\nclass CSSMathInvert(CSSMathValue):\n    # The CSSMathInvert.value read-only property of the A CSSNumericValue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathInvert/value)\n    value: CSSNumericValue = Field(..., description='The CSSMathInvert.value read-only property of the A CSSNumericValue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathInvert/value)')\n\n# The **`CSSMathMax`** interface of the CSS Typed Object Model API represents the CSS max function.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMax)\nclass CSSMathMax(CSSMathValue):\n    # The CSSMathMax.values read-only property of the which contains one or more CSSNumericValue objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMax/values)\n    values: CSSNumericArray = Field(..., description='The CSSMathMax.values read-only property of the which contains one or more CSSNumericValue objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMax/values)')\n\n# The **`CSSMathMin`** interface of the CSS Typed Object Model API represents the CSS min function.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMin)\nclass CSSMathMin(CSSMathValue):\n    # The CSSMathMin.values read-only property of the which contains one or more CSSNumericValue objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMin/values)\n    values: CSSNumericArray = Field(..., description='The CSSMathMin.values read-only property of the which contains one or more CSSNumericValue objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMin/values)')\n\n# The **`CSSMathNegate`** interface of the CSS Typed Object Model API negates the value passed into it.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathNegate)\nclass CSSMathNegate(CSSMathValue):\n    # The CSSMathNegate.value read-only property of the A CSSNumericValue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathNegate/value)\n    value: CSSNumericValue = Field(..., description='The CSSMathNegate.value read-only property of the A CSSNumericValue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathNegate/value)')\n\n# The **`CSSMathProduct`** interface of the CSS Typed Object Model API represents the result obtained by calling CSSNumericValue.add, CSSNumericValue.sub, or CSSNumericValue.toSum on CSSNumericValue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathProduct)\nclass CSSMathProduct(CSSMathValue):\n    # The **`CSSMathProduct.values`** read-only property of the CSSMathProduct interface returns a A CSSNumericArray.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathProduct/values)\n    values: CSSNumericArray = Field(..., description='The **`CSSMathProduct.values`** read-only property of the CSSMathProduct interface returns a A CSSNumericArray.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathProduct/values)')\n\n# The **`CSSMathSum`** interface of the CSS Typed Object Model API represents the result obtained by calling CSSNumericValue.add, CSSNumericValue.sub, or CSSNumericValue.toSum on CSSNumericValue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathSum)\nclass CSSMathSum(CSSMathValue):\n    # The **`CSSMathSum.values`** read-only property of the CSSMathSum interface returns a CSSNumericArray object which contains one or more CSSNumericValue objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathSum/values)\n    values: CSSNumericArray = Field(..., description='The **`CSSMathSum.values`** read-only property of the CSSMathSum interface returns a CSSNumericArray object which contains one or more CSSNumericValue objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathSum/values)')\n\n# The **`CSSMathValue`** interface of the CSS Typed Object Model API a base class for classes representing complex numeric values.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathValue)\nclass CSSMathValue(CSSNumericValue):\n    # The **`CSSMathValue.operator`** read-only property of the CSSMathValue interface indicates the operator that the current subtype represents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathValue/operator)\n    operator: CSSMathOperator = Field(..., description='The **`CSSMathValue.operator`** read-only property of the CSSMathValue interface indicates the operator that the current subtype represents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathValue/operator)')\n\n# The **`CSSMatrixComponent`** interface of the CSS Typed Object Model API represents the matrix() and matrix3d() values of the individual transform property in CSS.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent)\nclass CSSMatrixComponent(CSSTransformComponent):\n    # The **`matrix`** property of the See the matrix() and matrix3d() pages for examples.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent/matrix)\n    matrix: DOMMatrix = Field(..., description='The **`matrix`** property of the See the matrix() and matrix3d() pages for examples.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent/matrix)')\n\n# The **`CSSMediaRule`** interface represents a single CSS @media rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMediaRule)\nclass CSSMediaRule(CSSConditionRule):\n    pass\n\n# The **`CSSNamespaceRule`** interface describes an object representing a single CSS @namespace at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNamespaceRule)\nclass CSSNamespaceRule(CSSRule):\n    # The read-only **`namespaceURI`** property of the CSSNamespaceRule returns a string containing the text of the URI of the given namespace.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNamespaceRule/namespaceURI)\n    namespaceURI: str = Field(..., description='The read-only **`namespaceURI`** property of the CSSNamespaceRule returns a string containing the text of the URI of the given namespace.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNamespaceRule/namespaceURI)')\n    # The read-only **`prefix`** property of the CSSNamespaceRule returns a string with the name of the prefix associated to this namespace.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNamespaceRule/prefix)\n    prefix: str = Field(..., description='The read-only **`prefix`** property of the CSSNamespaceRule returns a string with the name of the prefix associated to this namespace.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNamespaceRule/prefix)')\n\n# The **`CSSNestedDeclarations`** interface of the CSS Rule API is used to group nested CSSRules.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNestedDeclarations)\nclass CSSNestedDeclarations(CSSRule):\n    pass\n\n# The **`CSSNumericArray`** interface of the CSS Typed Object Model API contains a list of CSSNumericValue objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericArray)\nclass CSSNumericArray(BaseModel):\n    # The read-only **`length`** property of the An integer representing the number of CSSNumericValue objects in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericArray/length)\n    length: float = Field(..., description='The read-only **`length`** property of the An integer representing the number of CSSNumericValue objects in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericArray/length)')\n\n# The **`CSSNumericValue`** interface of the CSS Typed Object Model API represents operations that all numeric values can perform.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue)\nclass CSSNumericValue(CSSStyleValue):\n    pass\n\n# **`CSSPageRule`** represents a single CSS @page rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPageRule)\nclass CSSPageRule(CSSGroupingRule):\n    # The **`selectorText`** property of the CSSPageRule interface gets and sets the selectors associated with the `CSSPageRule`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPageRule/selectorText)\n    selectorText: str = Field(..., description='The **`selectorText`** property of the CSSPageRule interface gets and sets the selectors associated with the `CSSPageRule`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPageRule/selectorText)')\n\n# The **`CSSPerspective`** interface of the CSS Typed Object Model API represents the perspective() value of the individual transform property in CSS.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPerspective)\nclass CSSPerspective(CSSTransformComponent):\n    # The **`length`** property of the It is used to apply a perspective transform to the element and its content.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPerspective/length)\n    length: CSSPerspectiveValue = Field(..., description='The **`length`** property of the It is used to apply a perspective transform to the element and its content.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPerspective/length)')\n\n# The **`CSSPropertyRule`** interface of the CSS Properties and Values API represents a single CSS @property rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule)\nclass CSSPropertyRule(CSSRule):\n    # The read-only **`inherits`** property of the CSSPropertyRule interface returns the inherit flag of the custom property registration represented by the @property rule, a boolean describing whether or not the property inherits by default.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/inherits)\n    inherits: bool = Field(..., description='The read-only **`inherits`** property of the CSSPropertyRule interface returns the inherit flag of the custom property registration represented by the @property rule, a boolean describing whether or not the property inherits by default.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/inherits)')\n    # The read-only **`initialValue`** nullable property of the CSSPropertyRule interface returns the initial value of the custom property registration represented by the @property rule, controlling the property's initial value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/initialValue)\n    initialValue: Union[str, null] = Field(..., description='The read-only **`initialValue`** nullable property of the CSSPropertyRule interface returns the initial value of the custom property registration represented by the @property rule, controlling the property\'s initial value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/initialValue)')\n    # The read-only **`name`** property of the CSSPropertyRule interface represents the property name, this being the serialization of the name given to the custom property in the @property rule's prelude.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/name)\n    name: str = Field(..., description='The read-only **`name`** property of the CSSPropertyRule interface represents the property name, this being the serialization of the name given to the custom property in the @property rule\'s prelude.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/name)')\n    # The read-only **`syntax`** property of the CSSPropertyRule interface returns the literal syntax of the custom property registration represented by the @property rule, controlling how the property's value is parsed at computed-value time.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/syntax)\n    syntax: str = Field(..., description='The read-only **`syntax`** property of the CSSPropertyRule interface returns the literal syntax of the custom property registration represented by the @property rule, controlling how the property\'s value is parsed at computed-value time.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/syntax)')\n\n# The **`CSSRotate`** interface of the CSS Typed Object Model API represents the rotate value of the individual transform property in CSS.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate)\nclass CSSRotate(CSSTransformComponent):\n    # The **`angle`** property of the denotes a clockwise rotation, a negative angle a counter-clockwise one.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/angle)\n    angle: CSSNumericValue = Field(..., description='The **`angle`** property of the denotes a clockwise rotation, a negative angle a counter-clockwise one.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/angle)')\n    # The **`x`** property of the translating vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/x)\n    x: CSSNumberish = Field(..., description='The **`x`** property of the translating vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/x)')\n    # The **`y`** property of the translating vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/y)\n    y: CSSNumberish = Field(..., description='The **`y`** property of the translating vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/y)')\n    # The **`z`** property of the vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/z)\n    z: CSSNumberish = Field(..., description='The **`z`** property of the vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/z)')\n\n# The **`CSSRule`** interface represents a single CSS rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule)\nclass CSSRule(BaseModel):\n    # The **`cssText`** property of the CSSRule interface returns the actual text of a CSSStyleSheet style-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/cssText)\n    cssText: str = Field(..., description='The **`cssText`** property of the CSSRule interface returns the actual text of a CSSStyleSheet style-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/cssText)')\n    # The **`parentRule`** property of the CSSRule interface returns the containing rule of the current rule if this exists, or otherwise returns null.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/parentRule)\n    parentRule: Union[CSSRule, null] = Field(..., description='The **`parentRule`** property of the CSSRule interface returns the containing rule of the current rule if this exists, or otherwise returns null.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/parentRule)')\n    # The **`parentStyleSheet`** property of the the current rule is defined.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/parentStyleSheet)\n    parentStyleSheet: Union[CSSStyleSheet, null] = Field(..., description='The **`parentStyleSheet`** property of the the current rule is defined.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/parentStyleSheet)')\n    # The read-only **`type`** property of the indicating which type of rule the CSSRule represents.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/type)\n    type: float = Field(..., description='The read-only **`type`** property of the indicating which type of rule the CSSRule represents.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/type)')\n    STYLE_RULE: 1 = Field(...)\n    CHARSET_RULE: 2 = Field(...)\n    IMPORT_RULE: 3 = Field(...)\n    MEDIA_RULE: 4 = Field(...)\n    FONT_FACE_RULE: 5 = Field(...)\n    PAGE_RULE: 6 = Field(...)\n    NAMESPACE_RULE: 10 = Field(...)\n    KEYFRAMES_RULE: 7 = Field(...)\n    KEYFRAME_RULE: 8 = Field(...)\n    SUPPORTS_RULE: 12 = Field(...)\n    COUNTER_STYLE_RULE: 11 = Field(...)\n    FONT_FEATURE_VALUES_RULE: 14 = Field(...)\n\n# A `CSSRuleList` represents an ordered collection of read-only CSSRule objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRuleList)\nclass CSSRuleList(BaseModel):\n    # The **`length`** property of the CSSRuleList interface returns the number of CSSRule objects in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRuleList/length)\n    length: float = Field(..., description='The **`length`** property of the CSSRuleList interface returns the number of CSSRule objects in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRuleList/length)')\n\n# The **`CSSScale`** interface of the CSS Typed Object Model API represents the scale() and scale3d() values of the individual transform property in CSS.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale)\nclass CSSScale(CSSTransformComponent):\n    # The **`x`** property of the translating vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/x)\n    x: CSSNumberish = Field(..., description='The **`x`** property of the translating vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/x)')\n    # The **`y`** property of the translating vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/y)\n    y: CSSNumberish = Field(..., description='The **`y`** property of the translating vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/y)')\n    # The **`z`** property of the vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/z)\n    z: CSSNumberish = Field(..., description='The **`z`** property of the vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/z)')\n\n# The **`CSSScopeRule`** interface of the CSS Object Model represents a CSS @scope at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScopeRule)\nclass CSSScopeRule(CSSGroupingRule):\n    # The **`end`** property of the CSSScopeRule interface returns a string containing the value of the `@scope` at-rule's scope limit.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScopeRule/end)\n    end: Union[str, null] = Field(..., description='The **`end`** property of the CSSScopeRule interface returns a string containing the value of the `@scope` at-rule\'s scope limit.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScopeRule/end)')\n    # The **`start`** property of the CSSScopeRule interface returns a string containing the value of the `@scope` at-rule's scope root.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScopeRule/start)\n    start: Union[str, null] = Field(..., description='The **`start`** property of the CSSScopeRule interface returns a string containing the value of the `@scope` at-rule\'s scope root.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScopeRule/start)')\n\n# The **`CSSSkew`** interface of the CSS Typed Object Model API is part of the CSSTransformValue interface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew)\nclass CSSSkew(CSSTransformComponent):\n    # The **`ax`** property of the along the x-axis (or abscissa).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew/ax)\n    ax: CSSNumericValue = Field(..., description='The **`ax`** property of the along the x-axis (or abscissa).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew/ax)')\n    # The **`ay`** property of the along the y-axis (or ordinate).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew/ay)\n    ay: CSSNumericValue = Field(..., description='The **`ay`** property of the along the y-axis (or ordinate).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew/ay)')\n\n# The **`CSSSkewX`** interface of the CSS Typed Object Model API represents the `skewX()` value of the individual transform property in CSS.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewX)\nclass CSSSkewX(CSSTransformComponent):\n    # The **`ax`** property of the along the x-axis (or abscissa).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewX/ax)\n    ax: CSSNumericValue = Field(..., description='The **`ax`** property of the along the x-axis (or abscissa).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewX/ax)')\n\n# The **`CSSSkewY`** interface of the CSS Typed Object Model API represents the `skewY()` value of the individual transform property in CSS.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewY)\nclass CSSSkewY(CSSTransformComponent):\n    # The **`ay`** property of the along the y-axis (or ordinate).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewY/ay)\n    ay: CSSNumericValue = Field(..., description='The **`ay`** property of the along the y-axis (or ordinate).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewY/ay)')\n\n# The **`CSSStartingStyleRule`** interface of the CSS Object Model represents a CSS @starting-style at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStartingStyleRule)\nclass CSSStartingStyleRule(CSSGroupingRule):\n    pass\n\n# The **`CSSStyleDeclaration`** interface represents an object that is a CSS declaration block, and exposes style information and various style-related methods and properties.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration)\nclass CSSStyleDeclaration(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/accent-color)\n    accentColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/accent-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-content)\n    alignContent: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-content)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-items)\n    alignItems: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-items)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-self)\n    alignSelf: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-self)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/alignment-baseline)\n    alignmentBaseline: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/alignment-baseline)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/all)\n    all: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/all)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation)\n    animation: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-composition)\n    animationComposition: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-composition)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-delay)\n    animationDelay: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-delay)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-direction)\n    animationDirection: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-direction)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-duration)\n    animationDuration: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-duration)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode)\n    animationFillMode: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count)\n    animationIterationCount: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-name)\n    animationName: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-name)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-play-state)\n    animationPlayState: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-play-state)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-timing-function)\n    animationTimingFunction: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-timing-function)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/appearance)\n    appearance: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/appearance)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/aspect-ratio)\n    aspectRatio: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/aspect-ratio)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/backdrop-filter)\n    backdropFilter: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/backdrop-filter)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/backface-visibility)\n    backfaceVisibility: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/backface-visibility)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background)\n    background: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-attachment)\n    backgroundAttachment: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-attachment)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-blend-mode)\n    backgroundBlendMode: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-blend-mode)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-clip)\n    backgroundClip: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-clip)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-color)\n    backgroundColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-image)\n    backgroundImage: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-image)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-origin)\n    backgroundOrigin: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-origin)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-position)\n    backgroundPosition: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-position)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-position-x)\n    backgroundPositionX: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-position-x)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-position-y)\n    backgroundPositionY: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-position-y)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-repeat)\n    backgroundRepeat: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-repeat)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-size)\n    backgroundSize: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-size)')\n    baselineShift: str = Field(...)\n    baselineSource: str = Field(...)\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/block-size)\n    blockSize: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/block-size)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border)\n    border: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block)\n    borderBlock: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-color)\n    borderBlockColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end)\n    borderBlockEnd: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end-color)\n    borderBlockEndColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end-style)\n    borderBlockEndStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end-width)\n    borderBlockEndWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start)\n    borderBlockStart: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start-color)\n    borderBlockStartColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start-style)\n    borderBlockStartStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start-width)\n    borderBlockStartWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-style)\n    borderBlockStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-width)\n    borderBlockWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom)\n    borderBottom: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-color)\n    borderBottomColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius)\n    borderBottomLeftRadius: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius)\n    borderBottomRightRadius: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-style)\n    borderBottomStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-width)\n    borderBottomWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-collapse)\n    borderCollapse: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-collapse)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-color)\n    borderColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius)\n    borderEndEndRadius: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius)\n    borderEndStartRadius: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image)\n    borderImage: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-outset)\n    borderImageOutset: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-outset)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-repeat)\n    borderImageRepeat: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-repeat)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-slice)\n    borderImageSlice: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-slice)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-source)\n    borderImageSource: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-source)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-width)\n    borderImageWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline)\n    borderInline: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-color)\n    borderInlineColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end)\n    borderInlineEnd: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color)\n    borderInlineEndColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style)\n    borderInlineEndStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width)\n    borderInlineEndWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start)\n    borderInlineStart: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color)\n    borderInlineStartColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style)\n    borderInlineStartStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width)\n    borderInlineStartWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-style)\n    borderInlineStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-width)\n    borderInlineWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-left)\n    borderLeft: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-left)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-left-color)\n    borderLeftColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-left-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-left-style)\n    borderLeftStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-left-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-left-width)\n    borderLeftWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-left-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-radius)\n    borderRadius: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-radius)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-right)\n    borderRight: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-right)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-right-color)\n    borderRightColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-right-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-right-style)\n    borderRightStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-right-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-right-width)\n    borderRightWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-right-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-spacing)\n    borderSpacing: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-spacing)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius)\n    borderStartEndRadius: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius)\n    borderStartStartRadius: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-style)\n    borderStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top)\n    borderTop: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-color)\n    borderTopColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius)\n    borderTopLeftRadius: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius)\n    borderTopRightRadius: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-style)\n    borderTopStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-width)\n    borderTopWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-width)\n    borderWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/bottom)\n    bottom: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/bottom)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-decoration-break)\n    boxDecorationBreak: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-decoration-break)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-shadow)\n    boxShadow: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-shadow)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-sizing)\n    boxSizing: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-sizing)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/break-after)\n    breakAfter: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/break-after)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/break-before)\n    breakBefore: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/break-before)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/break-inside)\n    breakInside: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/break-inside)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/caption-side)\n    captionSide: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/caption-side)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/caret-color)\n    caretColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/caret-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/clear)\n    clear: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/clear)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/clip)\n    clip: str = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/clip)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/clip-path)\n    clipPath: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/clip-path)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/clip-rule)\n    clipRule: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/clip-rule)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/color)\n    color: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/color-interpolation)\n    colorInterpolation: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/color-interpolation)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/color-interpolation-filters)\n    colorInterpolationFilters: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/color-interpolation-filters)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/color-scheme)\n    colorScheme: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/color-scheme)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-count)\n    columnCount: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-count)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-fill)\n    columnFill: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-fill)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-gap)\n    columnGap: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-gap)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule)\n    columnRule: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule-color)\n    columnRuleColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule-style)\n    columnRuleStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule-width)\n    columnRuleWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-span)\n    columnSpan: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-span)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-width)\n    columnWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/columns)\n    columns: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/columns)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain)\n    contain: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-block-size)\n    containIntrinsicBlockSize: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-block-size)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height)\n    containIntrinsicHeight: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-inline-size)\n    containIntrinsicInlineSize: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-inline-size)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size)\n    containIntrinsicSize: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width)\n    containIntrinsicWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/container)\n    container: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/container)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/container-name)\n    containerName: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/container-name)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/container-type)\n    containerType: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/container-type)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/content)\n    content: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/content)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/content-visibility)\n    contentVisibility: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/content-visibility)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/counter-increment)\n    counterIncrement: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/counter-increment)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/counter-reset)\n    counterReset: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/counter-reset)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/counter-set)\n    counterSet: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/counter-set)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/cssFloat)\n    cssFloat: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/cssFloat)')\n    # The **`cssText`** property of the CSSStyleDeclaration interface returns or sets the text of the element's **inline** style declaration only.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/cssText)\n    cssText: str = Field(..., description='The **`cssText`** property of the CSSStyleDeclaration interface returns or sets the text of the element\'s **inline** style declaration only.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/cssText)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/cursor)\n    cursor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/cursor)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/cx)\n    cx: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/cx)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/cy)\n    cy: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/cy)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/d)\n    d: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/d)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/direction)\n    direction: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/direction)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/display)\n    display: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/display)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/dominant-baseline)\n    dominantBaseline: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/dominant-baseline)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/empty-cells)\n    emptyCells: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/empty-cells)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/fill)\n    fill: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/fill)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/fill-opacity)\n    fillOpacity: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/fill-opacity)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/fill-rule)\n    fillRule: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/fill-rule)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/filter)\n    filter: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/filter)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex)\n    flex: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-basis)\n    flexBasis: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-basis)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-direction)\n    flexDirection: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-direction)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-flow)\n    flexFlow: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-flow)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-grow)\n    flexGrow: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-grow)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-shrink)\n    flexShrink: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-shrink)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-wrap)\n    flexWrap: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-wrap)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/float)\n    float: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/float)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flood-color)\n    floodColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flood-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flood-opacity)\n    floodOpacity: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flood-opacity)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font)\n    font: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-family)\n    fontFamily: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-family)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-feature-settings)\n    fontFeatureSettings: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-feature-settings)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-kerning)\n    fontKerning: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-kerning)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing)\n    fontOpticalSizing: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-palette)\n    fontPalette: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-palette)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-size)\n    fontSize: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-size)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-size-adjust)\n    fontSizeAdjust: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-size-adjust)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-stretch)\n    fontStretch: str = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-stretch)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-style)\n    fontStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis)\n    fontSynthesis: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-small-caps)\n    fontSynthesisSmallCaps: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-small-caps)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-style)\n    fontSynthesisStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-weight)\n    fontSynthesisWeight: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-weight)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant)\n    fontVariant: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates)\n    fontVariantAlternates: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-caps)\n    fontVariantCaps: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-caps)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian)\n    fontVariantEastAsian: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures)\n    fontVariantLigatures: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric)\n    fontVariantNumeric: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-position)\n    fontVariantPosition: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-position)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variation-settings)\n    fontVariationSettings: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variation-settings)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-weight)\n    fontWeight: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-weight)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust)\n    forcedColorAdjust: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/gap)\n    gap: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/gap)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid)\n    grid: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-area)\n    gridArea: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-area)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns)\n    gridAutoColumns: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow)\n    gridAutoFlow: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows)\n    gridAutoRows: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-column)\n    gridColumn: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-column)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-column-end)\n    gridColumnEnd: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-column-end)')\n    # @deprecated This is a legacy alias of `columnGap`.\n    gridColumnGap: str = Field(..., description='@deprecated This is a legacy alias of `columnGap`.')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-column-start)\n    gridColumnStart: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-column-start)')\n    # @deprecated This is a legacy alias of `gap`.\n    gridGap: str = Field(..., description='@deprecated This is a legacy alias of `gap`.')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-row)\n    gridRow: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-row)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-row-end)\n    gridRowEnd: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-row-end)')\n    # @deprecated This is a legacy alias of `rowGap`.\n    gridRowGap: str = Field(..., description='@deprecated This is a legacy alias of `rowGap`.')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-row-start)\n    gridRowStart: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-row-start)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template)\n    gridTemplate: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template-areas)\n    gridTemplateAreas: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template-areas)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template-columns)\n    gridTemplateColumns: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template-columns)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template-rows)\n    gridTemplateRows: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template-rows)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/height)\n    height: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/height)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/hyphenate-character)\n    hyphenateCharacter: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/hyphenate-character)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/hyphenate-limit-chars)\n    hyphenateLimitChars: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/hyphenate-limit-chars)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/hyphens)\n    hyphens: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/hyphens)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/image-orientation)\n    imageOrientation: str = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/image-orientation)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/image-rendering)\n    imageRendering: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/image-rendering)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inline-size)\n    inlineSize: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inline-size)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset)\n    inset: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-block)\n    insetBlock: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-block)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-block-end)\n    insetBlockEnd: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-block-end)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-block-start)\n    insetBlockStart: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-block-start)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-inline)\n    insetInline: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-inline)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-inline-end)\n    insetInlineEnd: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-inline-end)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-inline-start)\n    insetInlineStart: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-inline-start)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/isolation)\n    isolation: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/isolation)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/justify-content)\n    justifyContent: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/justify-content)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/justify-items)\n    justifyItems: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/justify-items)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/justify-self)\n    justifySelf: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/justify-self)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/left)\n    left: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/left)')\n    # The read-only property returns an integer that represents the number of style declarations in this CSS declaration block.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/length)\n    length: float = Field(..., description='The read-only property returns an integer that represents the number of style declarations in this CSS declaration block.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/length)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/letter-spacing)\n    letterSpacing: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/letter-spacing)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/lighting-color)\n    lightingColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/lighting-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/line-break)\n    lineBreak: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/line-break)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/line-height)\n    lineHeight: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/line-height)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/list-style)\n    listStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/list-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/list-style-image)\n    listStyleImage: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/list-style-image)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/list-style-position)\n    listStylePosition: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/list-style-position)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/list-style-type)\n    listStyleType: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/list-style-type)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin)\n    margin: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-block)\n    marginBlock: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-block)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-block-end)\n    marginBlockEnd: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-block-end)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-block-start)\n    marginBlockStart: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-block-start)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-bottom)\n    marginBottom: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-bottom)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-inline)\n    marginInline: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-inline)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-inline-end)\n    marginInlineEnd: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-inline-end)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-inline-start)\n    marginInlineStart: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-inline-start)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-left)\n    marginLeft: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-left)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-right)\n    marginRight: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-right)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-top)\n    marginTop: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-top)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/marker)\n    marker: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/marker)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/marker-end)\n    markerEnd: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/marker-end)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/marker-mid)\n    markerMid: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/marker-mid)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/marker-start)\n    markerStart: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/marker-start)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask)\n    mask: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-clip)\n    maskClip: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-clip)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-composite)\n    maskComposite: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-composite)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-image)\n    maskImage: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-image)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-mode)\n    maskMode: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-mode)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-origin)\n    maskOrigin: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-origin)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-position)\n    maskPosition: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-position)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-repeat)\n    maskRepeat: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-repeat)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-size)\n    maskSize: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-size)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-type)\n    maskType: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-type)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/math-depth)\n    mathDepth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/math-depth)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/math-style)\n    mathStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/math-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-block-size)\n    maxBlockSize: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-block-size)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-height)\n    maxHeight: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-height)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-inline-size)\n    maxInlineSize: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-inline-size)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-width)\n    maxWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-block-size)\n    minBlockSize: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-block-size)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-height)\n    minHeight: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-height)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-inline-size)\n    minInlineSize: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-inline-size)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-width)\n    minWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode)\n    mixBlendMode: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/object-fit)\n    objectFit: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/object-fit)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/object-position)\n    objectPosition: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/object-position)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset)\n    offset: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-anchor)\n    offsetAnchor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-anchor)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-distance)\n    offsetDistance: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-distance)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-path)\n    offsetPath: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-path)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-position)\n    offsetPosition: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-position)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-rotate)\n    offsetRotate: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-rotate)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/opacity)\n    opacity: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/opacity)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/order)\n    order: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/order)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/orphans)\n    orphans: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/orphans)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline)\n    outline: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-color)\n    outlineColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-offset)\n    outlineOffset: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-offset)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-style)\n    outlineStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-width)\n    outlineWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow)\n    overflow: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-anchor)\n    overflowAnchor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-anchor)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-block)\n    overflowBlock: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-block)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin)\n    overflowClipMargin: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-inline)\n    overflowInline: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-inline)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-wrap)\n    overflowWrap: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-wrap)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-x)\n    overflowX: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-x)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-y)\n    overflowY: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-y)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior)\n    overscrollBehavior: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block)\n    overscrollBehaviorBlock: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline)\n    overscrollBehaviorInline: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x)\n    overscrollBehaviorX: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y)\n    overscrollBehaviorY: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding)\n    padding: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-block)\n    paddingBlock: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-block)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-block-end)\n    paddingBlockEnd: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-block-end)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-block-start)\n    paddingBlockStart: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-block-start)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-bottom)\n    paddingBottom: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-bottom)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-inline)\n    paddingInline: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-inline)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-inline-end)\n    paddingInlineEnd: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-inline-end)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-inline-start)\n    paddingInlineStart: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-inline-start)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-left)\n    paddingLeft: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-left)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-right)\n    paddingRight: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-right)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-top)\n    paddingTop: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-top)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/page)\n    page: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/page)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/page-break-after)\n    pageBreakAfter: str = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/page-break-after)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/page-break-before)\n    pageBreakBefore: str = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/page-break-before)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/page-break-inside)\n    pageBreakInside: str = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/page-break-inside)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/paint-order)\n    paintOrder: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/paint-order)')\n    # The **CSSStyleDeclaration.parentRule** read-only property returns a CSSRule that is the parent of this style block, e.g., a CSSStyleRule representing the style for a CSS selector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/parentRule)\n    parentRule: Union[CSSRule, null] = Field(..., description='The **CSSStyleDeclaration.parentRule** read-only property returns a CSSRule that is the parent of this style block, e.g., a CSSStyleRule representing the style for a CSS selector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/parentRule)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/perspective)\n    perspective: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/perspective)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/perspective-origin)\n    perspectiveOrigin: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/perspective-origin)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/place-content)\n    placeContent: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/place-content)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/place-items)\n    placeItems: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/place-items)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/place-self)\n    placeSelf: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/place-self)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/pointer-events)\n    pointerEvents: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/pointer-events)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/position)\n    position: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/position)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/print-color-adjust)\n    printColorAdjust: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/print-color-adjust)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/quotes)\n    quotes: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/quotes)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/r)\n    r: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/r)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/resize)\n    resize: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/resize)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/right)\n    right: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/right)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/rotate)\n    rotate: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/rotate)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/row-gap)\n    rowGap: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/row-gap)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/ruby-align)\n    rubyAlign: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/ruby-align)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/ruby-position)\n    rubyPosition: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/ruby-position)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/rx)\n    rx: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/rx)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/ry)\n    ry: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/ry)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scale)\n    scale: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scale)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-behavior)\n    scrollBehavior: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-behavior)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin)\n    scrollMargin: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block)\n    scrollMarginBlock: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end)\n    scrollMarginBlockEnd: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start)\n    scrollMarginBlockStart: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom)\n    scrollMarginBottom: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline)\n    scrollMarginInline: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end)\n    scrollMarginInlineEnd: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start)\n    scrollMarginInlineStart: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left)\n    scrollMarginLeft: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right)\n    scrollMarginRight: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top)\n    scrollMarginTop: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding)\n    scrollPadding: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block)\n    scrollPaddingBlock: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end)\n    scrollPaddingBlockEnd: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start)\n    scrollPaddingBlockStart: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom)\n    scrollPaddingBottom: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline)\n    scrollPaddingInline: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end)\n    scrollPaddingInlineEnd: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start)\n    scrollPaddingInlineStart: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left)\n    scrollPaddingLeft: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right)\n    scrollPaddingRight: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top)\n    scrollPaddingTop: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align)\n    scrollSnapAlign: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop)\n    scrollSnapStop: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type)\n    scrollSnapType: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scrollbar-color)\n    scrollbarColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scrollbar-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter)\n    scrollbarGutter: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scrollbar-width)\n    scrollbarWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scrollbar-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold)\n    shapeImageThreshold: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/shape-margin)\n    shapeMargin: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/shape-margin)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/shape-outside)\n    shapeOutside: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/shape-outside)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/shape-rendering)\n    shapeRendering: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/shape-rendering)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stop-color)\n    stopColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stop-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stop-opacity)\n    stopOpacity: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stop-opacity)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke)\n    stroke: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-dasharray)\n    strokeDasharray: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-dasharray)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-dashoffset)\n    strokeDashoffset: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-dashoffset)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-linecap)\n    strokeLinecap: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-linecap)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-linejoin)\n    strokeLinejoin: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-linejoin)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-miterlimit)\n    strokeMiterlimit: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-miterlimit)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-opacity)\n    strokeOpacity: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-opacity)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-width)\n    strokeWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/tab-size)\n    tabSize: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/tab-size)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/table-layout)\n    tableLayout: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/table-layout)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-align)\n    textAlign: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-align)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-align-last)\n    textAlignLast: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-align-last)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-anchor)\n    textAnchor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-anchor)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-box)\n    textBox: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-box)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-box-edge)\n    textBoxEdge: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-box-edge)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-box-trim)\n    textBoxTrim: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-box-trim)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-combine-upright)\n    textCombineUpright: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-combine-upright)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration)\n    textDecoration: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-color)\n    textDecorationColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-line)\n    textDecorationLine: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-line)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink)\n    textDecorationSkipInk: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-style)\n    textDecorationStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness)\n    textDecorationThickness: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis)\n    textEmphasis: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color)\n    textEmphasisColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position)\n    textEmphasisPosition: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style)\n    textEmphasisStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-indent)\n    textIndent: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-indent)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-orientation)\n    textOrientation: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-orientation)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-overflow)\n    textOverflow: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-overflow)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-rendering)\n    textRendering: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-rendering)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-shadow)\n    textShadow: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-shadow)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-transform)\n    textTransform: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-transform)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-underline-offset)\n    textUnderlineOffset: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-underline-offset)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-underline-position)\n    textUnderlinePosition: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-underline-position)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-wrap)\n    textWrap: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-wrap)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-wrap-mode)\n    textWrapMode: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-wrap-mode)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-wrap-style)\n    textWrapStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-wrap-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/top)\n    top: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/top)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/touch-action)\n    touchAction: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/touch-action)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform)\n    transform: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-box)\n    transformBox: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-box)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-origin)\n    transformOrigin: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-origin)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-style)\n    transformStyle: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-style)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition)\n    transition: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-behavior)\n    transitionBehavior: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-behavior)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-delay)\n    transitionDelay: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-delay)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-duration)\n    transitionDuration: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-duration)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-property)\n    transitionProperty: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-property)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-timing-function)\n    transitionTimingFunction: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-timing-function)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/translate)\n    translate: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/translate)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/unicode-bidi)\n    unicodeBidi: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/unicode-bidi)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/user-select)\n    userSelect: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/user-select)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/vector-effect)\n    vectorEffect: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/vector-effect)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/vertical-align)\n    verticalAlign: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/vertical-align)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/view-transition-class)\n    viewTransitionClass: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/view-transition-class)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/view-transition-name)\n    viewTransitionName: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/view-transition-name)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/visibility)\n    visibility: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/visibility)')\n    # @deprecated This is a legacy alias of `alignContent`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-content)\n    webkitAlignContent: str = Field(..., description='@deprecated This is a legacy alias of `alignContent`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-content)')\n    # @deprecated This is a legacy alias of `alignItems`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-items)\n    webkitAlignItems: str = Field(..., description='@deprecated This is a legacy alias of `alignItems`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-items)')\n    # @deprecated This is a legacy alias of `alignSelf`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-self)\n    webkitAlignSelf: str = Field(..., description='@deprecated This is a legacy alias of `alignSelf`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-self)')\n    # @deprecated This is a legacy alias of `animation`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation)\n    webkitAnimation: str = Field(..., description='@deprecated This is a legacy alias of `animation`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation)')\n    # @deprecated This is a legacy alias of `animationDelay`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-delay)\n    webkitAnimationDelay: str = Field(..., description='@deprecated This is a legacy alias of `animationDelay`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-delay)')\n    # @deprecated This is a legacy alias of `animationDirection`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-direction)\n    webkitAnimationDirection: str = Field(..., description='@deprecated This is a legacy alias of `animationDirection`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-direction)')\n    # @deprecated This is a legacy alias of `animationDuration`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-duration)\n    webkitAnimationDuration: str = Field(..., description='@deprecated This is a legacy alias of `animationDuration`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-duration)')\n    # @deprecated This is a legacy alias of `animationFillMode`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode)\n    webkitAnimationFillMode: str = Field(..., description='@deprecated This is a legacy alias of `animationFillMode`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode)')\n    # @deprecated This is a legacy alias of `animationIterationCount`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count)\n    webkitAnimationIterationCount: str = Field(..., description='@deprecated This is a legacy alias of `animationIterationCount`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count)')\n    # @deprecated This is a legacy alias of `animationName`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-name)\n    webkitAnimationName: str = Field(..., description='@deprecated This is a legacy alias of `animationName`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-name)')\n    # @deprecated This is a legacy alias of `animationPlayState`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-play-state)\n    webkitAnimationPlayState: str = Field(..., description='@deprecated This is a legacy alias of `animationPlayState`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-play-state)')\n    # @deprecated This is a legacy alias of `animationTimingFunction`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-timing-function)\n    webkitAnimationTimingFunction: str = Field(..., description='@deprecated This is a legacy alias of `animationTimingFunction`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-timing-function)')\n    # @deprecated This is a legacy alias of `appearance`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/appearance)\n    webkitAppearance: str = Field(..., description='@deprecated This is a legacy alias of `appearance`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/appearance)')\n    # @deprecated This is a legacy alias of `backfaceVisibility`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/backface-visibility)\n    webkitBackfaceVisibility: str = Field(..., description='@deprecated This is a legacy alias of `backfaceVisibility`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/backface-visibility)')\n    # @deprecated This is a legacy alias of `backgroundClip`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-clip)\n    webkitBackgroundClip: str = Field(..., description='@deprecated This is a legacy alias of `backgroundClip`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-clip)')\n    # @deprecated This is a legacy alias of `backgroundOrigin`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-origin)\n    webkitBackgroundOrigin: str = Field(..., description='@deprecated This is a legacy alias of `backgroundOrigin`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-origin)')\n    # @deprecated This is a legacy alias of `backgroundSize`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-size)\n    webkitBackgroundSize: str = Field(..., description='@deprecated This is a legacy alias of `backgroundSize`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-size)')\n    # @deprecated This is a legacy alias of `borderBottomLeftRadius`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius)\n    webkitBorderBottomLeftRadius: str = Field(..., description='@deprecated This is a legacy alias of `borderBottomLeftRadius`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius)')\n    # @deprecated This is a legacy alias of `borderBottomRightRadius`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius)\n    webkitBorderBottomRightRadius: str = Field(..., description='@deprecated This is a legacy alias of `borderBottomRightRadius`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius)')\n    # @deprecated This is a legacy alias of `borderRadius`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-radius)\n    webkitBorderRadius: str = Field(..., description='@deprecated This is a legacy alias of `borderRadius`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-radius)')\n    # @deprecated This is a legacy alias of `borderTopLeftRadius`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius)\n    webkitBorderTopLeftRadius: str = Field(..., description='@deprecated This is a legacy alias of `borderTopLeftRadius`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius)')\n    # @deprecated This is a legacy alias of `borderTopRightRadius`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius)\n    webkitBorderTopRightRadius: str = Field(..., description='@deprecated This is a legacy alias of `borderTopRightRadius`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius)')\n    # @deprecated This is a legacy alias of `boxAlign`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-align)\n    webkitBoxAlign: str = Field(..., description='@deprecated This is a legacy alias of `boxAlign`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-align)')\n    # @deprecated This is a legacy alias of `boxFlex`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-flex)\n    webkitBoxFlex: str = Field(..., description='@deprecated This is a legacy alias of `boxFlex`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-flex)')\n    # @deprecated This is a legacy alias of `boxOrdinalGroup`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-ordinal-group)\n    webkitBoxOrdinalGroup: str = Field(..., description='@deprecated This is a legacy alias of `boxOrdinalGroup`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-ordinal-group)')\n    # @deprecated This is a legacy alias of `boxOrient`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-orient)\n    webkitBoxOrient: str = Field(..., description='@deprecated This is a legacy alias of `boxOrient`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-orient)')\n    # @deprecated This is a legacy alias of `boxPack`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-pack)\n    webkitBoxPack: str = Field(..., description='@deprecated This is a legacy alias of `boxPack`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-pack)')\n    # @deprecated This is a legacy alias of `boxShadow`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-shadow)\n    webkitBoxShadow: str = Field(..., description='@deprecated This is a legacy alias of `boxShadow`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-shadow)')\n    # @deprecated This is a legacy alias of `boxSizing`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-sizing)\n    webkitBoxSizing: str = Field(..., description='@deprecated This is a legacy alias of `boxSizing`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-sizing)')\n    # @deprecated This is a legacy alias of `filter`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/filter)\n    webkitFilter: str = Field(..., description='@deprecated This is a legacy alias of `filter`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/filter)')\n    # @deprecated This is a legacy alias of `flex`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex)\n    webkitFlex: str = Field(..., description='@deprecated This is a legacy alias of `flex`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex)')\n    # @deprecated This is a legacy alias of `flexBasis`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-basis)\n    webkitFlexBasis: str = Field(..., description='@deprecated This is a legacy alias of `flexBasis`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-basis)')\n    # @deprecated This is a legacy alias of `flexDirection`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-direction)\n    webkitFlexDirection: str = Field(..., description='@deprecated This is a legacy alias of `flexDirection`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-direction)')\n    # @deprecated This is a legacy alias of `flexFlow`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-flow)\n    webkitFlexFlow: str = Field(..., description='@deprecated This is a legacy alias of `flexFlow`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-flow)')\n    # @deprecated This is a legacy alias of `flexGrow`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-grow)\n    webkitFlexGrow: str = Field(..., description='@deprecated This is a legacy alias of `flexGrow`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-grow)')\n    # @deprecated This is a legacy alias of `flexShrink`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-shrink)\n    webkitFlexShrink: str = Field(..., description='@deprecated This is a legacy alias of `flexShrink`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-shrink)')\n    # @deprecated This is a legacy alias of `flexWrap`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-wrap)\n    webkitFlexWrap: str = Field(..., description='@deprecated This is a legacy alias of `flexWrap`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-wrap)')\n    # @deprecated This is a legacy alias of `justifyContent`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/justify-content)\n    webkitJustifyContent: str = Field(..., description='@deprecated This is a legacy alias of `justifyContent`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/justify-content)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/line-clamp)\n    webkitLineClamp: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/line-clamp)')\n    # @deprecated This is a legacy alias of `mask`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask)\n    webkitMask: str = Field(..., description='@deprecated This is a legacy alias of `mask`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask)')\n    # @deprecated This is a legacy alias of `maskBorder`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border)\n    webkitMaskBoxImage: str = Field(..., description='@deprecated This is a legacy alias of `maskBorder`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border)')\n    # @deprecated This is a legacy alias of `maskBorderOutset`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-outset)\n    webkitMaskBoxImageOutset: str = Field(..., description='@deprecated This is a legacy alias of `maskBorderOutset`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-outset)')\n    # @deprecated This is a legacy alias of `maskBorderRepeat`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat)\n    webkitMaskBoxImageRepeat: str = Field(..., description='@deprecated This is a legacy alias of `maskBorderRepeat`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat)')\n    # @deprecated This is a legacy alias of `maskBorderSlice`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-slice)\n    webkitMaskBoxImageSlice: str = Field(..., description='@deprecated This is a legacy alias of `maskBorderSlice`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-slice)')\n    # @deprecated This is a legacy alias of `maskBorderSource`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-source)\n    webkitMaskBoxImageSource: str = Field(..., description='@deprecated This is a legacy alias of `maskBorderSource`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-source)')\n    # @deprecated This is a legacy alias of `maskBorderWidth`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-width)\n    webkitMaskBoxImageWidth: str = Field(..., description='@deprecated This is a legacy alias of `maskBorderWidth`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-width)')\n    # @deprecated This is a legacy alias of `maskClip`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-clip)\n    webkitMaskClip: str = Field(..., description='@deprecated This is a legacy alias of `maskClip`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-clip)')\n    # @deprecated This is a legacy alias of `maskComposite`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-composite)\n    webkitMaskComposite: str = Field(..., description='@deprecated This is a legacy alias of `maskComposite`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-composite)')\n    # @deprecated This is a legacy alias of `maskImage`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-image)\n    webkitMaskImage: str = Field(..., description='@deprecated This is a legacy alias of `maskImage`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-image)')\n    # @deprecated This is a legacy alias of `maskOrigin`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-origin)\n    webkitMaskOrigin: str = Field(..., description='@deprecated This is a legacy alias of `maskOrigin`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-origin)')\n    # @deprecated This is a legacy alias of `maskPosition`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-position)\n    webkitMaskPosition: str = Field(..., description='@deprecated This is a legacy alias of `maskPosition`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-position)')\n    # @deprecated This is a legacy alias of `maskRepeat`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-repeat)\n    webkitMaskRepeat: str = Field(..., description='@deprecated This is a legacy alias of `maskRepeat`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-repeat)')\n    # @deprecated This is a legacy alias of `maskSize`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-size)\n    webkitMaskSize: str = Field(..., description='@deprecated This is a legacy alias of `maskSize`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-size)')\n    # @deprecated This is a legacy alias of `order`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/order)\n    webkitOrder: str = Field(..., description='@deprecated This is a legacy alias of `order`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/order)')\n    # @deprecated This is a legacy alias of `perspective`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/perspective)\n    webkitPerspective: str = Field(..., description='@deprecated This is a legacy alias of `perspective`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/perspective)')\n    # @deprecated This is a legacy alias of `perspectiveOrigin`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/perspective-origin)\n    webkitPerspectiveOrigin: str = Field(..., description='@deprecated This is a legacy alias of `perspectiveOrigin`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/perspective-origin)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-fill-color)\n    webkitTextFillColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-fill-color)')\n    # @deprecated This is a legacy alias of `textSizeAdjust`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-size-adjust)\n    webkitTextSizeAdjust: str = Field(..., description='@deprecated This is a legacy alias of `textSizeAdjust`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-size-adjust)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke)\n    webkitTextStroke: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-color)\n    webkitTextStrokeColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-color)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-width)\n    webkitTextStrokeWidth: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-width)')\n    # @deprecated This is a legacy alias of `transform`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform)\n    webkitTransform: str = Field(..., description='@deprecated This is a legacy alias of `transform`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform)')\n    # @deprecated This is a legacy alias of `transformOrigin`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-origin)\n    webkitTransformOrigin: str = Field(..., description='@deprecated This is a legacy alias of `transformOrigin`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-origin)')\n    # @deprecated This is a legacy alias of `transformStyle`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-style)\n    webkitTransformStyle: str = Field(..., description='@deprecated This is a legacy alias of `transformStyle`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-style)')\n    # @deprecated This is a legacy alias of `transition`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition)\n    webkitTransition: str = Field(..., description='@deprecated This is a legacy alias of `transition`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition)')\n    # @deprecated This is a legacy alias of `transitionDelay`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-delay)\n    webkitTransitionDelay: str = Field(..., description='@deprecated This is a legacy alias of `transitionDelay`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-delay)')\n    # @deprecated This is a legacy alias of `transitionDuration`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-duration)\n    webkitTransitionDuration: str = Field(..., description='@deprecated This is a legacy alias of `transitionDuration`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-duration)')\n    # @deprecated This is a legacy alias of `transitionProperty`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-property)\n    webkitTransitionProperty: str = Field(..., description='@deprecated This is a legacy alias of `transitionProperty`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-property)')\n    # @deprecated This is a legacy alias of `transitionTimingFunction`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-timing-function)\n    webkitTransitionTimingFunction: str = Field(..., description='@deprecated This is a legacy alias of `transitionTimingFunction`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-timing-function)')\n    # @deprecated This is a legacy alias of `userSelect`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/user-select)\n    webkitUserSelect: str = Field(..., description='@deprecated This is a legacy alias of `userSelect`.
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/user-select)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/white-space)\n    whiteSpace: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/white-space)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/white-space-collapse)\n    whiteSpaceCollapse: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/white-space-collapse)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/widows)\n    widows: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/widows)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/width)\n    width: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/will-change)\n    willChange: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/will-change)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/word-break)\n    wordBreak: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/word-break)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/word-spacing)\n    wordSpacing: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/word-spacing)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-wrap)\n    wordWrap: str = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-wrap)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/writing-mode)\n    writingMode: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/writing-mode)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/x)\n    x: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/x)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/y)\n    y: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/y)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/z-index)\n    zIndex: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/z-index)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/zoom)\n    zoom: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/CSS/zoom)')\n\n# The **`CSSStyleRule`** interface represents a single CSS style rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule)\nclass CSSStyleRule(CSSGroupingRule):\n    # The **`selectorText`** property of the CSSStyleRule interface gets and sets the selectors associated with the `CSSStyleRule`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule/selectorText)\n    selectorText: str = Field(..., description='The **`selectorText`** property of the CSSStyleRule interface gets and sets the selectors associated with the `CSSStyleRule`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule/selectorText)')\n    # The **`styleMap`** read-only property of the which provides access to the rule's property-value pairs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule/styleMap)\n    styleMap: StylePropertyMap = Field(..., description='The **`styleMap`** read-only property of the which provides access to the rule\'s property-value pairs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule/styleMap)')\n\n# The **`CSSStyleSheet`** interface represents a single CSS stylesheet, and lets you inspect and modify the list of rules contained in the stylesheet.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet)\nclass CSSStyleSheet(StyleSheet):\n    # The read-only CSSStyleSheet property **`cssRules`** returns a live CSSRuleList which provides a real-time, up-to-date list of every CSS rule which comprises the stylesheet.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/cssRules)\n    cssRules: CSSRuleList = Field(..., description='The read-only CSSStyleSheet property **`cssRules`** returns a live CSSRuleList which provides a real-time, up-to-date list of every CSS rule which comprises the stylesheet.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/cssRules)')\n    # The read-only CSSStyleSheet property **`ownerRule`** returns the CSSImportRule corresponding to the @import at-rule which imported the stylesheet into the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/ownerRule)\n    ownerRule: Union[CSSRule, null] = Field(..., description='The read-only CSSStyleSheet property **`ownerRule`** returns the CSSImportRule corresponding to the @import at-rule which imported the stylesheet into the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/ownerRule)')\n    # **`rules`** is a _deprecated_ _legacy property_ of the CSSStyleSheet interface.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/rules)\n    rules: CSSRuleList = Field(..., description='**`rules`** is a _deprecated_ _legacy property_ of the CSSStyleSheet interface.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/rules)')\n\n# The **`CSSStyleValue`** interface of the CSS Typed Object Model API is the base class of all CSS values accessible through the Typed OM API.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleValue)\nclass CSSStyleValue(BaseModel):\n    pass\n\n# The **`CSSSupportsRule`** interface represents a single CSS @supports at-rule.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSupportsRule)\nclass CSSSupportsRule(CSSConditionRule):\n    pass\n\n# The **`CSSTransformComponent`** interface of the CSS Typed Object Model API is part of the CSSTransformValue interface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent)\nclass CSSTransformComponent(BaseModel):\n    # The **`is2D`** read-only property of the CSSTransformComponent interface indicates where the transform is 2D or 3D.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent/is2D)\n    is2D: bool = Field(..., description='The **`is2D`** read-only property of the CSSTransformComponent interface indicates where the transform is 2D or 3D.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent/is2D)')\n\n# The **`CSSTransformValue`** interface of the CSS Typed Object Model API represents `transform-list` values as used by the CSS transform property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue)\nclass CSSTransformValue(CSSStyleValue):\n    # The read-only **`is2D`** property of the In the case of the `CSSTransformValue` this property returns true unless any of the individual functions return false for `Is2D`, in which case it returns false.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/is2D)\n    is2D: bool = Field(..., description='The read-only **`is2D`** property of the In the case of the `CSSTransformValue` this property returns true unless any of the individual functions return false for `Is2D`, in which case it returns false.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/is2D)')\n    # The read-only **`length`** property of the the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/length)\n    length: float = Field(..., description='The read-only **`length`** property of the the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/length)')\n\n# The **`CSSTransition`** interface of the Web Animations API represents an Animation object used for a CSS Transition.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransition)\nclass CSSTransition(Animation):\n    # The **`transitionProperty`** property of the name** of the transition.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransition/transitionProperty)\n    transitionProperty: str = Field(..., description='The **`transitionProperty`** property of the name** of the transition.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransition/transitionProperty)')\n\n# The **`CSSTranslate`** interface of the CSS Typed Object Model API represents the translate() value of the individual transform property in CSS.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate)\nclass CSSTranslate(CSSTransformComponent):\n    # The **`x`** property of the translating vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/x)\n    x: CSSNumericValue = Field(..., description='The **`x`** property of the translating vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/x)')\n    # The **`y`** property of the translating vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/y)\n    y: CSSNumericValue = Field(..., description='The **`y`** property of the translating vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/y)')\n    # The **`z`** property of the vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/z)\n    z: CSSNumericValue = Field(..., description='The **`z`** property of the vector.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/z)')\n\n# The **`CSSUnitValue`** interface of the CSS Typed Object Model API represents values that contain a single unit type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue)\nclass CSSUnitValue(CSSNumericValue):\n    # The **`CSSUnitValue.unit`** read-only property of the CSSUnitValue interface returns a string indicating the type of unit.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/unit)\n    unit: str = Field(..., description='The **`CSSUnitValue.unit`** read-only property of the CSSUnitValue interface returns a string indicating the type of unit.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/unit)')\n    # The **`CSSUnitValue.value`** property of the A double.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/value)\n    value: float = Field(..., description='The **`CSSUnitValue.value`** property of the A double.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/value)')\n\n# The **`CSSUnparsedValue`** interface of the CSS Typed Object Model API represents property values that reference custom properties.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnparsedValue)\nclass CSSUnparsedValue(CSSStyleValue):\n    # The **`length`** read-only property of the An integer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnparsedValue/length)\n    length: float = Field(..., description='The **`length`** read-only property of the An integer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnparsedValue/length)')\n\n# The **`CSSVariableReferenceValue`** interface of the CSS Typed Object Model API allows you to create a custom name for a built-in CSS value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue)\nclass CSSVariableReferenceValue(BaseModel):\n    # The **`fallback`** read-only property of the A CSSUnparsedValue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/fallback)\n    fallback: Union[CSSUnparsedValue, null] = Field(..., description='The **`fallback`** read-only property of the A CSSUnparsedValue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/fallback)')\n    # The **`variable`** property of the A string beginning with `--` (that is, a custom property name).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/variable)\n    variable: str = Field(..., description='The **`variable`** property of the A string beginning with `--` (that is, a custom property name).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/variable)')\n\nclass CSSViewTransitionRule(CSSRule):\n    navigation: str = Field(...)\n    types: ReadonlyArray<string> = Field(...)\n\n# The **`Cache`** interface provides a persistent storage mechanism for Request / Response object pairs that are cached in long lived memory.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache)\nclass Cache(BaseModel):\n    pass\n\n# The **`CacheStorage`** interface represents the storage for Cache objects.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage)\nclass CacheStorage(BaseModel):\n    pass\n\n# The **`CanvasCaptureMediaStreamTrack`** interface of the Media Capture and Streams API represents the video track contained in a MediaStream being generated from a canvas following a call to HTMLCanvasElement.captureStream().
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasCaptureMediaStreamTrack)\nclass CanvasCaptureMediaStreamTrack(MediaStreamTrack):\n    # The **`canvas`** read-only property of the CanvasCaptureMediaStreamTrack interface returns the HTMLCanvasElement from which frames are being captured.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasCaptureMediaStreamTrack/canvas)\n    canvas: HTMLCanvasElement = Field(..., description='The **`canvas`** read-only property of the CanvasCaptureMediaStreamTrack interface returns the HTMLCanvasElement from which frames are being captured.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasCaptureMediaStreamTrack/canvas)')\n\nclass CanvasCompositing(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalAlpha)\n    globalAlpha: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalAlpha)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)\n    globalCompositeOperation: GlobalCompositeOperation = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)')\n\nclass CanvasDrawImage(BaseModel):\n    pass\n\nclass CanvasDrawPath(BaseModel):\n    pass\n\nclass CanvasFillStrokeStyles(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle)\n    fillStyle: Union[str, CanvasGradient, CanvasPattern] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeStyle)\n    strokeStyle: Union[str, CanvasGradient, CanvasPattern] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeStyle)')\n\nclass CanvasFilters(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/filter)\n    filter: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/filter)')\n\n# The **`CanvasGradient`** interface represents an opaque object describing a gradient.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasGradient)\nclass CanvasGradient(BaseModel):\n    pass\n\nclass CanvasImageData(BaseModel):\n    pass\n\nclass CanvasImageSmoothing(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)\n    imageSmoothingEnabled: bool = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality)\n    imageSmoothingQuality: ImageSmoothingQuality = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality)')\n\nclass CanvasPath(BaseModel):\n    pass\n\nclass CanvasPathDrawingStyles(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineCap)\n    lineCap: CanvasLineCap = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineCap)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)\n    lineDashOffset: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineJoin)\n    lineJoin: CanvasLineJoin = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineJoin)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineWidth)\n    lineWidth: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineWidth)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/miterLimit)\n    miterLimit: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/miterLimit)')\n\n# The **`CanvasPattern`** interface represents an opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasPattern)\nclass CanvasPattern(BaseModel):\n    pass\n\nclass CanvasRect(BaseModel):\n    pass\n\n# The **`CanvasRenderingContext2D`** interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a canvas element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D)\nclass CanvasRenderingContext2D(CanvasCompositing):\n    # The **`CanvasRenderingContext2D.canvas`** property, part of the Canvas API, is a read-only reference to the might be `null` if there is no associated canvas element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/canvas)\n    canvas: HTMLCanvasElement = Field(..., description='The **`CanvasRenderingContext2D.canvas`** property, part of the Canvas API, is a read-only reference to the might be `null` if there is no associated canvas element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/canvas)')\n\nclass CanvasSettings(BaseModel):\n    pass\n\nclass CanvasShadowStyles(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowBlur)\n    shadowBlur: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowBlur)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowColor)\n    shadowColor: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowColor)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)\n    shadowOffsetX: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)\n    shadowOffsetY: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)')\n\nclass CanvasState(BaseModel):\n    pass\n\nclass CanvasText(BaseModel):\n    pass\n\nclass CanvasTextDrawingStyles(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/direction)\n    direction: CanvasDirection = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/direction)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/font)\n    font: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/font)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontKerning)\n    fontKerning: CanvasFontKerning = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontKerning)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontStretch)\n    fontStretch: CanvasFontStretch = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontStretch)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontVariantCaps)\n    fontVariantCaps: CanvasFontVariantCaps = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontVariantCaps)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/letterSpacing)\n    letterSpacing: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/letterSpacing)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign)\n    textAlign: CanvasTextAlign = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textBaseline)\n    textBaseline: CanvasTextBaseline = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textBaseline)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textRendering)\n    textRendering: CanvasTextRendering = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textRendering)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/wordSpacing)\n    wordSpacing: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/wordSpacing)')\n\nclass CanvasTransform(BaseModel):\n    pass\n\nclass CanvasUserInterface(BaseModel):\n    pass\n\n# The `CaretPosition` interface represents the caret position, an indicator for the text insertion point.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CaretPosition)\nclass CaretPosition(BaseModel):\n    offset: float = Field(...)\n    offsetNode: Node = Field(...)\n\n# The `ChannelMergerNode` interface, often used in conjunction with its opposite, ChannelSplitterNode, reunites different mono inputs into a single output.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ChannelMergerNode)\nclass ChannelMergerNode(AudioNode):\n    pass\n\n# The `ChannelSplitterNode` interface, often used in conjunction with its opposite, ChannelMergerNode, separates the different channels of an audio source into a set of mono outputs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ChannelSplitterNode)\nclass ChannelSplitterNode(AudioNode):\n    pass\n\n# The **`CharacterData`** abstract interface represents a Node object that contains characters.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData)\nclass CharacterData(Node):\n    # The **`data`** property of the CharacterData interface represent the value of the current object's data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/data)\n    data: str = Field(..., description='The **`data`** property of the CharacterData interface represent the value of the current object\'s data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/data)')\n    # The read-only **`CharacterData.length`** property returns the number of characters in the contained data, as a positive integer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/length)\n    length: float = Field(..., description='The read-only **`CharacterData.length`** property returns the number of characters in the contained data, as a positive integer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/length)')\n    ownerDocument: Document = Field(...)\n\nclass ChildNode(Node):\n    pass\n\n# @deprecated\nclass ClientRect(DOMRect):\n    pass\n\n# The **`Clipboard`** interface of the Clipboard API provides read and write access to the contents of the system clipboard.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Clipboard)\nclass Clipboard(EventTarget):\n    pass\n\n# The **`ClipboardEvent`** interface of the Clipboard API represents events providing information related to modification of the clipboard, that is Element/cut_event, Element/copy_event, and Element/paste_event events.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardEvent)\nclass ClipboardEvent(Event):\n    # The **`clipboardData`** property of the ClipboardEvent interface holds a DataTransfer object, which can be used to: - specify what data should be put into the clipboard from the Element/cut_event and Element/copy_event event handlers, typically with a DataTransfer.setData call; - obtain the data to be pasted from the Element/paste_event event handler, typically with a DataTransfer.getData call.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardEvent/clipboardData)\n    clipboardData: Union[DataTransfer, null] = Field(..., description='The **`clipboardData`** property of the ClipboardEvent interface holds a DataTransfer object, which can be used to: - specify what data should be put into the clipboard from the Element/cut_event and Element/copy_event event handlers, typically with a DataTransfer.setData call; - obtain the data to be pasted from the Element/paste_event event handler, typically with a DataTransfer.getData call.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardEvent/clipboardData)')\n\n# The **`ClipboardItem`** interface of the Clipboard API represents a single item format, used when reading or writing clipboard data using Clipboard.read() and Clipboard.write() respectively.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardItem)\nclass ClipboardItem(BaseModel):\n    # The read-only **`presentationStyle`** property of the ClipboardItem interface returns a string indicating how an item should be presented.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardItem/presentationStyle)\n    presentationStyle: PresentationStyle = Field(..., description='The read-only **`presentationStyle`** property of the ClipboardItem interface returns a string indicating how an item should be presented.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardItem/presentationStyle)')\n    # The read-only **`types`** property of the ClipboardItem interface returns an Array of MIME type available within the ClipboardItem.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardItem/types)\n    types: ReadonlyArray<string> = Field(..., description='The read-only **`types`** property of the ClipboardItem interface returns an Array of MIME type available within the ClipboardItem.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardItem/types)')\n\n# A `CloseEvent` is sent to clients using WebSockets when the connection is closed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent)\nclass CloseEvent(Event):\n    # The **`code`** read-only property of the CloseEvent interface returns a WebSocket connection close code indicating the reason the connection was closed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/code)\n    code: float = Field(..., description='The **`code`** read-only property of the CloseEvent interface returns a WebSocket connection close code indicating the reason the connection was closed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/code)')\n    # The **`reason`** read-only property of the CloseEvent interface returns the WebSocket connection close reason the server gave for closing the connection; that is, a concise human-readable prose explanation for the closure.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/reason)\n    reason: str = Field(..., description='The **`reason`** read-only property of the CloseEvent interface returns the WebSocket connection close reason the server gave for closing the connection; that is, a concise human-readable prose explanation for the closure.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/reason)')\n    # The **`wasClean`** read-only property of the CloseEvent interface returns `true` if the connection closed cleanly.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/wasClean)\n    wasClean: bool = Field(..., description='The **`wasClean`** read-only property of the CloseEvent interface returns `true` if the connection closed cleanly.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/wasClean)')\n\n# The **`Comment`** interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Comment)\nclass Comment(CharacterData):\n    pass\n\n# The DOM **`CompositionEvent`** represents events that occur due to the user indirectly entering text.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CompositionEvent)\nclass CompositionEvent(UIEvent):\n    # The **`data`** read-only property of the method that raised the event; its exact nature varies depending on the type of event that generated the `CompositionEvent` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CompositionEvent/data)\n    data: str = Field(..., description='The **`data`** read-only property of the method that raised the event; its exact nature varies depending on the type of event that generated the `CompositionEvent` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CompositionEvent/data)')\n\n# The **`CompressionStream`** interface of the Compression Streams API is an API for compressing a stream of data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream)\nclass CompressionStream(GenericTransformStream):\n    readable: ReadableStream<Uint8Array<ArrayBuffer>> = Field(...)\n    writable: WritableStream<BufferSource> = Field(...)\n\n# The `ConstantSourceNode` interface—part of the Web Audio API—represents an audio source (based upon AudioScheduledSourceNode) whose output is single unchanging value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ConstantSourceNode)\nclass ConstantSourceNode(AudioScheduledSourceNode):\n    # The read-only `offset` property of the ConstantSourceNode interface returns a AudioParam object indicating the numeric a-rate value which is always returned by the source when asked for the next sample.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ConstantSourceNode/offset)\n    offset: AudioParam = Field(..., description='The read-only `offset` property of the ConstantSourceNode interface returns a AudioParam object indicating the numeric a-rate value which is always returned by the source when asked for the next sample.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ConstantSourceNode/offset)')\n\n# The **`ContentVisibilityAutoStateChangeEvent`** interface is the event object for the element/contentvisibilityautostatechange_event event, which fires on any element with content-visibility set on it when it starts or stops being relevant to the user and skipping its contents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContentVisibilityAutoStateChangeEvent)\nclass ContentVisibilityAutoStateChangeEvent(Event):\n    # The `skipped` read-only property of the ContentVisibilityAutoStateChangeEvent interface returns `true` if the user agent skips the element's contents, or `false` otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContentVisibilityAutoStateChangeEvent/skipped)\n    skipped: bool = Field(..., description='The `skipped` read-only property of the ContentVisibilityAutoStateChangeEvent interface returns `true` if the user agent skips the element\'s contents, or `false` otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContentVisibilityAutoStateChangeEvent/skipped)')\n\n# The `ConvolverNode` interface is an AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ConvolverNode)\nclass ConvolverNode(AudioNode):\n    # The **`buffer`** property of the ConvolverNode interface represents a mono, stereo, or 4-channel AudioBuffer containing the (possibly multichannel) impulse response used by the `ConvolverNode` to create the reverb effect.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ConvolverNode/buffer)\n    buffer: Union[AudioBuffer, null] = Field(..., description='The **`buffer`** property of the ConvolverNode interface represents a mono, stereo, or 4-channel AudioBuffer containing the (possibly multichannel) impulse response used by the `ConvolverNode` to create the reverb effect.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ConvolverNode/buffer)')\n    # The `normalize` property of the ConvolverNode interface is a boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the `buffer` attribute is set, or not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ConvolverNode/normalize)\n    normalize: bool = Field(..., description='The `normalize` property of the ConvolverNode interface is a boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the `buffer` attribute is set, or not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ConvolverNode/normalize)')\n\n# The **`CookieChangeEvent`** interface of the Cookie Store API is the event type of the CookieStore/change_event event fired at a CookieStore when any cookies are created or deleted.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieChangeEvent)\nclass CookieChangeEvent(Event):\n    # The **`changed`** read-only property of the CookieChangeEvent interface returns an array of the cookies that have been changed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieChangeEvent/changed)\n    changed: ReadonlyArray<CookieListItem> = Field(..., description='The **`changed`** read-only property of the CookieChangeEvent interface returns an array of the cookies that have been changed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieChangeEvent/changed)')\n    # The **`deleted`** read-only property of the CookieChangeEvent interface returns an array of the cookies that have been deleted by the given `CookieChangeEvent` instance.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieChangeEvent/deleted)\n    deleted: ReadonlyArray<CookieListItem> = Field(..., description='The **`deleted`** read-only property of the CookieChangeEvent interface returns an array of the cookies that have been deleted by the given `CookieChangeEvent` instance.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieChangeEvent/deleted)')\n\nclass CookieStoreEventMap(BaseModel):\n    change: CookieChangeEvent = Field(...)\n\n# The **`CookieStore`** interface of the Cookie Store API provides methods for getting and setting cookies asynchronously from either a page or a service worker.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieStore)\nclass CookieStore(EventTarget):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieStore/change_event)\n    onchange: Union[((this: CookieStore, ev: CookieChangeEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieStore/change_event)')\n\n# The **`CookieStoreManager`** interface of the Cookie Store API allows service workers to subscribe to cookie change events.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieStoreManager)\nclass CookieStoreManager(BaseModel):\n    pass\n\n# The **`CountQueuingStrategy`** interface of the Streams API provides a built-in chunk counting queuing strategy that can be used when constructing streams.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy)\nclass CountQueuingStrategy(QueuingStrategy):\n    # The read-only **`CountQueuingStrategy.highWaterMark`** property returns the total number of chunks that can be contained in the internal queue before backpressure is applied.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/highWaterMark)\n    highWaterMark: float = Field(..., description='The read-only **`CountQueuingStrategy.highWaterMark`** property returns the total number of chunks that can be contained in the internal queue before backpressure is applied.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/highWaterMark)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/size)\n    size: QueuingStrategySize = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/size)')\n\n# The **`Credential`** interface of the Credential Management API provides information about an entity (usually a user) normally as a prerequisite to a trust decision.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Credential)\nclass Credential(BaseModel):\n    # The **`id`** read-only property of the Credential interface returns a string containing the credential's identifier.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Credential/id)\n    id: str = Field(..., description='The **`id`** read-only property of the Credential interface returns a string containing the credential\'s identifier.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Credential/id)')\n    # The **`type`** read-only property of the Credential interface returns a string containing the credential's type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Credential/type)\n    type: str = Field(..., description='The **`type`** read-only property of the Credential interface returns a string containing the credential\'s type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Credential/type)')\n\n# The **`CredentialsContainer`** interface of the Credential Management API exposes methods to request credentials and notify the user agent when events such as successful sign in or sign out happen.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CredentialsContainer)\nclass CredentialsContainer(BaseModel):\n    pass\n\n# The **`Crypto`** interface represents basic cryptography features available in the current context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto)\nclass Crypto(BaseModel):\n    # The **`Crypto.subtle`** read-only property returns a cryptographic operations.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto/subtle)\n    subtle: SubtleCrypto = Field(..., description='The **`Crypto.subtle`** read-only property returns a cryptographic operations.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto/subtle)')\n\n# The **`CryptoKey`** interface of the Web Crypto API represents a cryptographic key obtained from one of the SubtleCrypto methods SubtleCrypto.generateKey, SubtleCrypto.deriveKey, SubtleCrypto.importKey, or SubtleCrypto.unwrapKey.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey)\nclass CryptoKey(BaseModel):\n    # The read-only **`algorithm`** property of the CryptoKey interface returns an object describing the algorithm for which this key can be used, and any associated extra parameters.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/algorithm)\n    algorithm: KeyAlgorithm = Field(..., description='The read-only **`algorithm`** property of the CryptoKey interface returns an object describing the algorithm for which this key can be used, and any associated extra parameters.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/algorithm)')\n    # The read-only **`extractable`** property of the CryptoKey interface indicates whether or not the key may be extracted using `SubtleCrypto.exportKey()` or `SubtleCrypto.wrapKey()`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/extractable)\n    extractable: bool = Field(..., description='The read-only **`extractable`** property of the CryptoKey interface indicates whether or not the key may be extracted using `SubtleCrypto.exportKey()` or `SubtleCrypto.wrapKey()`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/extractable)')\n    # The read-only **`type`** property of the CryptoKey interface indicates which kind of key is represented by the object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/type)\n    type: KeyType = Field(..., description='The read-only **`type`** property of the CryptoKey interface indicates which kind of key is represented by the object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/type)')\n    # The read-only **`usages`** property of the CryptoKey interface indicates what can be done with the key.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/usages)\n    usages: List[List[KeyUsage]] = Field(..., description='The read-only **`usages`** property of the CryptoKey interface indicates what can be done with the key.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/usages)')\n\n# The **`CustomElementRegistry`** interface provides methods for registering custom elements and querying registered elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry)\nclass CustomElementRegistry(BaseModel):\n    pass\n\n# The **`CustomEvent`** interface represents events initialized by an application for any purpose.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomEvent)\nclass CustomEvent(Event):\n    # The read-only **`detail`** property of the CustomEvent interface returns any data passed when initializing the event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomEvent/detail)\n    detail: T = Field(..., description='The read-only **`detail`** property of the CustomEvent interface returns any data passed when initializing the event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomEvent/detail)')\n\n# The **`CustomStateSet`** interface of the Document Object Model stores a list of states for an autonomous custom element, and allows states to be added and removed from the set.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomStateSet)\nclass CustomStateSet(BaseModel):\n    pass\n\n# The **`DOMException`** interface represents an abnormal event (called an **exception**) that occurs as a result of calling a method or accessing a property of a web API.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException)\nclass DOMException(Error):\n    # The **`code`** read-only property of the DOMException interface returns one of the legacy error code constants, or `0` if none match.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/code)\n    code: float = Field(..., description='The **`code`** read-only property of the DOMException interface returns one of the legacy error code constants, or `0` if none match.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/code)')\n    # The **`message`** read-only property of the a message or description associated with the given error name.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/message)\n    message: str = Field(..., description='The **`message`** read-only property of the a message or description associated with the given error name.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/message)')\n    # The **`name`** read-only property of the one of the strings associated with an error name.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/name)\n    name: str = Field(..., description='The **`name`** read-only property of the one of the strings associated with an error name.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/name)')\n    INDEX_SIZE_ERR: 1 = Field(...)\n    DOMSTRING_SIZE_ERR: 2 = Field(...)\n    HIERARCHY_REQUEST_ERR: 3 = Field(...)\n    WRONG_DOCUMENT_ERR: 4 = Field(...)\n    INVALID_CHARACTER_ERR: 5 = Field(...)\n    NO_DATA_ALLOWED_ERR: 6 = Field(...)\n    NO_MODIFICATION_ALLOWED_ERR: 7 = Field(...)\n    NOT_FOUND_ERR: 8 = Field(...)\n    NOT_SUPPORTED_ERR: 9 = Field(...)\n    INUSE_ATTRIBUTE_ERR: 10 = Field(...)\n    INVALID_STATE_ERR: 11 = Field(...)\n    SYNTAX_ERR: 12 = Field(...)\n    INVALID_MODIFICATION_ERR: 13 = Field(...)\n    NAMESPACE_ERR: 14 = Field(...)\n    INVALID_ACCESS_ERR: 15 = Field(...)\n    VALIDATION_ERR: 16 = Field(...)\n    TYPE_MISMATCH_ERR: 17 = Field(...)\n    SECURITY_ERR: 18 = Field(...)\n    NETWORK_ERR: 19 = Field(...)\n    ABORT_ERR: 20 = Field(...)\n    URL_MISMATCH_ERR: 21 = Field(...)\n    QUOTA_EXCEEDED_ERR: 22 = Field(...)\n    TIMEOUT_ERR: 23 = Field(...)\n    INVALID_NODE_TYPE_ERR: 24 = Field(...)\n    DATA_CLONE_ERR: 25 = Field(...)\n\n# The **`DOMImplementation`** interface represents an object providing methods which are not dependent on any particular document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMImplementation)\nclass DOMImplementation(BaseModel):\n    pass\n\n# The **`DOMMatrix`** interface represents 4×4 matrices, suitable for 2D and 3D operations including rotation and translation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix)\nclass DOMMatrix(DOMMatrixReadOnly):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    a: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    b: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    c: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    d: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    e: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    f: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    m11: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    m12: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    m13: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    m14: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    m21: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    m22: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    m23: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    m24: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    m31: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    m32: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    m33: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    m34: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    m41: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    m42: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    m43: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)\n    m44: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)')\n\n# The **`DOMMatrixReadOnly`** interface represents a read-only 4×4 matrix, suitable for 2D and 3D operations.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly)\nclass DOMMatrixReadOnly(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    a: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    b: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    c: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    d: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    e: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    f: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # The readonly **`is2D`** property of the DOMMatrixReadOnly interface is a Boolean flag that is `true` when the matrix is 2D.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/is2D)\n    is2D: bool = Field(..., description='The readonly **`is2D`** property of the DOMMatrixReadOnly interface is a Boolean flag that is `true` when the matrix is 2D.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/is2D)')\n    # The readonly **`isIdentity`** property of the DOMMatrixReadOnly interface is a Boolean whose value is `true` if the matrix is the identity matrix.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/isIdentity)\n    isIdentity: bool = Field(..., description='The readonly **`isIdentity`** property of the DOMMatrixReadOnly interface is a Boolean whose value is `true` if the matrix is the identity matrix.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/isIdentity)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    m11: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    m12: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    m13: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    m14: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    m21: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    m22: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    m23: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    m24: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    m31: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    m32: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    m33: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    m34: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    m41: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    m42: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    m43: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)\n    m44: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)')\n\n# The **`DOMParser`** interface provides the ability to parse XML or HTML source code from a string into a DOM Document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMParser)\nclass DOMParser(BaseModel):\n    pass\n\n# A **`DOMPoint`** object represents a 2D or 3D point in a coordinate system; it includes values for the coordinates in up to three dimensions, as well as an optional perspective value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint)\nclass DOMPoint(DOMPointReadOnly):\n    # The **`DOMPoint`** interface's **`w`** property holds the point's perspective value, w, for a point in space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/w)\n    w: float = Field(..., description='The **`DOMPoint`** interface\'s **`w`** property holds the point\'s perspective value, w, for a point in space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/w)')\n    # The **`DOMPoint`** interface's **`x`** property holds the horizontal coordinate, x, for a point in space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/x)\n    x: float = Field(..., description='The **`DOMPoint`** interface\'s **`x`** property holds the horizontal coordinate, x, for a point in space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/x)')\n    # The **`DOMPoint`** interface's **`y`** property holds the vertical coordinate, _y_, for a point in space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/y)\n    y: float = Field(..., description='The **`DOMPoint`** interface\'s **`y`** property holds the vertical coordinate, _y_, for a point in space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/y)')\n    # The **`DOMPoint`** interface's **`z`** property specifies the depth coordinate of a point in space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/z)\n    z: float = Field(..., description='The **`DOMPoint`** interface\'s **`z`** property specifies the depth coordinate of a point in space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/z)')\n\n# The **`DOMPointReadOnly`** interface specifies the coordinate and perspective fields used by DOMPoint to define a 2D or 3D point in a coordinate system.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly)\nclass DOMPointReadOnly(BaseModel):\n    # The **`DOMPointReadOnly`** interface's **`w`** property holds the point's perspective value, `w`, for a read-only point in space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/w)\n    w: float = Field(..., description='The **`DOMPointReadOnly`** interface\'s **`w`** property holds the point\'s perspective value, `w`, for a read-only point in space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/w)')\n    # The **`DOMPointReadOnly`** interface's **`x`** property holds the horizontal coordinate, x, for a read-only point in space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/x)\n    x: float = Field(..., description='The **`DOMPointReadOnly`** interface\'s **`x`** property holds the horizontal coordinate, x, for a read-only point in space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/x)')\n    # The **`DOMPointReadOnly`** interface's **`y`** property holds the vertical coordinate, y, for a read-only point in space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/y)\n    y: float = Field(..., description='The **`DOMPointReadOnly`** interface\'s **`y`** property holds the vertical coordinate, y, for a read-only point in space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/y)')\n    # The **`DOMPointReadOnly`** interface's **`z`** property holds the depth coordinate, z, for a read-only point in space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/z)\n    z: float = Field(..., description='The **`DOMPointReadOnly`** interface\'s **`z`** property holds the depth coordinate, z, for a read-only point in space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/z)')\n\n# A `DOMQuad` is a collection of four `DOMPoint`s defining the corners of an arbitrary quadrilateral.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad)\nclass DOMQuad(BaseModel):\n    # The **`DOMQuad`** interface's **`p1`** property holds the DOMPoint object that represents one of the four corners of the `DOMQuad`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p1)\n    p1: DOMPoint = Field(..., description='The **`DOMQuad`** interface\'s **`p1`** property holds the DOMPoint object that represents one of the four corners of the `DOMQuad`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p1)')\n    # The **`DOMQuad`** interface's **`p2`** property holds the DOMPoint object that represents one of the four corners of the `DOMQuad`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p2)\n    p2: DOMPoint = Field(..., description='The **`DOMQuad`** interface\'s **`p2`** property holds the DOMPoint object that represents one of the four corners of the `DOMQuad`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p2)')\n    # The **`DOMQuad`** interface's **`p3`** property holds the DOMPoint object that represents one of the four corners of the `DOMQuad`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p3)\n    p3: DOMPoint = Field(..., description='The **`DOMQuad`** interface\'s **`p3`** property holds the DOMPoint object that represents one of the four corners of the `DOMQuad`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p3)')\n    # The **`DOMQuad`** interface's **`p4`** property holds the DOMPoint object that represents one of the four corners of the `DOMQuad`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p4)\n    p4: DOMPoint = Field(..., description='The **`DOMQuad`** interface\'s **`p4`** property holds the DOMPoint object that represents one of the four corners of the `DOMQuad`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p4)')\n\n# A **`DOMRect`** describes the size and position of a rectangle.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect)\nclass DOMRect(DOMRectReadOnly):\n    # The **`height`** property of the DOMRect interface represents the height of the rectangle.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect/height)\n    height: float = Field(..., description='The **`height`** property of the DOMRect interface represents the height of the rectangle.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect/height)')\n    # The **`width`** property of the DOMRect interface represents the width of the rectangle.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect/width)\n    width: float = Field(..., description='The **`width`** property of the DOMRect interface represents the width of the rectangle.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect/width)')\n    # The **`x`** property of the DOMRect interface represents the x-coordinate of the rectangle, which is the horizontal distance between the viewport's left edge and the rectangle's origin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect/x)\n    x: float = Field(..., description='The **`x`** property of the DOMRect interface represents the x-coordinate of the rectangle, which is the horizontal distance between the viewport\'s left edge and the rectangle\'s origin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect/x)')\n    # The **`y`** property of the DOMRect interface represents the y-coordinate of the rectangle, which is the vertical distance between the viewport's top edge and the rectangle's origin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect/y)\n    y: float = Field(..., description='The **`y`** property of the DOMRect interface represents the y-coordinate of the rectangle, which is the vertical distance between the viewport\'s top edge and the rectangle\'s origin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect/y)')\n\n# The **`DOMRectList`** interface represents a collection of DOMRect objects, typically used to hold the rectangles associated with a particular element, like bounding boxes returned by methods such as Element.getClientRects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectList)\nclass DOMRectList(BaseModel):\n    # The read-only **`length`** property of the DOMRectList interface returns the number of DOMRect objects in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectList/length)\n    length: float = Field(..., description='The read-only **`length`** property of the DOMRectList interface returns the number of DOMRect objects in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectList/length)')\n\n# The **`DOMRectReadOnly`** interface specifies the standard properties (also used by DOMRect) to define a rectangle whose properties are immutable.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly)\nclass DOMRectReadOnly(BaseModel):\n    # The **`bottom`** read-only property of the **`DOMRectReadOnly`** interface returns the bottom coordinate value of the `DOMRect`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/bottom)\n    bottom: float = Field(..., description='The **`bottom`** read-only property of the **`DOMRectReadOnly`** interface returns the bottom coordinate value of the `DOMRect`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/bottom)')\n    # The **`height`** read-only property of the **`DOMRectReadOnly`** interface represents the height of the `DOMRect`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/height)\n    height: float = Field(..., description='The **`height`** read-only property of the **`DOMRectReadOnly`** interface represents the height of the `DOMRect`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/height)')\n    # The **`left`** read-only property of the **`DOMRectReadOnly`** interface returns the left coordinate value of the `DOMRect`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/left)\n    left: float = Field(..., description='The **`left`** read-only property of the **`DOMRectReadOnly`** interface returns the left coordinate value of the `DOMRect`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/left)')\n    # The **`right`** read-only property of the **`DOMRectReadOnly`** interface returns the right coordinate value of the `DOMRect`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/right)\n    right: float = Field(..., description='The **`right`** read-only property of the **`DOMRectReadOnly`** interface returns the right coordinate value of the `DOMRect`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/right)')\n    # The **`top`** read-only property of the **`DOMRectReadOnly`** interface returns the top coordinate value of the `DOMRect`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/top)\n    top: float = Field(..., description='The **`top`** read-only property of the **`DOMRectReadOnly`** interface returns the top coordinate value of the `DOMRect`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/top)')\n    # The **`width`** read-only property of the **`DOMRectReadOnly`** interface represents the width of the `DOMRect`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/width)\n    width: float = Field(..., description='The **`width`** read-only property of the **`DOMRectReadOnly`** interface represents the width of the `DOMRect`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/width)')\n    # The **`x`** read-only property of the **`DOMRectReadOnly`** interface represents the x coordinate of the `DOMRect`'s origin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/x)\n    x: float = Field(..., description='The **`x`** read-only property of the **`DOMRectReadOnly`** interface represents the x coordinate of the `DOMRect`\'s origin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/x)')\n    # The **`y`** read-only property of the **`DOMRectReadOnly`** interface represents the y coordinate of the `DOMRect`'s origin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/y)\n    y: float = Field(..., description='The **`y`** read-only property of the **`DOMRectReadOnly`** interface represents the y coordinate of the `DOMRect`\'s origin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/y)')\n\n# The **`DOMStringList`** interface is a legacy type returned by some APIs and represents a non-modifiable list of strings (`DOMString`).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList)\nclass DOMStringList(BaseModel):\n    # The read-only **`length`** property indicates the number of strings in the DOMStringList.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList/length)\n    length: float = Field(..., description='The read-only **`length`** property indicates the number of strings in the DOMStringList.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList/length)')\n\n# The **`DOMStringMap`** interface is used for the HTMLElement.dataset attribute, to represent data for custom attributes added to elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringMap)\nclass DOMStringMap(BaseModel):\n    pass\n\n# The **`DOMTokenList`** interface represents a set of space-separated tokens.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList)\nclass DOMTokenList(BaseModel):\n    # The read-only **`length`** property of the DOMTokenList interface is an `integer` representing the number of objects stored in the object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/length)\n    length: float = Field(..., description='The read-only **`length`** property of the DOMTokenList interface is an `integer` representing the number of objects stored in the object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/length)')\n    # The **`value`** property of the DOMTokenList interface is a stringifier that returns the value of the list serialized as a string, or clears and sets the list to the given value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/value)\n    value: str = Field(..., description='The **`value`** property of the DOMTokenList interface is a stringifier that returns the value of the list serialized as a string, or clears and sets the list to the given value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/value)')\n\n# The **`DataTransfer`** object is used to hold any data transferred between contexts, such as a drag and drop operation, or clipboard read/write.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer)\nclass DataTransfer(BaseModel):\n    # The **`DataTransfer.dropEffect`** property controls the feedback (typically visual) the user is given during a drag and drop operation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/dropEffect)\n    dropEffect: Union["none", "copy", "link", "move"] = Field(..., description='The **`DataTransfer.dropEffect`** property controls the feedback (typically visual) the user is given during a drag and drop operation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/dropEffect)')\n    # The **`DataTransfer.effectAllowed`** property specifies the effect that is allowed for a drag operation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/effectAllowed)\n    effectAllowed: Union["none", "copy", "copyLink", "copyMove", "link", "linkMove", "move", "all", "uninitialized"] = Field(..., description='The **`DataTransfer.effectAllowed`** property specifies the effect that is allowed for a drag operation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/effectAllowed)')\n    # The **`files`** read-only property of `DataTransfer` objects is a list of the files in the drag operation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/files)\n    files: FileList = Field(..., description='The **`files`** read-only property of `DataTransfer` objects is a list of the files in the drag operation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/files)')\n    # The read-only `items` property of the DataTransfer interface is a A DataTransferItemList object containing DataTransferItem objects representing the items being dragged in a drag operation, one list item for each object being dragged.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/items)\n    items: DataTransferItemList = Field(..., description='The read-only `items` property of the DataTransfer interface is a A DataTransferItemList object containing DataTransferItem objects representing the items being dragged in a drag operation, one list item for each object being dragged.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/items)')\n    # The **`DataTransfer.types`** read-only property returns the available types that exist in the DataTransfer.items.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/types)\n    types: ReadonlyArray<string> = Field(..., description='The **`DataTransfer.types`** read-only property returns the available types that exist in the DataTransfer.items.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/types)')\n\n# The **`DataTransferItem`** object represents one drag data item.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem)\nclass DataTransferItem(BaseModel):\n    # The read-only **`DataTransferItem.kind`** property returns the kind–a string or a file–of the DataTransferItem object representing the _drag data item_.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/kind)\n    kind: str = Field(..., description='The read-only **`DataTransferItem.kind`** property returns the kind–a string or a file–of the DataTransferItem object representing the _drag data item_.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/kind)')\n    # The read-only **`DataTransferItem.type`** property returns the type (format) of the DataTransferItem object representing the drag data item.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/type)\n    type: str = Field(..., description='The read-only **`DataTransferItem.type`** property returns the type (format) of the DataTransferItem object representing the drag data item.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/type)')\n\n# The **`DataTransferItemList`** object is a list of DataTransferItem objects representing items being dragged.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList)\nclass DataTransferItemList(BaseModel):\n    # The read-only **`length`** property of the the drag item list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/length)\n    length: float = Field(..., description='The read-only **`length`** property of the the drag item list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/length)')\n\n# The **`DecompressionStream`** interface of the Compression Streams API is an API for decompressing a stream of data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DecompressionStream)\nclass DecompressionStream(GenericTransformStream):\n    readable: ReadableStream<Uint8Array<ArrayBuffer>> = Field(...)\n    writable: WritableStream<BufferSource> = Field(...)\n\n# The **`DelayNode`** interface represents a delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data and its propagation to the output.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DelayNode)\nclass DelayNode(AudioNode):\n    # The `delayTime` property of the DelayNode interface is an a-rate AudioParam representing the amount of delay to apply.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DelayNode/delayTime)\n    delayTime: AudioParam = Field(..., description='The `delayTime` property of the DelayNode interface is an a-rate AudioParam representing the amount of delay to apply.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DelayNode/delayTime)')\n\n# The **`DeviceMotionEvent`** interface of the Device Orientation Events provides web developers with information about the speed of changes for the device's position and orientation.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent)\nclass DeviceMotionEvent(Event):\n    # The **`acceleration`** read-only property of the DeviceMotionEvent interface returns the acceleration recorded by the device, in meters per second squared (m/s²).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/acceleration)\n    acceleration: Union[DeviceMotionEventAcceleration, null] = Field(..., description='The **`acceleration`** read-only property of the DeviceMotionEvent interface returns the acceleration recorded by the device, in meters per second squared (m/s²).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/acceleration)')\n    # The **`accelerationIncludingGravity`** read-only property of the DeviceMotionEvent interface returns the amount of acceleration recorded by the device, in meters per second squared (m/s²).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/accelerationIncludingGravity)\n    accelerationIncludingGravity: Union[DeviceMotionEventAcceleration, null] = Field(..., description='The **`accelerationIncludingGravity`** read-only property of the DeviceMotionEvent interface returns the amount of acceleration recorded by the device, in meters per second squared (m/s²).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/accelerationIncludingGravity)')\n    # The **`interval`** read-only property of the DeviceMotionEvent interface returns the interval, in milliseconds, at which data is obtained from the underlying hardware.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/interval)\n    interval: float = Field(..., description='The **`interval`** read-only property of the DeviceMotionEvent interface returns the interval, in milliseconds, at which data is obtained from the underlying hardware.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/interval)')\n    # The **`rotationRate`** read-only property of the DeviceMotionEvent interface returns the rate at which the device is rotating around each of its axes in degrees per second.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/rotationRate)\n    rotationRate: Union[DeviceMotionEventRotationRate, null] = Field(..., description='The **`rotationRate`** read-only property of the DeviceMotionEvent interface returns the rate at which the device is rotating around each of its axes in degrees per second.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/rotationRate)')\n\n# The **`DeviceMotionEventAcceleration`** interface of the Device Orientation Events provides information about the amount of acceleration the device is experiencing along all three axes.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration)\nclass DeviceMotionEventAcceleration(BaseModel):\n    # The **`x`** read-only property of the DeviceMotionEventAcceleration interface indicates the amount of acceleration that occurred along the X axis in a `DeviceMotionEventAcceleration` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/x)\n    x: Union[float, null] = Field(..., description='The **`x`** read-only property of the DeviceMotionEventAcceleration interface indicates the amount of acceleration that occurred along the X axis in a `DeviceMotionEventAcceleration` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/x)')\n    # The **`y`** read-only property of the DeviceMotionEventAcceleration interface indicates the amount of acceleration that occurred along the Y axis in a `DeviceMotionEventAcceleration` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/y)\n    y: Union[float, null] = Field(..., description='The **`y`** read-only property of the DeviceMotionEventAcceleration interface indicates the amount of acceleration that occurred along the Y axis in a `DeviceMotionEventAcceleration` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/y)')\n    # The **`z`** read-only property of the DeviceMotionEventAcceleration interface indicates the amount of acceleration that occurred along the Z axis in a `DeviceMotionEventAcceleration` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/z)\n    z: Union[float, null] = Field(..., description='The **`z`** read-only property of the DeviceMotionEventAcceleration interface indicates the amount of acceleration that occurred along the Z axis in a `DeviceMotionEventAcceleration` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/z)')\n\n# A **`DeviceMotionEventRotationRate`** interface of the Device Orientation Events provides information about the rate at which the device is rotating around all three axes.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate)\nclass DeviceMotionEventRotationRate(BaseModel):\n    # The **`alpha`** read-only property of the DeviceMotionEventRotationRate interface indicates the rate of rotation around the Z axis, in degrees per second.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/alpha)\n    alpha: Union[float, null] = Field(..., description='The **`alpha`** read-only property of the DeviceMotionEventRotationRate interface indicates the rate of rotation around the Z axis, in degrees per second.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/alpha)')\n    # The **`beta`** read-only property of the DeviceMotionEventRotationRate interface indicates the rate of rotation around the X axis, in degrees per second.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/beta)\n    beta: Union[float, null] = Field(..., description='The **`beta`** read-only property of the DeviceMotionEventRotationRate interface indicates the rate of rotation around the X axis, in degrees per second.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/beta)')\n    # The **`gamma`** read-only property of the DeviceMotionEventRotationRate interface indicates the rate of rotation around the Y axis, in degrees per second.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/gamma)\n    gamma: Union[float, null] = Field(..., description='The **`gamma`** read-only property of the DeviceMotionEventRotationRate interface indicates the rate of rotation around the Y axis, in degrees per second.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/gamma)')\n\n# The **`DeviceOrientationEvent`** interface of the Device Orientation Events provides web developers with information from the physical orientation of the device running the web page.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent)\nclass DeviceOrientationEvent(Event):\n    # The **`absolute`** read-only property of the DeviceOrientationEvent interface indicates whether or not the device is providing orientation data absolutely (that is, in reference to the Earth's coordinate frame) or using some arbitrary frame determined by the device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/absolute)\n    absolute: bool = Field(..., description='The **`absolute`** read-only property of the DeviceOrientationEvent interface indicates whether or not the device is providing orientation data absolutely (that is, in reference to the Earth\'s coordinate frame) or using some arbitrary frame determined by the device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/absolute)')\n    # The **`alpha`** read-only property of the DeviceOrientationEvent interface returns the rotation of the device around the Z axis; that is, the number of degrees by which the device is being twisted around the center of the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/alpha)\n    alpha: Union[float, null] = Field(..., description='The **`alpha`** read-only property of the DeviceOrientationEvent interface returns the rotation of the device around the Z axis; that is, the number of degrees by which the device is being twisted around the center of the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/alpha)')\n    # The **`beta`** read-only property of the DeviceOrientationEvent interface returns the rotation of the device around the X axis; that is, the number of degrees, ranged between -180 and 180, by which the device is tipped forward or backward.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/beta)\n    beta: Union[float, null] = Field(..., description='The **`beta`** read-only property of the DeviceOrientationEvent interface returns the rotation of the device around the X axis; that is, the number of degrees, ranged between -180 and 180, by which the device is tipped forward or backward.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/beta)')\n    # The **`gamma`** read-only property of the DeviceOrientationEvent interface returns the rotation of the device around the Y axis; that is, the number of degrees, ranged between `-90` and `90`, by which the device is tilted left or right.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/gamma)\n    gamma: Union[float, null] = Field(..., description='The **`gamma`** read-only property of the DeviceOrientationEvent interface returns the rotation of the device around the Y axis; that is, the number of degrees, ranged between `-90` and `90`, by which the device is tilted left or right.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/gamma)')\n\nclass DocumentEventMap(GlobalEventHandlersEventMap):\n    DOMContentLoaded: Event = Field(...)\n    fullscreenchange: Event = Field(...)\n    fullscreenerror: Event = Field(...)\n    pointerlockchange: Event = Field(...)\n    pointerlockerror: Event = Field(...)\n    readystatechange: Event = Field(...)\n    visibilitychange: Event = Field(...)\n\n# The **`Document`** interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document)\nclass Document(Node):\n    # The **`URL`** read-only property of the Document interface returns the document location as a string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/URL)\n    URL: str = Field(..., description='The **`URL`** read-only property of the Document interface returns the document location as a string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/URL)')\n    # Returns or sets the color of an active link in the document body.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/alinkColor)\n    alinkColor: str = Field(..., description='Returns or sets the color of an active link in the document body.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/alinkColor)')\n    # The Document interface's read-only **`all`** property returns an HTMLAllCollection rooted at the document node.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/all)\n    all: HTMLAllCollection = Field(..., description='The Document interface\'s read-only **`all`** property returns an HTMLAllCollection rooted at the document node.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/all)')\n    # The **`anchors`** read-only property of the An HTMLCollection.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/anchors)\n    anchors: HTMLCollectionOf<HTMLAnchorElement> = Field(..., description='The **`anchors`** read-only property of the An HTMLCollection.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/anchors)')\n    # The **`applets`** property of the Document returns an empty HTMLCollection.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/applets)\n    applets: HTMLCollection = Field(..., description='The **`applets`** property of the Document returns an empty HTMLCollection.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/applets)')\n    # The deprecated `bgColor` property gets or sets the background color of the current document.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/bgColor)\n    bgColor: str = Field(..., description='The deprecated `bgColor` property gets or sets the background color of the current document.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/bgColor)')\n    # The **`Document.body`** property represents the `null` if no such element exists.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/body)\n    body: HTMLElement = Field(..., description='The **`Document.body`** property represents the `null` if no such element exists.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/body)')\n    # The **`Document.characterSet`** read-only property returns the character encoding of the document that it's currently rendered with.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/characterSet)\n    characterSet: str = Field(..., description='The **`Document.characterSet`** read-only property returns the character encoding of the document that it\'s currently rendered with.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/characterSet)')\n    # @deprecated This is a legacy alias of `characterSet`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/characterSet)\n    charset: str = Field(..., description='@deprecated This is a legacy alias of `characterSet`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/characterSet)')\n    # The **`Document.compatMode`** read-only property indicates whether the document is rendered in Quirks mode or Standards mode.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/compatMode)\n    compatMode: str = Field(..., description='The **`Document.compatMode`** read-only property indicates whether the document is rendered in Quirks mode or Standards mode.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/compatMode)')\n    # The **`Document.contentType`** read-only property returns the MIME type that the document is being rendered as.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/contentType)\n    contentType: str = Field(..., description='The **`Document.contentType`** read-only property returns the MIME type that the document is being rendered as.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/contentType)')\n    # The Document property `cookie` lets you read and write cookies associated with the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/cookie)\n    cookie: str = Field(..., description='The Document property `cookie` lets you read and write cookies associated with the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/cookie)')\n    # The **`Document.currentScript`** property returns the script element whose script is currently being processed and isn't a JavaScript module.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/currentScript)\n    currentScript: Union[HTMLOrSVGScriptElement, null] = Field(..., description='The **`Document.currentScript`** property returns the script element whose script is currently being processed and isn\'t a JavaScript module.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/currentScript)')\n    # In browsers, **`document.defaultView`** returns the This property is read-only.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/defaultView)\n    defaultView: Union[(WindowProxy & typeof globalThis), null] = Field(..., description='In browsers, **`document.defaultView`** returns the This property is read-only.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/defaultView)')\n    # **`document.designMode`** controls whether the entire document is editable.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/designMode)\n    designMode: str = Field(..., description='**`document.designMode`** controls whether the entire document is editable.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/designMode)')\n    # The **`Document.dir`** property is a string representing the directionality of the text of the document, whether left to right (default) or right to left.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/dir)\n    dir: str = Field(..., description='The **`Document.dir`** property is a string representing the directionality of the text of the document, whether left to right (default) or right to left.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/dir)')\n    # The **`doctype`** read-only property of the Document interface is a DocumentType object representing the Doctype associated with the current document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/doctype)\n    doctype: Union[DocumentType, null] = Field(..., description='The **`doctype`** read-only property of the Document interface is a DocumentType object representing the Doctype associated with the current document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/doctype)')\n    # The **`documentElement`** read-only property of the Document interface returns the example, the html element for HTML documents).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/documentElement)\n    documentElement: HTMLElement = Field(..., description='The **`documentElement`** read-only property of the Document interface returns the example, the html element for HTML documents).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/documentElement)')\n    # The **`documentURI`** read-only property of the A string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/documentURI)\n    documentURI: str = Field(..., description='The **`documentURI`** read-only property of the A string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/documentURI)')\n    # The **`domain`** property of the Document interface gets/sets the domain portion of the origin of the current document, as used by the same-origin policy.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/domain)\n    domain: str = Field(..., description='The **`domain`** property of the Document interface gets/sets the domain portion of the origin of the current document, as used by the same-origin policy.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/domain)')\n    # The **`embeds`** read-only property of the An HTMLCollection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/embeds)\n    embeds: HTMLCollectionOf<HTMLEmbedElement> = Field(..., description='The **`embeds`** read-only property of the An HTMLCollection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/embeds)')\n    # **`fgColor`** gets/sets the foreground color, or text color, of the current document.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fgColor)\n    fgColor: str = Field(..., description='**`fgColor`** gets/sets the foreground color, or text color, of the current document.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fgColor)')\n    # The **`forms`** read-only property of the Document interface returns an HTMLCollection listing all the form elements contained in the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/forms)\n    forms: HTMLCollectionOf<HTMLFormElement> = Field(..., description='The **`forms`** read-only property of the Document interface returns an HTMLCollection listing all the form elements contained in the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/forms)')\n    # The **`fragmentDirective`** read-only property of the Document interface returns the FragmentDirective for the current document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fragmentDirective)\n    fragmentDirective: FragmentDirective = Field(..., description='The **`fragmentDirective`** read-only property of the Document interface returns the FragmentDirective for the current document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fragmentDirective)')\n    # The obsolete Document interface's **`fullscreen`** read-only property reports whether or not the document is currently displaying content in fullscreen mode.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreen)\n    fullscreen: bool = Field(..., description='The obsolete Document interface\'s **`fullscreen`** read-only property reports whether or not the document is currently displaying content in fullscreen mode.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreen)')\n    # The read-only **`fullscreenEnabled`** property on the Document interface indicates whether or not fullscreen mode is available.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenEnabled)\n    fullscreenEnabled: bool = Field(..., description='The read-only **`fullscreenEnabled`** property on the Document interface indicates whether or not fullscreen mode is available.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenEnabled)')\n    # The **`head`** read-only property of the Document interface returns the head element of the current document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/head)\n    head: HTMLHeadElement = Field(..., description='The **`head`** read-only property of the Document interface returns the head element of the current document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/head)')\n    # The **`Document.hidden`** read-only property returns a Boolean value indicating if the page is considered hidden or not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/hidden)\n    hidden: bool = Field(..., description='The **`Document.hidden`** read-only property returns a Boolean value indicating if the page is considered hidden or not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/hidden)')\n    # The **`images`** read-only property of the Document interface returns a collection of the images in the current HTML document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/images)\n    images: HTMLCollectionOf<HTMLImageElement> = Field(..., description='The **`images`** read-only property of the Document interface returns a collection of the images in the current HTML document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/images)')\n    # The **`Document.implementation`** property returns a A DOMImplementation object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/implementation)\n    implementation: DOMImplementation = Field(..., description='The **`Document.implementation`** property returns a A DOMImplementation object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/implementation)')\n    # @deprecated This is a legacy alias of `characterSet`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/characterSet)\n    inputEncoding: str = Field(..., description='@deprecated This is a legacy alias of `characterSet`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/characterSet)')\n    # The **`lastModified`** property of the Document interface returns a string containing the date and local time on which the current document was last modified.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/lastModified)\n    lastModified: str = Field(..., description='The **`lastModified`** property of the Document interface returns a string containing the date and local time on which the current document was last modified.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/lastModified)')\n    # The **`Document.linkColor`** property gets/sets the color of links within the document.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/linkColor)\n    linkColor: str = Field(..., description='The **`Document.linkColor`** property gets/sets the color of links within the document.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/linkColor)')\n    # The **`links`** read-only property of the Document interface returns a collection of all area elements and a elements in a document with a value for the href attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/links)\n    links: Union[HTMLCollectionOf<HTMLAnchorElement, HTMLAreaElement>] = Field(..., description='The **`links`** read-only property of the Document interface returns a collection of all area elements and a elements in a document with a value for the href attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/links)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenchange_event)\n    onfullscreenchange: Union[((this: Document, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenchange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenerror_event)\n    onfullscreenerror: Union[((this: Document, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenerror_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pointerlockchange_event)\n    onpointerlockchange: Union[((this: Document, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pointerlockchange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pointerlockerror_event)\n    onpointerlockerror: Union[((this: Document, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pointerlockerror_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/readystatechange_event)\n    onreadystatechange: Union[((this: Document, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/readystatechange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/visibilitychange_event)\n    onvisibilitychange: Union[((this: Document, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/visibilitychange_event)')\n    ownerDocument: null = Field(...)\n    # The read-only **`pictureInPictureEnabled`** property of the available.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pictureInPictureEnabled)\n    pictureInPictureEnabled: bool = Field(..., description='The read-only **`pictureInPictureEnabled`** property of the available.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pictureInPictureEnabled)')\n    # The **`plugins`** read-only property of the containing one or more HTMLEmbedElements representing the An HTMLCollection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/plugins)\n    plugins: HTMLCollectionOf<HTMLEmbedElement> = Field(..., description='The **`plugins`** read-only property of the containing one or more HTMLEmbedElements representing the An HTMLCollection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/plugins)')\n    # The **`Document.readyState`** property describes the loading state of the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/readyState)\n    readyState: DocumentReadyState = Field(..., description='The **`Document.readyState`** property describes the loading state of the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/readyState)')\n    # The **`Document.referrer`** property returns the URI of the page that linked to this page.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/referrer)\n    referrer: str = Field(..., description='The **`Document.referrer`** property returns the URI of the page that linked to this page.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/referrer)')\n    # **`Document.rootElement`** returns the Element that is the root element of the document if it is an documents.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/rootElement)\n    rootElement: Union[SVGSVGElement, null] = Field(..., description='**`Document.rootElement`** returns the Element that is the root element of the document if it is an documents.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/rootElement)')\n    # The **`scripts`** property of the Document interface returns a list of the script elements in the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scripts)\n    scripts: HTMLCollectionOf<HTMLScriptElement> = Field(..., description='The **`scripts`** property of the Document interface returns a list of the script elements in the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scripts)')\n    # The **`scrollingElement`** read-only property of the scrolls the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scrollingElement)\n    scrollingElement: Union[Element, null] = Field(..., description='The **`scrollingElement`** read-only property of the scrolls the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scrollingElement)')\n    # The `timeline` readonly property of the Document interface represents the default timeline of the current document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/timeline)\n    timeline: DocumentTimeline = Field(..., description='The `timeline` readonly property of the Document interface represents the default timeline of the current document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/timeline)')\n    # The **`document.title`** property gets or sets the current title of the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/title)\n    title: str = Field(..., description='The **`document.title`** property gets or sets the current title of the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/title)')\n    # The **`Document.visibilityState`** read-only property returns the visibility of the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/visibilityState)\n    visibilityState: DocumentVisibilityState = Field(..., description='The **`Document.visibilityState`** read-only property returns the visibility of the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/visibilityState)')\n    # The **`Document.vlinkColor`** property gets/sets the color of links that the user has visited in the document.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/vlinkColor)\n    vlinkColor: str = Field(..., description='The **`Document.vlinkColor`** property gets/sets the color of links that the user has visited in the document.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/vlinkColor)')\n\n# The **`DocumentFragment`** interface represents a minimal document object that has no parent.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentFragment)\nclass DocumentFragment(Node):\n    ownerDocument: Document = Field(...)\n\nclass DocumentOrShadowRoot(BaseModel):\n    # Returns the deepest element in the document through which or to which key events are being routed. This is, roughly speaking, the focused element in the document.
For the purposes of this API, when a child browsing context is focused, its container is focused in the parent browsing context. For example, if the user moves the focus to a text control in an iframe, the iframe is the element returned by the activeElement API in the iframe's node document.
Similarly, when the focused element is in a different node tree than documentOrShadowRoot, the element returned will be the host that's located in the same node tree as documentOrShadowRoot if documentOrShadowRoot is a shadow-including inclusive ancestor of the focused element, and null if not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/activeElement)\n    activeElement: Union[Element, null] = Field(..., description='Returns the deepest element in the document through which or to which key events are being routed. This is, roughly speaking, the focused element in the document.
For the purposes of this API, when a child browsing context is focused, its container is focused in the parent browsing context. For example, if the user moves the focus to a text control in an iframe, the iframe is the element returned by the activeElement API in the iframe\'s node document.
Similarly, when the focused element is in a different node tree than documentOrShadowRoot, the element returned will be the host that\'s located in the same node tree as documentOrShadowRoot if documentOrShadowRoot is a shadow-including inclusive ancestor of the focused element, and null if not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/activeElement)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/adoptedStyleSheets)\n    adoptedStyleSheets: List[List[CSSStyleSheet]] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/adoptedStyleSheets)')\n    # Returns document's fullscreen element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenElement)\n    fullscreenElement: Union[Element, null] = Field(..., description='Returns document\'s fullscreen element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenElement)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pictureInPictureElement)\n    pictureInPictureElement: Union[Element, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pictureInPictureElement)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pointerLockElement)\n    pointerLockElement: Union[Element, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pointerLockElement)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/styleSheets)\n    styleSheets: StyleSheetList = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/styleSheets)')\n\n# The **`DocumentTimeline`** interface of the Web Animations API represents animation timelines, including the default document timeline (accessed via Document.timeline).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentTimeline)\nclass DocumentTimeline(AnimationTimeline):\n    pass\n\n# The **`DocumentType`** interface represents a Node containing a doctype.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentType)\nclass DocumentType(Node):\n    # The read-only **`name`** property of the DocumentType returns the type of the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentType/name)\n    name: str = Field(..., description='The read-only **`name`** property of the DocumentType returns the type of the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentType/name)')\n    ownerDocument: Document = Field(...)\n    # The read-only **`publicId`** property of the DocumentType returns a formal identifier of the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentType/publicId)\n    publicId: str = Field(..., description='The read-only **`publicId`** property of the DocumentType returns a formal identifier of the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentType/publicId)')\n    # The read-only **`systemId`** property of the DocumentType returns the URL of the associated DTD.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentType/systemId)\n    systemId: str = Field(..., description='The read-only **`systemId`** property of the DocumentType returns the URL of the associated DTD.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentType/systemId)')\n\n# The **`DragEvent`** interface is a DOM event that represents a drag and drop interaction.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DragEvent)\nclass DragEvent(MouseEvent):\n    # The **`DragEvent.dataTransfer`** read-only property holds the drag operation's data (as a DataTransfer object).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DragEvent/dataTransfer)\n    dataTransfer: Union[DataTransfer, null] = Field(..., description='The **`DragEvent.dataTransfer`** read-only property holds the drag operation\'s data (as a DataTransfer object).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DragEvent/dataTransfer)')\n\n# The `DynamicsCompressorNode` interface provides a compression effect, which lowers the volume of the loudest parts of the signal in order to help prevent clipping and distortion that can occur when multiple sounds are played and multiplexed together at once.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode)\nclass DynamicsCompressorNode(AudioNode):\n    # The `attack` property of the DynamicsCompressorNode interface is a k-rate AudioParam representing the amount of time, in seconds, required to reduce the gain by 10 dB.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/attack)\n    attack: AudioParam = Field(..., description='The `attack` property of the DynamicsCompressorNode interface is a k-rate AudioParam representing the amount of time, in seconds, required to reduce the gain by 10 dB.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/attack)')\n    # The `knee` property of the DynamicsCompressorNode interface is a k-rate AudioParam containing a decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/knee)\n    knee: AudioParam = Field(..., description='The `knee` property of the DynamicsCompressorNode interface is a k-rate AudioParam containing a decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/knee)')\n    # The `ratio` property of the DynamicsCompressorNode interface Is a k-rate AudioParam representing the amount of change, in dB, needed in the input for a 1 dB change in the output.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/ratio)\n    ratio: AudioParam = Field(..., description='The `ratio` property of the DynamicsCompressorNode interface Is a k-rate AudioParam representing the amount of change, in dB, needed in the input for a 1 dB change in the output.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/ratio)')\n    # The **`reduction`** read-only property of the DynamicsCompressorNode interface is a float representing the amount of gain reduction currently applied by the compressor to the signal.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/reduction)\n    reduction: float = Field(..., description='The **`reduction`** read-only property of the DynamicsCompressorNode interface is a float representing the amount of gain reduction currently applied by the compressor to the signal.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/reduction)')\n    # The `release` property of the DynamicsCompressorNode interface Is a k-rate AudioParam representing the amount of time, in seconds, required to increase the gain by 10 dB.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/release)\n    release: AudioParam = Field(..., description='The `release` property of the DynamicsCompressorNode interface Is a k-rate AudioParam representing the amount of time, in seconds, required to increase the gain by 10 dB.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/release)')\n    # The `threshold` property of the DynamicsCompressorNode interface is a k-rate AudioParam representing the decibel value above which the compression will start taking effect.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/threshold)\n    threshold: AudioParam = Field(..., description='The `threshold` property of the DynamicsCompressorNode interface is a k-rate AudioParam representing the decibel value above which the compression will start taking effect.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/threshold)')\n\n# The **`EXT_blend_minmax`** extension is part of the WebGL API and extends blending capabilities by adding two new blend equations: the minimum or maximum color components of the source and destination colors.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_blend_minmax)\nclass EXT_blend_minmax(BaseModel):\n    MIN_EXT: 0x8007 = Field(...)\n    MAX_EXT: 0x8008 = Field(...)\n\n# The **`EXT_color_buffer_float`** extension is part of WebGL and adds the ability to render a variety of floating point formats.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_color_buffer_float)\nclass EXT_color_buffer_float(BaseModel):\n    pass\n\n# The **`EXT_color_buffer_half_float`** extension is part of the WebGL API and adds the ability to render to 16-bit floating-point color buffers.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_color_buffer_half_float)\nclass EXT_color_buffer_half_float(BaseModel):\n    RGBA16F_EXT: 0x881A = Field(...)\n    RGB16F_EXT: 0x881B = Field(...)\n    FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 0x8211 = Field(...)\n    UNSIGNED_NORMALIZED_EXT: 0x8C17 = Field(...)\n\n# The WebGL API's `EXT_float_blend` extension allows blending and draw buffers with 32-bit floating-point components.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_float_blend)\nclass EXT_float_blend(BaseModel):\n    pass\n\n# The **`EXT_frag_depth`** extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_frag_depth)\nclass EXT_frag_depth(BaseModel):\n    pass\n\n# The **`EXT_sRGB`** extension is part of the WebGL API and adds sRGB support to textures and framebuffer objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_sRGB)\nclass EXT_sRGB(BaseModel):\n    SRGB_EXT: 0x8C40 = Field(...)\n    SRGB_ALPHA_EXT: 0x8C42 = Field(...)\n    SRGB8_ALPHA8_EXT: 0x8C43 = Field(...)\n    FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: 0x8210 = Field(...)\n\n# The **`EXT_shader_texture_lod`** extension is part of the WebGL API and adds additional texture functions to the OpenGL ES Shading Language which provide the shader writer with explicit control of LOD (Level of detail).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_shader_texture_lod)\nclass EXT_shader_texture_lod(BaseModel):\n    pass\n\n# The `EXT_texture_compression_bptc` extension is part of the WebGL API and exposes 4 BPTC compressed texture formats.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_compression_bptc)\nclass EXT_texture_compression_bptc(BaseModel):\n    COMPRESSED_RGBA_BPTC_UNORM_EXT: 0x8E8C = Field(...)\n    COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT: 0x8E8D = Field(...)\n    COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT: 0x8E8E = Field(...)\n    COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT: 0x8E8F = Field(...)\n\n# The `EXT_texture_compression_rgtc` extension is part of the WebGL API and exposes 4 RGTC compressed texture formats.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_compression_rgtc)\nclass EXT_texture_compression_rgtc(BaseModel):\n    COMPRESSED_RED_RGTC1_EXT: 0x8DBB = Field(...)\n    COMPRESSED_SIGNED_RED_RGTC1_EXT: 0x8DBC = Field(...)\n    COMPRESSED_RED_GREEN_RGTC2_EXT: 0x8DBD = Field(...)\n    COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: 0x8DBE = Field(...)\n\n# The **`EXT_texture_filter_anisotropic`** extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_filter_anisotropic)\nclass EXT_texture_filter_anisotropic(BaseModel):\n    TEXTURE_MAX_ANISOTROPY_EXT: 0x84FE = Field(...)\n    MAX_TEXTURE_MAX_ANISOTROPY_EXT: 0x84FF = Field(...)\n\n# The **`EXT_texture_norm16`** extension is part of the WebGL API and provides a set of new 16-bit signed normalized and unsigned normalized formats (fixed-point texture, renderbuffer and texture buffer).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_norm16)\nclass EXT_texture_norm16(BaseModel):\n    R16_EXT: 0x822A = Field(...)\n    RG16_EXT: 0x822C = Field(...)\n    RGB16_EXT: 0x8054 = Field(...)\n    RGBA16_EXT: 0x805B = Field(...)\n    R16_SNORM_EXT: 0x8F98 = Field(...)\n    RG16_SNORM_EXT: 0x8F99 = Field(...)\n    RGB16_SNORM_EXT: 0x8F9A = Field(...)\n    RGBA16_SNORM_EXT: 0x8F9B = Field(...)\n\nclass ElementEventMap(BaseModel):\n    fullscreenchange: Event = Field(...)\n    fullscreenerror: Event = Field(...)\n\n# **`Element`** is the most general base class from which all element objects (i.e., objects that represent elements) in a Document inherit.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element)\nclass Element(Node):\n    # The **`Element.attributes`** property returns a live collection of all attribute nodes registered to the specified node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/attributes)\n    attributes: NamedNodeMap = Field(..., description='The **`Element.attributes`** property returns a live collection of all attribute nodes registered to the specified node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/attributes)')\n    # The **`className`** property of the of the specified element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/className)\n    className: str = Field(..., description='The **`className`** property of the of the specified element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/className)')\n    # The **`clientHeight`** read-only property of the Element interface is zero for elements with no CSS or inline layout boxes; otherwise, it's the inner height of an element in pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientHeight)\n    clientHeight: float = Field(..., description='The **`clientHeight`** read-only property of the Element interface is zero for elements with no CSS or inline layout boxes; otherwise, it\'s the inner height of an element in pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientHeight)')\n    # The **`clientLeft`** read-only property of the Element interface returns the width of the left border of an element in pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientLeft)\n    clientLeft: float = Field(..., description='The **`clientLeft`** read-only property of the Element interface returns the width of the left border of an element in pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientLeft)')\n    # The **`clientTop`** read-only property of the Element interface returns the width of the top border of an element in pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientTop)\n    clientTop: float = Field(..., description='The **`clientTop`** read-only property of the Element interface returns the width of the top border of an element in pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientTop)')\n    # The **`clientWidth`** read-only property of the Element interface is zero for inline elements and elements with no CSS; otherwise, it's the inner width of an element in pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientWidth)\n    clientWidth: float = Field(..., description='The **`clientWidth`** read-only property of the Element interface is zero for inline elements and elements with no CSS; otherwise, it\'s the inner width of an element in pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientWidth)')\n    # The **`currentCSSZoom`** read-only property of the Element interface provides the 'effective' CSS `zoom` of an element, taking into account the zoom applied to the element and all its parent elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/currentCSSZoom)\n    currentCSSZoom: float = Field(..., description='The **`currentCSSZoom`** read-only property of the Element interface provides the \'effective\' CSS `zoom` of an element, taking into account the zoom applied to the element and all its parent elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/currentCSSZoom)')\n    # The **`id`** property of the Element interface represents the element's identifier, reflecting the **`id`** global attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/id)\n    id: str = Field(..., description='The **`id`** property of the Element interface represents the element\'s identifier, reflecting the **`id`** global attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/id)')\n    # The **`innerHTML`** property of the Element interface gets or sets the HTML or XML markup contained within the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/innerHTML)\n    innerHTML: str = Field(..., description='The **`innerHTML`** property of the Element interface gets or sets the HTML or XML markup contained within the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/innerHTML)')\n    # The **`Element.localName`** read-only property returns the local part of the qualified name of an element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/localName)\n    localName: str = Field(..., description='The **`Element.localName`** read-only property returns the local part of the qualified name of an element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/localName)')\n    # The **`Element.namespaceURI`** read-only property returns the namespace URI of the element, or `null` if the element is not in a namespace.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/namespaceURI)\n    namespaceURI: Union[str, null] = Field(..., description='The **`Element.namespaceURI`** read-only property returns the namespace URI of the element, or `null` if the element is not in a namespace.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/namespaceURI)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/fullscreenchange_event)\n    onfullscreenchange: Union[((this: Element, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/fullscreenchange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/fullscreenerror_event)\n    onfullscreenerror: Union[((this: Element, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/fullscreenerror_event)')\n    # The **`outerHTML`** attribute of the Element DOM interface gets the serialized HTML fragment describing the element including its descendants.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/outerHTML)\n    outerHTML: str = Field(..., description='The **`outerHTML`** attribute of the Element DOM interface gets the serialized HTML fragment describing the element including its descendants.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/outerHTML)')\n    ownerDocument: Document = Field(...)\n    # The **`Element.prefix`** read-only property returns the namespace prefix of the specified element, or `null` if no prefix is specified.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/prefix)\n    prefix: Union[str, null] = Field(..., description='The **`Element.prefix`** read-only property returns the namespace prefix of the specified element, or `null` if no prefix is specified.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/prefix)')\n    # The **`scrollHeight`** read-only property of the Element interface is a measurement of the height of an element's content, including content not visible on the screen due to overflow.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollHeight)\n    scrollHeight: float = Field(..., description='The **`scrollHeight`** read-only property of the Element interface is a measurement of the height of an element\'s content, including content not visible on the screen due to overflow.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollHeight)')\n    # The **`scrollLeft`** property of the Element interface gets or sets the number of pixels by which an element's content is scrolled from its left edge.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollLeft)\n    scrollLeft: float = Field(..., description='The **`scrollLeft`** property of the Element interface gets or sets the number of pixels by which an element\'s content is scrolled from its left edge.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollLeft)')\n    # The **`scrollTop`** property of the Element interface gets or sets the number of pixels by which an element's content is scrolled from its top edge.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollTop)\n    scrollTop: float = Field(..., description='The **`scrollTop`** property of the Element interface gets or sets the number of pixels by which an element\'s content is scrolled from its top edge.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollTop)')\n    # The **`scrollWidth`** read-only property of the Element interface is a measurement of the width of an element's content, including content not visible on the screen due to overflow.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollWidth)\n    scrollWidth: float = Field(..., description='The **`scrollWidth`** read-only property of the Element interface is a measurement of the width of an element\'s content, including content not visible on the screen due to overflow.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollWidth)')\n    # The `Element.shadowRoot` read-only property represents the shadow root hosted by the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/shadowRoot)\n    shadowRoot: Union[ShadowRoot, null] = Field(..., description='The `Element.shadowRoot` read-only property represents the shadow root hosted by the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/shadowRoot)')\n    # The **`slot`** property of the Element interface returns the name of the shadow DOM slot the element is inserted in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/slot)\n    slot: str = Field(..., description='The **`slot`** property of the Element interface returns the name of the shadow DOM slot the element is inserted in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/slot)')\n    # The **`tagName`** read-only property of the Element interface returns the tag name of the element on which it's called.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/tagName)\n    tagName: str = Field(..., description='The **`tagName`** read-only property of the Element interface returns the tag name of the element on which it\'s called.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/tagName)')\n\nclass ElementCSSInlineStyle(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/attributeStyleMap)\n    attributeStyleMap: StylePropertyMap = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/attributeStyleMap)')\n\nclass ElementContentEditable(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/contentEditable)\n    contentEditable: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/contentEditable)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/enterKeyHint)\n    enterKeyHint: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/enterKeyHint)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/inputMode)\n    inputMode: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/inputMode)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/isContentEditable)\n    isContentEditable: bool = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/isContentEditable)')\n\n# The **`ElementInternals`** interface of the Document Object Model gives web developers a way to allow custom elements to fully participate in HTML forms.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals)\nclass ElementInternals(ARIAMixin):\n    # The **`form`** read-only property of the ElementInternals interface returns the HTMLFormElement associated with this element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/form)\n    form: Union[HTMLFormElement, null] = Field(..., description='The **`form`** read-only property of the ElementInternals interface returns the HTMLFormElement associated with this element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/form)')\n    # The **`labels`** read-only property of the ElementInternals interface returns the labels associated with the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/labels)\n    labels: NodeList = Field(..., description='The **`labels`** read-only property of the ElementInternals interface returns the labels associated with the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/labels)')\n    # The **`shadowRoot`** read-only property of the ElementInternals interface returns the ShadowRoot for this element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/shadowRoot)\n    shadowRoot: Union[ShadowRoot, null] = Field(..., description='The **`shadowRoot`** read-only property of the ElementInternals interface returns the ShadowRoot for this element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/shadowRoot)')\n    # The **`states`** read-only property of the ElementInternals interface returns a CustomStateSet representing the possible states of the custom element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/states)\n    states: CustomStateSet = Field(..., description='The **`states`** read-only property of the ElementInternals interface returns a CustomStateSet representing the possible states of the custom element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/states)')\n    # The **`validationMessage`** read-only property of the ElementInternals interface returns the validation message for the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/validationMessage)\n    validationMessage: str = Field(..., description='The **`validationMessage`** read-only property of the ElementInternals interface returns the validation message for the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/validationMessage)')\n    # The **`validity`** read-only property of the ElementInternals interface returns a ValidityState object which represents the different validity states the element can be in, with respect to constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/validity)\n    validity: ValidityState = Field(..., description='The **`validity`** read-only property of the ElementInternals interface returns a ValidityState object which represents the different validity states the element can be in, with respect to constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/validity)')\n    # The **`willValidate`** read-only property of the ElementInternals interface returns `true` if the element is a submittable element that is a candidate for constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/willValidate)\n    willValidate: bool = Field(..., description='The **`willValidate`** read-only property of the ElementInternals interface returns `true` if the element is a submittable element that is a candidate for constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/willValidate)')\n\n# The **`EncodedAudioChunk`** interface of the WebCodecs API represents a chunk of encoded audio data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedAudioChunk)\nclass EncodedAudioChunk(BaseModel):\n    # The **`byteLength`** read-only property of the EncodedAudioChunk interface returns the length in bytes of the encoded audio data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedAudioChunk/byteLength)\n    byteLength: float = Field(..., description='The **`byteLength`** read-only property of the EncodedAudioChunk interface returns the length in bytes of the encoded audio data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedAudioChunk/byteLength)')\n    # The **`duration`** read-only property of the EncodedAudioChunk interface returns an integer indicating the duration of the audio in microseconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedAudioChunk/duration)\n    duration: Union[float, null] = Field(..., description='The **`duration`** read-only property of the EncodedAudioChunk interface returns an integer indicating the duration of the audio in microseconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedAudioChunk/duration)')\n    # The **`timestamp`** read-only property of the EncodedAudioChunk interface returns an integer indicating the timestamp of the audio in microseconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedAudioChunk/timestamp)\n    timestamp: float = Field(..., description='The **`timestamp`** read-only property of the EncodedAudioChunk interface returns an integer indicating the timestamp of the audio in microseconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedAudioChunk/timestamp)')\n    # The **`type`** read-only property of the EncodedAudioChunk interface returns a value indicating whether the audio chunk is a key chunk, which does not relying on other frames for decoding.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedAudioChunk/type)\n    type: EncodedAudioChunkType = Field(..., description='The **`type`** read-only property of the EncodedAudioChunk interface returns a value indicating whether the audio chunk is a key chunk, which does not relying on other frames for decoding.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedAudioChunk/type)')\n\n# The **`EncodedVideoChunk`** interface of the WebCodecs API represents a chunk of encoded video data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk)\nclass EncodedVideoChunk(BaseModel):\n    # The **`byteLength`** read-only property of the EncodedVideoChunk interface returns the length in bytes of the encoded video data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/byteLength)\n    byteLength: float = Field(..., description='The **`byteLength`** read-only property of the EncodedVideoChunk interface returns the length in bytes of the encoded video data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/byteLength)')\n    # The **`duration`** read-only property of the EncodedVideoChunk interface returns an integer indicating the duration of the video in microseconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/duration)\n    duration: Union[float, null] = Field(..., description='The **`duration`** read-only property of the EncodedVideoChunk interface returns an integer indicating the duration of the video in microseconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/duration)')\n    # The **`timestamp`** read-only property of the EncodedVideoChunk interface returns an integer indicating the timestamp of the video in microseconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/timestamp)\n    timestamp: float = Field(..., description='The **`timestamp`** read-only property of the EncodedVideoChunk interface returns an integer indicating the timestamp of the video in microseconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/timestamp)')\n    # The **`type`** read-only property of the EncodedVideoChunk interface returns a value indicating whether the video chunk is a key chunk, which does not rely on other frames for decoding.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/type)\n    type: EncodedVideoChunkType = Field(..., description='The **`type`** read-only property of the EncodedVideoChunk interface returns a value indicating whether the video chunk is a key chunk, which does not rely on other frames for decoding.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/type)')\n\n# The **`ErrorEvent`** interface represents events providing information related to errors in scripts or in files.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent)\nclass ErrorEvent(Event):\n    # The **`colno`** read-only property of the ErrorEvent interface returns an integer containing the column number of the script file on which the error occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/colno)\n    colno: float = Field(..., description='The **`colno`** read-only property of the ErrorEvent interface returns an integer containing the column number of the script file on which the error occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/colno)')\n    # The **`error`** read-only property of the ErrorEvent interface returns a JavaScript value, such as an Error or DOMException, representing the error associated with this event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/error)\n    error: any = Field(..., description='The **`error`** read-only property of the ErrorEvent interface returns a JavaScript value, such as an Error or DOMException, representing the error associated with this event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/error)')\n    # The **`filename`** read-only property of the ErrorEvent interface returns a string containing the name of the script file in which the error occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/filename)\n    filename: str = Field(..., description='The **`filename`** read-only property of the ErrorEvent interface returns a string containing the name of the script file in which the error occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/filename)')\n    # The **`lineno`** read-only property of the ErrorEvent interface returns an integer containing the line number of the script file on which the error occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/lineno)\n    lineno: float = Field(..., description='The **`lineno`** read-only property of the ErrorEvent interface returns an integer containing the line number of the script file on which the error occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/lineno)')\n    # The **`message`** read-only property of the ErrorEvent interface returns a string containing a human-readable error message describing the problem.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/message)\n    message: str = Field(..., description='The **`message`** read-only property of the ErrorEvent interface returns a string containing a human-readable error message describing the problem.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/message)')\n\n# The **`Event`** interface represents an event which takes place on an `EventTarget`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event)\nclass Event(BaseModel):\n    # The **`bubbles`** read-only property of the Event interface indicates whether the event bubbles up through the DOM tree or not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/bubbles)\n    bubbles: bool = Field(..., description='The **`bubbles`** read-only property of the Event interface indicates whether the event bubbles up through the DOM tree or not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/bubbles)')\n    # The **`cancelBubble`** property of the Event interface is deprecated.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/cancelBubble)\n    cancelBubble: bool = Field(..., description='The **`cancelBubble`** property of the Event interface is deprecated.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/cancelBubble)')\n    # The **`cancelable`** read-only property of the Event interface indicates whether the event can be canceled, and therefore prevented as if the event never happened.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/cancelable)\n    cancelable: bool = Field(..., description='The **`cancelable`** read-only property of the Event interface indicates whether the event can be canceled, and therefore prevented as if the event never happened.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/cancelable)')\n    # The read-only **`composed`** property of the or not the event will propagate across the shadow DOM boundary into the standard DOM.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/composed)\n    composed: bool = Field(..., description='The read-only **`composed`** property of the or not the event will propagate across the shadow DOM boundary into the standard DOM.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/composed)')\n    # The **`currentTarget`** read-only property of the Event interface identifies the element to which the event handler has been attached.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/currentTarget)\n    currentTarget: Union[EventTarget, null] = Field(..., description='The **`currentTarget`** read-only property of the Event interface identifies the element to which the event handler has been attached.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/currentTarget)')\n    # The **`defaultPrevented`** read-only property of the Event interface returns a boolean value indicating whether or not the call to Event.preventDefault() canceled the event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/defaultPrevented)\n    defaultPrevented: bool = Field(..., description='The **`defaultPrevented`** read-only property of the Event interface returns a boolean value indicating whether or not the call to Event.preventDefault() canceled the event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/defaultPrevented)')\n    # The **`eventPhase`** read-only property of the being evaluated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/eventPhase)\n    eventPhase: float = Field(..., description='The **`eventPhase`** read-only property of the being evaluated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/eventPhase)')\n    # The **`isTrusted`** read-only property of the when the event was generated by the user agent (including via user actions and programmatic methods such as HTMLElement.focus()), and `false` when the event was dispatched via The only exception is the `click` event, which initializes the `isTrusted` property to `false` in user agents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/isTrusted)\n    isTrusted: bool = Field(..., description='The **`isTrusted`** read-only property of the when the event was generated by the user agent (including via user actions and programmatic methods such as HTMLElement.focus()), and `false` when the event was dispatched via The only exception is the `click` event, which initializes the `isTrusted` property to `false` in user agents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/isTrusted)')\n    # The Event property **`returnValue`** indicates whether the default action for this event has been prevented or not.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/returnValue)\n    returnValue: bool = Field(..., description='The Event property **`returnValue`** indicates whether the default action for this event has been prevented or not.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/returnValue)')\n    # The deprecated **`Event.srcElement`** is an alias for the Event.target property.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/srcElement)\n    srcElement: Union[EventTarget, null] = Field(..., description='The deprecated **`Event.srcElement`** is an alias for the Event.target property.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/srcElement)')\n    # The read-only **`target`** property of the dispatched.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/target)\n    target: Union[EventTarget, null] = Field(..., description='The read-only **`target`** property of the dispatched.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/target)')\n    # The **`timeStamp`** read-only property of the Event interface returns the time (in milliseconds) at which the event was created.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/timeStamp)\n    timeStamp: DOMHighResTimeStamp = Field(..., description='The **`timeStamp`** read-only property of the Event interface returns the time (in milliseconds) at which the event was created.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/timeStamp)')\n    # The **`type`** read-only property of the Event interface returns a string containing the event's type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/type)\n    type: str = Field(..., description='The **`type`** read-only property of the Event interface returns a string containing the event\'s type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/type)')\n    NONE: 0 = Field(...)\n    CAPTURING_PHASE: 1 = Field(...)\n    AT_TARGET: 2 = Field(...)\n    BUBBLING_PHASE: 3 = Field(...)\n\n# The **`EventCounts`** interface of the Performance API provides the number of events that have been dispatched for each event type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventCounts)\nclass EventCounts(BaseModel):\n    pass\n\nclass EventListener(BaseModel):\n    pass\n\nclass EventListenerObject(BaseModel):\n    pass\n\nclass EventSourceEventMap(BaseModel):\n    error: Event = Field(...)\n    message: MessageEvent = Field(...)\n    open: Event = Field(...)\n\n# The **`EventSource`** interface is web content's interface to server-sent events.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource)\nclass EventSource(EventTarget):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/error_event)\n    onerror: Union[((this: EventSource, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/error_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/message_event)\n    onmessage: Union[((this: EventSource, ev: MessageEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/message_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/open_event)\n    onopen: Union[((this: EventSource, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/open_event)')\n    # The **`readyState`** read-only property of the connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/readyState)\n    readyState: float = Field(..., description='The **`readyState`** read-only property of the connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/readyState)')\n    # The **`url`** read-only property of the URL of the source.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/url)\n    url: str = Field(..., description='The **`url`** read-only property of the URL of the source.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/url)')\n    # The **`withCredentials`** read-only property of the the `EventSource` object was instantiated with CORS credentials set.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/withCredentials)\n    withCredentials: bool = Field(..., description='The **`withCredentials`** read-only property of the the `EventSource` object was instantiated with CORS credentials set.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/withCredentials)')\n    CONNECTING: 0 = Field(...)\n    OPEN: 1 = Field(...)\n    CLOSED: 2 = Field(...)\n\n# The **`EventTarget`** interface is implemented by objects that can receive events and may have listeners for them.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget)\nclass EventTarget(BaseModel):\n    pass\n\n# @deprecated\nclass External(BaseModel):\n    pass\n\n# The **`File`** interface provides information about files and allows JavaScript in a web page to access their content.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/File)\nclass File(Blob):\n    # The **`lastModified`** read-only property of the File interface provides the last modified date of the file as the number of milliseconds since the Unix epoch (January 1, 1970 at midnight).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified)\n    lastModified: float = Field(..., description='The **`lastModified`** read-only property of the File interface provides the last modified date of the file as the number of milliseconds since the Unix epoch (January 1, 1970 at midnight).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified)')\n    # The **`name`** read-only property of the File interface returns the name of the file represented by a File object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name)\n    name: str = Field(..., description='The **`name`** read-only property of the File interface returns the name of the file represented by a File object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name)')\n    # The **`webkitRelativePath`** read-only property of the File interface contains a string which specifies the file's path relative to the directory selected by the user in an input element with its `webkitdirectory` attribute set.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/webkitRelativePath)\n    webkitRelativePath: str = Field(..., description='The **`webkitRelativePath`** read-only property of the File interface contains a string which specifies the file\'s path relative to the directory selected by the user in an input element with its `webkitdirectory` attribute set.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/File/webkitRelativePath)')\n\n# The **`FileList`** interface represents an object of this type returned by the `files` property of the HTML input element; this lets you access the list of files selected with the `<input type='file'>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileList)\nclass FileList(BaseModel):\n    # The **`length`** read-only property of the FileList interface returns the number of files in the `FileList`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileList/length)\n    length: float = Field(..., description='The **`length`** read-only property of the FileList interface returns the number of files in the `FileList`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileList/length)')\n\nclass FileReaderEventMap(BaseModel):\n    abort: ProgressEvent<FileReader> = Field(...)\n    error: ProgressEvent<FileReader> = Field(...)\n    load: ProgressEvent<FileReader> = Field(...)\n    loadend: ProgressEvent<FileReader> = Field(...)\n    loadstart: ProgressEvent<FileReader> = Field(...)\n    progress: ProgressEvent<FileReader> = Field(...)\n\n# The **`FileReader`** interface lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader)\nclass FileReader(EventTarget):\n    # The **`error`** read-only property of the FileReader interface returns the error that occurred while reading the file.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/error)\n    error: Union[DOMException, null] = Field(..., description='The **`error`** read-only property of the FileReader interface returns the error that occurred while reading the file.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/error)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/abort_event)\n    onabort: Union[((this: FileReader, ev: ProgressEvent<FileReader>) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/abort_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/error_event)\n    onerror: Union[((this: FileReader, ev: ProgressEvent<FileReader>) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/error_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/load_event)\n    onload: Union[((this: FileReader, ev: ProgressEvent<FileReader>) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/load_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/loadend_event)\n    onloadend: Union[((this: FileReader, ev: ProgressEvent<FileReader>) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/loadend_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/loadstart_event)\n    onloadstart: Union[((this: FileReader, ev: ProgressEvent<FileReader>) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/loadstart_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/progress_event)\n    onprogress: Union[((this: FileReader, ev: ProgressEvent<FileReader>) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/progress_event)')\n    # The **`readyState`** read-only property of the FileReader interface provides the current state of the reading operation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/readyState)\n    readyState: Union[typeof FileReader.EMPTY, typeof FileReader.LOADING, typeof FileReader.DONE] = Field(..., description='The **`readyState`** read-only property of the FileReader interface provides the current state of the reading operation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/readyState)')\n    # The **`result`** read-only property of the FileReader interface returns the file's contents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/result)\n    result: Union[str, ArrayBuffer, null] = Field(..., description='The **`result`** read-only property of the FileReader interface returns the file\'s contents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/result)')\n    EMPTY: 0 = Field(...)\n    LOADING: 1 = Field(...)\n    DONE: 2 = Field(...)\n\n# The File and Directory Entries API interface **`FileSystem`** is used to represent a file system.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystem)\nclass FileSystem(BaseModel):\n    # The read-only **`name`** property of the string is unique among all file systems currently exposed by the File and Directory Entries API.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystem/name)\n    name: str = Field(..., description='The read-only **`name`** property of the string is unique among all file systems currently exposed by the File and Directory Entries API.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystem/name)')\n    # The read-only **`root`** property of the object representing the root directory of the file system, for use with the File and Directory Entries API.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystem/root)\n    root: FileSystemDirectoryEntry = Field(..., description='The read-only **`root`** property of the object representing the root directory of the file system, for use with the File and Directory Entries API.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystem/root)')\n\n# The **`FileSystemDirectoryEntry`** interface of the File and Directory Entries API represents a directory in a file system.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry)\nclass FileSystemDirectoryEntry(FileSystemEntry):\n    pass\n\n# The **`FileSystemDirectoryHandle`** interface of the File System API provides a handle to a file system directory.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle)\nclass FileSystemDirectoryHandle(FileSystemHandle):\n    kind: "directory" = Field(...)\n\n# The `FileSystemDirectoryReader` interface of the File and Directory Entries API lets you access the FileSystemFileEntry-based objects (generally FileSystemFileEntry or FileSystemDirectoryEntry) representing each entry in a directory.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryReader)\nclass FileSystemDirectoryReader(BaseModel):\n    pass\n\n# The **`FileSystemEntry`** interface of the File and Directory Entries API represents a single entry in a file system.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry)\nclass FileSystemEntry(BaseModel):\n    # The read-only **`filesystem`** property of the FileSystemEntry interface contains a resides.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/filesystem)\n    filesystem: FileSystem = Field(..., description='The read-only **`filesystem`** property of the FileSystemEntry interface contains a resides.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/filesystem)')\n    # The read-only **`fullPath`** property of the FileSystemEntry interface returns a string specifying the full, absolute path from the file system's root to the file represented by the entry.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/fullPath)\n    fullPath: str = Field(..., description='The read-only **`fullPath`** property of the FileSystemEntry interface returns a string specifying the full, absolute path from the file system\'s root to the file represented by the entry.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/fullPath)')\n    # The read-only **`isDirectory`** property of the FileSystemEntry interface is `true` if the entry represents a directory (meaning it's a FileSystemDirectoryEntry) and `false` if it's not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/isDirectory)\n    isDirectory: bool = Field(..., description='The read-only **`isDirectory`** property of the FileSystemEntry interface is `true` if the entry represents a directory (meaning it\'s a FileSystemDirectoryEntry) and `false` if it\'s not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/isDirectory)')\n    # The read-only **`isFile`** property of the FileSystemEntry interface is `true` if the entry represents a file (meaning it's a FileSystemFileEntry) and `false` if it's not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/isFile)\n    isFile: bool = Field(..., description='The read-only **`isFile`** property of the FileSystemEntry interface is `true` if the entry represents a file (meaning it\'s a FileSystemFileEntry) and `false` if it\'s not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/isFile)')\n    # The read-only **`name`** property of the FileSystemEntry interface returns a string specifying the entry's name; this is the entry within its parent directory (the last component of the path as indicated by the FileSystemEntry.fullPath property).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/name)\n    name: str = Field(..., description='The read-only **`name`** property of the FileSystemEntry interface returns a string specifying the entry\'s name; this is the entry within its parent directory (the last component of the path as indicated by the FileSystemEntry.fullPath property).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/name)')\n\n# The **`FileSystemFileEntry`** interface of the File and Directory Entries API represents a file in a file system.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileEntry)\nclass FileSystemFileEntry(FileSystemEntry):\n    pass\n\n# The **`FileSystemFileHandle`** interface of the File System API represents a handle to a file system entry.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle)\nclass FileSystemFileHandle(FileSystemHandle):\n    kind: "file" = Field(...)\n\n# The **`FileSystemHandle`** interface of the File System API is an object which represents a file or directory entry.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle)\nclass FileSystemHandle(BaseModel):\n    # The **`kind`** read-only property of the `'file'` if the associated entry is a file or `'directory'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/kind)\n    kind: FileSystemHandleKind = Field(..., description='The **`kind`** read-only property of the `\'file\'` if the associated entry is a file or `\'directory\'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/kind)')\n    # The **`name`** read-only property of the handle.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/name)\n    name: str = Field(..., description='The **`name`** read-only property of the handle.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/name)')\n\n# The **`FileSystemWritableFileStream`** interface of the File System API is a WritableStream object with additional convenience methods, which operates on a single file on disk.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream)\nclass FileSystemWritableFileStream(WritableStream):\n    pass\n\n# The **`FocusEvent`** interface represents focus-related events, including Element/focus_event, Element/blur_event, Element/focusin_event, and Element/focusout_event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FocusEvent)\nclass FocusEvent(UIEvent):\n    # The **`relatedTarget`** read-only property of the FocusEvent interface is the secondary target, depending on the type of event: <table class='no-markdown'> <thead> <tr> <th scope='col'>Event name</th> <th scope='col'><code>target</code></th> <th scope='col'><code>relatedTarget</code></th> </tr> </thead> <tbody> <tr> <td>Element/blur_event</td> <td>The EventTarget losing focus</td> <td>The EventTarget receiving focus (if any).</td> </tr> <tr> <td>Element/focus_event</td> <td>The EventTarget receiving focus</td> <td>The EventTarget losing focus (if any)</td> </tr> <tr> <td>Element/focusin_event</td> <td>The EventTarget receiving focus</td> <td>The EventTarget losing focus (if any)</td> </tr> <tr> <td>Element/focusout_event</td> <td>The EventTarget losing focus</td> <td>The EventTarget receiving focus (if any)</td> </tr> </tbody> </table> Note that many elements can't have focus, which is a common reason for `relatedTarget` to be `null`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FocusEvent/relatedTarget)\n    relatedTarget: Union[EventTarget, null] = Field(..., description='The **`relatedTarget`** read-only property of the FocusEvent interface is the secondary target, depending on the type of event: <table class=\'no-markdown\'> <thead> <tr> <th scope=\'col\'>Event name</th> <th scope=\'col\'><code>target</code></th> <th scope=\'col\'><code>relatedTarget</code></th> </tr> </thead> <tbody> <tr> <td>Element/blur_event</td> <td>The EventTarget losing focus</td> <td>The EventTarget receiving focus (if any).</td> </tr> <tr> <td>Element/focus_event</td> <td>The EventTarget receiving focus</td> <td>The EventTarget losing focus (if any)</td> </tr> <tr> <td>Element/focusin_event</td> <td>The EventTarget receiving focus</td> <td>The EventTarget losing focus (if any)</td> </tr> <tr> <td>Element/focusout_event</td> <td>The EventTarget losing focus</td> <td>The EventTarget receiving focus (if any)</td> </tr> </tbody> </table> Note that many elements can\'t have focus, which is a common reason for `relatedTarget` to be `null`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FocusEvent/relatedTarget)')\n\n# The **`FontFace`** interface of the CSS Font Loading API represents a single usable font face.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace)\nclass FontFace(BaseModel):\n    # The **`ascentOverride`** property of the FontFace interface returns and sets the ascent metric for the font, the height above the baseline that CSS uses to lay out line boxes in an inline formatting context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/ascentOverride)\n    ascentOverride: str = Field(..., description='The **`ascentOverride`** property of the FontFace interface returns and sets the ascent metric for the font, the height above the baseline that CSS uses to lay out line boxes in an inline formatting context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/ascentOverride)')\n    # The **`descentOverride`** property of the FontFace interface returns and sets the value of the @font-face/descent-override descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/descentOverride)\n    descentOverride: str = Field(..., description='The **`descentOverride`** property of the FontFace interface returns and sets the value of the @font-face/descent-override descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/descentOverride)')\n    # The **`display`** property of the FontFace interface determines how a font face is displayed based on whether and when it is downloaded and ready to use.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/display)\n    display: FontDisplay = Field(..., description='The **`display`** property of the FontFace interface determines how a font face is displayed based on whether and when it is downloaded and ready to use.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/display)')\n    # The **`FontFace.family`** property allows the author to get or set the font family of a FontFace object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/family)\n    family: str = Field(..., description='The **`FontFace.family`** property allows the author to get or set the font family of a FontFace object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/family)')\n    # The **`featureSettings`** property of the FontFace interface retrieves or sets infrequently used font features that are not available from a font's variant properties.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/featureSettings)\n    featureSettings: str = Field(..., description='The **`featureSettings`** property of the FontFace interface retrieves or sets infrequently used font features that are not available from a font\'s variant properties.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/featureSettings)')\n    # The **`lineGapOverride`** property of the FontFace interface returns and sets the value of the @font-face/line-gap-override descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/lineGapOverride)\n    lineGapOverride: str = Field(..., description='The **`lineGapOverride`** property of the FontFace interface returns and sets the value of the @font-face/line-gap-override descriptor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/lineGapOverride)')\n    # The **`loaded`** read-only property of the FontFace interface returns a Promise that resolves with the current `FontFace` object when the font specified in the object's constructor is done loading or rejects with a `SyntaxError`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/loaded)\n    loaded: Promise<FontFace> = Field(..., description='The **`loaded`** read-only property of the FontFace interface returns a Promise that resolves with the current `FontFace` object when the font specified in the object\'s constructor is done loading or rejects with a `SyntaxError`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/loaded)')\n    # The **`status`** read-only property of the FontFace interface returns an enumerated value indicating the status of the font, one of `'unloaded'`, `'loading'`, `'loaded'`, or `'error'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/status)\n    status: FontFaceLoadStatus = Field(..., description='The **`status`** read-only property of the FontFace interface returns an enumerated value indicating the status of the font, one of `\'unloaded\'`, `\'loading\'`, `\'loaded\'`, or `\'error\'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/status)')\n    # The **`stretch`** property of the FontFace interface retrieves or sets how the font stretches.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/stretch)\n    stretch: str = Field(..., description='The **`stretch`** property of the FontFace interface retrieves or sets how the font stretches.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/stretch)')\n    # The **`style`** property of the FontFace interface retrieves or sets the font's style.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/style)\n    style: str = Field(..., description='The **`style`** property of the FontFace interface retrieves or sets the font\'s style.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/style)')\n    # The **`unicodeRange`** property of the FontFace interface retrieves or sets the range of unicode code points encompassing the font.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/unicodeRange)\n    unicodeRange: str = Field(..., description='The **`unicodeRange`** property of the FontFace interface retrieves or sets the range of unicode code points encompassing the font.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/unicodeRange)')\n    # The **`weight`** property of the FontFace interface retrieves or sets the weight of the font.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/weight)\n    weight: str = Field(..., description='The **`weight`** property of the FontFace interface retrieves or sets the weight of the font.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/weight)')\n\nclass FontFaceSetEventMap(BaseModel):\n    loading: FontFaceSetLoadEvent = Field(...)\n    loadingdone: FontFaceSetLoadEvent = Field(...)\n    loadingerror: FontFaceSetLoadEvent = Field(...)\n\n# The **`FontFaceSet`** interface of the CSS Font Loading API manages the loading of font-faces and querying of their download status.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet)\nclass FontFaceSet(EventTarget):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loading_event)\n    onloading: Union[((this: FontFaceSet, ev: FontFaceSetLoadEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loading_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingdone_event)\n    onloadingdone: Union[((this: FontFaceSet, ev: FontFaceSetLoadEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingdone_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingerror_event)\n    onloadingerror: Union[((this: FontFaceSet, ev: FontFaceSetLoadEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingerror_event)')\n    # The `ready` read-only property of the FontFaceSet interface returns a Promise that resolves to the given FontFaceSet.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/ready)\n    ready: Promise<FontFaceSet> = Field(..., description='The `ready` read-only property of the FontFaceSet interface returns a Promise that resolves to the given FontFaceSet.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/ready)')\n    # The **`status`** read-only property of the FontFaceSet interface returns the loading state of the fonts in the set.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/status)\n    status: FontFaceSetLoadStatus = Field(..., description='The **`status`** read-only property of the FontFaceSet interface returns the loading state of the fonts in the set.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/status)')\n\n# The **`FontFaceSetLoadEvent`** interface of the CSS Font Loading API represents events fired at a FontFaceSet after it starts loading font faces.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSetLoadEvent)\nclass FontFaceSetLoadEvent(Event):\n    # The **`fontfaces`** read-only property of the An array of FontFace instance.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSetLoadEvent/fontfaces)\n    fontfaces: ReadonlyArray<FontFace> = Field(..., description='The **`fontfaces`** read-only property of the An array of FontFace instance.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSetLoadEvent/fontfaces)')\n\nclass FontFaceSource(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fonts)\n    fonts: FontFaceSet = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fonts)')\n\n# The **`FormData`** interface provides a way to construct a set of key/value pairs representing form fields and their values, which can be sent using the Window/fetch, XMLHttpRequest.send() or navigator.sendBeacon() methods.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData)\nclass FormData(BaseModel):\n    pass\n\n# The **`FormDataEvent`** interface represents a `formdata` event — such an event is fired on an HTMLFormElement object after the entry list representing the form's data is constructed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FormDataEvent)\nclass FormDataEvent(Event):\n    # The `formData` read-only property of the FormDataEvent interface contains the FormData object representing the data contained in the form when the event was fired.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FormDataEvent/formData)\n    formData: FormData = Field(..., description='The `formData` read-only property of the FormDataEvent interface contains the FormData object representing the data contained in the form when the event was fired.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FormDataEvent/formData)')\n\n# The **`FragmentDirective`** interface is an object exposed to allow code to check whether or not a browser supports text fragments.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/FragmentDirective)\nclass FragmentDirective(BaseModel):\n    pass\n\n# The **`GPUError`** interface of the WebGPU API is the base interface for errors surfaced by GPUDevice.popErrorScope and the GPUDevice.uncapturederror_event event.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GPUError)\nclass GPUError(BaseModel):\n    # The **`message`** read-only property of the A string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GPUError/message)\n    message: str = Field(..., description='The **`message`** read-only property of the A string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GPUError/message)')\n\n# The `GainNode` interface represents a change in volume.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GainNode)\nclass GainNode(AudioNode):\n    # The `gain` property of the GainNode interface is an a-rate AudioParam representing the amount of gain to apply.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GainNode/gain)\n    gain: AudioParam = Field(..., description='The `gain` property of the GainNode interface is an a-rate AudioParam representing the amount of gain to apply.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GainNode/gain)')\n\n# The **`Gamepad`** interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad)\nclass Gamepad(BaseModel):\n    # The **`Gamepad.axes`** property of the Gamepad interface returns an array representing the controls with axes present on the device (e.g., analog thumb sticks).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/axes)\n    axes: ReadonlyArray<number> = Field(..., description='The **`Gamepad.axes`** property of the Gamepad interface returns an array representing the controls with axes present on the device (e.g., analog thumb sticks).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/axes)')\n    # The **`buttons`** property of the Gamepad interface returns an array of GamepadButton objects representing the buttons present on the device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/buttons)\n    buttons: ReadonlyArray<GamepadButton> = Field(..., description='The **`buttons`** property of the Gamepad interface returns an array of GamepadButton objects representing the buttons present on the device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/buttons)')\n    # The **`Gamepad.connected`** property of the still connected to the system.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/connected)\n    connected: bool = Field(..., description='The **`Gamepad.connected`** property of the still connected to the system.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/connected)')\n    # The **`Gamepad.id`** property of the Gamepad interface returns a string containing some information about the controller.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/id)\n    id: str = Field(..., description='The **`Gamepad.id`** property of the Gamepad interface returns a string containing some information about the controller.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/id)')\n    # The **`Gamepad.index`** property of the Gamepad interface returns an integer that is auto-incremented to be unique for each device currently connected to the system.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/index)\n    index: float = Field(..., description='The **`Gamepad.index`** property of the Gamepad interface returns an integer that is auto-incremented to be unique for each device currently connected to the system.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/index)')\n    # The **`Gamepad.mapping`** property of the remapped the controls on the device to a known layout.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/mapping)\n    mapping: GamepadMappingType = Field(..., description='The **`Gamepad.mapping`** property of the remapped the controls on the device to a known layout.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/mapping)')\n    # The **`Gamepad.timestamp`** property of the representing the last time the data for this gamepad was updated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/timestamp)\n    timestamp: DOMHighResTimeStamp = Field(..., description='The **`Gamepad.timestamp`** property of the representing the last time the data for this gamepad was updated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/timestamp)')\n    # The **`vibrationActuator`** read-only property of the Gamepad interface returns a GamepadHapticActuator object, which represents haptic feedback hardware available on the controller.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/vibrationActuator)\n    vibrationActuator: GamepadHapticActuator = Field(..., description='The **`vibrationActuator`** read-only property of the Gamepad interface returns a GamepadHapticActuator object, which represents haptic feedback hardware available on the controller.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/vibrationActuator)')\n\n# The **`GamepadButton`** interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton)\nclass GamepadButton(BaseModel):\n    # The **`GamepadButton.pressed`** property of the the button is currently pressed (`true`) or unpressed (`false`).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton/pressed)\n    pressed: bool = Field(..., description='The **`GamepadButton.pressed`** property of the the button is currently pressed (`true`) or unpressed (`false`).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton/pressed)')\n    # The **`touched`** property of the a button capable of detecting touch is currently touched (`true`) or not touched (`false`).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton/touched)\n    touched: bool = Field(..., description='The **`touched`** property of the a button capable of detecting touch is currently touched (`true`) or not touched (`false`).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton/touched)')\n    # The **`GamepadButton.value`** property of the current state of analog buttons on many modern gamepads, such as the triggers.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton/value)\n    value: float = Field(..., description='The **`GamepadButton.value`** property of the current state of analog buttons on many modern gamepads, such as the triggers.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton/value)')\n\n# The GamepadEvent interface of the Gamepad API contains references to gamepads connected to the system, which is what the gamepad events Window.gamepadconnected_event and Window.gamepaddisconnected_event are fired in response to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadEvent)\nclass GamepadEvent(Event):\n    # The **`GamepadEvent.gamepad`** property of the **GamepadEvent interface** returns a Gamepad object, providing access to the associated gamepad data for fired A Gamepad object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadEvent/gamepad)\n    gamepad: Gamepad = Field(..., description='The **`GamepadEvent.gamepad`** property of the **GamepadEvent interface** returns a Gamepad object, providing access to the associated gamepad data for fired A Gamepad object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadEvent/gamepad)')\n\n# The **`GamepadHapticActuator`** interface of the Gamepad API represents hardware in the controller designed to provide haptic feedback to the user (if available), most commonly vibration hardware.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadHapticActuator)\nclass GamepadHapticActuator(BaseModel):\n    pass\n\nclass GenericTransformStream(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream/readable)\n    readable: ReadableStream = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream/readable)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream/writable)\n    writable: WritableStream = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream/writable)')\n\n# The **`Geolocation`** interface represents an object able to obtain the position of the device programmatically.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Geolocation)\nclass Geolocation(BaseModel):\n    pass\n\n# The **`GeolocationCoordinates`** interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates)\nclass GeolocationCoordinates(BaseModel):\n    # The **`accuracy`** read-only property of the GeolocationCoordinates interface is a strictly positive `double` representing the accuracy, with a 95% confidence level, of the GeolocationCoordinates.latitude and GeolocationCoordinates.longitude properties expressed in meters.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/accuracy)\n    accuracy: float = Field(..., description='The **`accuracy`** read-only property of the GeolocationCoordinates interface is a strictly positive `double` representing the accuracy, with a 95% confidence level, of the GeolocationCoordinates.latitude and GeolocationCoordinates.longitude properties expressed in meters.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/accuracy)')\n    # The **`altitude`** read-only property of the GeolocationCoordinates interface is a `double` representing the altitude of the position in meters above the WGS84 ellipsoid (which defines the nominal sea level surface).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/altitude)\n    altitude: Union[float, null] = Field(..., description='The **`altitude`** read-only property of the GeolocationCoordinates interface is a `double` representing the altitude of the position in meters above the WGS84 ellipsoid (which defines the nominal sea level surface).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/altitude)')\n    # The **`altitudeAccuracy`** read-only property of the GeolocationCoordinates interface is a strictly positive `double` representing the accuracy, with a 95% confidence level, of the `altitude` expressed in meters.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/altitudeAccuracy)\n    altitudeAccuracy: Union[float, null] = Field(..., description='The **`altitudeAccuracy`** read-only property of the GeolocationCoordinates interface is a strictly positive `double` representing the accuracy, with a 95% confidence level, of the `altitude` expressed in meters.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/altitudeAccuracy)')\n    # The **`heading`** read-only property of the GeolocationCoordinates interface is a `double` representing the direction in which the device is traveling.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/heading)\n    heading: Union[float, null] = Field(..., description='The **`heading`** read-only property of the GeolocationCoordinates interface is a `double` representing the direction in which the device is traveling.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/heading)')\n    # The **`latitude`** read-only property of the GeolocationCoordinates interface is a `double` representing the latitude of the position in decimal degrees.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/latitude)\n    latitude: float = Field(..., description='The **`latitude`** read-only property of the GeolocationCoordinates interface is a `double` representing the latitude of the position in decimal degrees.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/latitude)')\n    # The **`longitude`** read-only property of the GeolocationCoordinates interface is a number which represents the longitude of a geographical position, specified in decimal degrees.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/longitude)\n    longitude: float = Field(..., description='The **`longitude`** read-only property of the GeolocationCoordinates interface is a number which represents the longitude of a geographical position, specified in decimal degrees.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/longitude)')\n    # The **`speed`** read-only property of the GeolocationCoordinates interface is a `double` representing the velocity of the device in meters per second.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/speed)\n    speed: Union[float, null] = Field(..., description='The **`speed`** read-only property of the GeolocationCoordinates interface is a `double` representing the velocity of the device in meters per second.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/speed)')\n\n# The **`GeolocationPosition`** interface represents the position of the concerned device at a given time.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPosition)\nclass GeolocationPosition(BaseModel):\n    # The **`coords`** read-only property of the GeolocationPosition interface returns a GeolocationCoordinates object representing a geographic position.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPosition/coords)\n    coords: GeolocationCoordinates = Field(..., description='The **`coords`** read-only property of the GeolocationPosition interface returns a GeolocationCoordinates object representing a geographic position.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPosition/coords)')\n    # The **`timestamp`** read-only property of the GeolocationPosition interface represents the date and time that the position was acquired by the device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPosition/timestamp)\n    timestamp: EpochTimeStamp = Field(..., description='The **`timestamp`** read-only property of the GeolocationPosition interface represents the date and time that the position was acquired by the device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPosition/timestamp)')\n\n# The **`GeolocationPositionError`** interface represents the reason of an error occurring when using the geolocating device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError)\nclass GeolocationPositionError(BaseModel):\n    # The **`code`** read-only property of the GeolocationPositionError interface is an `unsigned short` representing the error code.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError/code)\n    code: float = Field(..., description='The **`code`** read-only property of the GeolocationPositionError interface is an `unsigned short` representing the error code.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError/code)')\n    # The **`message`** read-only property of the GeolocationPositionError interface returns a human-readable string describing the details of the error.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError/message)\n    message: str = Field(..., description='The **`message`** read-only property of the GeolocationPositionError interface returns a human-readable string describing the details of the error.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError/message)')\n    PERMISSION_DENIED: 1 = Field(...)\n    POSITION_UNAVAILABLE: 2 = Field(...)\n    TIMEOUT: 3 = Field(...)\n\nclass GlobalEventHandlersEventMap(BaseModel):\n    abort: UIEvent = Field(...)\n    animationcancel: AnimationEvent = Field(...)\n    animationend: AnimationEvent = Field(...)\n    animationiteration: AnimationEvent = Field(...)\n    animationstart: AnimationEvent = Field(...)\n    auxclick: PointerEvent = Field(...)\n    beforeinput: InputEvent = Field(...)\n    beforematch: Event = Field(...)\n    beforetoggle: ToggleEvent = Field(...)\n    blur: FocusEvent = Field(...)\n    cancel: Event = Field(...)\n    canplay: Event = Field(...)\n    canplaythrough: Event = Field(...)\n    change: Event = Field(...)\n    click: PointerEvent = Field(...)\n    close: Event = Field(...)\n    compositionend: CompositionEvent = Field(...)\n    compositionstart: CompositionEvent = Field(...)\n    compositionupdate: CompositionEvent = Field(...)\n    contextlost: Event = Field(...)\n    contextmenu: PointerEvent = Field(...)\n    contextrestored: Event = Field(...)\n    copy: ClipboardEvent = Field(...)\n    cuechange: Event = Field(...)\n    cut: ClipboardEvent = Field(...)\n    dblclick: MouseEvent = Field(...)\n    drag: DragEvent = Field(...)\n    dragend: DragEvent = Field(...)\n    dragenter: DragEvent = Field(...)\n    dragleave: DragEvent = Field(...)\n    dragover: DragEvent = Field(...)\n    dragstart: DragEvent = Field(...)\n    drop: DragEvent = Field(...)\n    durationchange: Event = Field(...)\n    emptied: Event = Field(...)\n    ended: Event = Field(...)\n    error: ErrorEvent = Field(...)\n    focus: FocusEvent = Field(...)\n    focusin: FocusEvent = Field(...)\n    focusout: FocusEvent = Field(...)\n    formdata: FormDataEvent = Field(...)\n    gotpointercapture: PointerEvent = Field(...)\n    input: Event = Field(...)\n    invalid: Event = Field(...)\n    keydown: KeyboardEvent = Field(...)\n    keypress: KeyboardEvent = Field(...)\n    keyup: KeyboardEvent = Field(...)\n    load: Event = Field(...)\n    loadeddata: Event = Field(...)\n    loadedmetadata: Event = Field(...)\n    loadstart: Event = Field(...)\n    lostpointercapture: PointerEvent = Field(...)\n    mousedown: MouseEvent = Field(...)\n    mouseenter: MouseEvent = Field(...)\n    mouseleave: MouseEvent = Field(...)\n    mousemove: MouseEvent = Field(...)\n    mouseout: MouseEvent = Field(...)\n    mouseover: MouseEvent = Field(...)\n    mouseup: MouseEvent = Field(...)\n    paste: ClipboardEvent = Field(...)\n    pause: Event = Field(...)\n    play: Event = Field(...)\n    playing: Event = Field(...)\n    pointercancel: PointerEvent = Field(...)\n    pointerdown: PointerEvent = Field(...)\n    pointerenter: PointerEvent = Field(...)\n    pointerleave: PointerEvent = Field(...)\n    pointermove: PointerEvent = Field(...)\n    pointerout: PointerEvent = Field(...)\n    pointerover: PointerEvent = Field(...)\n    pointerrawupdate: Event = Field(...)\n    pointerup: PointerEvent = Field(...)\n    progress: ProgressEvent = Field(...)\n    ratechange: Event = Field(...)\n    reset: Event = Field(...)\n    resize: UIEvent = Field(...)\n    scroll: Event = Field(...)\n    scrollend: Event = Field(...)\n    securitypolicyviolation: SecurityPolicyViolationEvent = Field(...)\n    seeked: Event = Field(...)\n    seeking: Event = Field(...)\n    select: Event = Field(...)\n    selectionchange: Event = Field(...)\n    selectstart: Event = Field(...)\n    slotchange: Event = Field(...)\n    stalled: Event = Field(...)\n    submit: SubmitEvent = Field(...)\n    suspend: Event = Field(...)\n    timeupdate: Event = Field(...)\n    toggle: ToggleEvent = Field(...)\n    touchcancel: TouchEvent = Field(...)\n    touchend: TouchEvent = Field(...)\n    touchmove: TouchEvent = Field(...)\n    touchstart: TouchEvent = Field(...)\n    transitioncancel: TransitionEvent = Field(...)\n    transitionend: TransitionEvent = Field(...)\n    transitionrun: TransitionEvent = Field(...)\n    transitionstart: TransitionEvent = Field(...)\n    volumechange: Event = Field(...)\n    waiting: Event = Field(...)\n    webkitanimationend: Event = Field(...)\n    webkitanimationiteration: Event = Field(...)\n    webkitanimationstart: Event = Field(...)\n    webkittransitionend: Event = Field(...)\n    wheel: WheelEvent = Field(...)\n\nclass GlobalEventHandlers(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/abort_event)\n    onabort: Union[((this: GlobalEventHandlers, ev: UIEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/abort_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationcancel_event)\n    onanimationcancel: Union[((this: GlobalEventHandlers, ev: AnimationEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationcancel_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)\n    onanimationend: Union[((this: GlobalEventHandlers, ev: AnimationEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)\n    onanimationiteration: Union[((this: GlobalEventHandlers, ev: AnimationEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)\n    onanimationstart: Union[((this: GlobalEventHandlers, ev: AnimationEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/auxclick_event)\n    onauxclick: Union[((this: GlobalEventHandlers, ev: PointerEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/auxclick_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/beforeinput_event)\n    onbeforeinput: Union[((this: GlobalEventHandlers, ev: InputEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/beforeinput_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/beforematch_event)\n    onbeforematch: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/beforematch_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/beforetoggle_event)\n    onbeforetoggle: Union[((this: GlobalEventHandlers, ev: ToggleEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/beforetoggle_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/blur_event)\n    onblur: Union[((this: GlobalEventHandlers, ev: FocusEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/blur_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/cancel_event)\n    oncancel: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/cancel_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplay_event)\n    oncanplay: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplay_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplaythrough_event)\n    oncanplaythrough: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplaythrough_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/change_event)\n    onchange: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/change_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/click_event)\n    onclick: Union[((this: GlobalEventHandlers, ev: PointerEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/click_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close_event)\n    onclose: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/contextlost_event)\n    oncontextlost: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/contextlost_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/contextmenu_event)\n    oncontextmenu: Union[((this: GlobalEventHandlers, ev: PointerEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/contextmenu_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/contextrestored_event)\n    oncontextrestored: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/contextrestored_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/copy_event)\n    oncopy: Union[((this: GlobalEventHandlers, ev: ClipboardEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/copy_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/cuechange_event)\n    oncuechange: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/cuechange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/cut_event)\n    oncut: Union[((this: GlobalEventHandlers, ev: ClipboardEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/cut_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/dblclick_event)\n    ondblclick: Union[((this: GlobalEventHandlers, ev: MouseEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/dblclick_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drag_event)\n    ondrag: Union[((this: GlobalEventHandlers, ev: DragEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drag_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragend_event)\n    ondragend: Union[((this: GlobalEventHandlers, ev: DragEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragend_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragenter_event)\n    ondragenter: Union[((this: GlobalEventHandlers, ev: DragEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragenter_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragleave_event)\n    ondragleave: Union[((this: GlobalEventHandlers, ev: DragEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragleave_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragover_event)\n    ondragover: Union[((this: GlobalEventHandlers, ev: DragEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragover_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragstart_event)\n    ondragstart: Union[((this: GlobalEventHandlers, ev: DragEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragstart_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drop_event)\n    ondrop: Union[((this: GlobalEventHandlers, ev: DragEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drop_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/durationchange_event)\n    ondurationchange: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/durationchange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/emptied_event)\n    onemptied: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/emptied_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended_event)\n    onended: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/error_event)\n    onerror: OnErrorEventHandler = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/error_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/focus_event)\n    onfocus: Union[((this: GlobalEventHandlers, ev: FocusEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/focus_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/formdata_event)\n    onformdata: Union[((this: GlobalEventHandlers, ev: FormDataEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/formdata_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/gotpointercapture_event)\n    ongotpointercapture: Union[((this: GlobalEventHandlers, ev: PointerEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/gotpointercapture_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/input_event)\n    oninput: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/input_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/invalid_event)\n    oninvalid: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/invalid_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keydown_event)\n    onkeydown: Union[((this: GlobalEventHandlers, ev: KeyboardEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keydown_event)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keypress_event)\n    onkeypress: Union[((this: GlobalEventHandlers, ev: KeyboardEvent) => any), null] = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keypress_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keyup_event)\n    onkeyup: Union[((this: GlobalEventHandlers, ev: KeyboardEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keyup_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/load_event)\n    onload: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/load_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadeddata_event)\n    onloadeddata: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadeddata_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadedmetadata_event)\n    onloadedmetadata: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadedmetadata_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadstart_event)\n    onloadstart: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadstart_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/lostpointercapture_event)\n    onlostpointercapture: Union[((this: GlobalEventHandlers, ev: PointerEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/lostpointercapture_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousedown_event)\n    onmousedown: Union[((this: GlobalEventHandlers, ev: MouseEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousedown_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseenter_event)\n    onmouseenter: Union[((this: GlobalEventHandlers, ev: MouseEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseenter_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseleave_event)\n    onmouseleave: Union[((this: GlobalEventHandlers, ev: MouseEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseleave_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousemove_event)\n    onmousemove: Union[((this: GlobalEventHandlers, ev: MouseEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousemove_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseout_event)\n    onmouseout: Union[((this: GlobalEventHandlers, ev: MouseEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseout_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseover_event)\n    onmouseover: Union[((this: GlobalEventHandlers, ev: MouseEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseover_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseup_event)\n    onmouseup: Union[((this: GlobalEventHandlers, ev: MouseEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseup_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/paste_event)\n    onpaste: Union[((this: GlobalEventHandlers, ev: ClipboardEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/paste_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause_event)\n    onpause: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play_event)\n    onplay: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playing_event)\n    onplaying: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playing_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointercancel_event)\n    onpointercancel: Union[((this: GlobalEventHandlers, ev: PointerEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointercancel_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerdown_event)\n    onpointerdown: Union[((this: GlobalEventHandlers, ev: PointerEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerdown_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerenter_event)\n    onpointerenter: Union[((this: GlobalEventHandlers, ev: PointerEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerenter_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerleave_event)\n    onpointerleave: Union[((this: GlobalEventHandlers, ev: PointerEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerleave_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointermove_event)\n    onpointermove: Union[((this: GlobalEventHandlers, ev: PointerEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointermove_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerout_event)\n    onpointerout: Union[((this: GlobalEventHandlers, ev: PointerEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerout_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerover_event)\n    onpointerover: Union[((this: GlobalEventHandlers, ev: PointerEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerover_event)')\n    # Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerrawupdate_event)\n    onpointerrawupdate: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerrawupdate_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerup_event)\n    onpointerup: Union[((this: GlobalEventHandlers, ev: PointerEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerup_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/progress_event)\n    onprogress: Union[((this: GlobalEventHandlers, ev: ProgressEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/progress_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ratechange_event)\n    onratechange: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ratechange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset_event)\n    onreset: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/resize_event)\n    onresize: Union[((this: GlobalEventHandlers, ev: UIEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/resize_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scroll_event)\n    onscroll: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scroll_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scrollend_event)\n    onscrollend: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scrollend_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/securitypolicyviolation_event)\n    onsecuritypolicyviolation: Union[((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/securitypolicyviolation_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeked_event)\n    onseeked: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeked_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking_event)\n    onseeking: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select_event)\n    onselect: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/selectionchange_event)\n    onselectionchange: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/selectionchange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/selectstart_event)\n    onselectstart: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/selectstart_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/slotchange_event)\n    onslotchange: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/slotchange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/stalled_event)\n    onstalled: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/stalled_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit_event)\n    onsubmit: Union[((this: GlobalEventHandlers, ev: SubmitEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/suspend_event)\n    onsuspend: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/suspend_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/timeupdate_event)\n    ontimeupdate: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/timeupdate_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/toggle_event)\n    ontoggle: Union[((this: GlobalEventHandlers, ev: ToggleEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/toggle_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchcancel_event)\n    ontouchcancel: Optional[Union[((this: GlobalEventHandlers, ev: TouchEvent) => any), null, undefined]] = None = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchcancel_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchend_event)\n    ontouchend: Optional[Union[((this: GlobalEventHandlers, ev: TouchEvent) => any), null, undefined]] = None = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchend_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchmove_event)\n    ontouchmove: Optional[Union[((this: GlobalEventHandlers, ev: TouchEvent) => any), null, undefined]] = None = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchmove_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchstart_event)\n    ontouchstart: Optional[Union[((this: GlobalEventHandlers, ev: TouchEvent) => any), null, undefined]] = None = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchstart_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitioncancel_event)\n    ontransitioncancel: Union[((this: GlobalEventHandlers, ev: TransitionEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitioncancel_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)\n    ontransitionend: Union[((this: GlobalEventHandlers, ev: TransitionEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionrun_event)\n    ontransitionrun: Union[((this: GlobalEventHandlers, ev: TransitionEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionrun_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionstart_event)\n    ontransitionstart: Union[((this: GlobalEventHandlers, ev: TransitionEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionstart_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volumechange_event)\n    onvolumechange: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volumechange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waiting_event)\n    onwaiting: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waiting_event)')\n    # @deprecated This is a legacy alias of `onanimationend`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)\n    onwebkitanimationend: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='@deprecated This is a legacy alias of `onanimationend`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)')\n    # @deprecated This is a legacy alias of `onanimationiteration`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)\n    onwebkitanimationiteration: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='@deprecated This is a legacy alias of `onanimationiteration`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)')\n    # @deprecated This is a legacy alias of `onanimationstart`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)\n    onwebkitanimationstart: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='@deprecated This is a legacy alias of `onanimationstart`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)')\n    # @deprecated This is a legacy alias of `ontransitionend`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)\n    onwebkittransitionend: Union[((this: GlobalEventHandlers, ev: Event) => any), null] = Field(..., description='@deprecated This is a legacy alias of `ontransitionend`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/wheel_event)\n    onwheel: Union[((this: GlobalEventHandlers, ev: WheelEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/wheel_event)')\n\n# The **`HTMLAllCollection`** interface represents a collection of _all_ of the document's elements, accessible by index (like an array) and by the element's `id`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection)\nclass HTMLAllCollection(BaseModel):\n    # The **`HTMLAllCollection.length`** property returns the number of items in this HTMLAllCollection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection/length)\n    length: float = Field(..., description='The **`HTMLAllCollection.length`** property returns the number of items in this HTMLAllCollection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection/length)')\n\n# The **`HTMLAnchorElement`** interface represents hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the layout and presentation of such elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement)\nclass HTMLAnchorElement(HTMLElement):\n    # @deprecated\n    charset: str = Field(..., description='@deprecated')\n    # @deprecated\n    coords: str = Field(..., description='@deprecated')\n    # The **`HTMLAnchorElement.download`** property is a string indicating that the linked resource is intended to be downloaded rather than displayed in the browser.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/download)\n    download: str = Field(..., description='The **`HTMLAnchorElement.download`** property is a string indicating that the linked resource is intended to be downloaded rather than displayed in the browser.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/download)')\n    # The **`hreflang`** property of the HTMLAnchorElement interface is a string that is the language of the linked resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hreflang)\n    hreflang: str = Field(..., description='The **`hreflang`** property of the HTMLAnchorElement interface is a string that is the language of the linked resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hreflang)')\n    # @deprecated\n    name: str = Field(..., description='@deprecated')\n    # The **`ping`** property of the HTMLAnchorElement interface is a space-separated list of URLs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/ping)\n    ping: str = Field(..., description='The **`ping`** property of the HTMLAnchorElement interface is a space-separated list of URLs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/ping)')\n    # The **`HTMLAnchorElement.referrerPolicy`** property reflect the HTML `referrerpolicy` attribute of the A string; one of the following: - `no-referrer` - : The Referer header will be omitted entirely.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/referrerPolicy)\n    referrerPolicy: str = Field(..., description='The **`HTMLAnchorElement.referrerPolicy`** property reflect the HTML `referrerpolicy` attribute of the A string; one of the following: - `no-referrer` - : The Referer header will be omitted entirely.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/referrerPolicy)')\n    # The **`HTMLAnchorElement.rel`** property reflects the `rel` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/rel)\n    rel: str = Field(..., description='The **`HTMLAnchorElement.rel`** property reflects the `rel` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/rel)')\n    # @deprecated\n    rev: str = Field(..., description='@deprecated')\n    # @deprecated\n    shape: str = Field(..., description='@deprecated')\n    # The **`target`** property of the HTMLAnchorElement interface is a string that indicates where to display the linked resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/target)\n    target: str = Field(..., description='The **`target`** property of the HTMLAnchorElement interface is a string that indicates where to display the linked resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/target)')\n    # The **`text`** property of the HTMLAnchorElement represents the text inside the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/text)\n    text: str = Field(..., description='The **`text`** property of the HTMLAnchorElement represents the text inside the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/text)')\n    # The **`type`** property of the HTMLAnchorElement interface is a string that indicates the MIME type of the linked resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/type)\n    type: str = Field(..., description='The **`type`** property of the HTMLAnchorElement interface is a string that indicates the MIME type of the linked resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/type)')\n\n# The **`HTMLAreaElement`** interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of area elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement)\nclass HTMLAreaElement(HTMLElement):\n    # The **`alt`** property of the HTMLAreaElement interface specifies the text of the hyperlink, defining the textual label for an image map's link.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/alt)\n    alt: str = Field(..., description='The **`alt`** property of the HTMLAreaElement interface specifies the text of the hyperlink, defining the textual label for an image map\'s link.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/alt)')\n    # The **`coords`** property of the HTMLAreaElement interface specifies the coordinates of the element's shape as a list of floating-point numbers.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/coords)\n    coords: str = Field(..., description='The **`coords`** property of the HTMLAreaElement interface specifies the coordinates of the element\'s shape as a list of floating-point numbers.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/coords)')\n    # The **`download`** property of the HTMLAreaElement interface is a string indicating that the linked resource is intended to be downloaded rather than displayed in the browser.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/download)\n    download: str = Field(..., description='The **`download`** property of the HTMLAreaElement interface is a string indicating that the linked resource is intended to be downloaded rather than displayed in the browser.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/download)')\n    # @deprecated\n    noHref: bool = Field(..., description='@deprecated')\n    # The **`ping`** property of the HTMLAreaElement interface is a space-separated list of URLs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/ping)\n    ping: str = Field(..., description='The **`ping`** property of the HTMLAreaElement interface is a space-separated list of URLs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/ping)')\n    # The **`HTMLAreaElement.referrerPolicy`** property reflect the HTML `referrerpolicy` attribute of the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/referrerPolicy)\n    referrerPolicy: str = Field(..., description='The **`HTMLAreaElement.referrerPolicy`** property reflect the HTML `referrerpolicy` attribute of the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/referrerPolicy)')\n    # The **`HTMLAreaElement.rel`** property reflects the `rel` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/rel)\n    rel: str = Field(..., description='The **`HTMLAreaElement.rel`** property reflects the `rel` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/rel)')\n    # The **`shape`** property of the HTMLAreaElement interface specifies the shape of an image map area.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/shape)\n    shape: str = Field(..., description='The **`shape`** property of the HTMLAreaElement interface specifies the shape of an image map area.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/shape)')\n    # The **`target`** property of the HTMLAreaElement interface is a string that indicates where to display the linked resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/target)\n    target: str = Field(..., description='The **`target`** property of the HTMLAreaElement interface is a string that indicates where to display the linked resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/target)')\n\n# The **`HTMLAudioElement`** interface provides access to the properties of audio elements, as well as methods to manipulate them.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAudioElement)\nclass HTMLAudioElement(HTMLMediaElement):\n    pass\n\n# The **`HTMLBRElement`** interface represents an HTML line break element (br).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBRElement)\nclass HTMLBRElement(HTMLElement):\n    # @deprecated\n    clear: str = Field(..., description='@deprecated')\n\n# The **`HTMLBaseElement`** interface contains the base URI for a document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement)\nclass HTMLBaseElement(HTMLElement):\n    # The **`href`** property of the HTMLBaseElement interface contains a string that is the URL to use as the base for relative URLs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement/href)\n    href: str = Field(..., description='The **`href`** property of the HTMLBaseElement interface contains a string that is the URL to use as the base for relative URLs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement/href)')\n    # The `target` property of the HTMLBaseElement interface is a string that represents the default target tab to show the resulting output for hyperlinks and form elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement/target)\n    target: str = Field(..., description='The `target` property of the HTMLBaseElement interface is a string that represents the default target tab to show the resulting output for hyperlinks and form elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement/target)')\n\nclass HTMLBodyElementEventMap(HTMLElementEventMap):\n    pass\n\n# The **`HTMLBodyElement`** interface provides special properties (beyond those inherited from the regular HTMLElement interface) for manipulating body elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement)\nclass HTMLBodyElement(HTMLElement):\n    # @deprecated\n    aLink: str = Field(..., description='@deprecated')\n    # @deprecated\n    background: str = Field(..., description='@deprecated')\n    # @deprecated\n    bgColor: str = Field(..., description='@deprecated')\n    # @deprecated\n    link: str = Field(..., description='@deprecated')\n    # @deprecated\n    text: str = Field(..., description='@deprecated')\n    # @deprecated\n    vLink: str = Field(..., description='@deprecated')\n\n# The **`HTMLButtonElement`** interface provides properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating button elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement)\nclass HTMLButtonElement(HTMLElement):\n    # The **`HTMLButtonElement.disabled`** property indicates whether the control is disabled, meaning that it does not accept any clicks.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/disabled)\n    disabled: bool = Field(..., description='The **`HTMLButtonElement.disabled`** property indicates whether the control is disabled, meaning that it does not accept any clicks.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/disabled)')\n    # The **`form`** read-only property of the HTMLButtonElement interface returns an HTMLFormElement object that owns this button, or `null` if this button is not owned by any form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/form)\n    form: Union[HTMLFormElement, null] = Field(..., description='The **`form`** read-only property of the HTMLButtonElement interface returns an HTMLFormElement object that owns this button, or `null` if this button is not owned by any form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/form)')\n    # The **`formAction`** property of the HTMLButtonElement interface is the URL of the program that is executed on the server when the form that owns this control is submitted.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formAction)\n    formAction: str = Field(..., description='The **`formAction`** property of the HTMLButtonElement interface is the URL of the program that is executed on the server when the form that owns this control is submitted.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formAction)')\n    # The **`formEnctype`** property of the HTMLButtonElement interface is the MIME_type of the content sent to the server when the form is submitted.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formEnctype)\n    formEnctype: str = Field(..., description='The **`formEnctype`** property of the HTMLButtonElement interface is the MIME_type of the content sent to the server when the form is submitted.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formEnctype)')\n    # The **`formMethod`** property of the HTMLButtonElement interface is the HTTP method used to submit the form if the button element is the control that submits the form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formMethod)\n    formMethod: str = Field(..., description='The **`formMethod`** property of the HTMLButtonElement interface is the HTTP method used to submit the form if the button element is the control that submits the form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formMethod)')\n    # The **`formNoValidate`** property of the HTMLButtonElement interface is a boolean value indicating if the form will bypass constraint validation when submitted via the button.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formNoValidate)\n    formNoValidate: bool = Field(..., description='The **`formNoValidate`** property of the HTMLButtonElement interface is a boolean value indicating if the form will bypass constraint validation when submitted via the button.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formNoValidate)')\n    # The **`formTarget`** property of the HTMLButtonElement interface is the tab, window, or iframe where the response of the submitted form is to be displayed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formTarget)\n    formTarget: str = Field(..., description='The **`formTarget`** property of the HTMLButtonElement interface is the tab, window, or iframe where the response of the submitted form is to be displayed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formTarget)')\n    # The **`HTMLButtonElement.labels`** read-only property returns a A NodeList containing the `<label>` elements associated with the `<button>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/labels)\n    labels: NodeListOf<HTMLLabelElement> = Field(..., description='The **`HTMLButtonElement.labels`** read-only property returns a A NodeList containing the `<label>` elements associated with the `<button>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/labels)')\n    # The **`name`** property of the HTMLButtonElement interface indicates the name of the button element or the empty string if the element has no name.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/name)\n    name: str = Field(..., description='The **`name`** property of the HTMLButtonElement interface indicates the name of the button element or the empty string if the element has no name.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/name)')\n    # The **`type`** property of the HTMLButtonElement interface is a string that indicates the behavior type of the button element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/type)\n    type: Union["submit", "reset", "button"] = Field(..., description='The **`type`** property of the HTMLButtonElement interface is a string that indicates the behavior type of the button element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/type)')\n    # The **`validationMessage`** read-only property of the HTMLButtonElement interface returns a string representing a localized message that describes the validation constraints that the button control does not satisfy (if any).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/validationMessage)\n    validationMessage: str = Field(..., description='The **`validationMessage`** read-only property of the HTMLButtonElement interface returns a string representing a localized message that describes the validation constraints that the button control does not satisfy (if any).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/validationMessage)')\n    # The **`validity`** read-only property of the HTMLButtonElement interface returns a ValidityState object that represents the validity states this element is in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/validity)\n    validity: ValidityState = Field(..., description='The **`validity`** read-only property of the HTMLButtonElement interface returns a ValidityState object that represents the validity states this element is in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/validity)')\n    # The **`value`** property of the HTMLButtonElement interface represents the value of the button element as a string, or the empty string if no value is set.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/value)\n    value: str = Field(..., description='The **`value`** property of the HTMLButtonElement interface represents the value of the button element as a string, or the empty string if no value is set.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/value)')\n    # The **`willValidate`** read-only property of the HTMLButtonElement interface indicates whether the button element is a candidate for constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/willValidate)\n    willValidate: bool = Field(..., description='The **`willValidate`** read-only property of the HTMLButtonElement interface indicates whether the button element is a candidate for constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/willValidate)')\n\n# The **`HTMLCanvasElement`** interface provides properties and methods for manipulating the layout and presentation of canvas elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement)\nclass HTMLCanvasElement(HTMLElement):\n    # The **`HTMLCanvasElement.height`** property is a positive `integer` reflecting the `height` HTML attribute of the canvas element interpreted in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/height)\n    height: float = Field(..., description='The **`HTMLCanvasElement.height`** property is a positive `integer` reflecting the `height` HTML attribute of the canvas element interpreted in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/height)')\n    # The **`HTMLCanvasElement.width`** property is a positive `integer` reflecting the `width` HTML attribute of the canvas element interpreted in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/width)\n    width: float = Field(..., description='The **`HTMLCanvasElement.width`** property is a positive `integer` reflecting the `width` HTML attribute of the canvas element interpreted in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/width)')\n\n# The **`HTMLCollection`** interface represents a generic collection (array-like object similar to Functions/arguments) of elements (in document order) and offers methods and properties for selecting from the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCollection)\nclass HTMLCollectionBase(BaseModel):\n    # The **`HTMLCollection.length`** property returns the number of items in a HTMLCollection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCollection/length)\n    length: float = Field(..., description='The **`HTMLCollection.length`** property returns the number of items in a HTMLCollection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCollection/length)')\n\nclass HTMLCollection(HTMLCollectionBase):\n    pass\n\nclass HTMLCollectionOf(HTMLCollectionBase):\n    pass\n\n# The **`HTMLDListElement`** interface provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list (dl) elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDListElement)\nclass HTMLDListElement(HTMLElement):\n    # @deprecated\n    compact: bool = Field(..., description='@deprecated')\n\n# The **`HTMLDataElement`** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating data elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataElement)\nclass HTMLDataElement(HTMLElement):\n    # The **`value`** property of the HTMLDataElement interface returns a string reflecting the `value` HTML attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataElement/value)\n    value: str = Field(..., description='The **`value`** property of the HTMLDataElement interface returns a string reflecting the `value` HTML attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataElement/value)')\n\n# The **`HTMLDataListElement`** interface provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate datalist elements and their content.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataListElement)\nclass HTMLDataListElement(HTMLElement):\n    # The **`options`** read-only property of the HTMLDataListElement interface returns an HTMLCollection of HTMLOptionElement elements contained in a datalist.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataListElement/options)\n    options: HTMLCollectionOf<HTMLOptionElement> = Field(..., description='The **`options`** read-only property of the HTMLDataListElement interface returns an HTMLCollection of HTMLOptionElement elements contained in a datalist.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataListElement/options)')\n\n# The **`HTMLDetailsElement`** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating details elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement)\nclass HTMLDetailsElement(HTMLElement):\n    # The **`name`** property of the HTMLDetailsElement interface reflects the `name` attribute of details elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/name)\n    name: str = Field(..., description='The **`name`** property of the HTMLDetailsElement interface reflects the `name` attribute of details elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/name)')\n    # The **`open`** property of the `open` HTML attribute, indicating whether the details's contents (not counting the summary) is to be shown to the user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/open)\n    open: bool = Field(..., description='The **`open`** property of the `open` HTML attribute, indicating whether the details\'s contents (not counting the summary) is to be shown to the user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/open)')\n\n# The **`HTMLDialogElement`** interface provides methods to manipulate dialog elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement)\nclass HTMLDialogElement(HTMLElement):\n    # The **`open`** property of the `open` HTML attribute, indicating whether the dialog is available for interaction.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/open)\n    open: bool = Field(..., description='The **`open`** property of the `open` HTML attribute, indicating whether the dialog is available for interaction.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/open)')\n    # The **`returnValue`** property of the HTMLDialogElement interface is a string representing the return value for a dialog element when it's closed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/returnValue)\n    returnValue: str = Field(..., description='The **`returnValue`** property of the HTMLDialogElement interface is a string representing the return value for a dialog element when it\'s closed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/returnValue)')\n\n# @deprecated\nclass HTMLDirectoryElement(HTMLElement):\n    # @deprecated\n    compact: bool = Field(..., description='@deprecated')\n\n# The **`HTMLDivElement`** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating div elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDivElement)\nclass HTMLDivElement(HTMLElement):\n    # @deprecated\n    align: str = Field(..., description='@deprecated')\n\nclass HTMLDocument(Document):\n    pass\n\nclass HTMLElementEventMap(ElementEventMap):\n    pass\n\n# The **`HTMLElement`** interface represents any HTML element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement)\nclass HTMLElement(Element):\n    # The **`HTMLElement.accessKey`** property sets the keystroke which a user can press to jump to a given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/accessKey)\n    accessKey: str = Field(..., description='The **`HTMLElement.accessKey`** property sets the keystroke which a user can press to jump to a given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/accessKey)')\n    # The **`HTMLElement.accessKeyLabel`** read-only property returns a string containing the element's browser-assigned access key (if any); otherwise it returns an empty string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/accessKeyLabel)\n    accessKeyLabel: str = Field(..., description='The **`HTMLElement.accessKeyLabel`** read-only property returns a string containing the element\'s browser-assigned access key (if any); otherwise it returns an empty string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/accessKeyLabel)')\n    # The **`autocapitalize`** property of the HTMLElement interface represents the element's capitalization behavior for user input.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/autocapitalize)\n    autocapitalize: str = Field(..., description='The **`autocapitalize`** property of the HTMLElement interface represents the element\'s capitalization behavior for user input.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/autocapitalize)')\n    # The **`autocorrect`** property of the HTMLElement interface controls whether or not autocorrection of editable text is enabled for spelling and/or punctuation errors.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/autocorrect)\n    autocorrect: bool = Field(..., description='The **`autocorrect`** property of the HTMLElement interface controls whether or not autocorrection of editable text is enabled for spelling and/or punctuation errors.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/autocorrect)')\n    # The **`HTMLElement.dir`** property indicates the text writing directionality of the content of the current element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dir)\n    dir: str = Field(..., description='The **`HTMLElement.dir`** property indicates the text writing directionality of the content of the current element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dir)')\n    # The **`draggable`** property of the HTMLElement interface gets and sets a Boolean primitive indicating if the element is draggable.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/draggable)\n    draggable: bool = Field(..., description='The **`draggable`** property of the HTMLElement interface gets and sets a Boolean primitive indicating if the element is draggable.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/draggable)')\n    # The HTMLElement property **`hidden`** reflects the value of the element's `hidden` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/hidden)\n    hidden: bool = Field(..., description='The HTMLElement property **`hidden`** reflects the value of the element\'s `hidden` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/hidden)')\n    # The HTMLElement property **`inert`** reflects the value of the element's `inert` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/inert)\n    inert: bool = Field(..., description='The HTMLElement property **`inert`** reflects the value of the element\'s `inert` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/inert)')\n    # The **`innerText`** property of the HTMLElement interface represents the rendered text content of a node and its descendants.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/innerText)\n    innerText: str = Field(..., description='The **`innerText`** property of the HTMLElement interface represents the rendered text content of a node and its descendants.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/innerText)')\n    # The **`lang`** property of the HTMLElement interface indicates the base language of an element's attribute values and text content, in the form of a MISSING: RFC(5646, 'BCP 47 language identifier tag')].
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/lang)\n    lang: str = Field(..., description='The **`lang`** property of the HTMLElement interface indicates the base language of an element\'s attribute values and text content, in the form of a MISSING: RFC(5646, \'BCP 47 language identifier tag\')].
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/lang)')\n    # The **`offsetHeight`** read-only property of the HTMLElement interface returns the height of an element, including vertical padding and borders, as an integer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetHeight)\n    offsetHeight: float = Field(..., description='The **`offsetHeight`** read-only property of the HTMLElement interface returns the height of an element, including vertical padding and borders, as an integer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetHeight)')\n    # The **`offsetLeft`** read-only property of the HTMLElement interface returns the number of pixels that the _upper left corner_ of the current element is offset to the left within the HTMLElement.offsetParent node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetLeft)\n    offsetLeft: float = Field(..., description='The **`offsetLeft`** read-only property of the HTMLElement interface returns the number of pixels that the _upper left corner_ of the current element is offset to the left within the HTMLElement.offsetParent node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetLeft)')\n    # The **`HTMLElement.offsetParent`** read-only property returns a reference to the element which is the closest (nearest in the containment hierarchy) positioned ancestor element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetParent)\n    offsetParent: Union[Element, null] = Field(..., description='The **`HTMLElement.offsetParent`** read-only property returns a reference to the element which is the closest (nearest in the containment hierarchy) positioned ancestor element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetParent)')\n    # The **`offsetTop`** read-only property of the HTMLElement interface returns the distance from the outer border of the current element (including its margin) to the top padding edge of the HTMLelement.offsetParent, the _closest positioned_ ancestor element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetTop)\n    offsetTop: float = Field(..., description='The **`offsetTop`** read-only property of the HTMLElement interface returns the distance from the outer border of the current element (including its margin) to the top padding edge of the HTMLelement.offsetParent, the _closest positioned_ ancestor element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetTop)')\n    # The **`offsetWidth`** read-only property of the HTMLElement interface returns the layout width of an element as an integer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetWidth)\n    offsetWidth: float = Field(..., description='The **`offsetWidth`** read-only property of the HTMLElement interface returns the layout width of an element as an integer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetWidth)')\n    # The **`outerText`** property of the HTMLElement interface returns the same value as HTMLElement.innerText.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/outerText)\n    outerText: str = Field(..., description='The **`outerText`** property of the HTMLElement interface returns the same value as HTMLElement.innerText.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/outerText)')\n    # The **`popover`** property of the HTMLElement interface gets and sets an element's popover state via JavaScript (`'auto'`, `'hint'`, or `'manual'`), and can be used for feature detection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/popover)\n    popover: Union[str, null] = Field(..., description='The **`popover`** property of the HTMLElement interface gets and sets an element\'s popover state via JavaScript (`\'auto\'`, `\'hint\'`, or `\'manual\'`), and can be used for feature detection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/popover)')\n    # The **`spellcheck`** property of the HTMLElement interface represents a boolean value that controls the spell-checking hint.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/spellcheck)\n    spellcheck: bool = Field(..., description='The **`spellcheck`** property of the HTMLElement interface represents a boolean value that controls the spell-checking hint.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/spellcheck)')\n    # The **`HTMLElement.title`** property represents the title of the element: the text usually displayed in a 'tooltip' popup when the mouse is over the node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/title)\n    title: str = Field(..., description='The **`HTMLElement.title`** property represents the title of the element: the text usually displayed in a \'tooltip\' popup when the mouse is over the node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/title)')\n    # The **`translate`** property of the HTMLElement interface indicates whether an element's attribute values and the values of its Text node children are to be translated when the page is localized, or whether to leave them unchanged.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/translate)\n    translate: bool = Field(..., description='The **`translate`** property of the HTMLElement interface indicates whether an element\'s attribute values and the values of its Text node children are to be translated when the page is localized, or whether to leave them unchanged.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/translate)')\n    # The **`writingSuggestions`** property of the HTMLElement interface is a string indicating if browser-provided writing suggestions should be enabled under the scope of the element or not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/writingSuggestions)\n    writingSuggestions: str = Field(..., description='The **`writingSuggestions`** property of the HTMLElement interface is a string indicating if browser-provided writing suggestions should be enabled under the scope of the element or not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/writingSuggestions)')\n\n# The **`HTMLEmbedElement`** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating embed elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement)\nclass HTMLEmbedElement(HTMLElement):\n    # @deprecated\n    align: str = Field(..., description='@deprecated')\n    # The **`height`** property of the HTMLEmbedElement interface returns a string that reflects the `height` attribute of the embed element, indicating the displayed height of the resource in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement/height)\n    height: str = Field(..., description='The **`height`** property of the HTMLEmbedElement interface returns a string that reflects the `height` attribute of the embed element, indicating the displayed height of the resource in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement/height)')\n    # @deprecated\n    name: str = Field(..., description='@deprecated')\n    # The **`src`** property of the HTMLEmbedElement interface returns a string that indicates the URL of the resource being embedded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement/src)\n    src: str = Field(..., description='The **`src`** property of the HTMLEmbedElement interface returns a string that indicates the URL of the resource being embedded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement/src)')\n    # The **`type`** property of the HTMLEmbedElement interface returns a string that reflects the `type` attribute of the embed element, indicating the MIME type of the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement/type)\n    type: str = Field(..., description='The **`type`** property of the HTMLEmbedElement interface returns a string that reflects the `type` attribute of the embed element, indicating the MIME type of the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement/type)')\n    # The **`width`** property of the HTMLEmbedElement interface returns a string that reflects the `width` attribute of the embed element, indicating the displayed width of the resource in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement/width)\n    width: str = Field(..., description='The **`width`** property of the HTMLEmbedElement interface returns a string that reflects the `width` attribute of the embed element, indicating the displayed width of the resource in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement/width)')\n\n# The **`HTMLFieldSetElement`** interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of fieldset elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement)\nclass HTMLFieldSetElement(HTMLElement):\n    # The **`disabled`** property of the HTMLFieldSetElement interface is a boolean value that reflects the fieldset element's `disabled` attribute, which indicates whether the control is disabled.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/disabled)\n    disabled: bool = Field(..., description='The **`disabled`** property of the HTMLFieldSetElement interface is a boolean value that reflects the fieldset element\'s `disabled` attribute, which indicates whether the control is disabled.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/disabled)')\n    # The **`elements`** read-only property of the HTMLFieldSetElement interface returns an HTMLCollection object containing all form control elements (button, fieldset, input, object, output, select, and textarea) that are descendants of this field set.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/elements)\n    elements: HTMLCollection = Field(..., description='The **`elements`** read-only property of the HTMLFieldSetElement interface returns an HTMLCollection object containing all form control elements (button, fieldset, input, object, output, select, and textarea) that are descendants of this field set.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/elements)')\n    # The **`form`** read-only property of the HTMLFieldSetElement interface returns an HTMLFormElement object that owns this fieldset, or `null` if this fieldset is not owned by any form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/form)\n    form: Union[HTMLFormElement, null] = Field(..., description='The **`form`** read-only property of the HTMLFieldSetElement interface returns an HTMLFormElement object that owns this fieldset, or `null` if this fieldset is not owned by any form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/form)')\n    # The **`name`** property of the HTMLFieldSetElement interface indicates the name of the fieldset element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/name)\n    name: str = Field(..., description='The **`name`** property of the HTMLFieldSetElement interface indicates the name of the fieldset element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/name)')\n    # The **`type`** read-only property of the HTMLFieldSetElement interface returns the string `'fieldset'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/type)\n    type: str = Field(..., description='The **`type`** read-only property of the HTMLFieldSetElement interface returns the string `\'fieldset\'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/type)')\n    # The **`validationMessage`** read-only property of the HTMLFieldSetElement interface returns a string representing a localized message that describes the validation constraints that the fieldset control does not satisfy (if any).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/validationMessage)\n    validationMessage: str = Field(..., description='The **`validationMessage`** read-only property of the HTMLFieldSetElement interface returns a string representing a localized message that describes the validation constraints that the fieldset control does not satisfy (if any).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/validationMessage)')\n    # The **`validity`** read-only property of the HTMLFieldSetElement interface returns a ValidityState object that represents the validity states this element is in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/validity)\n    validity: ValidityState = Field(..., description='The **`validity`** read-only property of the HTMLFieldSetElement interface returns a ValidityState object that represents the validity states this element is in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/validity)')\n    # The **`willValidate`** read-only property of the HTMLFieldSetElement interface returns `false`, because fieldset elements are not candidates for constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/willValidate)\n    willValidate: bool = Field(..., description='The **`willValidate`** read-only property of the HTMLFieldSetElement interface returns `false`, because fieldset elements are not candidates for constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/willValidate)')\n\n# Implements the document object model (DOM) representation of the font element.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFontElement)\nclass HTMLFontElement(HTMLElement):\n    # The obsolete **`HTMLFontElement.color`** property is a string that reflects the `color` HTML attribute, containing either a named color or a color specified in the hexadecimal #RRGGBB format.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/color)\n    color: str = Field(..., description='The obsolete **`HTMLFontElement.color`** property is a string that reflects the `color` HTML attribute, containing either a named color or a color specified in the hexadecimal #RRGGBB format.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/color)')\n    # The obsolete **`HTMLFontElement.face`** property is a string that reflects the `face` HTML attribute, containing a comma-separated list of one or more font names.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/face)\n    face: str = Field(..., description='The obsolete **`HTMLFontElement.face`** property is a string that reflects the `face` HTML attribute, containing a comma-separated list of one or more font names.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/face)')\n    # The obsolete **`HTMLFontElement.size`** property is a string that reflects the `size` HTML attribute.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/size)\n    size: str = Field(..., description='The obsolete **`HTMLFontElement.size`** property is a string that reflects the `size` HTML attribute.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/size)')\n\n# The **`HTMLFormControlsCollection`** interface represents a _collection_ of HTML _form control elements_, returned by the HTMLFormElement interface's HTMLFormElement.elements property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormControlsCollection)\nclass HTMLFormControlsCollection(HTMLCollectionBase):\n    pass\n\n# The **`HTMLFormElement`** interface represents a form element in the DOM.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement)\nclass HTMLFormElement(HTMLElement):\n    # The **`HTMLFormElement.acceptCharset`** property represents the character encoding for the given form element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/acceptCharset)\n    acceptCharset: str = Field(..., description='The **`HTMLFormElement.acceptCharset`** property represents the character encoding for the given form element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/acceptCharset)')\n    # The **`HTMLFormElement.action`** property represents the action of the form element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/action)\n    action: str = Field(..., description='The **`HTMLFormElement.action`** property represents the action of the form element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/action)')\n    # The **`autocomplete`** property of the HTMLFormElement interface indicates whether the value of the form's controls can be automatically completed by the browser.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/autocomplete)\n    autocomplete: AutoFillBase = Field(..., description='The **`autocomplete`** property of the HTMLFormElement interface indicates whether the value of the form\'s controls can be automatically completed by the browser.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/autocomplete)')\n    # The HTMLFormElement property **`elements`** returns an the form element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/elements)\n    elements: HTMLFormControlsCollection = Field(..., description='The HTMLFormElement property **`elements`** returns an the form element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/elements)')\n    # The **`HTMLFormElement.encoding`** property is an alternative name for the HTMLFormElement.enctype element on the DOM HTMLFormElement object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/encoding)\n    encoding: str = Field(..., description='The **`HTMLFormElement.encoding`** property is an alternative name for the HTMLFormElement.enctype element on the DOM HTMLFormElement object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/encoding)')\n    # The **`HTMLFormElement.enctype`** property is the MIME_type of content that is used to submit the form to the server.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/enctype)\n    enctype: str = Field(..., description='The **`HTMLFormElement.enctype`** property is the MIME_type of content that is used to submit the form to the server.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/enctype)')\n    # The **`HTMLFormElement.length`** read-only property returns the number of controls in the form element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/length)\n    length: float = Field(..., description='The **`HTMLFormElement.length`** read-only property returns the number of controls in the form element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/length)')\n    # The **`HTMLFormElement.method`** property represents the Unless explicitly specified, the default method is 'get'.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/method)\n    method: str = Field(..., description='The **`HTMLFormElement.method`** property represents the Unless explicitly specified, the default method is \'get\'.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/method)')\n    # The **`HTMLFormElement.name`** property represents the name of the current form element as a string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/name)\n    name: str = Field(..., description='The **`HTMLFormElement.name`** property represents the name of the current form element as a string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/name)')\n    # The **`noValidate`** property of the HTMLFormElement interface is a boolean value indicating if the form will bypass constraint validation when submitted.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/noValidate)\n    noValidate: bool = Field(..., description='The **`noValidate`** property of the HTMLFormElement interface is a boolean value indicating if the form will bypass constraint validation when submitted.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/noValidate)')\n    # The **`rel`** property of the HTMLFormElement interface reflects the `rel` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/rel)\n    rel: str = Field(..., description='The **`rel`** property of the HTMLFormElement interface reflects the `rel` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/rel)')\n    # The **`target`** property of the HTMLFormElement interface represents the target of the form's action (i.e., the frame in which to render its output).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/target)\n    target: str = Field(..., description='The **`target`** property of the HTMLFormElement interface represents the target of the form\'s action (i.e., the frame in which to render its output).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/target)')\n\n# @deprecated\nclass HTMLFrameElement(HTMLElement):\n    # @deprecated\n    contentDocument: Union[Document, null] = Field(..., description='@deprecated')\n    # @deprecated\n    contentWindow: Union[WindowProxy, null] = Field(..., description='@deprecated')\n    # @deprecated\n    frameBorder: str = Field(..., description='@deprecated')\n    # @deprecated\n    longDesc: str = Field(..., description='@deprecated')\n    # @deprecated\n    marginHeight: str = Field(..., description='@deprecated')\n    # @deprecated\n    marginWidth: str = Field(..., description='@deprecated')\n    # @deprecated\n    name: str = Field(..., description='@deprecated')\n    # @deprecated\n    noResize: bool = Field(..., description='@deprecated')\n    # @deprecated\n    scrolling: str = Field(..., description='@deprecated')\n    # @deprecated\n    src: str = Field(..., description='@deprecated')\n\nclass HTMLFrameSetElementEventMap(HTMLElementEventMap):\n    pass\n\n# The **`HTMLFrameSetElement`** interface provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating frameset elements.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFrameSetElement)\nclass HTMLFrameSetElement(HTMLElement):\n    # @deprecated\n    cols: str = Field(..., description='@deprecated')\n    # @deprecated\n    rows: str = Field(..., description='@deprecated')\n\n# The **`HTMLHRElement`** interface provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating hr elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHRElement)\nclass HTMLHRElement(HTMLElement):\n    # @deprecated\n    align: str = Field(..., description='@deprecated')\n    # @deprecated\n    color: str = Field(..., description='@deprecated')\n    # @deprecated\n    noShade: bool = Field(..., description='@deprecated')\n    # @deprecated\n    size: str = Field(..., description='@deprecated')\n    # @deprecated\n    width: str = Field(..., description='@deprecated')\n\n# The **`HTMLHeadElement`** interface contains the descriptive information, or metadata, for a document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHeadElement)\nclass HTMLHeadElement(HTMLElement):\n    pass\n\n# The **`HTMLHeadingElement`** interface represents the different heading elements, `<h1>` through `<h6>`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHeadingElement)\nclass HTMLHeadingElement(HTMLElement):\n    # @deprecated\n    align: str = Field(..., description='@deprecated')\n\n# The **`HTMLHtmlElement`** interface serves as the root node for a given HTML document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHtmlElement)\nclass HTMLHtmlElement(HTMLElement):\n    # Returns version information about the document type definition (DTD) of a document.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHtmlElement/version)\n    version: str = Field(..., description='Returns version information about the document type definition (DTD) of a document.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHtmlElement/version)')\n\nclass HTMLHyperlinkElementUtils(BaseModel):\n    # Returns the hyperlink's URL's fragment (includes leading "#" if non-empty).
Can be set, to change the URL's fragment (ignores leading "#").
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hash)\n    hash: str = Field(..., description='Returns the hyperlink\'s URL\'s fragment (includes leading "#" if non-empty).
Can be set, to change the URL\'s fragment (ignores leading "#").
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hash)')\n    # Returns the hyperlink's URL's host and port (if different from the default port for the scheme).
Can be set, to change the URL's host and port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/host)\n    host: str = Field(..., description='Returns the hyperlink\'s URL\'s host and port (if different from the default port for the scheme).
Can be set, to change the URL\'s host and port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/host)')\n    # Returns the hyperlink's URL's host.
Can be set, to change the URL's host.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hostname)\n    hostname: str = Field(..., description='Returns the hyperlink\'s URL\'s host.
Can be set, to change the URL\'s host.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hostname)')\n    # Returns the hyperlink's URL.
Can be set, to change the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/href)\n    href: str = Field(..., description='Returns the hyperlink\'s URL.
Can be set, to change the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/href)')\n    # Returns the hyperlink's URL's origin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/origin)\n    origin: str = Field(..., description='Returns the hyperlink\'s URL\'s origin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/origin)')\n    # Returns the hyperlink's URL's password.
Can be set, to change the URL's password.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/password)\n    password: str = Field(..., description='Returns the hyperlink\'s URL\'s password.
Can be set, to change the URL\'s password.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/password)')\n    # Returns the hyperlink's URL's path.
Can be set, to change the URL's path.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/pathname)\n    pathname: str = Field(..., description='Returns the hyperlink\'s URL\'s path.
Can be set, to change the URL\'s path.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/pathname)')\n    # Returns the hyperlink's URL's port.
Can be set, to change the URL's port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/port)\n    port: str = Field(..., description='Returns the hyperlink\'s URL\'s port.
Can be set, to change the URL\'s port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/port)')\n    # Returns the hyperlink's URL's scheme.
Can be set, to change the URL's scheme.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/protocol)\n    protocol: str = Field(..., description='Returns the hyperlink\'s URL\'s scheme.
Can be set, to change the URL\'s scheme.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/protocol)')\n    # Returns the hyperlink's URL's query (includes leading "?" if non-empty).
Can be set, to change the URL's query (ignores leading "?").
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/search)\n    search: str = Field(..., description='Returns the hyperlink\'s URL\'s query (includes leading "?" if non-empty).
Can be set, to change the URL\'s query (ignores leading "?").
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/search)')\n    # Returns the hyperlink's URL's username.
Can be set, to change the URL's username.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/username)\n    username: str = Field(..., description='Returns the hyperlink\'s URL\'s username.
Can be set, to change the URL\'s username.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/username)')\n\n# The **`HTMLIFrameElement`** interface provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement)\nclass HTMLIFrameElement(HTMLElement):\n    # @deprecated\n    align: str = Field(..., description='@deprecated')\n    # The **`allow`** property of the HTMLIFrameElement interface indicates the Permissions Policy specified for this `<iframe>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/allow)\n    allow: str = Field(..., description='The **`allow`** property of the HTMLIFrameElement interface indicates the Permissions Policy specified for this `<iframe>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/allow)')\n    # The **`allowFullscreen`** property of the HTMLIFrameElement interface is a boolean value that reflects the `allowfullscreen` attribute of the iframe element, indicating whether to allow the iframe's contents to use Element.requestFullscreen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/allowFullscreen)\n    allowFullscreen: bool = Field(..., description='The **`allowFullscreen`** property of the HTMLIFrameElement interface is a boolean value that reflects the `allowfullscreen` attribute of the iframe element, indicating whether to allow the iframe\'s contents to use Element.requestFullscreen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/allowFullscreen)')\n    # If the iframe and the iframe's parent document are Same Origin, returns a `Document` (that is, the active document in the inline frame's nested browsing context), else returns `null`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/contentDocument)\n    contentDocument: Union[Document, null] = Field(..., description='If the iframe and the iframe\'s parent document are Same Origin, returns a `Document` (that is, the active document in the inline frame\'s nested browsing context), else returns `null`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/contentDocument)')\n    # The **`contentWindow`** property returns the Window object of an HTMLIFrameElement.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/contentWindow)\n    contentWindow: Union[WindowProxy, null] = Field(..., description='The **`contentWindow`** property returns the Window object of an HTMLIFrameElement.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/contentWindow)')\n    # @deprecated\n    frameBorder: str = Field(..., description='@deprecated')\n    # The **`height`** property of the HTMLIFrameElement interface returns a string that reflects the `height` attribute of the iframe element, indicating the height of the frame in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/height)\n    height: str = Field(..., description='The **`height`** property of the HTMLIFrameElement interface returns a string that reflects the `height` attribute of the iframe element, indicating the height of the frame in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/height)')\n    # The **`loading`** property of the HTMLIFrameElement interface is a string that provides a hint to the user agent indicating whether the iframe should be loaded immediately on page load, or only when it is needed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/loading)\n    loading: Union["eager", "lazy"] = Field(..., description='The **`loading`** property of the HTMLIFrameElement interface is a string that provides a hint to the user agent indicating whether the iframe should be loaded immediately on page load, or only when it is needed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/loading)')\n    # @deprecated\n    longDesc: str = Field(..., description='@deprecated')\n    # @deprecated\n    marginHeight: str = Field(..., description='@deprecated')\n    # @deprecated\n    marginWidth: str = Field(..., description='@deprecated')\n    # The **`name`** property of the HTMLIFrameElement interface is a string value that reflects the `name` attribute of the iframe element, indicating the specific name of the `<iframe>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/name)\n    name: str = Field(..., description='The **`name`** property of the HTMLIFrameElement interface is a string value that reflects the `name` attribute of the iframe element, indicating the specific name of the `<iframe>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/name)')\n    # The **`HTMLIFrameElement.referrerPolicy`** property reflects the HTML `referrerpolicy` attribute of the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/referrerPolicy)\n    referrerPolicy: ReferrerPolicy = Field(..., description='The **`HTMLIFrameElement.referrerPolicy`** property reflects the HTML `referrerpolicy` attribute of the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/referrerPolicy)')\n    # @deprecated\n    scrolling: str = Field(..., description='@deprecated')\n    # The **`HTMLIFrameElement.src`** A string that reflects the `src` HTML attribute, containing the address of the content to be embedded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/src)\n    src: str = Field(..., description='The **`HTMLIFrameElement.src`** A string that reflects the `src` HTML attribute, containing the address of the content to be embedded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/src)')\n    # The **`srcdoc`** property of the HTMLIFrameElement specifies the content of the page.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/srcdoc)\n    srcdoc: str = Field(..., description='The **`srcdoc`** property of the HTMLIFrameElement specifies the content of the page.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/srcdoc)')\n    # The **`width`** property of the HTMLIFrameElement interface returns a string that reflects the `width` attribute of the iframe element, indicating the width of the frame in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/width)\n    width: str = Field(..., description='The **`width`** property of the HTMLIFrameElement interface returns a string that reflects the `width` attribute of the iframe element, indicating the width of the frame in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/width)')\n\n# The **`HTMLImageElement`** interface represents an HTML img element, providing the properties and methods used to manipulate image elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement)\nclass HTMLImageElement(HTMLElement):\n    # The _obsolete_ **`align`** property of the HTMLImageElement interface is a string which indicates how to position the image relative to its container.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/align)\n    align: str = Field(..., description='The _obsolete_ **`align`** property of the HTMLImageElement interface is a string which indicates how to position the image relative to its container.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/align)')\n    # The HTMLImageElement property **`alt`** provides fallback (alternate) text to display when the image specified by the img element is not loaded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/alt)\n    alt: str = Field(..., description='The HTMLImageElement property **`alt`** provides fallback (alternate) text to display when the image specified by the img element is not loaded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/alt)')\n    # The obsolete HTMLImageElement property **`border`** specifies the number of pixels thick the border surrounding the image should be.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/border)\n    border: str = Field(..., description='The obsolete HTMLImageElement property **`border`** specifies the number of pixels thick the border surrounding the image should be.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/border)')\n    # The read-only HTMLImageElement interface's **`complete`** attribute is a Boolean value which indicates whether or not the image has completely loaded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/complete)\n    complete: bool = Field(..., description='The read-only HTMLImageElement interface\'s **`complete`** attribute is a Boolean value which indicates whether or not the image has completely loaded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/complete)')\n    # The HTMLImageElement interface's **`crossOrigin`** attribute is a string which specifies the Cross-Origin Resource Sharing (CORS) setting to use when retrieving the image.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/crossOrigin)\n    crossOrigin: Union[str, null] = Field(..., description='The HTMLImageElement interface\'s **`crossOrigin`** attribute is a string which specifies the Cross-Origin Resource Sharing (CORS) setting to use when retrieving the image.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/crossOrigin)')\n    # The read-only HTMLImageElement property **`currentSrc`** indicates the URL of the image which is currently presented in the img element it represents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/currentSrc)\n    currentSrc: str = Field(..., description='The read-only HTMLImageElement property **`currentSrc`** indicates the URL of the image which is currently presented in the img element it represents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/currentSrc)')\n    # The **`decoding`** property of the HTMLImageElement interface provides a hint to the browser as to how it should decode the image.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/decoding)\n    decoding: Union["async", "sync", "auto"] = Field(..., description='The **`decoding`** property of the HTMLImageElement interface provides a hint to the browser as to how it should decode the image.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/decoding)')\n    # The **`fetchPriority`** property of the HTMLImageElement interface represents a hint to the browser indicating how it should prioritize fetching a particular image relative to other images.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/fetchPriority)\n    fetchPriority: Union["high", "low", "auto"] = Field(..., description='The **`fetchPriority`** property of the HTMLImageElement interface represents a hint to the browser indicating how it should prioritize fetching a particular image relative to other images.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/fetchPriority)')\n    # The **`height`** property of the drawn, in CSS pixel if the image is being drawn or rendered to any visual medium such as the screen or a printer; otherwise, it's the natural, pixel density corrected height of the image.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/height)\n    height: float = Field(..., description='The **`height`** property of the drawn, in CSS pixel if the image is being drawn or rendered to any visual medium such as the screen or a printer; otherwise, it\'s the natural, pixel density corrected height of the image.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/height)')\n    # The _obsolete_ **`hspace`** property of the space to leave empty on the left and right sides of the img element when laying out the page.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/hspace)\n    hspace: float = Field(..., description='The _obsolete_ **`hspace`** property of the space to leave empty on the left and right sides of the img element when laying out the page.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/hspace)')\n    # The HTMLImageElement property **`isMap`** is a Boolean value which indicates that the image is to be used by a server-side image map.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/isMap)\n    isMap: bool = Field(..., description='The HTMLImageElement property **`isMap`** is a Boolean value which indicates that the image is to be used by a server-side image map.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/isMap)')\n    # The HTMLImageElement property **`loading`** is a string whose value provides a hint to the user agent on how to handle the loading of the image which is currently outside the window's visual viewport.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/loading)\n    loading: Union["eager", "lazy"] = Field(..., description='The HTMLImageElement property **`loading`** is a string whose value provides a hint to the user agent on how to handle the loading of the image which is currently outside the window\'s visual viewport.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/loading)')\n    # The _deprecated_ property **`longDesc`** on the HTMLImageElement interface specifies the URL of a text or HTML file which contains a long-form description of the image.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/longDesc)\n    longDesc: str = Field(..., description='The _deprecated_ property **`longDesc`** on the HTMLImageElement interface specifies the URL of a text or HTML file which contains a long-form description of the image.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/longDesc)')\n    # @deprecated\n    lowsrc: str = Field(..., description='@deprecated')\n    # The HTMLImageElement interface's _deprecated_ **`name`** property specifies a name for the element.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/name)\n    name: str = Field(..., description='The HTMLImageElement interface\'s _deprecated_ **`name`** property specifies a name for the element.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/name)')\n    # The HTMLImageElement interface's **`naturalHeight`** property is a read-only value which returns the intrinsic (natural), density-corrected height of the image in This is the height the image is if drawn with nothing constraining its height; if you don't specify a height for the image, or place the image inside a container that either limits or expressly specifies the image height, it will be rendered this tall.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/naturalHeight)\n    naturalHeight: float = Field(..., description='The HTMLImageElement interface\'s **`naturalHeight`** property is a read-only value which returns the intrinsic (natural), density-corrected height of the image in This is the height the image is if drawn with nothing constraining its height; if you don\'t specify a height for the image, or place the image inside a container that either limits or expressly specifies the image height, it will be rendered this tall.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/naturalHeight)')\n    # The HTMLImageElement interface's read-only **`naturalWidth`** property returns the intrinsic (natural), density-corrected width of the image in CSS pixel.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/naturalWidth)\n    naturalWidth: float = Field(..., description='The HTMLImageElement interface\'s read-only **`naturalWidth`** property returns the intrinsic (natural), density-corrected width of the image in CSS pixel.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/naturalWidth)')\n    # The **`HTMLImageElement.referrerPolicy`** property reflects the HTML `referrerpolicy` attribute of the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/referrerPolicy)\n    referrerPolicy: str = Field(..., description='The **`HTMLImageElement.referrerPolicy`** property reflects the HTML `referrerpolicy` attribute of the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/referrerPolicy)')\n    # The HTMLImageElement property **`sizes`** allows you to specify the layout width of the image for each of a list of media conditions.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/sizes)\n    sizes: str = Field(..., description='The HTMLImageElement property **`sizes`** allows you to specify the layout width of the image for each of a list of media conditions.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/sizes)')\n    # The HTMLImageElement property **`src`**, which reflects the HTML `src` attribute, specifies the image to display in the img element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/src)\n    src: str = Field(..., description='The HTMLImageElement property **`src`**, which reflects the HTML `src` attribute, specifies the image to display in the img element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/src)')\n    # The HTMLImageElement property **`srcset`** is a string which identifies one or more **image candidate strings**, separated using commas (`,`) each specifying image resources to use under given circumstances.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/srcset)\n    srcset: str = Field(..., description='The HTMLImageElement property **`srcset`** is a string which identifies one or more **image candidate strings**, separated using commas (`,`) each specifying image resources to use under given circumstances.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/srcset)')\n    # The **`useMap`** property on the providing the name of the client-side image map to apply to the image.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/useMap)\n    useMap: str = Field(..., description='The **`useMap`** property on the providing the name of the client-side image map to apply to the image.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/useMap)')\n    # The _obsolete_ **`vspace`** property of the to leave empty on the top and bottom of the img element when laying out the page.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/vspace)\n    vspace: float = Field(..., description='The _obsolete_ **`vspace`** property of the to leave empty on the top and bottom of the img element when laying out the page.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/vspace)')\n    # The **`width`** property of the drawn in CSS pixel if it's being drawn or rendered to any visual medium such as a screen or printer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/width)\n    width: float = Field(..., description='The **`width`** property of the drawn in CSS pixel if it\'s being drawn or rendered to any visual medium such as a screen or printer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/width)')\n    # The read-only HTMLImageElement property **`x`** indicates the x-coordinate of the origin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/x)\n    x: float = Field(..., description='The read-only HTMLImageElement property **`x`** indicates the x-coordinate of the origin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/x)')\n    # The read-only HTMLImageElement property **`y`** indicates the y-coordinate of the origin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/y)\n    y: float = Field(..., description='The read-only HTMLImageElement property **`y`** indicates the y-coordinate of the origin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/y)')\n\n# The **`HTMLInputElement`** interface provides special properties and methods for manipulating the options, layout, and presentation of input elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement)\nclass HTMLInputElement(HTMLElement):\n    # The **`accept`** property of the HTMLInputElement interface reflects the input element's `accept` attribute, generally a comma-separated list of unique file type specifiers providing a hint for the expected file type for an `<input>` of type `file`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/accept)\n    accept: str = Field(..., description='The **`accept`** property of the HTMLInputElement interface reflects the input element\'s `accept` attribute, generally a comma-separated list of unique file type specifiers providing a hint for the expected file type for an `<input>` of type `file`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/accept)')\n    # @deprecated\n    align: str = Field(..., description='@deprecated')\n    # The **`alt`** property of the HTMLInputElement interface defines the textual label for the button for users and user agents who cannot use the image.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/alt)\n    alt: str = Field(..., description='The **`alt`** property of the HTMLInputElement interface defines the textual label for the button for users and user agents who cannot use the image.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/alt)')\n    # The **`autocomplete`** property of the HTMLInputElement interface indicates whether the value of the control can be automatically completed by the browser.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/autocomplete)\n    autocomplete: AutoFill = Field(..., description='The **`autocomplete`** property of the HTMLInputElement interface indicates whether the value of the control can be automatically completed by the browser.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/autocomplete)')\n    # The **`capture`** property of the HTMLInputElement interface reflects the input element's `capture` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/capture)\n    capture: str = Field(..., description='The **`capture`** property of the HTMLInputElement interface reflects the input element\'s `capture` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/capture)')\n    # The **`checked`** property of the HTMLInputElement interface specifies the current checkedness of the element; that is, whether the form control is checked or not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/checked)\n    checked: bool = Field(..., description='The **`checked`** property of the HTMLInputElement interface specifies the current checkedness of the element; that is, whether the form control is checked or not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/checked)')\n    # The **`defaultChecked`** property of the HTMLInputElement interface specifies the default checkedness state of the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/defaultChecked)\n    defaultChecked: bool = Field(..., description='The **`defaultChecked`** property of the HTMLInputElement interface specifies the default checkedness state of the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/defaultChecked)')\n    # The **`defaultValue`** property of the HTMLInputElement interface indicates the original (or default) value of the input element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/defaultValue)\n    defaultValue: str = Field(..., description='The **`defaultValue`** property of the HTMLInputElement interface indicates the original (or default) value of the input element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/defaultValue)')\n    # The **`dirName`** property of the HTMLInputElement interface is the directionality of the element and enables the submission of that value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/dirName)\n    dirName: str = Field(..., description='The **`dirName`** property of the HTMLInputElement interface is the directionality of the element and enables the submission of that value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/dirName)')\n    # The **`HTMLInputElement.disabled`** property is a boolean value that reflects the `disabled` HTML attribute, which indicates whether the control is disabled.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/disabled)\n    disabled: bool = Field(..., description='The **`HTMLInputElement.disabled`** property is a boolean value that reflects the `disabled` HTML attribute, which indicates whether the control is disabled.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/disabled)')\n    # The **`HTMLInputElement.files`** property allows you to access the FileList selected with the `<input type='file'>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/files)\n    files: Union[FileList, null] = Field(..., description='The **`HTMLInputElement.files`** property allows you to access the FileList selected with the `<input type=\'file\'>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/files)')\n    # The **`form`** read-only property of the HTMLInputElement interface returns an HTMLFormElement object that owns this input, or `null` if this input is not owned by any form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/form)\n    form: Union[HTMLFormElement, null] = Field(..., description='The **`form`** read-only property of the HTMLInputElement interface returns an HTMLFormElement object that owns this input, or `null` if this input is not owned by any form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/form)')\n    # The **`formAction`** property of the HTMLInputElement interface is the URL of the program that is executed on the server when the form that owns this control is submitted.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formAction)\n    formAction: str = Field(..., description='The **`formAction`** property of the HTMLInputElement interface is the URL of the program that is executed on the server when the form that owns this control is submitted.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formAction)')\n    # The **`formEnctype`** property of the HTMLInputElement interface is the MIME_type of the content sent to the server when the `<input>` with the `formEnctype` is the method of form submission.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formEnctype)\n    formEnctype: str = Field(..., description='The **`formEnctype`** property of the HTMLInputElement interface is the MIME_type of the content sent to the server when the `<input>` with the `formEnctype` is the method of form submission.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formEnctype)')\n    # The **`formMethod`** property of the HTMLInputElement interface is the HTTP method used to submit the form if the input element is the control that submits the form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formMethod)\n    formMethod: str = Field(..., description='The **`formMethod`** property of the HTMLInputElement interface is the HTTP method used to submit the form if the input element is the control that submits the form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formMethod)')\n    # The **`formNoValidate`** property of the HTMLInputElement interface is a boolean value indicating if the form will bypass constraint validation when submitted via the input.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formNoValidate)\n    formNoValidate: bool = Field(..., description='The **`formNoValidate`** property of the HTMLInputElement interface is a boolean value indicating if the form will bypass constraint validation when submitted via the input.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formNoValidate)')\n    # The **`formTarget`** property of the HTMLInputElement interface is the tab, window, or iframe where the response of the submitted form is to be displayed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formTarget)\n    formTarget: str = Field(..., description='The **`formTarget`** property of the HTMLInputElement interface is the tab, window, or iframe where the response of the submitted form is to be displayed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formTarget)')\n    # The **`height`** property of the HTMLInputElement interface specifies the height of a control.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/height)\n    height: float = Field(..., description='The **`height`** property of the HTMLInputElement interface specifies the height of a control.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/height)')\n    # The **`indeterminate`** property of the HTMLInputElement interface returns a boolean value that indicates whether the checkbox is in the _indeterminate_ state.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/indeterminate)\n    indeterminate: bool = Field(..., description='The **`indeterminate`** property of the HTMLInputElement interface returns a boolean value that indicates whether the checkbox is in the _indeterminate_ state.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/indeterminate)')\n    # The **`HTMLInputElement.labels`** read-only property returns a type `hidden`, the property returns `null`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/labels)\n    labels: Union[NodeListOf<HTMLLabelElement>, null] = Field(..., description='The **`HTMLInputElement.labels`** read-only property returns a type `hidden`, the property returns `null`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/labels)')\n    # The **`list`** read-only property of the HTMLInputElement interface returns the HTMLDataListElement pointed to by the `list` attribute of the element, or `null` if the `list` attribute is not defined or the `list` attribute's value is not associated with any `<datalist>` in the same tree.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/list)\n    list: Union[HTMLDataListElement, null] = Field(..., description='The **`list`** read-only property of the HTMLInputElement interface returns the HTMLDataListElement pointed to by the `list` attribute of the element, or `null` if the `list` attribute is not defined or the `list` attribute\'s value is not associated with any `<datalist>` in the same tree.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/list)')\n    # The **`max`** property of the HTMLInputElement interface reflects the input element's `max` attribute, which generally defines the maximum valid value for a numeric or date-time input.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/max)\n    max: str = Field(..., description='The **`max`** property of the HTMLInputElement interface reflects the input element\'s `max` attribute, which generally defines the maximum valid value for a numeric or date-time input.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/max)')\n    # The **`maxLength`** property of the HTMLInputElement interface indicates the maximum number of characters (in UTF-16 code units) allowed to be entered for the value of the input element, and the maximum number of characters allowed for the value to be valid.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/maxLength)\n    maxLength: float = Field(..., description='The **`maxLength`** property of the HTMLInputElement interface indicates the maximum number of characters (in UTF-16 code units) allowed to be entered for the value of the input element, and the maximum number of characters allowed for the value to be valid.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/maxLength)')\n    # The **`min`** property of the HTMLInputElement interface reflects the input element's `min` attribute, which generally defines the minimum valid value for a numeric or date-time input.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/min)\n    min: str = Field(..., description='The **`min`** property of the HTMLInputElement interface reflects the input element\'s `min` attribute, which generally defines the minimum valid value for a numeric or date-time input.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/min)')\n    # The **`minLength`** property of the HTMLInputElement interface indicates the minimum number of characters (in UTF-16 code units) required for the value of the input element to be valid.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/minLength)\n    minLength: float = Field(..., description='The **`minLength`** property of the HTMLInputElement interface indicates the minimum number of characters (in UTF-16 code units) required for the value of the input element to be valid.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/minLength)')\n    # The **`HTMLInputElement.multiple`** property indicates if an input can have more than one value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/multiple)\n    multiple: bool = Field(..., description='The **`HTMLInputElement.multiple`** property indicates if an input can have more than one value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/multiple)')\n    # The **`name`** property of the HTMLInputElement interface indicates the name of the input element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/name)\n    name: str = Field(..., description='The **`name`** property of the HTMLInputElement interface indicates the name of the input element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/name)')\n    # The **`pattern`** property of the HTMLInputElement interface represents a regular expression a non-null input value should match.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/pattern)\n    pattern: str = Field(..., description='The **`pattern`** property of the HTMLInputElement interface represents a regular expression a non-null input value should match.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/pattern)')\n    # The **`placeholder`** property of the HTMLInputElement interface represents a hint to the user of what can be entered in the control.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/placeholder)\n    placeholder: str = Field(..., description='The **`placeholder`** property of the HTMLInputElement interface represents a hint to the user of what can be entered in the control.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/placeholder)')\n    # The **`readOnly`** property of the HTMLInputElement interface indicates that the user cannot modify the value of the input.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/readOnly)\n    readOnly: bool = Field(..., description='The **`readOnly`** property of the HTMLInputElement interface indicates that the user cannot modify the value of the input.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/readOnly)')\n    # The **`required`** property of the HTMLInputElement interface specifies that the user must fill in a value before submitting a form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/required)\n    required: bool = Field(..., description='The **`required`** property of the HTMLInputElement interface specifies that the user must fill in a value before submitting a form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/required)')\n    # The **`selectionDirection`** property of the HTMLInputElement interface is a string that indicates the direction in which the user is selecting the text.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/selectionDirection)\n    selectionDirection: Union["forward", "backward", "none", null] = Field(..., description='The **`selectionDirection`** property of the HTMLInputElement interface is a string that indicates the direction in which the user is selecting the text.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/selectionDirection)')\n    # The **`selectionEnd`** property of the HTMLInputElement interface is a number that represents the end index of the selected text.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/selectionEnd)\n    selectionEnd: Union[float, null] = Field(..., description='The **`selectionEnd`** property of the HTMLInputElement interface is a number that represents the end index of the selected text.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/selectionEnd)')\n    # The **`selectionStart`** property of the HTMLInputElement interface is a number that represents the beginning index of the selected text.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/selectionStart)\n    selectionStart: Union[float, null] = Field(..., description='The **`selectionStart`** property of the HTMLInputElement interface is a number that represents the beginning index of the selected text.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/selectionStart)')\n    # The **`size`** property of the HTMLInputElement interface defines the number of visible characters displayed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/size)\n    size: float = Field(..., description='The **`size`** property of the HTMLInputElement interface defines the number of visible characters displayed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/size)')\n    # The **`src`** property of the HTMLInputElement interface specifies the source of an image to display as the graphical submit button.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/src)\n    src: str = Field(..., description='The **`src`** property of the HTMLInputElement interface specifies the source of an image to display as the graphical submit button.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/src)')\n    # The **`step`** property of the HTMLInputElement interface indicates the step by which numeric or date-time input elements can change.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/step)\n    step: str = Field(..., description='The **`step`** property of the HTMLInputElement interface indicates the step by which numeric or date-time input elements can change.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/step)')\n    # The **`type`** property of the HTMLInputElement interface indicates the kind of data allowed in the input element, for example a number, a date, or an email.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/type)\n    type: str = Field(..., description='The **`type`** property of the HTMLInputElement interface indicates the kind of data allowed in the input element, for example a number, a date, or an email.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/type)')\n    # @deprecated\n    useMap: str = Field(..., description='@deprecated')\n    # The **`validationMessage`** read-only property of the HTMLInputElement interface returns a string representing a localized message that describes the validation constraints that the input control does not satisfy (if any).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/validationMessage)\n    validationMessage: str = Field(..., description='The **`validationMessage`** read-only property of the HTMLInputElement interface returns a string representing a localized message that describes the validation constraints that the input control does not satisfy (if any).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/validationMessage)')\n    # The **`validity`** read-only property of the HTMLInputElement interface returns a ValidityState object that represents the validity states this element is in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/validity)\n    validity: ValidityState = Field(..., description='The **`validity`** read-only property of the HTMLInputElement interface returns a ValidityState object that represents the validity states this element is in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/validity)')\n    # The **`value`** property of the HTMLInputElement interface represents the current value of the input element as a string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/value)\n    value: str = Field(..., description='The **`value`** property of the HTMLInputElement interface represents the current value of the input element as a string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/value)')\n    # The **`valueAsDate`** property of the HTMLInputElement interface represents the current value of the input element as a Date, or `null` if conversion is not possible.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/valueAsDate)\n    valueAsDate: Union[datetime, null] = Field(..., description='The **`valueAsDate`** property of the HTMLInputElement interface represents the current value of the input element as a Date, or `null` if conversion is not possible.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/valueAsDate)')\n    # The **`valueAsNumber`** property of the HTMLInputElement interface represents the current value of the input element as a number or `NaN` if converting to a numeric value is not possible.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/valueAsNumber)\n    valueAsNumber: float = Field(..., description='The **`valueAsNumber`** property of the HTMLInputElement interface represents the current value of the input element as a number or `NaN` if converting to a numeric value is not possible.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/valueAsNumber)')\n    # The read-only **`webkitEntries`** property of the HTMLInputElement interface contains an array of file system entries (as objects based on FileSystemEntry) representing files and/or directories selected by the user using an input element of type `file`, but only if that selection was made using drag-and-drop: selecting a file in the dialog will leave the property empty.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/webkitEntries)\n    webkitEntries: ReadonlyArray<FileSystemEntry> = Field(..., description='The read-only **`webkitEntries`** property of the HTMLInputElement interface contains an array of file system entries (as objects based on FileSystemEntry) representing files and/or directories selected by the user using an input element of type `file`, but only if that selection was made using drag-and-drop: selecting a file in the dialog will leave the property empty.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/webkitEntries)')\n    # The **`HTMLInputElement.webkitdirectory`** is a property that reflects the `webkitdirectory` HTML attribute and indicates that the input element should let the user select directories instead of files.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/webkitdirectory)\n    webkitdirectory: bool = Field(..., description='The **`HTMLInputElement.webkitdirectory`** is a property that reflects the `webkitdirectory` HTML attribute and indicates that the input element should let the user select directories instead of files.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/webkitdirectory)')\n    # The **`width`** property of the HTMLInputElement interface specifies the width of a control.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/width)\n    width: float = Field(..., description='The **`width`** property of the HTMLInputElement interface specifies the width of a control.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/width)')\n    # The **`willValidate`** read-only property of the HTMLInputElement interface indicates whether the input element is a candidate for constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/willValidate)\n    willValidate: bool = Field(..., description='The **`willValidate`** read-only property of the HTMLInputElement interface indicates whether the input element is a candidate for constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/willValidate)')\n\n# The **`HTMLLIElement`** interface exposes specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLIElement)\nclass HTMLLIElement(HTMLElement):\n    # @deprecated\n    type: str = Field(..., description='@deprecated')\n    # The **`value`** property of the HTMLLIElement interface indicates the ordinal position of the _list element_ inside a given ol.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLIElement/value)\n    value: float = Field(..., description='The **`value`** property of the HTMLLIElement interface indicates the ordinal position of the _list element_ inside a given ol.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLIElement/value)')\n\n# The **`HTMLLabelElement`** interface gives access to properties specific to label elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement)\nclass HTMLLabelElement(HTMLElement):\n    # The read-only **`HTMLLabelElement.control`** property returns a reference to the control (in the form of an object of type HTMLElement or one of its derivatives) with which the label element is associated, or `null` if the label isn't associated with a control.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/control)\n    control: Union[HTMLElement, null] = Field(..., description='The read-only **`HTMLLabelElement.control`** property returns a reference to the control (in the form of an object of type HTMLElement or one of its derivatives) with which the label element is associated, or `null` if the label isn\'t associated with a control.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/control)')\n    # The **`form`** read-only property of the HTMLLabelElement interface returns an HTMLFormElement object that owns the HTMLLabelElement.control associated with this label, or `null` if this label is not associated with a control owned by a form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/form)\n    form: Union[HTMLFormElement, null] = Field(..., description='The **`form`** read-only property of the HTMLLabelElement interface returns an HTMLFormElement object that owns the HTMLLabelElement.control associated with this label, or `null` if this label is not associated with a control owned by a form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/form)')\n    # The **`HTMLLabelElement.htmlFor`** property reflects the value of the `for` content property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/htmlFor)\n    htmlFor: str = Field(..., description='The **`HTMLLabelElement.htmlFor`** property reflects the value of the `for` content property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/htmlFor)')\n\n# The **`HTMLLegendElement`** is an interface allowing to access properties of the legend elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLegendElement)\nclass HTMLLegendElement(HTMLElement):\n    # @deprecated\n    align: str = Field(..., description='@deprecated')\n    # The **`form`** read-only property of the HTMLLegendElement interface returns an HTMLFormElement object that owns the HTMLFieldSetElement associated with this legend, or `null` if this legend is not associated with a fieldset owned by a form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLegendElement/form)\n    form: Union[HTMLFormElement, null] = Field(..., description='The **`form`** read-only property of the HTMLLegendElement interface returns an HTMLFormElement object that owns the HTMLFieldSetElement associated with this legend, or `null` if this legend is not associated with a fieldset owned by a form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLegendElement/form)')\n\n# The **`HTMLLinkElement`** interface represents reference information for external resources and the relationship of those resources to a document and vice versa (corresponds to `<link>` element; not to be confused with `<a>`, which is represented by `HTMLAnchorElement`).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement)\nclass HTMLLinkElement(HTMLElement):\n    # The **`as`** property of the HTMLLinkElement interface returns a string representing the type of content to be preloaded by a link element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/as)\n    as: str = Field(..., description='The **`as`** property of the HTMLLinkElement interface returns a string representing the type of content to be preloaded by a link element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/as)')\n    # @deprecated\n    charset: str = Field(..., description='@deprecated')\n    # The **`crossOrigin`** property of the HTMLLinkElement interface specifies the Cross-Origin Resource Sharing (CORS) setting to use when retrieving the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/crossOrigin)\n    crossOrigin: Union[str, null] = Field(..., description='The **`crossOrigin`** property of the HTMLLinkElement interface specifies the Cross-Origin Resource Sharing (CORS) setting to use when retrieving the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/crossOrigin)')\n    # The **`disabled`** property of the HTMLLinkElement interface is a boolean value that represents whether the link is disabled.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/disabled)\n    disabled: bool = Field(..., description='The **`disabled`** property of the HTMLLinkElement interface is a boolean value that represents whether the link is disabled.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/disabled)')\n    # The **`fetchPriority`** property of the HTMLLinkElement interface represents a hint to the browser indicating how it should prioritize fetching a particular resource relative to other resources of the same type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/fetchPriority)\n    fetchPriority: Union["high", "low", "auto"] = Field(..., description='The **`fetchPriority`** property of the HTMLLinkElement interface represents a hint to the browser indicating how it should prioritize fetching a particular resource relative to other resources of the same type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/fetchPriority)')\n    # The **`href`** property of the HTMLLinkElement interface contains a string that is the URL associated with the link.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/href)\n    href: str = Field(..., description='The **`href`** property of the HTMLLinkElement interface contains a string that is the URL associated with the link.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/href)')\n    # The **`hreflang`** property of the HTMLLinkElement interface is used to indicate the language and the geographical targeting of a page.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/hreflang)\n    hreflang: str = Field(..., description='The **`hreflang`** property of the HTMLLinkElement interface is used to indicate the language and the geographical targeting of a page.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/hreflang)')\n    # The **`imageSizes`** property of the HTMLLinkElement interface indicates the size and conditions for the preloaded images defined by the HTMLLinkElement.imageSrcset property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/imageSizes)\n    imageSizes: str = Field(..., description='The **`imageSizes`** property of the HTMLLinkElement interface indicates the size and conditions for the preloaded images defined by the HTMLLinkElement.imageSrcset property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/imageSizes)')\n    # The **`imageSrcset`** property of the HTMLLinkElement interface is a string which identifies one or more comma-separated **image candidate strings**.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/imageSrcset)\n    imageSrcset: str = Field(..., description='The **`imageSrcset`** property of the HTMLLinkElement interface is a string which identifies one or more comma-separated **image candidate strings**.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/imageSrcset)')\n    # The **`integrity`** property of the HTMLLinkElement interface is a string containing inline metadata that a browser can use to verify that a fetched resource has been delivered without unexpected manipulation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/integrity)\n    integrity: str = Field(..., description='The **`integrity`** property of the HTMLLinkElement interface is a string containing inline metadata that a browser can use to verify that a fetched resource has been delivered without unexpected manipulation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/integrity)')\n    # The **`media`** property of the HTMLLinkElement interface is a string representing a list of one or more media formats to which the resource applies.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/media)\n    media: str = Field(..., description='The **`media`** property of the HTMLLinkElement interface is a string representing a list of one or more media formats to which the resource applies.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/media)')\n    # The **`referrerPolicy`** property of the HTMLLinkElement interface reflects the HTML `referrerpolicy` attribute of the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/referrerPolicy)\n    referrerPolicy: str = Field(..., description='The **`referrerPolicy`** property of the HTMLLinkElement interface reflects the HTML `referrerpolicy` attribute of the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/referrerPolicy)')\n    # The **`rel`** property of the HTMLLinkElement interface reflects the `rel` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/rel)\n    rel: str = Field(..., description='The **`rel`** property of the HTMLLinkElement interface reflects the `rel` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/rel)')\n    # @deprecated\n    rev: str = Field(..., description='@deprecated')\n    # @deprecated\n    target: str = Field(..., description='@deprecated')\n    # The **`type`** property of the HTMLLinkElement interface is a string that reflects the MIME type of the linked resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/type)\n    type: str = Field(..., description='The **`type`** property of the HTMLLinkElement interface is a string that reflects the MIME type of the linked resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/type)')\n\n# The **`HTMLMapElement`** interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMapElement)\nclass HTMLMapElement(HTMLElement):\n    # The **`areas`** read-only property of the HTMLMapElement interface returns a collection of area elements associated with the map element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMapElement/areas)\n    areas: HTMLCollection = Field(..., description='The **`areas`** read-only property of the HTMLMapElement interface returns a collection of area elements associated with the map element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMapElement/areas)')\n    # The **`name`** property of the HTMLMapElement represents the unique name `<map>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMapElement/name)\n    name: str = Field(..., description='The **`name`** property of the HTMLMapElement represents the unique name `<map>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMapElement/name)')\n\n# The **`HTMLMarqueeElement`** interface provides methods to manipulate marquee elements.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMarqueeElement)\nclass HTMLMarqueeElement(HTMLElement):\n    # @deprecated\n    behavior: str = Field(..., description='@deprecated')\n    # @deprecated\n    bgColor: str = Field(..., description='@deprecated')\n    # @deprecated\n    direction: str = Field(..., description='@deprecated')\n    # @deprecated\n    height: str = Field(..., description='@deprecated')\n    # @deprecated\n    hspace: float = Field(..., description='@deprecated')\n    # @deprecated\n    loop: float = Field(..., description='@deprecated')\n    # @deprecated\n    scrollAmount: float = Field(..., description='@deprecated')\n    # @deprecated\n    scrollDelay: float = Field(..., description='@deprecated')\n    # @deprecated\n    trueSpeed: bool = Field(..., description='@deprecated')\n    # @deprecated\n    vspace: float = Field(..., description='@deprecated')\n    # @deprecated\n    width: str = Field(..., description='@deprecated')\n\nclass HTMLMediaElementEventMap(HTMLElementEventMap):\n    encrypted: MediaEncryptedEvent = Field(...)\n    waitingforkey: Event = Field(...)\n\n# The **`HTMLMediaElement`** interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement)\nclass HTMLMediaElement(HTMLElement):\n    # The **`HTMLMediaElement.autoplay`** property reflects the `autoplay` HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/autoplay)\n    autoplay: bool = Field(..., description='The **`HTMLMediaElement.autoplay`** property reflects the `autoplay` HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/autoplay)')\n    # The **`buffered`** read-only property of HTMLMediaElement objects returns a new static normalized `TimeRanges` object that represents the ranges of the media resource, if any, that the user agent has buffered at the moment the `buffered` property is accessed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/buffered)\n    buffered: TimeRanges = Field(..., description='The **`buffered`** read-only property of HTMLMediaElement objects returns a new static normalized `TimeRanges` object that represents the ranges of the media resource, if any, that the user agent has buffered at the moment the `buffered` property is accessed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/buffered)')\n    # The **`HTMLMediaElement.controls`** property reflects the `controls` HTML attribute, which controls whether user interface controls for playing the media item will be displayed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/controls)\n    controls: bool = Field(..., description='The **`HTMLMediaElement.controls`** property reflects the `controls` HTML attribute, which controls whether user interface controls for playing the media item will be displayed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/controls)')\n    # The **`HTMLMediaElement.crossOrigin`** property is the CORS setting for this media element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/crossOrigin)\n    crossOrigin: Union[str, null] = Field(..., description='The **`HTMLMediaElement.crossOrigin`** property is the CORS setting for this media element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/crossOrigin)')\n    # The **`HTMLMediaElement.currentSrc`** property contains the absolute URL of the chosen media resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/currentSrc)\n    currentSrc: str = Field(..., description='The **`HTMLMediaElement.currentSrc`** property contains the absolute URL of the chosen media resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/currentSrc)')\n    # The HTMLMediaElement interface's **`currentTime`** property specifies the current playback time in seconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/currentTime)\n    currentTime: float = Field(..., description='The HTMLMediaElement interface\'s **`currentTime`** property specifies the current playback time in seconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/currentTime)')\n    # The **`HTMLMediaElement.defaultMuted`** property reflects the `muted` HTML attribute, which indicates whether the media element's audio output should be muted by default.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/defaultMuted)\n    defaultMuted: bool = Field(..., description='The **`HTMLMediaElement.defaultMuted`** property reflects the `muted` HTML attribute, which indicates whether the media element\'s audio output should be muted by default.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/defaultMuted)')\n    # The **`HTMLMediaElement.defaultPlaybackRate`** property indicates the default playback rate for the media.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/defaultPlaybackRate)\n    defaultPlaybackRate: float = Field(..., description='The **`HTMLMediaElement.defaultPlaybackRate`** property indicates the default playback rate for the media.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/defaultPlaybackRate)')\n    # The **`disableRemotePlayback`** property of the HTMLMediaElement interface determines whether the media element is allowed to have a remote playback UI.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/disableRemotePlayback)\n    disableRemotePlayback: bool = Field(..., description='The **`disableRemotePlayback`** property of the HTMLMediaElement interface determines whether the media element is allowed to have a remote playback UI.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/disableRemotePlayback)')\n    # The _read-only_ HTMLMediaElement property **`duration`** indicates the length of the element's media in seconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/duration)\n    duration: float = Field(..., description='The _read-only_ HTMLMediaElement property **`duration`** indicates the length of the element\'s media in seconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/duration)')\n    # The **`HTMLMediaElement.ended`** property indicates whether the media element has ended playback.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended)\n    ended: bool = Field(..., description='The **`HTMLMediaElement.ended`** property indicates whether the media element has ended playback.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended)')\n    # The **`HTMLMediaElement.error`** property is the there has not been an error.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/error)\n    error: Union[MediaError, null] = Field(..., description='The **`HTMLMediaElement.error`** property is the there has not been an error.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/error)')\n    # The **`HTMLMediaElement.loop`** property reflects the `loop` HTML attribute, which controls whether the media element should start over when it reaches the end.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loop)\n    loop: bool = Field(..., description='The **`HTMLMediaElement.loop`** property reflects the `loop` HTML attribute, which controls whether the media element should start over when it reaches the end.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loop)')\n    # The read-only **`HTMLMediaElement.mediaKeys`** property returns a MediaKeys object, that is a set of keys that the element can use for decryption of media data during playback.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/mediaKeys)\n    mediaKeys: Union[MediaKeys, null] = Field(..., description='The read-only **`HTMLMediaElement.mediaKeys`** property returns a MediaKeys object, that is a set of keys that the element can use for decryption of media data during playback.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/mediaKeys)')\n    # The **`HTMLMediaElement.muted`** property indicates whether the media element is muted.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/muted)\n    muted: bool = Field(..., description='The **`HTMLMediaElement.muted`** property indicates whether the media element is muted.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/muted)')\n    # The **`HTMLMediaElement.networkState`** property indicates the current state of the fetching of media over the network.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/networkState)\n    networkState: float = Field(..., description='The **`HTMLMediaElement.networkState`** property indicates the current state of the fetching of media over the network.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/networkState)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/encrypted_event)\n    onencrypted: Union[((this: HTMLMediaElement, ev: MediaEncryptedEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/encrypted_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waitingforkey_event)\n    onwaitingforkey: Union[((this: HTMLMediaElement, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waitingforkey_event)')\n    # The read-only **`HTMLMediaElement.paused`** property tells whether the media element is paused.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/paused)\n    paused: bool = Field(..., description='The read-only **`HTMLMediaElement.paused`** property tells whether the media element is paused.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/paused)')\n    # The **`HTMLMediaElement.playbackRate`** property sets the rate at which the media is being played back.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playbackRate)\n    playbackRate: float = Field(..., description='The **`HTMLMediaElement.playbackRate`** property sets the rate at which the media is being played back.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playbackRate)')\n    # The **`played`** read-only property of the HTMLMediaElement interface indicates the time ranges the resource, an audio or video media file, has played.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/played)\n    played: TimeRanges = Field(..., description='The **`played`** read-only property of the HTMLMediaElement interface indicates the time ranges the resource, an audio or video media file, has played.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/played)')\n    # The **`preload`** property of the HTMLMediaElement interface is a string that provides a hint to the browser about what the author thinks will lead to the best user experience.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/preload)\n    preload: Union["none", "metadata", "auto", ""] = Field(..., description='The **`preload`** property of the HTMLMediaElement interface is a string that provides a hint to the browser about what the author thinks will lead to the best user experience.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/preload)')\n    # The **`HTMLMediaElement.preservesPitch`** property determines whether or not the browser should adjust the pitch of the audio to compensate for changes to the playback rate made by setting HTMLMediaElement.playbackRate.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/preservesPitch)\n    preservesPitch: bool = Field(..., description='The **`HTMLMediaElement.preservesPitch`** property determines whether or not the browser should adjust the pitch of the audio to compensate for changes to the playback rate made by setting HTMLMediaElement.playbackRate.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/preservesPitch)')\n    # The **`HTMLMediaElement.readyState`** property indicates the readiness state of the media.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/readyState)\n    readyState: float = Field(..., description='The **`HTMLMediaElement.readyState`** property indicates the readiness state of the media.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/readyState)')\n    # The **`remote`** read-only property of the HTMLMediaElement interface returns the RemotePlayback object associated with the media element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/remote)\n    remote: RemotePlayback = Field(..., description='The **`remote`** read-only property of the HTMLMediaElement interface returns the RemotePlayback object associated with the media element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/remote)')\n    # The **`seekable`** read-only property of HTMLMediaElement objects returns a new static normalized `TimeRanges` object that represents the ranges of the media resource, if any, that the user agent is able to seek to at the time `seekable` property is accessed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seekable)\n    seekable: TimeRanges = Field(..., description='The **`seekable`** read-only property of HTMLMediaElement objects returns a new static normalized `TimeRanges` object that represents the ranges of the media resource, if any, that the user agent is able to seek to at the time `seekable` property is accessed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seekable)')\n    # The **`seeking`** read-only property of the HTMLMediaElement interface is a Boolean indicating whether the resource, the audio or video, is in the process of seeking to a new position.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking)\n    seeking: bool = Field(..., description='The **`seeking`** read-only property of the HTMLMediaElement interface is a Boolean indicating whether the resource, the audio or video, is in the process of seeking to a new position.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking)')\n    # The **`sinkId`** read-only property of the HTMLMediaElement interface returns a string that is the unique ID of the device to be used for playing audio output.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/sinkId)\n    sinkId: str = Field(..., description='The **`sinkId`** read-only property of the HTMLMediaElement interface returns a string that is the unique ID of the device to be used for playing audio output.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/sinkId)')\n    # The **`HTMLMediaElement.src`** property reflects the value of the HTML media element's `src` attribute, which indicates the URL of a media resource to use in the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/src)\n    src: str = Field(..., description='The **`HTMLMediaElement.src`** property reflects the value of the HTML media element\'s `src` attribute, which indicates the URL of a media resource to use in the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/src)')\n    # The **`srcObject`** property of the the source of the media associated with the HTMLMediaElement, or `null` if not assigned.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/srcObject)\n    srcObject: Union[MediaProvider, null] = Field(..., description='The **`srcObject`** property of the the source of the media associated with the HTMLMediaElement, or `null` if not assigned.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/srcObject)')\n    # The read-only **`textTracks`** property on HTMLMediaElement objects returns a objects representing the media element's text tracks, in the same order as in the list of text tracks.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/textTracks)\n    textTracks: TextTrackList = Field(..., description='The read-only **`textTracks`** property on HTMLMediaElement objects returns a objects representing the media element\'s text tracks, in the same order as in the list of text tracks.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/textTracks)')\n    # The **`HTMLMediaElement.volume`** property sets the volume at which the media will be played.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volume)\n    volume: float = Field(..., description='The **`HTMLMediaElement.volume`** property sets the volume at which the media will be played.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volume)')\n    NETWORK_EMPTY: 0 = Field(...)\n    NETWORK_IDLE: 1 = Field(...)\n    NETWORK_LOADING: 2 = Field(...)\n    NETWORK_NO_SOURCE: 3 = Field(...)\n    HAVE_NOTHING: 0 = Field(...)\n    HAVE_METADATA: 1 = Field(...)\n    HAVE_CURRENT_DATA: 2 = Field(...)\n    HAVE_FUTURE_DATA: 3 = Field(...)\n    HAVE_ENOUGH_DATA: 4 = Field(...)\n\n# The **`HTMLMenuElement`** interface provides additional properties (beyond those inherited from the HTMLElement interface) for manipulating a menu element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMenuElement)\nclass HTMLMenuElement(HTMLElement):\n    # @deprecated\n    compact: bool = Field(..., description='@deprecated')\n\n# The **`HTMLMetaElement`** interface contains descriptive metadata about a document provided in HTML as `<meta>` elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement)\nclass HTMLMetaElement(HTMLElement):\n    # The **`HTMLMetaElement.content`** property gets or sets the `content` attribute of pragma directives and named meta data in conjunction with HTMLMetaElement.name or HTMLMetaElement.httpEquiv.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/content)\n    content: str = Field(..., description='The **`HTMLMetaElement.content`** property gets or sets the `content` attribute of pragma directives and named meta data in conjunction with HTMLMetaElement.name or HTMLMetaElement.httpEquiv.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/content)')\n    # The **`HTMLMetaElement.httpEquiv`** property gets or sets the pragma directive or an HTTP response header name for the HTMLMetaElement.content attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/httpEquiv)\n    httpEquiv: str = Field(..., description='The **`HTMLMetaElement.httpEquiv`** property gets or sets the pragma directive or an HTTP response header name for the HTMLMetaElement.content attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/httpEquiv)')\n    # The **`HTMLMetaElement.media`** property enables specifying the media for `theme-color` metadata.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/media)\n    media: str = Field(..., description='The **`HTMLMetaElement.media`** property enables specifying the media for `theme-color` metadata.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/media)')\n    # The **`HTMLMetaElement.name`** property is used in combination with HTMLMetaElement.content to define the name-value pairs for the metadata of a document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/name)\n    name: str = Field(..., description='The **`HTMLMetaElement.name`** property is used in combination with HTMLMetaElement.content to define the name-value pairs for the metadata of a document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/name)')\n    # The **`HTMLMetaElement.scheme`** property defines the scheme of the value in the HTMLMetaElement.content attribute.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/scheme)\n    scheme: str = Field(..., description='The **`HTMLMetaElement.scheme`** property defines the scheme of the value in the HTMLMetaElement.content attribute.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/scheme)')\n\n# The HTML meter elements expose the **`HTMLMeterElement`** interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of meter elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement)\nclass HTMLMeterElement(HTMLElement):\n    # The **`high`** property of the HTMLMeterElement interface represents the high boundary of the meter element as a floating-point number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/high)\n    high: float = Field(..., description='The **`high`** property of the HTMLMeterElement interface represents the high boundary of the meter element as a floating-point number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/high)')\n    # The **`HTMLMeterElement.labels`** read-only property returns a A NodeList containing the `<label>` elements associated with the `<meter>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/labels)\n    labels: NodeListOf<HTMLLabelElement> = Field(..., description='The **`HTMLMeterElement.labels`** read-only property returns a A NodeList containing the `<label>` elements associated with the `<meter>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/labels)')\n    # The **`low`** property of the HTMLMeterElement interface represents the low boundary of the meter element as a floating-point number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/low)\n    low: float = Field(..., description='The **`low`** property of the HTMLMeterElement interface represents the low boundary of the meter element as a floating-point number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/low)')\n    # The **`max`** property of the HTMLMeterElement interface represents the maximum value of the meter element as a floating-point number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/max)\n    max: float = Field(..., description='The **`max`** property of the HTMLMeterElement interface represents the maximum value of the meter element as a floating-point number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/max)')\n    # The **`min`** property of the HTMLMeterElement interface represents the minimum value of the meter element as a floating-point number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/min)\n    min: float = Field(..., description='The **`min`** property of the HTMLMeterElement interface represents the minimum value of the meter element as a floating-point number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/min)')\n    # The **`optimum`** property of the HTMLMeterElement interface represents the optimum boundary of the meter element as a floating-point number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/optimum)\n    optimum: float = Field(..., description='The **`optimum`** property of the HTMLMeterElement interface represents the optimum boundary of the meter element as a floating-point number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/optimum)')\n    # The **`value`** property of the HTMLMeterElement interface represents the current value of the meter element as a floating-point number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/value)\n    value: float = Field(..., description='The **`value`** property of the HTMLMeterElement interface represents the current value of the meter element as a floating-point number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/value)')\n\n# The **`HTMLModElement`** interface provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is del and ins.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLModElement)\nclass HTMLModElement(HTMLElement):\n    # The **`cite`** property of the HTMLModElement interface indicates the URL of the resource explaining the modification.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLModElement/cite)\n    cite: str = Field(..., description='The **`cite`** property of the HTMLModElement interface indicates the URL of the resource explaining the modification.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLModElement/cite)')\n    # The **`dateTime`** property of the HTMLModElement interface is a string containing a machine-readable date with an optional time value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLModElement/dateTime)\n    dateTime: str = Field(..., description='The **`dateTime`** property of the HTMLModElement interface is a string containing a machine-readable date with an optional time value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLModElement/dateTime)')\n\n# The **`HTMLOListElement`** interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement)\nclass HTMLOListElement(HTMLElement):\n    # @deprecated\n    compact: bool = Field(..., description='@deprecated')\n    # The **`reversed`** property of the HTMLOListElement interface indicates order of a list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/reversed)\n    reversed: bool = Field(..., description='The **`reversed`** property of the HTMLOListElement interface indicates order of a list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/reversed)')\n    # The **`start`** property of the HTMLOListElement interface indicates starting value of the ordered list, with default value of 1.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/start)\n    start: float = Field(..., description='The **`start`** property of the HTMLOListElement interface indicates starting value of the ordered list, with default value of 1.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/start)')\n    # The **`type`** property of the HTMLOListElement interface indicates the kind of marker to be used to display ordered list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/type)\n    type: str = Field(..., description='The **`type`** property of the HTMLOListElement interface indicates the kind of marker to be used to display ordered list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/type)')\n\n# The **`HTMLObjectElement`** interface provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of object element, representing external resources.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement)\nclass HTMLObjectElement(HTMLElement):\n    # @deprecated\n    align: str = Field(..., description='@deprecated')\n    # @deprecated\n    archive: str = Field(..., description='@deprecated')\n    # @deprecated\n    border: str = Field(..., description='@deprecated')\n    # @deprecated\n    code: str = Field(..., description='@deprecated')\n    # @deprecated\n    codeBase: str = Field(..., description='@deprecated')\n    # @deprecated\n    codeType: str = Field(..., description='@deprecated')\n    # The **`contentDocument`** read-only property of the HTMLObjectElement interface Returns a Document representing the active document of the object element's nested browsing context, if any; otherwise null.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/contentDocument)\n    contentDocument: Union[Document, null] = Field(..., description='The **`contentDocument`** read-only property of the HTMLObjectElement interface Returns a Document representing the active document of the object element\'s nested browsing context, if any; otherwise null.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/contentDocument)')\n    # The **`contentWindow`** read-only property of the HTMLObjectElement interface returns a WindowProxy representing the window proxy of the object element's nested browsing context, if any; otherwise null.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/contentWindow)\n    contentWindow: Union[WindowProxy, null] = Field(..., description='The **`contentWindow`** read-only property of the HTMLObjectElement interface returns a WindowProxy representing the window proxy of the object element\'s nested browsing context, if any; otherwise null.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/contentWindow)')\n    # The **`data`** property of the reflects the `data` HTML attribute, specifying the address of a resource's data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/data)\n    data: str = Field(..., description='The **`data`** property of the reflects the `data` HTML attribute, specifying the address of a resource\'s data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/data)')\n    # @deprecated\n    declare: bool = Field(..., description='@deprecated')\n    # The **`form`** read-only property of the HTMLObjectElement interface returns an HTMLFormElement object that owns this object, or `null` if this object element is not owned by any form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/form)\n    form: Union[HTMLFormElement, null] = Field(..., description='The **`form`** read-only property of the HTMLObjectElement interface returns an HTMLFormElement object that owns this object, or `null` if this object element is not owned by any form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/form)')\n    # The **`height`** property of the reflects the `height` HTML attribute, specifying the displayed height of the resource in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/height)\n    height: str = Field(..., description='The **`height`** property of the reflects the `height` HTML attribute, specifying the displayed height of the resource in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/height)')\n    # @deprecated\n    hspace: float = Field(..., description='@deprecated')\n    # The **`name`** property of the reflects the `name` HTML attribute, specifying the name of the browsing context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/name)\n    name: str = Field(..., description='The **`name`** property of the reflects the `name` HTML attribute, specifying the name of the browsing context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/name)')\n    # @deprecated\n    standby: str = Field(..., description='@deprecated')\n    # The **`type`** property of the reflects the `type` HTML attribute, specifying the MIME type of the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/type)\n    type: str = Field(..., description='The **`type`** property of the reflects the `type` HTML attribute, specifying the MIME type of the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/type)')\n    # The **`useMap`** property of the reflects the `usemap` HTML attribute, specifying a A string.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/useMap)\n    useMap: str = Field(..., description='The **`useMap`** property of the reflects the `usemap` HTML attribute, specifying a A string.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/useMap)')\n    # The **`validationMessage`** read-only property of the HTMLObjectElement interface returns a string representing a localized message that describes the validation constraints that the control does not satisfy (if any).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/validationMessage)\n    validationMessage: str = Field(..., description='The **`validationMessage`** read-only property of the HTMLObjectElement interface returns a string representing a localized message that describes the validation constraints that the control does not satisfy (if any).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/validationMessage)')\n    # The **`validity`** read-only property of the HTMLObjectElement interface returns a ValidityState object that represents the validity states this element is in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/validity)\n    validity: ValidityState = Field(..., description='The **`validity`** read-only property of the HTMLObjectElement interface returns a ValidityState object that represents the validity states this element is in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/validity)')\n    # @deprecated\n    vspace: float = Field(..., description='@deprecated')\n    # The **`width`** property of the reflects the `width` HTML attribute, specifying the displayed width of the resource in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/width)\n    width: str = Field(..., description='The **`width`** property of the reflects the `width` HTML attribute, specifying the displayed width of the resource in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/width)')\n    # The **`willValidate`** read-only property of the HTMLObjectElement interface returns `false`, because object elements are not candidates for constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/willValidate)\n    willValidate: bool = Field(..., description='The **`willValidate`** read-only property of the HTMLObjectElement interface returns `false`, because object elements are not candidates for constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/willValidate)')\n\n# The **`HTMLOptGroupElement`** interface provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of optgroup elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement)\nclass HTMLOptGroupElement(HTMLElement):\n    # The **`disabled`** property of the HTMLOptGroupElement interface is a boolean value that reflects the optgroup element's `disabled` attribute, which indicates whether the control is disabled.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement/disabled)\n    disabled: bool = Field(..., description='The **`disabled`** property of the HTMLOptGroupElement interface is a boolean value that reflects the optgroup element\'s `disabled` attribute, which indicates whether the control is disabled.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement/disabled)')\n    # The **`label`** property of the HTMLOptGroupElement interface is a string value that reflects the optgroup element's `label` attribute, which provides a textual label to the group of options.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement/label)\n    label: str = Field(..., description='The **`label`** property of the HTMLOptGroupElement interface is a string value that reflects the optgroup element\'s `label` attribute, which provides a textual label to the group of options.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement/label)')\n\n# The **`HTMLOptionElement`** interface represents option elements and inherits all properties and methods of the HTMLElement interface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement)\nclass HTMLOptionElement(HTMLElement):\n    # The **`defaultSelected`** property of the HTMLOptionElement interface specifies the default selected state of the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/defaultSelected)\n    defaultSelected: bool = Field(..., description='The **`defaultSelected`** property of the HTMLOptionElement interface specifies the default selected state of the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/defaultSelected)')\n    # The **`disabled`** property of the HTMLOptionElement is a boolean value that indicates whether the option element is unavailable to be selected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/disabled)\n    disabled: bool = Field(..., description='The **`disabled`** property of the HTMLOptionElement is a boolean value that indicates whether the option element is unavailable to be selected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/disabled)')\n    # The **`form`** read-only property of the HTMLOptionElement interface returns an HTMLFormElement object that owns the HTMLSelectElement associated with this option, or `null` if this option is not associated with a select owned by a form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/form)\n    form: Union[HTMLFormElement, null] = Field(..., description='The **`form`** read-only property of the HTMLOptionElement interface returns an HTMLFormElement object that owns the HTMLSelectElement associated with this option, or `null` if this option is not associated with a select owned by a form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/form)')\n    # The read-only **`index`** property of the HTMLOptionElement interface specifies the 0-based index of the element; that is, the position of the option within the list of options it belongs to, in tree-order, as an integer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/index)\n    index: float = Field(..., description='The read-only **`index`** property of the HTMLOptionElement interface specifies the 0-based index of the element; that is, the position of the option within the list of options it belongs to, in tree-order, as an integer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/index)')\n    # The **`label`** property of the HTMLOptionElement represents the text displayed for an option in a select element or as part of a list of suggestions in a datalist element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/label)\n    label: str = Field(..., description='The **`label`** property of the HTMLOptionElement represents the text displayed for an option in a select element or as part of a list of suggestions in a datalist element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/label)')\n    # The **`selected`** property of the HTMLOptionElement interface specifies the current selectedness of the element; that is, whether the option is selected or not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/selected)\n    selected: bool = Field(..., description='The **`selected`** property of the HTMLOptionElement interface specifies the current selectedness of the element; that is, whether the option is selected or not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/selected)')\n    # The **`text`** property of the HTMLOptionElement represents the text inside the option element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/text)\n    text: str = Field(..., description='The **`text`** property of the HTMLOptionElement represents the text inside the option element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/text)')\n    # The **`value`** property of the HTMLOptionElement interface represents the value of the option element as a string, or the empty string if no value is set.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/value)\n    value: str = Field(..., description='The **`value`** property of the HTMLOptionElement interface represents the value of the option element as a string, or the empty string if no value is set.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/value)')\n\n# The **`HTMLOptionsCollection`** interface represents a collection of `<option>` HTML elements (in document order) and offers methods and properties for selecting from the list as well as optionally altering its items.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection)\nclass HTMLOptionsCollection(HTMLCollectionOf):\n    # The **`length`** property of the HTMLOptionsCollection interface returns the number of option elements in the collection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/length)\n    length: float = Field(..., description='The **`length`** property of the HTMLOptionsCollection interface returns the number of option elements in the collection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/length)')\n    # The **`selectedIndex`** property of the HTMLOptionsCollection interface is the numeric index of the first selected option element, if any, or `−1` if no `<option>` is selected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/selectedIndex)\n    selectedIndex: float = Field(..., description='The **`selectedIndex`** property of the HTMLOptionsCollection interface is the numeric index of the first selected option element, if any, or `−1` if no `<option>` is selected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/selectedIndex)')\n\nclass HTMLOrSVGElement(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/autofocus)\n    autofocus: bool = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/autofocus)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dataset)\n    dataset: DOMStringMap = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dataset)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/nonce)\n    nonce: Optional[str] = None = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/nonce)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/tabIndex)\n    tabIndex: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/tabIndex)')\n\n# The **`HTMLOutputElement`** interface provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of output elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement)\nclass HTMLOutputElement(HTMLElement):\n    # The **`defaultValue`** property of the HTMLOutputElement interface represents the default text content of this output element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/defaultValue)\n    defaultValue: str = Field(..., description='The **`defaultValue`** property of the HTMLOutputElement interface represents the default text content of this output element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/defaultValue)')\n    # The **`form`** read-only property of the HTMLOutputElement interface returns an HTMLFormElement object that owns this output, or `null` if this output is not owned by any form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/form)\n    form: Union[HTMLFormElement, null] = Field(..., description='The **`form`** read-only property of the HTMLOutputElement interface returns an HTMLFormElement object that owns this output, or `null` if this output is not owned by any form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/form)')\n    # The **`HTMLOutputElement.labels`** read-only property returns a A NodeList containing the `<label>` elements associated with the `<output>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/labels)\n    labels: NodeListOf<HTMLLabelElement> = Field(..., description='The **`HTMLOutputElement.labels`** read-only property returns a A NodeList containing the `<label>` elements associated with the `<output>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/labels)')\n    # The **`name`** property of the HTMLOutputElement interface indicates the name of the output element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/name)\n    name: str = Field(..., description='The **`name`** property of the HTMLOutputElement interface indicates the name of the output element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/name)')\n    # The **`type`** read-only property of the HTMLOutputElement interface returns the string `'output'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/type)\n    type: str = Field(..., description='The **`type`** read-only property of the HTMLOutputElement interface returns the string `\'output\'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/type)')\n    # The **`validationMessage`** read-only property of the HTMLOutputElement interface returns a string representing a localized message that describes the validation constraints that the output control does not satisfy (if any).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/validationMessage)\n    validationMessage: str = Field(..., description='The **`validationMessage`** read-only property of the HTMLOutputElement interface returns a string representing a localized message that describes the validation constraints that the output control does not satisfy (if any).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/validationMessage)')\n    # The **`validity`** read-only property of the HTMLOutputElement interface returns a ValidityState object that represents the validity states this element is in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/validity)\n    validity: ValidityState = Field(..., description='The **`validity`** read-only property of the HTMLOutputElement interface returns a ValidityState object that represents the validity states this element is in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/validity)')\n    # The **`value`** property of the HTMLOutputElement interface represents the value of the output element as a string, or the empty string if no value is set.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/value)\n    value: str = Field(..., description='The **`value`** property of the HTMLOutputElement interface represents the value of the output element as a string, or the empty string if no value is set.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/value)')\n    # The **`willValidate`** read-only property of the HTMLOutputElement interface returns `false`, because output elements are not candidates for constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/willValidate)\n    willValidate: bool = Field(..., description='The **`willValidate`** read-only property of the HTMLOutputElement interface returns `false`, because output elements are not candidates for constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/willValidate)')\n\n# The **`HTMLParagraphElement`** interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating p elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLParagraphElement)\nclass HTMLParagraphElement(HTMLElement):\n    # @deprecated\n    align: str = Field(..., description='@deprecated')\n\n# The **`HTMLParamElement`** interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating param elements, representing a pair of a key and a value that acts as a parameter for an object element.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLParamElement)\nclass HTMLParamElement(HTMLElement):\n    # @deprecated\n    name: str = Field(..., description='@deprecated')\n    # @deprecated\n    type: str = Field(..., description='@deprecated')\n    # @deprecated\n    value: str = Field(..., description='@deprecated')\n    # @deprecated\n    valueType: str = Field(..., description='@deprecated')\n\n# The **`HTMLPictureElement`** interface represents a picture HTML element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLPictureElement)\nclass HTMLPictureElement(HTMLElement):\n    pass\n\n# The **`HTMLPreElement`** interface exposes specific properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating a block of preformatted text (pre).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLPreElement)\nclass HTMLPreElement(HTMLElement):\n    # @deprecated\n    width: float = Field(..., description='@deprecated')\n\n# The **`HTMLProgressElement`** interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of progress elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement)\nclass HTMLProgressElement(HTMLElement):\n    # The **`HTMLProgressElement.labels`** read-only property returns a NodeList of the label elements associated with the A NodeList containing the `<label>` elements associated with the `<progress>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/labels)\n    labels: NodeListOf<HTMLLabelElement> = Field(..., description='The **`HTMLProgressElement.labels`** read-only property returns a NodeList of the label elements associated with the A NodeList containing the `<label>` elements associated with the `<progress>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/labels)')\n    # The **`max`** property of the HTMLProgressElement interface represents the upper bound of the progress element's range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/max)\n    max: float = Field(..., description='The **`max`** property of the HTMLProgressElement interface represents the upper bound of the progress element\'s range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/max)')\n    # The **`position`** read-only property of the HTMLProgressElement interface returns current progress of the progress element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/position)\n    position: float = Field(..., description='The **`position`** read-only property of the HTMLProgressElement interface returns current progress of the progress element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/position)')\n    # The **`value`** property of the HTMLProgressElement interface represents the current progress of the progress element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/value)\n    value: float = Field(..., description='The **`value`** property of the HTMLProgressElement interface represents the current progress of the progress element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/value)')\n\n# The **`HTMLQuoteElement`** interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like blockquote and q, but not the cite element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLQuoteElement)\nclass HTMLQuoteElement(HTMLElement):\n    # The **`cite`** property of the HTMLQuoteElement interface indicates the URL for the source of the quotation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLQuoteElement/cite)\n    cite: str = Field(..., description='The **`cite`** property of the HTMLQuoteElement interface indicates the URL for the source of the quotation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLQuoteElement/cite)')\n\n# HTML script elements expose the **`HTMLScriptElement`** interface, which provides special properties and methods for manipulating the behavior and execution of `<script>` elements (beyond the inherited HTMLElement interface).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement)\nclass HTMLScriptElement(HTMLElement):\n    # The **`async`** property of the HTMLScriptElement interface is a boolean value that controls how the script should be executed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/async)\n    async: bool = Field(..., description='The **`async`** property of the HTMLScriptElement interface is a boolean value that controls how the script should be executed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/async)')\n    # @deprecated\n    charset: str = Field(..., description='@deprecated')\n    # The **`crossOrigin`** property of the HTMLScriptElement interface reflects the CORS settings for the script element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/crossOrigin)\n    crossOrigin: Union[str, null] = Field(..., description='The **`crossOrigin`** property of the HTMLScriptElement interface reflects the CORS settings for the script element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/crossOrigin)')\n    # The **`defer`** property of the HTMLScriptElement interface is a boolean value that controls how the script should be executed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/defer)\n    defer: bool = Field(..., description='The **`defer`** property of the HTMLScriptElement interface is a boolean value that controls how the script should be executed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/defer)')\n    # @deprecated\n    event: str = Field(..., description='@deprecated')\n    # The **`fetchPriority`** property of the HTMLScriptElement interface represents a hint to the browser indicating how it should prioritize fetching an external script relative to other external scripts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/fetchPriority)\n    fetchPriority: Union["high", "low", "auto"] = Field(..., description='The **`fetchPriority`** property of the HTMLScriptElement interface represents a hint to the browser indicating how it should prioritize fetching an external script relative to other external scripts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/fetchPriority)')\n    # @deprecated\n    htmlFor: str = Field(..., description='@deprecated')\n    # The **`integrity`** property of the HTMLScriptElement interface is a string that contains inline metadata that a browser can use to verify that a fetched resource has been delivered without unexpected manipulation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/integrity)\n    integrity: str = Field(..., description='The **`integrity`** property of the HTMLScriptElement interface is a string that contains inline metadata that a browser can use to verify that a fetched resource has been delivered without unexpected manipulation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/integrity)')\n    # The **`noModule`** property of the HTMLScriptElement interface is a boolean value that indicates whether the script should be executed in browsers that support ES modules.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/noModule)\n    noModule: bool = Field(..., description='The **`noModule`** property of the HTMLScriptElement interface is a boolean value that indicates whether the script should be executed in browsers that support ES modules.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/noModule)')\n    # The **`referrerPolicy`** property of the `referrerpolicy` of the script element, which defines how the referrer is set when fetching the script and any scripts it imports.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/referrerPolicy)\n    referrerPolicy: str = Field(..., description='The **`referrerPolicy`** property of the `referrerpolicy` of the script element, which defines how the referrer is set when fetching the script and any scripts it imports.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/referrerPolicy)')\n    # The **`src`** property of the HTMLScriptElement interface is a string representing the URL of an external script; this can be used as an alternative to embedding a script directly within a document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/src)\n    src: str = Field(..., description='The **`src`** property of the HTMLScriptElement interface is a string representing the URL of an external script; this can be used as an alternative to embedding a script directly within a document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/src)')\n    # The **`text`** property of the HTMLScriptElement interface is a string that reflects the text content inside the script element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/text)\n    text: str = Field(..., description='The **`text`** property of the HTMLScriptElement interface is a string that reflects the text content inside the script element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/text)')\n    # The **`type`** property of the HTMLScriptElement interface is a string that reflects the type of the script.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/type)\n    type: str = Field(..., description='The **`type`** property of the HTMLScriptElement interface is a string that reflects the type of the script.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/type)')\n\n# The **`HTMLSelectElement`** interface represents a select HTML Element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement)\nclass HTMLSelectElement(HTMLElement):\n    # The **`autocomplete`** property of the HTMLSelectElement interface indicates whether the value of the control can be automatically completed by the browser.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/autocomplete)\n    autocomplete: AutoFill = Field(..., description='The **`autocomplete`** property of the HTMLSelectElement interface indicates whether the value of the control can be automatically completed by the browser.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/autocomplete)')\n    # The **`HTMLSelectElement.disabled`** property is a boolean value that reflects the `disabled` HTML attribute, which indicates whether the control is disabled.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/disabled)\n    disabled: bool = Field(..., description='The **`HTMLSelectElement.disabled`** property is a boolean value that reflects the `disabled` HTML attribute, which indicates whether the control is disabled.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/disabled)')\n    # The **`form`** read-only property of the HTMLSelectElement interface returns an HTMLFormElement object that owns this select, or `null` if this select is not owned by any form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/form)\n    form: Union[HTMLFormElement, null] = Field(..., description='The **`form`** read-only property of the HTMLSelectElement interface returns an HTMLFormElement object that owns this select, or `null` if this select is not owned by any form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/form)')\n    # The **`HTMLSelectElement.labels`** read-only property returns a A NodeList containing the `<label>` elements associated with the `<select>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/labels)\n    labels: NodeListOf<HTMLLabelElement> = Field(..., description='The **`HTMLSelectElement.labels`** read-only property returns a A NodeList containing the `<label>` elements associated with the `<select>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/labels)')\n    # The **`length`** property of the HTMLSelectElement interface specifies the number of option elements in the select element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/length)\n    length: float = Field(..., description='The **`length`** property of the HTMLSelectElement interface specifies the number of option elements in the select element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/length)')\n    # The **`multiple`** property of the HTMLSelectElement interface specifies that the user may select more than one option from the list of options.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/multiple)\n    multiple: bool = Field(..., description='The **`multiple`** property of the HTMLSelectElement interface specifies that the user may select more than one option from the list of options.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/multiple)')\n    # The **`name`** property of the HTMLSelectElement interface indicates the name of the select element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/name)\n    name: str = Field(..., description='The **`name`** property of the HTMLSelectElement interface indicates the name of the select element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/name)')\n    # The **`HTMLSelectElement.options`** read-only property returns a HTMLOptionsCollection of the option elements contained by the select element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/options)\n    options: HTMLOptionsCollection = Field(..., description='The **`HTMLSelectElement.options`** read-only property returns a HTMLOptionsCollection of the option elements contained by the select element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/options)')\n    # The **`required`** property of the HTMLSelectElement interface specifies that the user must select an option with a non-empty string value before submitting a form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/required)\n    required: bool = Field(..., description='The **`required`** property of the HTMLSelectElement interface specifies that the user must select an option with a non-empty string value before submitting a form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/required)')\n    # The **`selectedIndex`** property of the HTMLSelectElement interface is the numeric index of the first selected option element in a select element, if any, or `−1` if no `<option>` is selected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/selectedIndex)\n    selectedIndex: float = Field(..., description='The **`selectedIndex`** property of the HTMLSelectElement interface is the numeric index of the first selected option element in a select element, if any, or `−1` if no `<option>` is selected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/selectedIndex)')\n    # The **read-only** HTMLSelectElement property **`selectedOptions`** contains a list of the element that are currently selected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/selectedOptions)\n    selectedOptions: HTMLCollectionOf<HTMLOptionElement> = Field(..., description='The **read-only** HTMLSelectElement property **`selectedOptions`** contains a list of the element that are currently selected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/selectedOptions)')\n    # The **`size`** property of the HTMLSelectElement interface specifies the number of options, or rows, that should be visible at one time.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/size)\n    size: float = Field(..., description='The **`size`** property of the HTMLSelectElement interface specifies the number of options, or rows, that should be visible at one time.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/size)')\n    # The **`HTMLSelectElement.type`** read-only property returns the form control's `type`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/type)\n    type: Union["select-one", "select-multiple"] = Field(..., description='The **`HTMLSelectElement.type`** read-only property returns the form control\'s `type`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/type)')\n    # The **`validationMessage`** read-only property of the HTMLSelectElement interface returns a string representing a localized message that describes the validation constraints that the select control does not satisfy (if any).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/validationMessage)\n    validationMessage: str = Field(..., description='The **`validationMessage`** read-only property of the HTMLSelectElement interface returns a string representing a localized message that describes the validation constraints that the select control does not satisfy (if any).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/validationMessage)')\n    # The **`validity`** read-only property of the HTMLSelectElement interface returns a ValidityState object that represents the validity states this element is in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/validity)\n    validity: ValidityState = Field(..., description='The **`validity`** read-only property of the HTMLSelectElement interface returns a ValidityState object that represents the validity states this element is in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/validity)')\n    # The **`HTMLSelectElement.value`** property contains the value of the first selected option element associated with this select element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/value)\n    value: str = Field(..., description='The **`HTMLSelectElement.value`** property contains the value of the first selected option element associated with this select element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/value)')\n    # The **`willValidate`** read-only property of the HTMLSelectElement interface indicates whether the select element is a candidate for constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/willValidate)\n    willValidate: bool = Field(..., description='The **`willValidate`** read-only property of the HTMLSelectElement interface indicates whether the select element is a candidate for constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/willValidate)')\n\n# The **`HTMLSlotElement`** interface of the Shadow DOM API enables access to the name and assigned nodes of an HTML slot element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement)\nclass HTMLSlotElement(HTMLElement):\n    # The **`name`** property of the HTMLSlotElement interface returns or sets the slot name.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/name)\n    name: str = Field(..., description='The **`name`** property of the HTMLSlotElement interface returns or sets the slot name.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/name)')\n\n# The **`HTMLSourceElement`** interface provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating source elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement)\nclass HTMLSourceElement(HTMLElement):\n    # The **`height`** property of the HTMLSourceElement interface is a non-negative number indicating the height of the image resource in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/height)\n    height: float = Field(..., description='The **`height`** property of the HTMLSourceElement interface is a non-negative number indicating the height of the image resource in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/height)')\n    # The **`media`** property of the HTMLSourceElement interface is a string representing the intended destination medium for the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/media)\n    media: str = Field(..., description='The **`media`** property of the HTMLSourceElement interface is a string representing the intended destination medium for the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/media)')\n    # The **`sizes`** property of the HTMLSourceElement interface is a string representing a list of one or more sizes, representing sizes between breakpoints, to which the resource applies.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/sizes)\n    sizes: str = Field(..., description='The **`sizes`** property of the HTMLSourceElement interface is a string representing a list of one or more sizes, representing sizes between breakpoints, to which the resource applies.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/sizes)')\n    # The **`src`** property of the HTMLSourceElement interface is a string indicating the URL of a media resource to use as the source for the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/src)\n    src: str = Field(..., description='The **`src`** property of the HTMLSourceElement interface is a string indicating the URL of a media resource to use as the source for the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/src)')\n    # The **`srcset`** property of the HTMLSourceElement interface is a string containing a comma-separated list of candidate images.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/srcset)\n    srcset: str = Field(..., description='The **`srcset`** property of the HTMLSourceElement interface is a string containing a comma-separated list of candidate images.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/srcset)')\n    # The **`type`** property of the HTMLSourceElement interface is a string representing the MIME type of the media resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/type)\n    type: str = Field(..., description='The **`type`** property of the HTMLSourceElement interface is a string representing the MIME type of the media resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/type)')\n    # The **`width`** property of the HTMLSourceElement interface is a non-negative number indicating the width of the image resource in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/width)\n    width: float = Field(..., description='The **`width`** property of the HTMLSourceElement interface is a non-negative number indicating the width of the image resource in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/width)')\n\n# The **`HTMLSpanElement`** interface represents a span element and derives from the HTMLElement interface, but without implementing any additional properties or methods.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSpanElement)\nclass HTMLSpanElement(HTMLElement):\n    pass\n\n# The **`HTMLStyleElement`** interface represents a style element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement)\nclass HTMLStyleElement(HTMLElement):\n    # The **`HTMLStyleElement.disabled`** property can be used to get and set whether the stylesheet is disabled (`true`) or not (`false`).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/disabled)\n    disabled: bool = Field(..., description='The **`HTMLStyleElement.disabled`** property can be used to get and set whether the stylesheet is disabled (`true`) or not (`false`).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/disabled)')\n    # The **`HTMLStyleElement.media`** property specifies the intended destination medium for style information.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/media)\n    media: str = Field(..., description='The **`HTMLStyleElement.media`** property specifies the intended destination medium for style information.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/media)')\n    # The **`HTMLStyleElement.type`** property returns the type of the current style.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/type)\n    type: str = Field(..., description='The **`HTMLStyleElement.type`** property returns the type of the current style.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/type)')\n\n# The **`HTMLTableCaptionElement`** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCaptionElement)\nclass HTMLTableCaptionElement(HTMLElement):\n    # The **`align`** property of the HTMLTableCaptionElement interface is a string indicating how to horizontally align text in the caption table element.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCaptionElement/align)\n    align: str = Field(..., description='The **`align`** property of the HTMLTableCaptionElement interface is a string indicating how to horizontally align text in the caption table element.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCaptionElement/align)')\n\n# The **`HTMLTableCellElement`** interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header cells (th) or data cells (td), in an HTML document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement)\nclass HTMLTableCellElement(HTMLElement):\n    # The **`abbr`** property of the HTMLTableCellElement interface indicates an abbreviation associated with the cell.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/abbr)\n    abbr: str = Field(..., description='The **`abbr`** property of the HTMLTableCellElement interface indicates an abbreviation associated with the cell.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/abbr)')\n    # The **`align`** property of the HTMLTableCellElement interface is a string indicating how to horizontally align text in the th or td table cell.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/align)\n    align: str = Field(..., description='The **`align`** property of the HTMLTableCellElement interface is a string indicating how to horizontally align text in the th or td table cell.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/align)')\n    # @deprecated\n    axis: str = Field(..., description='@deprecated')\n    # The **`HTMLTableCellElement.bgColor`** property is used to set the background color of a cell or get the value of the obsolete `bgColor` attribute, if present.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/bgColor)\n    bgColor: str = Field(..., description='The **`HTMLTableCellElement.bgColor`** property is used to set the background color of a cell or get the value of the obsolete `bgColor` attribute, if present.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/bgColor)')\n    # The **`cellIndex`** read-only property of the HTMLTableCellElement interface represents the position of a cell within its row (tr).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/cellIndex)\n    cellIndex: float = Field(..., description='The **`cellIndex`** read-only property of the HTMLTableCellElement interface represents the position of a cell within its row (tr).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/cellIndex)')\n    # The **`ch`** property of the HTMLTableCellElement interface does nothing.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/ch)\n    ch: str = Field(..., description='The **`ch`** property of the HTMLTableCellElement interface does nothing.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/ch)')\n    # The **`chOff`** property of the HTMLTableCellElement interface does nothing.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/chOff)\n    chOff: str = Field(..., description='The **`chOff`** property of the HTMLTableCellElement interface does nothing.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/chOff)')\n    # The **`colSpan`** read-only property of the HTMLTableCellElement interface represents the number of columns this cell must span; this lets the cell occupy space across multiple columns of the table.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/colSpan)\n    colSpan: float = Field(..., description='The **`colSpan`** read-only property of the HTMLTableCellElement interface represents the number of columns this cell must span; this lets the cell occupy space across multiple columns of the table.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/colSpan)')\n    # The **`headers`** property of the HTMLTableCellElement interface contains a list of IDs of th elements that are _headers_ for this specific cell.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/headers)\n    headers: str = Field(..., description='The **`headers`** property of the HTMLTableCellElement interface contains a list of IDs of th elements that are _headers_ for this specific cell.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/headers)')\n    # @deprecated\n    height: str = Field(..., description='@deprecated')\n    # The **`noWrap`** property of the HTMLTableCellElement interface returns a Boolean value indicating if the text of the cell may be wrapped on several lines or not.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/noWrap)\n    noWrap: bool = Field(..., description='The **`noWrap`** property of the HTMLTableCellElement interface returns a Boolean value indicating if the text of the cell may be wrapped on several lines or not.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/noWrap)')\n    # The **`rowSpan`** read-only property of the HTMLTableCellElement interface represents the number of rows this cell must span; this lets the cell occupy space across multiple rows of the table.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/rowSpan)\n    rowSpan: float = Field(..., description='The **`rowSpan`** read-only property of the HTMLTableCellElement interface represents the number of rows this cell must span; this lets the cell occupy space across multiple rows of the table.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/rowSpan)')\n    # The **`scope`** property of the HTMLTableCellElement interface indicates the scope of a th cell.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/scope)\n    scope: str = Field(..., description='The **`scope`** property of the HTMLTableCellElement interface indicates the scope of a th cell.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/scope)')\n    # The **`vAlign`** property of the HTMLTableCellElement interface is a string indicating how to vertically align text in a th or td table cell.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/vAlign)\n    vAlign: str = Field(..., description='The **`vAlign`** property of the HTMLTableCellElement interface is a string indicating how to vertically align text in a th or td table cell.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/vAlign)')\n    # @deprecated\n    width: str = Field(..., description='@deprecated')\n\n# The **`HTMLTableColElement`** interface provides properties for manipulating single or grouped table column elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement)\nclass HTMLTableColElement(HTMLElement):\n    # The **`align`** property of the HTMLTableColElement interface is a string indicating how to horizontally align text in a table col column element.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/align)\n    align: str = Field(..., description='The **`align`** property of the HTMLTableColElement interface is a string indicating how to horizontally align text in a table col column element.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/align)')\n    # The **`ch`** property of the HTMLTableColElement interface does nothing.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/ch)\n    ch: str = Field(..., description='The **`ch`** property of the HTMLTableColElement interface does nothing.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/ch)')\n    # The **`chOff`** property of the HTMLTableColElement interface does nothing.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/chOff)\n    chOff: str = Field(..., description='The **`chOff`** property of the HTMLTableColElement interface does nothing.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/chOff)')\n    # The **`span`** read-only property of the HTMLTableColElement interface represents the number of columns this col or colgroup must span; this lets the column occupy space across multiple columns of the table.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/span)\n    span: float = Field(..., description='The **`span`** read-only property of the HTMLTableColElement interface represents the number of columns this col or colgroup must span; this lets the column occupy space across multiple columns of the table.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/span)')\n    # The **`vAlign`** property of the HTMLTableColElement interface is a string indicating how to vertically align text in a table col column element.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/vAlign)\n    vAlign: str = Field(..., description='The **`vAlign`** property of the HTMLTableColElement interface is a string indicating how to vertically align text in a table col column element.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/vAlign)')\n    # @deprecated\n    width: str = Field(..., description='@deprecated')\n\n# @deprecated prefer HTMLTableCellElement\nclass HTMLTableDataCellElement(HTMLTableCellElement):\n    pass\n\n# The **`HTMLTableElement`** interface provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement)\nclass HTMLTableElement(HTMLElement):\n    # The **`HTMLTableElement.align`** property represents the alignment of the table.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/align)\n    align: str = Field(..., description='The **`HTMLTableElement.align`** property represents the alignment of the table.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/align)')\n    # The **`bgcolor`** property of the HTMLTableElement represents the background color of the table.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/bgColor)\n    bgColor: str = Field(..., description='The **`bgcolor`** property of the HTMLTableElement represents the background color of the table.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/bgColor)')\n    # The **`HTMLTableElement.border`** property represents the border width of the table element.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/border)\n    border: str = Field(..., description='The **`HTMLTableElement.border`** property represents the border width of the table element.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/border)')\n    # The **`HTMLTableElement.caption`** property represents the table caption.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/caption)\n    caption: Union[HTMLTableCaptionElement, null] = Field(..., description='The **`HTMLTableElement.caption`** property represents the table caption.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/caption)')\n    # The **`HTMLTableElement.cellPadding`** property represents the padding around the individual cells of the table.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/cellPadding)\n    cellPadding: str = Field(..., description='The **`HTMLTableElement.cellPadding`** property represents the padding around the individual cells of the table.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/cellPadding)')\n    # While you should instead use the CSS interface's **`cellSpacing`** property represents the spacing around the individual th and td elements representing a table's cells.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/cellSpacing)\n    cellSpacing: str = Field(..., description='While you should instead use the CSS interface\'s **`cellSpacing`** property represents the spacing around the individual th and td elements representing a table\'s cells.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/cellSpacing)')\n    # The HTMLTableElement interface's **`frame`** property is a string that indicates which of the table's exterior borders should be drawn.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/frame)\n    frame: str = Field(..., description='The HTMLTableElement interface\'s **`frame`** property is a string that indicates which of the table\'s exterior borders should be drawn.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/frame)')\n    # The read-only HTMLTableElement property **`rows`** returns a live contained within any thead, tfoot, and Although the property itself is read-only, the returned object is live and allows the modification of its content.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/rows)\n    rows: HTMLCollectionOf<HTMLTableRowElement> = Field(..., description='The read-only HTMLTableElement property **`rows`** returns a live contained within any thead, tfoot, and Although the property itself is read-only, the returned object is live and allows the modification of its content.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/rows)')\n    # The **`HTMLTableElement.rules`** property indicates which cell borders to render in the table.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/rules)\n    rules: str = Field(..., description='The **`HTMLTableElement.rules`** property indicates which cell borders to render in the table.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/rules)')\n    # The **`HTMLTableElement.summary`** property represents the table description.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/summary)\n    summary: str = Field(..., description='The **`HTMLTableElement.summary`** property represents the table description.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/summary)')\n    # The **`HTMLTableElement.tBodies`** read-only property returns a live HTMLCollection of the bodies in a table.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tBodies)\n    tBodies: HTMLCollectionOf<HTMLTableSectionElement> = Field(..., description='The **`HTMLTableElement.tBodies`** read-only property returns a live HTMLCollection of the bodies in a table.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tBodies)')\n    # The **`HTMLTableElement.tFoot`** property represents the `null` if there is no such element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tFoot)\n    tFoot: Union[HTMLTableSectionElement, null] = Field(..., description='The **`HTMLTableElement.tFoot`** property represents the `null` if there is no such element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tFoot)')\n    # The **`HTMLTableElement.tHead`** represents the `null` if there is no such element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tHead)\n    tHead: Union[HTMLTableSectionElement, null] = Field(..., description='The **`HTMLTableElement.tHead`** represents the `null` if there is no such element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tHead)')\n    # The **`HTMLTableElement.width`** property represents the desired width of the table.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/width)\n    width: str = Field(..., description='The **`HTMLTableElement.width`** property represents the desired width of the table.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/width)')\n\n# @deprecated prefer HTMLTableCellElement\nclass HTMLTableHeaderCellElement(HTMLTableCellElement):\n    pass\n\n# The **`HTMLTableRowElement`** interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement)\nclass HTMLTableRowElement(HTMLElement):\n    # The **`align`** property of the HTMLTableRowElement interface is a string indicating how to horizontally align text in the tr table row.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/align)\n    align: str = Field(..., description='The **`align`** property of the HTMLTableRowElement interface is a string indicating how to horizontally align text in the tr table row.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/align)')\n    # The **`HTMLTableRowElement.bgColor`** property is used to set the background color of a row or retrieve the value of the obsolete `bgColor` attribute, if present.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/bgColor)\n    bgColor: str = Field(..., description='The **`HTMLTableRowElement.bgColor`** property is used to set the background color of a row or retrieve the value of the obsolete `bgColor` attribute, if present.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/bgColor)')\n    # The **`cells`** read-only property of the HTMLTableRowElement interface returns a live HTMLCollection containing the cells in the row.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/cells)\n    cells: HTMLCollectionOf<HTMLTableCellElement> = Field(..., description='The **`cells`** read-only property of the HTMLTableRowElement interface returns a live HTMLCollection containing the cells in the row.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/cells)')\n    # The **`ch`** property of the HTMLTableRowElement interface does nothing.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/ch)\n    ch: str = Field(..., description='The **`ch`** property of the HTMLTableRowElement interface does nothing.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/ch)')\n    # The **`chOff`** property of the HTMLTableRowElement interface does nothing.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/chOff)\n    chOff: str = Field(..., description='The **`chOff`** property of the HTMLTableRowElement interface does nothing.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/chOff)')\n    # The **`rowIndex`** read-only property of the HTMLTableRowElement interface represents the position of a row within the whole table.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/rowIndex)\n    rowIndex: float = Field(..., description='The **`rowIndex`** read-only property of the HTMLTableRowElement interface represents the position of a row within the whole table.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/rowIndex)')\n    # The **`sectionRowIndex`** read-only property of the HTMLTableRowElement interface represents the position of a row within the current section (thead, tbody, or tfoot).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/sectionRowIndex)\n    sectionRowIndex: float = Field(..., description='The **`sectionRowIndex`** read-only property of the HTMLTableRowElement interface represents the position of a row within the current section (thead, tbody, or tfoot).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/sectionRowIndex)')\n    # The **`vAlign`** property of the HTMLTableRowElement interface is a string indicating how to vertically align text in a tr table row.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/vAlign)\n    vAlign: str = Field(..., description='The **`vAlign`** property of the HTMLTableRowElement interface is a string indicating how to vertically align text in a tr table row.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/vAlign)')\n\n# The **`HTMLTableSectionElement`** interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies (thead, tfoot, and tbody, respectively) in an HTML table.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement)\nclass HTMLTableSectionElement(HTMLElement):\n    # The **`align`** property of the HTMLTableSectionElement interface is a string indicating how to horizontally align text in a thead, tbody or tfoot table section.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/align)\n    align: str = Field(..., description='The **`align`** property of the HTMLTableSectionElement interface is a string indicating how to horizontally align text in a thead, tbody or tfoot table section.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/align)')\n    # The **`ch`** property of the HTMLTableSectionElement interface does nothing.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/ch)\n    ch: str = Field(..., description='The **`ch`** property of the HTMLTableSectionElement interface does nothing.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/ch)')\n    # The **`chOff`** property of the HTMLTableSectionElement interface does nothing.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/chOff)\n    chOff: str = Field(..., description='The **`chOff`** property of the HTMLTableSectionElement interface does nothing.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/chOff)')\n    # The **`rows`** read-only property of the HTMLTableSectionElement interface returns a live HTMLCollection containing the rows in the section.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/rows)\n    rows: HTMLCollectionOf<HTMLTableRowElement> = Field(..., description='The **`rows`** read-only property of the HTMLTableSectionElement interface returns a live HTMLCollection containing the rows in the section.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/rows)')\n    # The **`vAlign`** property of the HTMLTableSectionElement interface is a string indicating how to vertically align text in a thead, tbody or tfoot table section.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/vAlign)\n    vAlign: str = Field(..., description='The **`vAlign`** property of the HTMLTableSectionElement interface is a string indicating how to vertically align text in a thead, tbody or tfoot table section.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/vAlign)')\n\n# The **`HTMLTemplateElement`** interface enables access to the contents of an HTML template element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement)\nclass HTMLTemplateElement(HTMLElement):\n    # The **`HTMLTemplateElement.content`** property returns a `<template>` element's template contents (a A DocumentFragment.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/content)\n    content: DocumentFragment = Field(..., description='The **`HTMLTemplateElement.content`** property returns a `<template>` element\'s template contents (a A DocumentFragment.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/content)')\n    # The **`shadowRootClonable`** property reflects the value of the `shadowrootclonable` attribute of the associated `<template>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/shadowRootClonable)\n    shadowRootClonable: bool = Field(..., description='The **`shadowRootClonable`** property reflects the value of the `shadowrootclonable` attribute of the associated `<template>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/shadowRootClonable)')\n    # The **`shadowRootDelegatesFocus`** property of the HTMLTemplateElement interface reflects the value of the `shadowrootdelegatesfocus` attribute of the associated `<template>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/shadowRootDelegatesFocus)\n    shadowRootDelegatesFocus: bool = Field(..., description='The **`shadowRootDelegatesFocus`** property of the HTMLTemplateElement interface reflects the value of the `shadowrootdelegatesfocus` attribute of the associated `<template>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/shadowRootDelegatesFocus)')\n    # The **`shadowRootMode`** property of the HTMLTemplateElement interface reflects the value of the `shadowrootmode` attribute of the associated `<template>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/shadowRootMode)\n    shadowRootMode: str = Field(..., description='The **`shadowRootMode`** property of the HTMLTemplateElement interface reflects the value of the `shadowrootmode` attribute of the associated `<template>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/shadowRootMode)')\n    # The **`shadowRootSerializable`** property reflects the value of the `shadowrootserializable` attribute of the associated `<template>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/shadowRootSerializable)\n    shadowRootSerializable: bool = Field(..., description='The **`shadowRootSerializable`** property reflects the value of the `shadowrootserializable` attribute of the associated `<template>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/shadowRootSerializable)')\n\n# The **`HTMLTextAreaElement`** interface provides properties and methods for manipulating the layout and presentation of textarea elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement)\nclass HTMLTextAreaElement(HTMLElement):\n    # The **`autocomplete`** property of the HTMLTextAreaElement interface indicates whether the value of the control can be automatically completed by the browser.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/autocomplete)\n    autocomplete: AutoFill = Field(..., description='The **`autocomplete`** property of the HTMLTextAreaElement interface indicates whether the value of the control can be automatically completed by the browser.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/autocomplete)')\n    # The **`cols`** property of the HTMLTextAreaElement interface is a positive integer representing the visible width of the multi-line text control, in average character widths.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/cols)\n    cols: float = Field(..., description='The **`cols`** property of the HTMLTextAreaElement interface is a positive integer representing the visible width of the multi-line text control, in average character widths.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/cols)')\n    # The **`defaultValue`** property of the HTMLTextAreaElement interface represents the default text content of this text area.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/defaultValue)\n    defaultValue: str = Field(..., description='The **`defaultValue`** property of the HTMLTextAreaElement interface represents the default text content of this text area.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/defaultValue)')\n    # The **`dirName`** property of the HTMLTextAreaElement interface is the directionality of the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/dirName)\n    dirName: str = Field(..., description='The **`dirName`** property of the HTMLTextAreaElement interface is the directionality of the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/dirName)')\n    # The **`disabled`** property of the HTMLTextAreaElement interface indicates whether this multi-line text control is disabled and cannot be interacted with.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/disabled)\n    disabled: bool = Field(..., description='The **`disabled`** property of the HTMLTextAreaElement interface indicates whether this multi-line text control is disabled and cannot be interacted with.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/disabled)')\n    # The **`form`** read-only property of the HTMLTextAreaElement interface returns an HTMLFormElement object that owns this textarea, or `null` if this textarea is not owned by any form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/form)\n    form: Union[HTMLFormElement, null] = Field(..., description='The **`form`** read-only property of the HTMLTextAreaElement interface returns an HTMLFormElement object that owns this textarea, or `null` if this textarea is not owned by any form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/form)')\n    # The **`HTMLTextAreaElement.labels`** read-only property returns a NodeList of the label elements associated with the A NodeList containing the `<label>` elements associated with the `<textArea>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/labels)\n    labels: NodeListOf<HTMLLabelElement> = Field(..., description='The **`HTMLTextAreaElement.labels`** read-only property returns a NodeList of the label elements associated with the A NodeList containing the `<label>` elements associated with the `<textArea>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/labels)')\n    # The **`maxLength`** property of the HTMLTextAreaElement interface indicates the maximum number of characters (in UTF-16 code units) allowed to be entered for the value of the textarea element, and the maximum number of characters allowed for the value to be valid.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/maxLength)\n    maxLength: float = Field(..., description='The **`maxLength`** property of the HTMLTextAreaElement interface indicates the maximum number of characters (in UTF-16 code units) allowed to be entered for the value of the textarea element, and the maximum number of characters allowed for the value to be valid.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/maxLength)')\n    # The **`minLength`** property of the HTMLTextAreaElement interface indicates the minimum number of characters (in UTF-16 code units) required for the value of the textarea element to be valid.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/minLength)\n    minLength: float = Field(..., description='The **`minLength`** property of the HTMLTextAreaElement interface indicates the minimum number of characters (in UTF-16 code units) required for the value of the textarea element to be valid.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/minLength)')\n    # The **`name`** property of the HTMLTextAreaElement interface indicates the name of the textarea element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/name)\n    name: str = Field(..., description='The **`name`** property of the HTMLTextAreaElement interface indicates the name of the textarea element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/name)')\n    # The **`placeholder`** property of the HTMLTextAreaElement interface represents a hint to the user of what can be entered in the control.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/placeholder)\n    placeholder: str = Field(..., description='The **`placeholder`** property of the HTMLTextAreaElement interface represents a hint to the user of what can be entered in the control.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/placeholder)')\n    # The **`readOnly`** property of the HTMLTextAreaElement interface indicates that the user cannot modify the value of the control.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/readOnly)\n    readOnly: bool = Field(..., description='The **`readOnly`** property of the HTMLTextAreaElement interface indicates that the user cannot modify the value of the control.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/readOnly)')\n    # The **`required`** property of the HTMLTextAreaElement interface specifies that the user must fill in a value before submitting a form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/required)\n    required: bool = Field(..., description='The **`required`** property of the HTMLTextAreaElement interface specifies that the user must fill in a value before submitting a form.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/required)')\n    # The **`rows`** property of the HTMLTextAreaElement interface is a positive integer representing the visible text lines of the text control.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/rows)\n    rows: float = Field(..., description='The **`rows`** property of the HTMLTextAreaElement interface is a positive integer representing the visible text lines of the text control.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/rows)')\n    # <!-- --> The **`selectionDirection`** property of the HTMLTextAreaElement interface specifies the current direction of the selection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/selectionDirection)\n    selectionDirection: Union["forward", "backward", "none"] = Field(..., description='<!-- --> The **`selectionDirection`** property of the HTMLTextAreaElement interface specifies the current direction of the selection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/selectionDirection)')\n    # The **`selectionEnd`** property of the HTMLTextAreaElement interface specifies the end position of the current text selection in a textarea element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/selectionEnd)\n    selectionEnd: float = Field(..., description='The **`selectionEnd`** property of the HTMLTextAreaElement interface specifies the end position of the current text selection in a textarea element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/selectionEnd)')\n    # The **`selectionStart`** property of the HTMLTextAreaElement interface specifies the start position of the current text selection in a textarea element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/selectionStart)\n    selectionStart: float = Field(..., description='The **`selectionStart`** property of the HTMLTextAreaElement interface specifies the start position of the current text selection in a textarea element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/selectionStart)')\n    # The **`textLength`** read-only property of the HTMLTextAreaElement interface is a non-negative integer representing the number of characters, in UTF-16 code units, of the textarea element's value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/textLength)\n    textLength: float = Field(..., description='The **`textLength`** read-only property of the HTMLTextAreaElement interface is a non-negative integer representing the number of characters, in UTF-16 code units, of the textarea element\'s value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/textLength)')\n    # The **`type`** read-only property of the HTMLTextAreaElement interface returns the string `'textarea'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/type)\n    type: str = Field(..., description='The **`type`** read-only property of the HTMLTextAreaElement interface returns the string `\'textarea\'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/type)')\n    # The **`validationMessage`** read-only property of the HTMLTextAreaElement interface returns a string representing a localized message that describes the validation constraints that the textarea control does not satisfy (if any).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/validationMessage)\n    validationMessage: str = Field(..., description='The **`validationMessage`** read-only property of the HTMLTextAreaElement interface returns a string representing a localized message that describes the validation constraints that the textarea control does not satisfy (if any).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/validationMessage)')\n    # The **`validity`** read-only property of the HTMLTextAreaElement interface returns a ValidityState object that represents the validity states this element is in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/validity)\n    validity: ValidityState = Field(..., description='The **`validity`** read-only property of the HTMLTextAreaElement interface returns a ValidityState object that represents the validity states this element is in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/validity)')\n    # The **`value`** property of the HTMLTextAreaElement interface represents the value of the textarea element as a string, which is an empty string if the widget contains no content.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/value)\n    value: str = Field(..., description='The **`value`** property of the HTMLTextAreaElement interface represents the value of the textarea element as a string, which is an empty string if the widget contains no content.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/value)')\n    # The **`willValidate`** read-only property of the HTMLTextAreaElement interface indicates whether the textarea element is a candidate for constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/willValidate)\n    willValidate: bool = Field(..., description='The **`willValidate`** read-only property of the HTMLTextAreaElement interface indicates whether the textarea element is a candidate for constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/willValidate)')\n    # The **`wrap`** property of the HTMLTextAreaElement interface indicates how the control should wrap the value for form submission.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/wrap)\n    wrap: str = Field(..., description='The **`wrap`** property of the HTMLTextAreaElement interface indicates how the control should wrap the value for form submission.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/wrap)')\n\n# The **`HTMLTimeElement`** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating time elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTimeElement)\nclass HTMLTimeElement(HTMLElement):\n    # The **`dateTime`** property of the HTMLTimeElement interface is a string that reflects the `datetime` HTML attribute, containing a machine-readable form of the element's date and time value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTimeElement/dateTime)\n    dateTime: str = Field(..., description='The **`dateTime`** property of the HTMLTimeElement interface is a string that reflects the `datetime` HTML attribute, containing a machine-readable form of the element\'s date and time value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTimeElement/dateTime)')\n\n# The **`HTMLTitleElement`** interface is implemented by a document's title.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTitleElement)\nclass HTMLTitleElement(HTMLElement):\n    # The **`text`** property of the HTMLTitleElement interface represents the child text content of the document's title as a string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTitleElement/text)\n    text: str = Field(..., description='The **`text`** property of the HTMLTitleElement interface represents the child text content of the document\'s title as a string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTitleElement/text)')\n\n# The **`HTMLTrackElement`** interface represents an HTML track element within the DOM.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement)\nclass HTMLTrackElement(HTMLElement):\n    # The **`default`** property of the HTMLTrackElement interface represents whether the track will be enabled if the user's preferences do not indicate that another track would be more appropriate.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/default)\n    default: bool = Field(..., description='The **`default`** property of the HTMLTrackElement interface represents whether the track will be enabled if the user\'s preferences do not indicate that another track would be more appropriate.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/default)')\n    # The **`kind`** property of the HTMLTrackElement interface represents the type of track, or how the text track is meant to be used.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/kind)\n    kind: str = Field(..., description='The **`kind`** property of the HTMLTrackElement interface represents the type of track, or how the text track is meant to be used.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/kind)')\n    # The **`label`** property of the HTMLTrackElement represents the user-readable title displayed when listing subtitle, caption, and audio descriptions for a track.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/label)\n    label: str = Field(..., description='The **`label`** property of the HTMLTrackElement represents the user-readable title displayed when listing subtitle, caption, and audio descriptions for a track.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/label)')\n    # The **`readyState`** read-only property of the HTMLTrackElement interface returns a number representing the track element's text track readiness state: 0.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/readyState)\n    readyState: float = Field(..., description='The **`readyState`** read-only property of the HTMLTrackElement interface returns a number representing the track element\'s text track readiness state: 0.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/readyState)')\n    # The **`src`** property of the HTMLTrackElement interface reflects the value of the track element's `src` attribute, which indicates the URL of the text track's data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/src)\n    src: str = Field(..., description='The **`src`** property of the HTMLTrackElement interface reflects the value of the track element\'s `src` attribute, which indicates the URL of the text track\'s data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/src)')\n    # The **`srclang`** property of the HTMLTrackElement interface reflects the value of the track element's `srclang` attribute or the empty string if not defined.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/srclang)\n    srclang: str = Field(..., description='The **`srclang`** property of the HTMLTrackElement interface reflects the value of the track element\'s `srclang` attribute or the empty string if not defined.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/srclang)')\n    # The **`track`** read-only property of the HTMLTrackElement interface returns a TextTrack object corresponding to the text track of the track element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/track)\n    track: TextTrack = Field(..., description='The **`track`** read-only property of the HTMLTrackElement interface returns a TextTrack object corresponding to the text track of the track element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/track)')\n    NONE: 0 = Field(...)\n    LOADING: 1 = Field(...)\n    LOADED: 2 = Field(...)\n    ERROR: 3 = Field(...)\n\n# The **`HTMLUListElement`** interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list (ul) elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLUListElement)\nclass HTMLUListElement(HTMLElement):\n    # @deprecated\n    compact: bool = Field(..., description='@deprecated')\n    # @deprecated\n    type: str = Field(..., description='@deprecated')\n\n# The **`HTMLUnknownElement`** interface represents an invalid HTML element and derives from the HTMLElement interface, but without implementing any additional properties or methods.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLUnknownElement)\nclass HTMLUnknownElement(HTMLElement):\n    pass\n\nclass HTMLVideoElementEventMap(HTMLMediaElementEventMap):\n    enterpictureinpicture: PictureInPictureEvent = Field(...)\n    leavepictureinpicture: PictureInPictureEvent = Field(...)\n\n# Implemented by the video element, the **`HTMLVideoElement`** interface provides special properties and methods for manipulating video objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement)\nclass HTMLVideoElement(HTMLMediaElement):\n    # The HTMLVideoElement **`disablePictureInPicture`** property reflects the HTML attribute indicating whether the picture-in-picture feature is disabled for the current element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/disablePictureInPicture)\n    disablePictureInPicture: bool = Field(..., description='The HTMLVideoElement **`disablePictureInPicture`** property reflects the HTML attribute indicating whether the picture-in-picture feature is disabled for the current element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/disablePictureInPicture)')\n    # The **`height`** property of the HTMLVideoElement interface returns an integer that reflects the `height` attribute of the video element, specifying the displayed height of the resource in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/height)\n    height: float = Field(..., description='The **`height`** property of the HTMLVideoElement interface returns an integer that reflects the `height` attribute of the video element, specifying the displayed height of the resource in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/height)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/enterpictureinpicture_event)\n    onenterpictureinpicture: Union[((this: HTMLVideoElement, ev: PictureInPictureEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/enterpictureinpicture_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/leavepictureinpicture_event)\n    onleavepictureinpicture: Union[((this: HTMLVideoElement, ev: PictureInPictureEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/leavepictureinpicture_event)')\n    playsInline: bool = Field(...)\n    # The **`poster`** property of the HTMLVideoElement interface is a string that reflects the URL for an image to be shown while no video data is available.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/poster)\n    poster: str = Field(..., description='The **`poster`** property of the HTMLVideoElement interface is a string that reflects the URL for an image to be shown while no video data is available.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/poster)')\n    # The HTMLVideoElement interface's read-only **`videoHeight`** property indicates the intrinsic height of the video, expressed in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/videoHeight)\n    videoHeight: float = Field(..., description='The HTMLVideoElement interface\'s read-only **`videoHeight`** property indicates the intrinsic height of the video, expressed in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/videoHeight)')\n    # The HTMLVideoElement interface's read-only **`videoWidth`** property indicates the intrinsic width of the video, expressed in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/videoWidth)\n    videoWidth: float = Field(..., description='The HTMLVideoElement interface\'s read-only **`videoWidth`** property indicates the intrinsic width of the video, expressed in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/videoWidth)')\n    # The **`width`** property of the HTMLVideoElement interface returns an integer that reflects the `width` attribute of the video element, specifying the displayed width of the resource in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/width)\n    width: float = Field(..., description='The **`width`** property of the HTMLVideoElement interface returns an integer that reflects the `width` attribute of the video element, specifying the displayed width of the resource in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/width)')\n\n# The **`HashChangeEvent`** interface represents events that fire when the fragment identifier of the URL has changed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HashChangeEvent)\nclass HashChangeEvent(Event):\n    # The **`newURL`** read-only property of the navigating.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HashChangeEvent/newURL)\n    newURL: str = Field(..., description='The **`newURL`** read-only property of the navigating.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HashChangeEvent/newURL)')\n    # The **`oldURL`** read-only property of the was navigated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HashChangeEvent/oldURL)\n    oldURL: str = Field(..., description='The **`oldURL`** read-only property of the was navigated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HashChangeEvent/oldURL)')\n\n# The **`Headers`** interface of the Fetch API allows you to perform various actions on HTTP request and response headers.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers)\nclass Headers(BaseModel):\n    pass\n\n# The **`Highlight`** interface of the CSS Custom Highlight API is used to represent a collection of Range instances to be styled using the API.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Highlight)\nclass Highlight(BaseModel):\n    # It is possible to create Range objects that overlap in a document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Highlight/priority)\n    priority: float = Field(..., description='It is possible to create Range objects that overlap in a document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Highlight/priority)')\n    # The `type` property of the Highlight interface is an enumerated String used to specify the meaning of the highlight.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Highlight/type)\n    type: HighlightType = Field(..., description='The `type` property of the Highlight interface is an enumerated String used to specify the meaning of the highlight.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Highlight/type)')\n\n# The **`HighlightRegistry`** interface of the CSS Custom Highlight API is used to register Highlight objects to be styled using the API.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/HighlightRegistry)\nclass HighlightRegistry(BaseModel):\n    pass\n\n# The **`History`** interface of the History API allows manipulation of the browser _session history_, that is the pages visited in the tab or frame that the current page is loaded in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/History)\nclass History(BaseModel):\n    # The **`length`** read-only property of the History interface returns an integer representing the number of entries in the session history, including the currently loaded page.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/History/length)\n    length: float = Field(..., description='The **`length`** read-only property of the History interface returns an integer representing the number of entries in the session history, including the currently loaded page.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/History/length)')\n    # The **`scrollRestoration`** property of the History interface allows web applications to explicitly set default scroll restoration behavior on history navigation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/History/scrollRestoration)\n    scrollRestoration: ScrollRestoration = Field(..., description='The **`scrollRestoration`** property of the History interface allows web applications to explicitly set default scroll restoration behavior on history navigation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/History/scrollRestoration)')\n    # The **`state`** read-only property of the History interface returns a value representing the state at the top of the history stack.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/History/state)\n    state: any = Field(..., description='The **`state`** read-only property of the History interface returns a value representing the state at the top of the history stack.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/History/state)')\n\n# The **`IDBCursor`** interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor)\nclass IDBCursor(BaseModel):\n    # The **`direction`** read-only property of the direction of traversal of the cursor (set using section below for possible values.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/direction)\n    direction: IDBCursorDirection = Field(..., description='The **`direction`** read-only property of the direction of traversal of the cursor (set using section below for possible values.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/direction)')\n    # The **`key`** read-only property of the position.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/key)\n    key: IDBValidKey = Field(..., description='The **`key`** read-only property of the position.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/key)')\n    # The **`primaryKey`** read-only property of the cursor is currently being iterated or has iterated outside its range, this is set to undefined.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/primaryKey)\n    primaryKey: IDBValidKey = Field(..., description='The **`primaryKey`** read-only property of the cursor is currently being iterated or has iterated outside its range, this is set to undefined.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/primaryKey)')\n    # The **`request`** read-only property of the IDBCursor interface returns the IDBRequest used to obtain the cursor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/request)\n    request: IDBRequest = Field(..., description='The **`request`** read-only property of the IDBCursor interface returns the IDBRequest used to obtain the cursor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/request)')\n    # The **`source`** read-only property of the null or throws an exception, even if the cursor is currently being iterated, has iterated past its end, or its transaction is not active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/source)\n    source: Union[IDBObjectStore, IDBIndex] = Field(..., description='The **`source`** read-only property of the null or throws an exception, even if the cursor is currently being iterated, has iterated past its end, or its transaction is not active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/source)')\n\n# The **`IDBCursorWithValue`** interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursorWithValue)\nclass IDBCursorWithValue(IDBCursor):\n    # The **`value`** read-only property of the whatever that is.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursorWithValue/value)\n    value: any = Field(..., description='The **`value`** read-only property of the whatever that is.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursorWithValue/value)')\n\nclass IDBDatabaseEventMap(BaseModel):\n    abort: Event = Field(...)\n    close: Event = Field(...)\n    error: Event = Field(...)\n    versionchange: IDBVersionChangeEvent = Field(...)\n\n# The **`IDBDatabase`** interface of the IndexedDB API provides a connection to a database; you can use an `IDBDatabase` object to open a transaction on your database then create, manipulate, and delete objects (data) in that database.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase)\nclass IDBDatabase(EventTarget):\n    # The **`name`** read-only property of the `IDBDatabase` interface is a string that contains the name of the connected database.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/name)\n    name: str = Field(..., description='The **`name`** read-only property of the `IDBDatabase` interface is a string that contains the name of the connected database.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/name)')\n    # The **`objectStoreNames`** read-only property of the list of the names of the object stores currently in the connected database.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/objectStoreNames)\n    objectStoreNames: DOMStringList = Field(..., description='The **`objectStoreNames`** read-only property of the list of the names of the object stores currently in the connected database.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/objectStoreNames)')\n    onabort: Union[((this: IDBDatabase, ev: Event) => any), null] = Field(...)\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/close_event)\n    onclose: Union[((this: IDBDatabase, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/close_event)')\n    onerror: Union[((this: IDBDatabase, ev: Event) => any), null] = Field(...)\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/versionchange_event)\n    onversionchange: Union[((this: IDBDatabase, ev: IDBVersionChangeEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/versionchange_event)')\n    # The **`version`** property of the IDBDatabase interface is a 64-bit integer that contains the version of the connected database.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/version)\n    version: float = Field(..., description='The **`version`** property of the IDBDatabase interface is a 64-bit integer that contains the version of the connected database.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/version)')\n\n# The **`IDBFactory`** interface of the IndexedDB API lets applications asynchronously access the indexed databases.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory)\nclass IDBFactory(BaseModel):\n    pass\n\n# `IDBIndex` interface of the IndexedDB API provides asynchronous access to an index in a database.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex)\nclass IDBIndex(BaseModel):\n    # The **`keyPath`** property of the IDBIndex interface returns the key path of the current index.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/keyPath)\n    keyPath: Union[str, List[str]] = Field(..., description='The **`keyPath`** property of the IDBIndex interface returns the key path of the current index.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/keyPath)')\n    # The **`multiEntry`** read-only property of the behaves when the result of evaluating the index's key path yields an array.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/multiEntry)\n    multiEntry: bool = Field(..., description='The **`multiEntry`** read-only property of the behaves when the result of evaluating the index\'s key path yields an array.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/multiEntry)')\n    # The **`name`** property of the IDBIndex interface contains a string which names the index.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/name)\n    name: str = Field(..., description='The **`name`** property of the IDBIndex interface contains a string which names the index.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/name)')\n    # The **`objectStore`** property of the IDBIndex interface returns the object store referenced by the current index.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/objectStore)\n    objectStore: IDBObjectStore = Field(..., description='The **`objectStore`** property of the IDBIndex interface returns the object store referenced by the current index.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/objectStore)')\n    # The **`unique`** read-only property returns a boolean that states whether the index allows duplicate keys.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/unique)\n    unique: bool = Field(..., description='The **`unique`** read-only property returns a boolean that states whether the index allows duplicate keys.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/unique)')\n\n# The **`IDBKeyRange`** interface of the IndexedDB API represents a continuous interval over some data type that is used for keys.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange)\nclass IDBKeyRange(BaseModel):\n    # The **`lower`** read-only property of the The lower bound of the key range (can be any type.) The following example illustrates how you'd use a key range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lower)\n    lower: any = Field(..., description='The **`lower`** read-only property of the The lower bound of the key range (can be any type.) The following example illustrates how you\'d use a key range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lower)')\n    # The **`lowerOpen`** read-only property of the lower-bound value is included in the key range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lowerOpen)\n    lowerOpen: bool = Field(..., description='The **`lowerOpen`** read-only property of the lower-bound value is included in the key range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lowerOpen)')\n    # The **`upper`** read-only property of the The upper bound of the key range (can be any type.) The following example illustrates how you'd use a key range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upper)\n    upper: any = Field(..., description='The **`upper`** read-only property of the The upper bound of the key range (can be any type.) The following example illustrates how you\'d use a key range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upper)')\n    # The **`upperOpen`** read-only property of the upper-bound value is included in the key range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upperOpen)\n    upperOpen: bool = Field(..., description='The **`upperOpen`** read-only property of the upper-bound value is included in the key range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upperOpen)')\n\n# The **`IDBObjectStore`** interface of the IndexedDB API represents an object store in a database.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore)\nclass IDBObjectStore(BaseModel):\n    # The **`autoIncrement`** read-only property of the for this object store.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/autoIncrement)\n    autoIncrement: bool = Field(..., description='The **`autoIncrement`** read-only property of the for this object store.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/autoIncrement)')\n    # The **`indexNames`** read-only property of the in this object store.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/indexNames)\n    indexNames: DOMStringList = Field(..., description='The **`indexNames`** read-only property of the in this object store.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/indexNames)')\n    # The **`keyPath`** read-only property of the If this property is null, the application must provide a key for each modification operation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/keyPath)\n    keyPath: Union[str, List[str], null] = Field(..., description='The **`keyPath`** read-only property of the If this property is null, the application must provide a key for each modification operation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/keyPath)')\n    # The **`name`** property of the IDBObjectStore interface indicates the name of this object store.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/name)\n    name: str = Field(..., description='The **`name`** property of the IDBObjectStore interface indicates the name of this object store.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/name)')\n    # The **`transaction`** read-only property of the object store belongs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/transaction)\n    transaction: IDBTransaction = Field(..., description='The **`transaction`** read-only property of the object store belongs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/transaction)')\n\nclass IDBOpenDBRequestEventMap(IDBRequestEventMap):\n    blocked: IDBVersionChangeEvent = Field(...)\n    upgradeneeded: IDBVersionChangeEvent = Field(...)\n\n# The **`IDBOpenDBRequest`** interface of the IndexedDB API provides access to the results of requests to open or delete databases (performed using IDBFactory.open and IDBFactory.deleteDatabase), using specific event handler attributes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest)\nclass IDBOpenDBRequest(IDBRequest):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/blocked_event)\n    onblocked: Union[((this: IDBOpenDBRequest, ev: IDBVersionChangeEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/blocked_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/upgradeneeded_event)\n    onupgradeneeded: Union[((this: IDBOpenDBRequest, ev: IDBVersionChangeEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/upgradeneeded_event)')\n\nclass IDBRequestEventMap(BaseModel):\n    error: Event = Field(...)\n    success: Event = Field(...)\n\n# The **`IDBRequest`** interface of the IndexedDB API provides access to results of asynchronous requests to databases and database objects using event handler attributes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest)\nclass IDBRequest(EventTarget):\n    # The **`error`** read-only property of the request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/error)\n    error: Union[DOMException, null] = Field(..., description='The **`error`** read-only property of the request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/error)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/error_event)\n    onerror: Union[((this: IDBRequest<T>, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/error_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/success_event)\n    onsuccess: Union[((this: IDBRequest<T>, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/success_event)')\n    # The **`readyState`** read-only property of the Every request starts in the `pending` state.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/readyState)\n    readyState: IDBRequestReadyState = Field(..., description='The **`readyState`** read-only property of the Every request starts in the `pending` state.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/readyState)')\n    # The **`result`** read-only property of the any - `InvalidStateError` DOMException - : Thrown when attempting to access the property if the request is not completed, and therefore the result is not available.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/result)\n    result: T = Field(..., description='The **`result`** read-only property of the any - `InvalidStateError` DOMException - : Thrown when attempting to access the property if the request is not completed, and therefore the result is not available.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/result)')\n    # The **`source`** read-only property of the Index or an object store.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/source)\n    source: Union[IDBObjectStore, IDBIndex, IDBCursor] = Field(..., description='The **`source`** read-only property of the Index or an object store.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/source)')\n    # The **`transaction`** read-only property of the IDBRequest interface returns the transaction for the request, that is, the transaction the request is being made inside.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/transaction)\n    transaction: Union[IDBTransaction, null] = Field(..., description='The **`transaction`** read-only property of the IDBRequest interface returns the transaction for the request, that is, the transaction the request is being made inside.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/transaction)')\n\nclass IDBTransactionEventMap(BaseModel):\n    abort: Event = Field(...)\n    complete: Event = Field(...)\n    error: Event = Field(...)\n\n# The **`IDBTransaction`** interface of the IndexedDB API provides a static, asynchronous transaction on a database using event handler attributes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction)\nclass IDBTransaction(EventTarget):\n    # The **`db`** read-only property of the IDBTransaction interface returns the database connection with which this transaction is associated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/db)\n    db: IDBDatabase = Field(..., description='The **`db`** read-only property of the IDBTransaction interface returns the database connection with which this transaction is associated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/db)')\n    # The **`durability`** read-only property of the IDBTransaction interface returns the durability hint the transaction was created with.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/durability)\n    durability: IDBTransactionDurability = Field(..., description='The **`durability`** read-only property of the IDBTransaction interface returns the durability hint the transaction was created with.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/durability)')\n    # The **`IDBTransaction.error`** property of the IDBTransaction interface returns the type of error when there is an unsuccessful transaction.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error)\n    error: Union[DOMException, null] = Field(..., description='The **`IDBTransaction.error`** property of the IDBTransaction interface returns the type of error when there is an unsuccessful transaction.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error)')\n    # The **`mode`** read-only property of the data in the object stores in the scope of the transaction (i.e., is the mode to be read-only, or do you want to write to the object stores?) The default value is `readonly`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/mode)\n    mode: IDBTransactionMode = Field(..., description='The **`mode`** read-only property of the data in the object stores in the scope of the transaction (i.e., is the mode to be read-only, or do you want to write to the object stores?) The default value is `readonly`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/mode)')\n    # The **`objectStoreNames`** read-only property of the of IDBObjectStore objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/objectStoreNames)\n    objectStoreNames: DOMStringList = Field(..., description='The **`objectStoreNames`** read-only property of the of IDBObjectStore objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/objectStoreNames)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/abort_event)\n    onabort: Union[((this: IDBTransaction, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/abort_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/complete_event)\n    oncomplete: Union[((this: IDBTransaction, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/complete_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error_event)\n    onerror: Union[((this: IDBTransaction, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error_event)')\n\n# The **`IDBVersionChangeEvent`** interface of the IndexedDB API indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.upgradeneeded_event event handler function.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent)\nclass IDBVersionChangeEvent(Event):\n    # The **`newVersion`** read-only property of the database.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent/newVersion)\n    newVersion: Union[float, null] = Field(..., description='The **`newVersion`** read-only property of the database.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent/newVersion)')\n    # The **`oldVersion`** read-only property of the database.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent/oldVersion)\n    oldVersion: float = Field(..., description='The **`oldVersion`** read-only property of the database.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent/oldVersion)')\n\n# The **`IIRFilterNode`** interface of the Web Audio API is a AudioNode processor which implements a general **infinite impulse response** (IIR) filter; this type of filter can be used to implement tone control devices and graphic equalizers as well.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IIRFilterNode)\nclass IIRFilterNode(AudioNode):\n    pass\n\n# The `IdleDeadline` interface is used as the data type of the input parameter to idle callbacks established by calling Window.requestIdleCallback().
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IdleDeadline)\nclass IdleDeadline(BaseModel):\n    # The read-only **`didTimeout`** property on the **IdleDeadline** interface is a Boolean value which indicates whether or not the idle callback is being invoked because the timeout interval specified when Window.requestIdleCallback() was called has expired.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IdleDeadline/didTimeout)\n    didTimeout: bool = Field(..., description='The read-only **`didTimeout`** property on the **IdleDeadline** interface is a Boolean value which indicates whether or not the idle callback is being invoked because the timeout interval specified when Window.requestIdleCallback() was called has expired.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IdleDeadline/didTimeout)')\n\n# The **`ImageBitmap`** interface represents a bitmap image which can be drawn to a canvas without undue latency.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap)\nclass ImageBitmap(BaseModel):\n    # The **`ImageBitmap.height`** read-only property returns the ImageBitmap object's height in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap/height)\n    height: float = Field(..., description='The **`ImageBitmap.height`** read-only property returns the ImageBitmap object\'s height in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap/height)')\n    # The **`ImageBitmap.width`** read-only property returns the ImageBitmap object's width in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap/width)\n    width: float = Field(..., description='The **`ImageBitmap.width`** read-only property returns the ImageBitmap object\'s width in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap/width)')\n\n# The **`ImageBitmapRenderingContext`** interface is a canvas rendering context that provides the functionality to replace the canvas's contents with the given ImageBitmap.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmapRenderingContext)\nclass ImageBitmapRenderingContext(BaseModel):\n    # The **`ImageBitmapRenderingContext.canvas`** property, part of the Canvas API, is a read-only reference to the A HTMLCanvasElement or OffscreenCanvas object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmapRenderingContext/canvas)\n    canvas: Union[HTMLCanvasElement, OffscreenCanvas] = Field(..., description='The **`ImageBitmapRenderingContext.canvas`** property, part of the Canvas API, is a read-only reference to the A HTMLCanvasElement or OffscreenCanvas object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmapRenderingContext/canvas)')\n\n# The **`ImageCapture`** interface of the MediaStream Image Capture API provides methods to enable the capture of images or photos from a camera or other photographic device.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageCapture)\nclass ImageCapture(BaseModel):\n    # The **`track`** read-only property of the A MediaStreamTrack object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageCapture/track)\n    track: MediaStreamTrack = Field(..., description='The **`track`** read-only property of the A MediaStreamTrack object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageCapture/track)')\n\n# The **`ImageData`** interface represents the underlying pixel data of an area of a canvas element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData)\nclass ImageData(BaseModel):\n    # The read-only **`ImageData.colorSpace`** property is a string indicating the color space of the image data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/colorSpace)\n    colorSpace: PredefinedColorSpace = Field(..., description='The read-only **`ImageData.colorSpace`** property is a string indicating the color space of the image data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/colorSpace)')\n    # The readonly **`ImageData.data`** property returns a pixel data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/data)\n    data: ImageDataArray = Field(..., description='The readonly **`ImageData.data`** property returns a pixel data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/data)')\n    # The readonly **`ImageData.height`** property returns the number of rows in the ImageData object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/height)\n    height: float = Field(..., description='The readonly **`ImageData.height`** property returns the number of rows in the ImageData object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/height)')\n    # The readonly **`ImageData.width`** property returns the number of pixels per row in the ImageData object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/width)\n    width: float = Field(..., description='The readonly **`ImageData.width`** property returns the number of pixels per row in the ImageData object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/width)')\n\n# The **`ImageDecoder`** interface of the WebCodecs API provides a way to unpack and decode encoded image data.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder)\nclass ImageDecoder(BaseModel):\n    # The **`complete`** read-only property of the ImageDecoder interface returns true if encoded data has completed buffering.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder/complete)\n    complete: bool = Field(..., description='The **`complete`** read-only property of the ImageDecoder interface returns true if encoded data has completed buffering.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder/complete)')\n    # The **`completed`** read-only property of the ImageDecoder interface returns a promise that resolves once encoded data has finished buffering.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder/completed)\n    completed: Promise<void> = Field(..., description='The **`completed`** read-only property of the ImageDecoder interface returns a promise that resolves once encoded data has finished buffering.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder/completed)')\n    # The **`tracks`** read-only property of the ImageDecoder interface returns a list of the tracks in the encoded image data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder/tracks)\n    tracks: ImageTrackList = Field(..., description='The **`tracks`** read-only property of the ImageDecoder interface returns a list of the tracks in the encoded image data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder/tracks)')\n    # The **`type`** read-only property of the ImageDecoder interface reflects the MIME type configured during construction.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder/type)\n    type: str = Field(..., description='The **`type`** read-only property of the ImageDecoder interface reflects the MIME type configured during construction.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder/type)')\n\n# The **`ImageTrack`** interface of the WebCodecs API represents an individual image track.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrack)\nclass ImageTrack(BaseModel):\n    # The **`animated`** property of the ImageTrack interface returns `true` if the track is animated and therefore has multiple frames.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrack/animated)\n    animated: bool = Field(..., description='The **`animated`** property of the ImageTrack interface returns `true` if the track is animated and therefore has multiple frames.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrack/animated)')\n    # The **`frameCount`** property of the ImageTrack interface returns the number of frames in the track.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrack/frameCount)\n    frameCount: float = Field(..., description='The **`frameCount`** property of the ImageTrack interface returns the number of frames in the track.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrack/frameCount)')\n    # The **`repetitionCount`** property of the ImageTrack interface returns the number of repetitions of this track.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrack/repetitionCount)\n    repetitionCount: float = Field(..., description='The **`repetitionCount`** property of the ImageTrack interface returns the number of repetitions of this track.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrack/repetitionCount)')\n    # The **`selected`** property of the ImageTrack interface returns `true` if the track is selected for decoding.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrack/selected)\n    selected: bool = Field(..., description='The **`selected`** property of the ImageTrack interface returns `true` if the track is selected for decoding.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrack/selected)')\n\n# The **`ImageTrackList`** interface of the WebCodecs API represents a list of image tracks.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrackList)\nclass ImageTrackList(BaseModel):\n    # The **`length`** property of the ImageTrackList interface returns the length of the `ImageTrackList`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrackList/length)\n    length: float = Field(..., description='The **`length`** property of the ImageTrackList interface returns the length of the `ImageTrackList`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrackList/length)')\n    # The **`ready`** property of the ImageTrackList interface returns a Promise that resolves when the `ImageTrackList` is populated with ImageTrack.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrackList/ready)\n    ready: Promise<void> = Field(..., description='The **`ready`** property of the ImageTrackList interface returns a Promise that resolves when the `ImageTrackList` is populated with ImageTrack.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrackList/ready)')\n    # The **`selectedIndex`** property of the ImageTrackList interface returns the `index` of the selected track.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrackList/selectedIndex)\n    selectedIndex: float = Field(..., description='The **`selectedIndex`** property of the ImageTrackList interface returns the `index` of the selected track.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrackList/selectedIndex)')\n    # The **`selectedTrack`** property of the ImageTrackList interface returns an ImageTrack object representing the currently selected track.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrackList/selectedTrack)\n    selectedTrack: Union[ImageTrack, null] = Field(..., description='The **`selectedTrack`** property of the ImageTrackList interface returns an ImageTrack object representing the currently selected track.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrackList/selectedTrack)')\n\nclass ImportMeta(BaseModel):\n    url: str = Field(...)\n\n# The **`InputDeviceInfo`** interface of the Media Capture and Streams API gives access to the capabilities of the input device that it represents.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/InputDeviceInfo)\nclass InputDeviceInfo(MediaDeviceInfo):\n    pass\n\n# The **`InputEvent`** interface represents an event notifying the user of editable content changes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent)\nclass InputEvent(UIEvent):\n    # The **`data`** read-only property of the characters.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/data)\n    data: Union[str, null] = Field(..., description='The **`data`** read-only property of the characters.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/data)')\n    # The **`dataTransfer`** read-only property of the containing information about richtext or plaintext data being added to or removed from editable content.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/dataTransfer)\n    dataTransfer: Union[DataTransfer, null] = Field(..., description='The **`dataTransfer`** read-only property of the containing information about richtext or plaintext data being added to or removed from editable content.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/dataTransfer)')\n    # The **`inputType`** read-only property of the Possible changes include for example inserting, deleting, and formatting text.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/inputType)\n    inputType: str = Field(..., description='The **`inputType`** read-only property of the Possible changes include for example inserting, deleting, and formatting text.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/inputType)')\n    # The **`InputEvent.isComposing`** read-only property returns a boolean value indicating if the event is fired after A boolean.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/isComposing)\n    isComposing: bool = Field(..., description='The **`InputEvent.isComposing`** read-only property returns a boolean value indicating if the event is fired after A boolean.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/isComposing)')\n\n# The **`IntersectionObserver`** interface of the Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver)\nclass IntersectionObserver(BaseModel):\n    # The IntersectionObserver interface's read-only **`root`** property identifies the Element or of the viewport for the element which is the observer's target.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/root)\n    root: Union[Element, Document, null] = Field(..., description='The IntersectionObserver interface\'s read-only **`root`** property identifies the Element or of the viewport for the element which is the observer\'s target.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/root)')\n    # The IntersectionObserver interface's read-only **`rootMargin`** property is a string with syntax similar to that of the CSS margin property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/rootMargin)\n    rootMargin: str = Field(..., description='The IntersectionObserver interface\'s read-only **`rootMargin`** property is a string with syntax similar to that of the CSS margin property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/rootMargin)')\n    # The IntersectionObserver interface's read-only **`thresholds`** property returns the list of intersection thresholds that was specified when the observer was instantiated with only one threshold ratio was provided when instantiating the object, this will be an array containing that single value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/thresholds)\n    thresholds: ReadonlyArray<number> = Field(..., description='The IntersectionObserver interface\'s read-only **`thresholds`** property returns the list of intersection thresholds that was specified when the observer was instantiated with only one threshold ratio was provided when instantiating the object, this will be an array containing that single value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/thresholds)')\n\n# The **`IntersectionObserverEntry`** interface of the Intersection Observer API describes the intersection between the target element and its root container at a specific moment of transition.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry)\nclass IntersectionObserverEntry(BaseModel):\n    # The IntersectionObserverEntry interface's read-only **`boundingClientRect`** property returns a smallest rectangle that contains the entire target element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/boundingClientRect)\n    boundingClientRect: DOMRectReadOnly = Field(..., description='The IntersectionObserverEntry interface\'s read-only **`boundingClientRect`** property returns a smallest rectangle that contains the entire target element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/boundingClientRect)')\n    # The IntersectionObserverEntry interface's read-only **`intersectionRatio`** property tells you how much of the target element is currently visible within the root's intersection ratio, as a value between 0.0 and 1.0.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/intersectionRatio)\n    intersectionRatio: float = Field(..., description='The IntersectionObserverEntry interface\'s read-only **`intersectionRatio`** property tells you how much of the target element is currently visible within the root\'s intersection ratio, as a value between 0.0 and 1.0.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/intersectionRatio)')\n    # The IntersectionObserverEntry interface's read-only **`intersectionRect`** property is a contains the entire portion of the target element which is currently visible within the intersection root.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/intersectionRect)\n    intersectionRect: DOMRectReadOnly = Field(..., description='The IntersectionObserverEntry interface\'s read-only **`intersectionRect`** property is a contains the entire portion of the target element which is currently visible within the intersection root.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/intersectionRect)')\n    # The IntersectionObserverEntry interface's read-only **`isIntersecting`** property is a Boolean value which is `true` if the target element intersects with the intersection observer's root.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/isIntersecting)\n    isIntersecting: bool = Field(..., description='The IntersectionObserverEntry interface\'s read-only **`isIntersecting`** property is a Boolean value which is `true` if the target element intersects with the intersection observer\'s root.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/isIntersecting)')\n    # The IntersectionObserverEntry interface's read-only **`rootBounds`** property is a rectangle, offset by the IntersectionObserver.rootMargin if one is specified.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/rootBounds)\n    rootBounds: Union[DOMRectReadOnly, null] = Field(..., description='The IntersectionObserverEntry interface\'s read-only **`rootBounds`** property is a rectangle, offset by the IntersectionObserver.rootMargin if one is specified.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/rootBounds)')\n    # The IntersectionObserverEntry interface's read-only **`target`** property indicates which targeted root.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/target)\n    target: Element = Field(..., description='The IntersectionObserverEntry interface\'s read-only **`target`** property indicates which targeted root.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/target)')\n    # The IntersectionObserverEntry interface's read-only **`time`** property is a change occurred relative to the time at which the document was created.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/time)\n    time: DOMHighResTimeStamp = Field(..., description='The IntersectionObserverEntry interface\'s read-only **`time`** property is a change occurred relative to the time at which the document was created.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/time)')\n\n# The **`KHR_parallel_shader_compile`** extension is part of the WebGL API and enables a non-blocking poll operation, so that compile/link status availability (`COMPLETION_STATUS_KHR`) can be queried without potentially incurring stalls.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KHR_parallel_shader_compile)\nclass KHR_parallel_shader_compile(BaseModel):\n    COMPLETION_STATUS_KHR: 0x91B1 = Field(...)\n\n# **`KeyboardEvent`** objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent)\nclass KeyboardEvent(UIEvent):\n    # The **`KeyboardEvent.altKey`** read-only property is a boolean value that indicates if the <kbd>alt</kbd> key (<kbd>Option</kbd> or <kbd>⌥</kbd> on macOS) was pressed (`true`) or not (`false`) when the event occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/altKey)\n    altKey: bool = Field(..., description='The **`KeyboardEvent.altKey`** read-only property is a boolean value that indicates if the <kbd>alt</kbd> key (<kbd>Option</kbd> or <kbd>⌥</kbd> on macOS) was pressed (`true`) or not (`false`) when the event occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/altKey)')\n    # The **`charCode`** read-only property of the pressed during a Element/keypress_event event.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/charCode)\n    charCode: float = Field(..., description='The **`charCode`** read-only property of the pressed during a Element/keypress_event event.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/charCode)')\n    # The `KeyboardEvent.code` property represents a physical key on the keyboard (as opposed to the character generated by pressing the key).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/code)\n    code: str = Field(..., description='The `KeyboardEvent.code` property represents a physical key on the keyboard (as opposed to the character generated by pressing the key).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/code)')\n    # The **`KeyboardEvent.ctrlKey`** read-only property returns a boolean value that indicates if the <kbd>control</kbd> key was pressed (`true`) or not (`false`) when the event occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/ctrlKey)\n    ctrlKey: bool = Field(..., description='The **`KeyboardEvent.ctrlKey`** read-only property returns a boolean value that indicates if the <kbd>control</kbd> key was pressed (`true`) or not (`false`) when the event occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/ctrlKey)')\n    # The **`KeyboardEvent.isComposing`** read-only property returns a boolean value indicating if the event is fired within a composition session, i.e., after Element/compositionstart_event and before Element/compositionend_event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/isComposing)\n    isComposing: bool = Field(..., description='The **`KeyboardEvent.isComposing`** read-only property returns a boolean value indicating if the event is fired within a composition session, i.e., after Element/compositionstart_event and before Element/compositionend_event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/isComposing)')\n    # The KeyboardEvent interface's **`key`** read-only property returns the value of the key pressed by the user, taking into consideration the state of modifier keys such as <kbd>Shift</kbd> as well as the keyboard locale and layout.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/key)\n    key: str = Field(..., description='The KeyboardEvent interface\'s **`key`** read-only property returns the value of the key pressed by the user, taking into consideration the state of modifier keys such as <kbd>Shift</kbd> as well as the keyboard locale and layout.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/key)')\n    # The deprecated **`KeyboardEvent.keyCode`** read-only property represents a system and implementation dependent numerical code identifying the unmodified value of the pressed key.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/keyCode)\n    keyCode: float = Field(..., description='The deprecated **`KeyboardEvent.keyCode`** read-only property represents a system and implementation dependent numerical code identifying the unmodified value of the pressed key.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/keyCode)')\n    # The **`KeyboardEvent.location`** read-only property returns an `unsigned long` representing the location of the key on the keyboard or other input device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/location)\n    location: float = Field(..., description='The **`KeyboardEvent.location`** read-only property returns an `unsigned long` representing the location of the key on the keyboard or other input device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/location)')\n    # The **`KeyboardEvent.metaKey`** read-only property returning a boolean value that indicates if the <kbd>Meta</kbd> key was pressed (`true`) or not (`false`) when the event occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/metaKey)\n    metaKey: bool = Field(..., description='The **`KeyboardEvent.metaKey`** read-only property returning a boolean value that indicates if the <kbd>Meta</kbd> key was pressed (`true`) or not (`false`) when the event occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/metaKey)')\n    # The **`repeat`** read-only property of the `true` if the given key is being held down such that it is automatically repeating.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/repeat)\n    repeat: bool = Field(..., description='The **`repeat`** read-only property of the `true` if the given key is being held down such that it is automatically repeating.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/repeat)')\n    # The **`KeyboardEvent.shiftKey`** read-only property is a boolean value that indicates if the <kbd>shift</kbd> key was pressed (`true`) or not (`false`) when the event occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/shiftKey)\n    shiftKey: bool = Field(..., description='The **`KeyboardEvent.shiftKey`** read-only property is a boolean value that indicates if the <kbd>shift</kbd> key was pressed (`true`) or not (`false`) when the event occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/shiftKey)')\n    DOM_KEY_LOCATION_STANDARD: 0x00 = Field(...)\n    DOM_KEY_LOCATION_LEFT: 0x01 = Field(...)\n    DOM_KEY_LOCATION_RIGHT: 0x02 = Field(...)\n    DOM_KEY_LOCATION_NUMPAD: 0x03 = Field(...)\n\n# The **`KeyframeEffect`** interface of the Web Animations API lets us create sets of animatable properties and values, called **keyframes.** These can then be played using the Animation.Animation constructor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect)\nclass KeyframeEffect(AnimationEffect):\n    # The **`composite`** property of a KeyframeEffect resolves how an element's animation impacts its underlying property values.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/composite)\n    composite: CompositeOperation = Field(..., description='The **`composite`** property of a KeyframeEffect resolves how an element\'s animation impacts its underlying property values.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/composite)')\n    # The **`iterationComposite`** property of a KeyframeEffect resolves how the animation's property value changes accumulate or override each other upon each of the animation's iterations.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/iterationComposite)\n    iterationComposite: IterationCompositeOperation = Field(..., description='The **`iterationComposite`** property of a KeyframeEffect resolves how the animation\'s property value changes accumulate or override each other upon each of the animation\'s iterations.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/iterationComposite)')\n    # The **`pseudoElement`** property of a KeyframeEffect interface is a string representing the pseudo-element being animated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/pseudoElement)\n    pseudoElement: Union[str, null] = Field(..., description='The **`pseudoElement`** property of a KeyframeEffect interface is a string representing the pseudo-element being animated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/pseudoElement)')\n    # The **`target`** property of a KeyframeEffect interface represents the element or pseudo-element being animated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/target)\n    target: Union[Element, null] = Field(..., description='The **`target`** property of a KeyframeEffect interface represents the element or pseudo-element being animated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/target)')\n\n# The `LargestContentfulPaint` interface provides timing information about the largest image or text paint before user input on a web page.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint)\nclass LargestContentfulPaint(PerformanceEntry):\n    # The **`element`** read-only property of the LargestContentfulPaint interface returns an object representing the Element that is the largest contentful paint.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/element)\n    element: Union[Element, null] = Field(..., description='The **`element`** read-only property of the LargestContentfulPaint interface returns an object representing the Element that is the largest contentful paint.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/element)')\n    # The **`id`** read-only property of the LargestContentfulPaint interface returns the ID of the element that is the largest contentful paint.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/id)\n    id: str = Field(..., description='The **`id`** read-only property of the LargestContentfulPaint interface returns the ID of the element that is the largest contentful paint.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/id)')\n    # The **`loadTime`** read-only property of the LargestContentfulPaint interface returns the time that the element was loaded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/loadTime)\n    loadTime: DOMHighResTimeStamp = Field(..., description='The **`loadTime`** read-only property of the LargestContentfulPaint interface returns the time that the element was loaded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/loadTime)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/renderTime)\n    renderTime: DOMHighResTimeStamp = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/renderTime)')\n    # The **`size`** read-only property of the LargestContentfulPaint interface returns the intrinsic size of the element that is the largest contentful paint.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/size)\n    size: float = Field(..., description='The **`size`** read-only property of the LargestContentfulPaint interface returns the intrinsic size of the element that is the largest contentful paint.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/size)')\n    # The **`url`** read-only property of the LargestContentfulPaint interface returns the request URL of the element, if the element is an image.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/url)\n    url: str = Field(..., description='The **`url`** read-only property of the LargestContentfulPaint interface returns the request URL of the element, if the element is an image.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/url)')\n\nclass LinkStyle(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/sheet)\n    sheet: Union[CSSStyleSheet, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/sheet)')\n\n# The **`Location`** interface represents the location (URL) of the object it is linked to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location)\nclass Location(BaseModel):\n    # The **`ancestorOrigins`** read-only property of the Location interface is a static browsing contexts of the document associated with the given Location object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/ancestorOrigins)\n    ancestorOrigins: DOMStringList = Field(..., description='The **`ancestorOrigins`** read-only property of the Location interface is a static browsing contexts of the document associated with the given Location object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/ancestorOrigins)')\n    # The **`hash`** property of the Location interface is a string containing a `'#'` followed by the fragment identifier of the location URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/hash)\n    hash: str = Field(..., description='The **`hash`** property of the Location interface is a string containing a `\'#\'` followed by the fragment identifier of the location URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/hash)')\n    # The **`host`** property of the Location interface is a string containing the host, which is the Location.hostname, and then, if the port of the URL is nonempty, a `':'`, followed by the Location.port of the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/host)\n    host: str = Field(..., description='The **`host`** property of the Location interface is a string containing the host, which is the Location.hostname, and then, if the port of the URL is nonempty, a `\':\'`, followed by the Location.port of the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/host)')\n    # The **`hostname`** property of the Location interface is a string containing either the domain name or IP address of the location URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/hostname)\n    hostname: str = Field(..., description='The **`hostname`** property of the Location interface is a string containing either the domain name or IP address of the location URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/hostname)')\n    # The **`href`** property of the Location interface is a stringifier that returns a string containing the whole URL, and allows the href to be updated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/href)\n    href: str = Field(..., description='The **`href`** property of the Location interface is a stringifier that returns a string containing the whole URL, and allows the href to be updated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/href)')\n    # The **`origin`** read-only property of the Location interface returns a string containing the Unicode serialization of the origin of the location's URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/origin)\n    origin: str = Field(..., description='The **`origin`** read-only property of the Location interface returns a string containing the Unicode serialization of the origin of the location\'s URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/origin)')\n    # The **`pathname`** property of the Location interface is a string containing the path of the URL for the location.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/pathname)\n    pathname: str = Field(..., description='The **`pathname`** property of the Location interface is a string containing the path of the URL for the location.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/pathname)')\n    # The **`port`** property of the Location interface is a string containing the port number of the location's URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/port)\n    port: str = Field(..., description='The **`port`** property of the Location interface is a string containing the port number of the location\'s URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/port)')\n    # The **`protocol`** property of the Location interface is a string containing the protocol or scheme of the location's URL, including the final `':'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/protocol)\n    protocol: str = Field(..., description='The **`protocol`** property of the Location interface is a string containing the protocol or scheme of the location\'s URL, including the final `\':\'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/protocol)')\n    # The **`search`** property of the Location interface is a search string, also called a _query string_, that is a string containing a `'?'` followed by the parameters of the location's URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/search)\n    search: str = Field(..., description='The **`search`** property of the Location interface is a search string, also called a _query string_, that is a string containing a `\'?\'` followed by the parameters of the location\'s URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/search)')\n\n# The **`Lock`** interface of the Web Locks API provides the name and mode of a lock.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock)\nclass Lock(BaseModel):\n    # The **`mode`** read-only property of the Lock interface returns the access mode passed to LockManager.request() when the lock was requested.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock/mode)\n    mode: LockMode = Field(..., description='The **`mode`** read-only property of the Lock interface returns the access mode passed to LockManager.request() when the lock was requested.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock/mode)')\n    # The **`name`** read-only property of the Lock interface returns the _name_ passed to The name of a lock is passed by script when the lock is requested.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock/name)\n    name: str = Field(..., description='The **`name`** read-only property of the Lock interface returns the _name_ passed to The name of a lock is passed by script when the lock is requested.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock/name)')\n\n# The **`LockManager`** interface of the Web Locks API provides methods for requesting a new Lock object and querying for an existing `Lock` object.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/LockManager)\nclass LockManager(BaseModel):\n    pass\n\nclass MIDIAccessEventMap(BaseModel):\n    statechange: MIDIConnectionEvent = Field(...)\n\n# The **`MIDIAccess`** interface of the Web MIDI API provides methods for listing MIDI input and output devices, and obtaining access to those devices.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess)\nclass MIDIAccess(EventTarget):\n    # The **`inputs`** read-only property of the MIDIAccess interface provides access to any available MIDI input ports.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/inputs)\n    inputs: MIDIInputMap = Field(..., description='The **`inputs`** read-only property of the MIDIAccess interface provides access to any available MIDI input ports.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/inputs)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/statechange_event)\n    onstatechange: Union[((this: MIDIAccess, ev: MIDIConnectionEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/statechange_event)')\n    # The **`outputs`** read-only property of the MIDIAccess interface provides access to any available MIDI output ports.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/outputs)\n    outputs: MIDIOutputMap = Field(..., description='The **`outputs`** read-only property of the MIDIAccess interface provides access to any available MIDI output ports.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/outputs)')\n    # The **`sysexEnabled`** read-only property of the MIDIAccess interface indicates whether system exclusive support is enabled on the current MIDIAccess instance.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/sysexEnabled)\n    sysexEnabled: bool = Field(..., description='The **`sysexEnabled`** read-only property of the MIDIAccess interface indicates whether system exclusive support is enabled on the current MIDIAccess instance.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/sysexEnabled)')\n\n# The **`MIDIConnectionEvent`** interface of the Web MIDI API is the event passed to the MIDIAccess.statechange_event event of the MIDIAccess interface and the MIDIPort.statechange_event event of the MIDIPort interface.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIConnectionEvent)\nclass MIDIConnectionEvent(Event):\n    # The **`port`** read-only property of the MIDIConnectionEvent interface returns the port that has been disconnected or connected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIConnectionEvent/port)\n    port: Union[MIDIPort, null] = Field(..., description='The **`port`** read-only property of the MIDIConnectionEvent interface returns the port that has been disconnected or connected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIConnectionEvent/port)')\n\nclass MIDIInputEventMap(MIDIPortEventMap):\n    midimessage: MIDIMessageEvent = Field(...)\n\n# The **`MIDIInput`** interface of the Web MIDI API receives messages from a MIDI input port.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIInput)\nclass MIDIInput(MIDIPort):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIInput/midimessage_event)\n    onmidimessage: Union[((this: MIDIInput, ev: MIDIMessageEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIInput/midimessage_event)')\n\n# The **`MIDIInputMap`** read-only interface of the Web MIDI API provides the set of MIDI input ports that are currently available.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIInputMap)\nclass MIDIInputMap(BaseModel):\n    pass\n\n# The **`MIDIMessageEvent`** interface of the Web MIDI API represents the event passed to the MIDIInput.midimessage_event event of the MIDIInput interface.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIMessageEvent)\nclass MIDIMessageEvent(Event):\n    # The **`data`** read-only property of the MIDIMessageEvent interface returns the MIDI data bytes of a single MIDI message.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIMessageEvent/data)\n    data: Union[Uint8Array<ArrayBuffer>, null] = Field(..., description='The **`data`** read-only property of the MIDIMessageEvent interface returns the MIDI data bytes of a single MIDI message.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIMessageEvent/data)')\n\n# The **`MIDIOutput`** interface of the Web MIDI API provides methods to add messages to the queue of an output device, and to clear the queue of messages.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIOutput)\nclass MIDIOutput(MIDIPort):\n    pass\n\n# The **`MIDIOutputMap`** read-only interface of the Web MIDI API provides the set of MIDI output ports that are currently available.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIOutputMap)\nclass MIDIOutputMap(BaseModel):\n    pass\n\nclass MIDIPortEventMap(BaseModel):\n    statechange: MIDIConnectionEvent = Field(...)\n\n# The **`MIDIPort`** interface of the Web MIDI API represents a MIDI input or output port.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort)\nclass MIDIPort(EventTarget):\n    # The **`connection`** read-only property of the MIDIPort interface returns the connection state of the port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/connection)\n    connection: MIDIPortConnectionState = Field(..., description='The **`connection`** read-only property of the MIDIPort interface returns the connection state of the port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/connection)')\n    # The **`id`** read-only property of the MIDIPort interface returns the unique ID of the port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/id)\n    id: str = Field(..., description='The **`id`** read-only property of the MIDIPort interface returns the unique ID of the port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/id)')\n    # The **`manufacturer`** read-only property of the MIDIPort interface returns the manufacturer of the port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/manufacturer)\n    manufacturer: Union[str, null] = Field(..., description='The **`manufacturer`** read-only property of the MIDIPort interface returns the manufacturer of the port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/manufacturer)')\n    # The **`name`** read-only property of the MIDIPort interface returns the system name of the port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/name)\n    name: Union[str, null] = Field(..., description='The **`name`** read-only property of the MIDIPort interface returns the system name of the port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/name)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/statechange_event)\n    onstatechange: Union[((this: MIDIPort, ev: MIDIConnectionEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/statechange_event)')\n    # The **`state`** read-only property of the MIDIPort interface returns the state of the port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/state)\n    state: MIDIPortDeviceState = Field(..., description='The **`state`** read-only property of the MIDIPort interface returns the state of the port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/state)')\n    # The **`type`** read-only property of the MIDIPort interface returns the type of the port, indicating whether this is an input or output MIDI port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/type)\n    type: MIDIPortType = Field(..., description='The **`type`** read-only property of the MIDIPort interface returns the type of the port, indicating whether this is an input or output MIDI port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/type)')\n    # The **`version`** read-only property of the MIDIPort interface returns the version of the port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/version)\n    version: Union[str, null] = Field(..., description='The **`version`** read-only property of the MIDIPort interface returns the version of the port.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/version)')\n\nclass MathMLElementEventMap(ElementEventMap):\n    pass\n\n# The **`MathMLElement`** interface represents any MathML element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MathMLElement)\nclass MathMLElement(Element):\n    pass\n\n# The **`MediaCapabilities`** interface of the Media Capabilities API provides information about the decoding abilities of the device, system and browser.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaCapabilities)\nclass MediaCapabilities(BaseModel):\n    pass\n\n# The **`MediaDeviceInfo`** interface of the Media Capture and Streams API contains information that describes a single media input or output device.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo)\nclass MediaDeviceInfo(BaseModel):\n    # The **`deviceId`** read-only property of the MediaDeviceInfo interface returns a string that is an identifier for the represented device and is persisted across sessions.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/deviceId)\n    deviceId: str = Field(..., description='The **`deviceId`** read-only property of the MediaDeviceInfo interface returns a string that is an identifier for the represented device and is persisted across sessions.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/deviceId)')\n    # The **`groupId`** read-only property of the MediaDeviceInfo interface returns a string that is a group identifier.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/groupId)\n    groupId: str = Field(..., description='The **`groupId`** read-only property of the MediaDeviceInfo interface returns a string that is a group identifier.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/groupId)')\n    # The **`kind`** read-only property of the MediaDeviceInfo interface returns an enumerated value, that is either `'videoinput'`, `'audioinput'` or `'audiooutput'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/kind)\n    kind: MediaDeviceKind = Field(..., description='The **`kind`** read-only property of the MediaDeviceInfo interface returns an enumerated value, that is either `\'videoinput\'`, `\'audioinput\'` or `\'audiooutput\'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/kind)')\n    # The **`label`** read-only property of the MediaDeviceInfo interface returns a string describing this device (for example 'External USB Webcam').
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/label)\n    label: str = Field(..., description='The **`label`** read-only property of the MediaDeviceInfo interface returns a string describing this device (for example \'External USB Webcam\').
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/label)')\n\nclass MediaDevicesEventMap(BaseModel):\n    devicechange: Event = Field(...)\n\n# The **`MediaDevices`** interface of the Media Capture and Streams API provides access to connected media input devices like cameras and microphones, as well as screen sharing.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices)\nclass MediaDevices(EventTarget):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices/devicechange_event)\n    ondevicechange: Union[((this: MediaDevices, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices/devicechange_event)')\n\n# The `MediaElementAudioSourceNode` interface represents an audio source consisting of an HTML audio or video element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaElementAudioSourceNode)\nclass MediaElementAudioSourceNode(AudioNode):\n    # The MediaElementAudioSourceNode interface's read-only **`mediaElement`** property indicates the receiving audio.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaElementAudioSourceNode/mediaElement)\n    mediaElement: HTMLMediaElement = Field(..., description='The MediaElementAudioSourceNode interface\'s read-only **`mediaElement`** property indicates the receiving audio.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaElementAudioSourceNode/mediaElement)')\n\n# The **`MediaEncryptedEvent`** interface of the Encrypted Media Extensions API contains the information associated with an HTMLMediaElement/encrypted_event event sent to a HTMLMediaElement when some initialization data is encountered in the media.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent)\nclass MediaEncryptedEvent(Event):\n    # The read-only **`initData`** property of the MediaKeyMessageEvent returns the initialization data contained in this event, if any.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent/initData)\n    initData: Union[ArrayBuffer, null] = Field(..., description='The read-only **`initData`** property of the MediaKeyMessageEvent returns the initialization data contained in this event, if any.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent/initData)')\n    # The read-only **`initDataType`** property of the MediaKeyMessageEvent returns a case-sensitive string describing the type of the initialization data associated with this event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent/initDataType)\n    initDataType: str = Field(..., description='The read-only **`initDataType`** property of the MediaKeyMessageEvent returns a case-sensitive string describing the type of the initialization data associated with this event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent/initDataType)')\n\n# The **`MediaError`** interface represents an error which occurred while handling media in an HTML media element based on HTMLMediaElement, such as audio or video.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaError)\nclass MediaError(BaseModel):\n    # The read-only property **`MediaError.code`** returns a numeric value which represents the kind of error that occurred on a media element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaError/code)\n    code: float = Field(..., description='The read-only property **`MediaError.code`** returns a numeric value which represents the kind of error that occurred on a media element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaError/code)')\n    # The read-only property **`MediaError.message`** returns a human-readable string offering specific diagnostic details related to the error described by the `MediaError` object, or an empty string (`''`) if no diagnostic information can be determined or provided.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaError/message)\n    message: str = Field(..., description='The read-only property **`MediaError.message`** returns a human-readable string offering specific diagnostic details related to the error described by the `MediaError` object, or an empty string (`\'\'`) if no diagnostic information can be determined or provided.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaError/message)')\n    MEDIA_ERR_ABORTED: 1 = Field(...)\n    MEDIA_ERR_NETWORK: 2 = Field(...)\n    MEDIA_ERR_DECODE: 3 = Field(...)\n    MEDIA_ERR_SRC_NOT_SUPPORTED: 4 = Field(...)\n\n# The **`MediaKeyMessageEvent`** interface of the Encrypted Media Extensions API contains the content and related data when the content decryption module generates a message for the session.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent)\nclass MediaKeyMessageEvent(Event):\n    # The **`MediaKeyMessageEvent.message`** read-only property returns an ArrayBuffer with a message from the content decryption module.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent/message)\n    message: ArrayBuffer = Field(..., description='The **`MediaKeyMessageEvent.message`** read-only property returns an ArrayBuffer with a message from the content decryption module.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent/message)')\n    # The **`MediaKeyMessageEvent.messageType`** read-only property indicates the type of message.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent/messageType)\n    messageType: MediaKeyMessageType = Field(..., description='The **`MediaKeyMessageEvent.messageType`** read-only property indicates the type of message.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent/messageType)')\n\nclass MediaKeySessionEventMap(BaseModel):\n    keystatuseschange: Event = Field(...)\n    message: MediaKeyMessageEvent = Field(...)\n\n# The **`MediaKeySession`** interface of the Encrypted Media Extensions API represents a context for message exchange with a content decryption module (CDM).
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession)\nclass MediaKeySession(EventTarget):\n    # The **`closed`** read-only property of the MediaKeySession interface returns a Promise signaling when a MediaKeySession closes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/closed)\n    closed: Promise<MediaKeySessionClosedReason> = Field(..., description='The **`closed`** read-only property of the MediaKeySession interface returns a Promise signaling when a MediaKeySession closes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/closed)')\n    # The **`expiration`** read-only property of the MediaKeySession interface returns the time after which the keys in the current session can no longer be used to decrypt media data, or NaN if no such time exists.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/expiration)\n    expiration: float = Field(..., description='The **`expiration`** read-only property of the MediaKeySession interface returns the time after which the keys in the current session can no longer be used to decrypt media data, or NaN if no such time exists.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/expiration)')\n    # The **`keyStatuses`** read-only property of the MediaKeySession interface returns a reference to a read-only MediaKeyStatusMap of the current session's keys and their statuses.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/keyStatuses)\n    keyStatuses: MediaKeyStatusMap = Field(..., description='The **`keyStatuses`** read-only property of the MediaKeySession interface returns a reference to a read-only MediaKeyStatusMap of the current session\'s keys and their statuses.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/keyStatuses)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/keystatuseschange_event)\n    onkeystatuseschange: Union[((this: MediaKeySession, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/keystatuseschange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/message_event)\n    onmessage: Union[((this: MediaKeySession, ev: MediaKeyMessageEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/message_event)')\n    # The **`sessionId`** read-only property of the MediaKeySession interface contains a unique string generated by the content decryption module (CDM) for the current media object and its associated keys or licenses.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/sessionId)\n    sessionId: str = Field(..., description='The **`sessionId`** read-only property of the MediaKeySession interface contains a unique string generated by the content decryption module (CDM) for the current media object and its associated keys or licenses.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/sessionId)')\n\n# The **`MediaKeyStatusMap`** interface of the Encrypted Media Extensions API is a read-only map of media key statuses by key IDs.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap)\nclass MediaKeyStatusMap(BaseModel):\n    # The **`size`** read-only property of the MediaKeyStatusMap interface returns the number of key/value paIrs in the status map.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap/size)\n    size: float = Field(..., description='The **`size`** read-only property of the MediaKeyStatusMap interface returns the number of key/value paIrs in the status map.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap/size)')\n\n# The **`MediaKeySystemAccess`** interface of the Encrypted Media Extensions API provides access to a Key System for decryption and/or a content protection provider.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess)\nclass MediaKeySystemAccess(BaseModel):\n    # The **`keySystem`** read-only property of the MediaKeySystemAccess interface returns a string identifying the key system being used.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess/keySystem)\n    keySystem: str = Field(..., description='The **`keySystem`** read-only property of the MediaKeySystemAccess interface returns a string identifying the key system being used.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess/keySystem)')\n\n# The **`MediaKeys`** interface of Encrypted Media Extensions API represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeys)\nclass MediaKeys(BaseModel):\n    pass\n\n# The **`MediaList`** interface represents the media queries of a stylesheet, e.g., those set using a link element's `media` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList)\nclass MediaList(BaseModel):\n    # The read-only **`length`** property of the MediaList interface returns the number of media queries in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList/length)\n    length: float = Field(..., description='The read-only **`length`** property of the MediaList interface returns the number of media queries in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList/length)')\n    # The **`mediaText`** property of the MediaList interface is a stringifier that returns a string representing the `MediaList` as text, and also allows you to set a new `MediaList`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList/mediaText)\n    mediaText: str = Field(..., description='The **`mediaText`** property of the MediaList interface is a stringifier that returns a string representing the `MediaList` as text, and also allows you to set a new `MediaList`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList/mediaText)')\n\n# The **`MediaMetadata`** interface of the Media Session API allows a web page to provide rich media metadata for display in a platform UI.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata)\nclass MediaMetadata(BaseModel):\n    # The **`album`** property of the collection containing the media to be played.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/album)\n    album: str = Field(..., description='The **`album`** property of the collection containing the media to be played.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/album)')\n    # The **`artist`** property of the creator, etc., of the media to be played.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/artist)\n    artist: str = Field(..., description='The **`artist`** property of the creator, etc., of the media to be played.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/artist)')\n    # The **`artwork`** property of the objects representing images associated with playing media.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/artwork)\n    artwork: ReadonlyArray<MediaImage> = Field(..., description='The **`artwork`** property of the objects representing images associated with playing media.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/artwork)')\n    # The **`title`** property of the played.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/title)\n    title: str = Field(..., description='The **`title`** property of the played.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/title)')\n\nclass MediaQueryListEventMap(BaseModel):\n    change: MediaQueryListEvent = Field(...)\n\n# A **`MediaQueryList`** object stores information on a media query applied to a document, with support for both immediate and event-driven matching against the state of the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList)\nclass MediaQueryList(EventTarget):\n    # The **`matches`** read-only property of the `true` if the document currently matches the media query list, or `false` if not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/matches)\n    matches: bool = Field(..., description='The **`matches`** read-only property of the `true` if the document currently matches the media query list, or `false` if not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/matches)')\n    # The **`media`** read-only property of the serialized media query.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/media)\n    media: str = Field(..., description='The **`media`** read-only property of the serialized media query.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/media)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/change_event)\n    onchange: Union[((this: MediaQueryList, ev: MediaQueryListEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/change_event)')\n\n# The `MediaQueryListEvent` object stores information on the changes that have happened to a MediaQueryList object — instances are available as the event object on a function referenced by a MediaQueryList.change_event event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent)\nclass MediaQueryListEvent(Event):\n    # The **`matches`** read-only property of the `true` if the document currently matches the media query list, or `false` if not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent/matches)\n    matches: bool = Field(..., description='The **`matches`** read-only property of the `true` if the document currently matches the media query list, or `false` if not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent/matches)')\n    # The **`media`** read-only property of the a serialized media query.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent/media)\n    media: str = Field(..., description='The **`media`** read-only property of the a serialized media query.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent/media)')\n\nclass MediaRecorderEventMap(BaseModel):\n    dataavailable: BlobEvent = Field(...)\n    error: ErrorEvent = Field(...)\n    pause: Event = Field(...)\n    resume: Event = Field(...)\n    start: Event = Field(...)\n    stop: Event = Field(...)\n\n# The **`MediaRecorder`** interface of the MediaStream Recording API provides functionality to easily record media.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder)\nclass MediaRecorder(EventTarget):\n    # The **`audioBitsPerSecond`** read-only property of the MediaRecorder interface returns the audio encoding bit rate in use.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/audioBitsPerSecond)\n    audioBitsPerSecond: float = Field(..., description='The **`audioBitsPerSecond`** read-only property of the MediaRecorder interface returns the audio encoding bit rate in use.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/audioBitsPerSecond)')\n    # The **`mimeType`** read-only property of the MediaRecorder interface returns the MIME media type that was specified when creating the MediaRecorder object, or, if none was specified, which was chosen by the browser.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/mimeType)\n    mimeType: str = Field(..., description='The **`mimeType`** read-only property of the MediaRecorder interface returns the MIME media type that was specified when creating the MediaRecorder object, or, if none was specified, which was chosen by the browser.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/mimeType)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/dataavailable_event)\n    ondataavailable: Union[((this: MediaRecorder, ev: BlobEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/dataavailable_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/error_event)\n    onerror: Union[((this: MediaRecorder, ev: ErrorEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/error_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/pause_event)\n    onpause: Union[((this: MediaRecorder, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/pause_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/resume_event)\n    onresume: Union[((this: MediaRecorder, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/resume_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/start_event)\n    onstart: Union[((this: MediaRecorder, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/start_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/stop_event)\n    onstop: Union[((this: MediaRecorder, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/stop_event)')\n    # The **`state`** read-only property of the MediaRecorder interface returns the current state of the current `MediaRecorder` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/state)\n    state: RecordingState = Field(..., description='The **`state`** read-only property of the MediaRecorder interface returns the current state of the current `MediaRecorder` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/state)')\n    # The **`stream`** read-only property of the MediaRecorder interface returns the stream that was passed into the MediaRecorder.MediaRecorder constructor when the `MediaRecorder` was created.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/stream)\n    stream: MediaStream = Field(..., description='The **`stream`** read-only property of the MediaRecorder interface returns the stream that was passed into the MediaRecorder.MediaRecorder constructor when the `MediaRecorder` was created.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/stream)')\n    # The **`videoBitsPerSecond`** read-only property of the MediaRecorder interface returns the video encoding bit rate in use.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/videoBitsPerSecond)\n    videoBitsPerSecond: float = Field(..., description='The **`videoBitsPerSecond`** read-only property of the MediaRecorder interface returns the video encoding bit rate in use.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/videoBitsPerSecond)')\n\n# The **`MediaSession`** interface of the Media Session API allows a web page to provide custom behaviors for standard media playback interactions, and to report metadata that can be sent by the user agent to the device or operating system for presentation in standardized user interface elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession)\nclass MediaSession(BaseModel):\n    # The **`metadata`** property of the MediaSession interface contains a MediaMetadata object providing descriptive information about the currently playing media, or `null` if the metadata has not been set.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/metadata)\n    metadata: Union[MediaMetadata, null] = Field(..., description='The **`metadata`** property of the MediaSession interface contains a MediaMetadata object providing descriptive information about the currently playing media, or `null` if the metadata has not been set.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/metadata)')\n    # The **`playbackState`** property of the playing or paused.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/playbackState)\n    playbackState: MediaSessionPlaybackState = Field(..., description='The **`playbackState`** property of the playing or paused.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/playbackState)')\n\nclass MediaSourceEventMap(BaseModel):\n    sourceclose: Event = Field(...)\n    sourceended: Event = Field(...)\n    sourceopen: Event = Field(...)\n\n# The **`MediaSource`** interface of the Media Source Extensions API represents a source of media data for an HTMLMediaElement object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource)\nclass MediaSource(EventTarget):\n    # The **`activeSourceBuffers`** read-only property of the containing a subset of the SourceBuffer objects contained within providing the selected video track, enabled audio tracks, and shown/hidden text tracks.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/activeSourceBuffers)\n    activeSourceBuffers: SourceBufferList = Field(..., description='The **`activeSourceBuffers`** read-only property of the containing a subset of the SourceBuffer objects contained within providing the selected video track, enabled audio tracks, and shown/hidden text tracks.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/activeSourceBuffers)')\n    # The **`duration`** property of the MediaSource interface gets and sets the duration of the current media being presented.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/duration)\n    duration: float = Field(..., description='The **`duration`** property of the MediaSource interface gets and sets the duration of the current media being presented.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/duration)')\n    onsourceclose: Union[((this: MediaSource, ev: Event) => any), null] = Field(...)\n    onsourceended: Union[((this: MediaSource, ev: Event) => any), null] = Field(...)\n    onsourceopen: Union[((this: MediaSource, ev: Event) => any), null] = Field(...)\n    # The **`readyState`** read-only property of the current `MediaSource`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/readyState)\n    readyState: ReadyState = Field(..., description='The **`readyState`** read-only property of the current `MediaSource`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/readyState)')\n    # The **`sourceBuffers`** read-only property of the containing the list of SourceBuffer objects associated with this `MediaSource`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceBuffers)\n    sourceBuffers: SourceBufferList = Field(..., description='The **`sourceBuffers`** read-only property of the containing the list of SourceBuffer objects associated with this `MediaSource`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceBuffers)')\n\n# The **`MediaSourceHandle`** interface of the Media Source Extensions API is a proxy for a MediaSource that can be transferred from a dedicated worker back to the main thread and attached to a media element via its HTMLMediaElement.srcObject property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSourceHandle)\nclass MediaSourceHandle(BaseModel):\n    pass\n\nclass MediaStreamEventMap(BaseModel):\n    addtrack: MediaStreamTrackEvent = Field(...)\n    removetrack: MediaStreamTrackEvent = Field(...)\n\n# The **`MediaStream`** interface of the Media Capture and Streams API represents a stream of media content.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream)\nclass MediaStream(EventTarget):\n    # The **`active`** read-only property of the `true` if the stream is currently active; otherwise, it returns `false`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/active)\n    active: bool = Field(..., description='The **`active`** read-only property of the `true` if the stream is currently active; otherwise, it returns `false`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/active)')\n    # The **`id`** read-only property of the MediaStream interface is a string containing 36 characters denoting a unique identifier (GUID) for the object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/id)\n    id: str = Field(..., description='The **`id`** read-only property of the MediaStream interface is a string containing 36 characters denoting a unique identifier (GUID) for the object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/id)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/addtrack_event)\n    onaddtrack: Union[((this: MediaStream, ev: MediaStreamTrackEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/addtrack_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/removetrack_event)\n    onremovetrack: Union[((this: MediaStream, ev: MediaStreamTrackEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/removetrack_event)')\n\n# The `MediaStreamAudioDestinationNode` interface represents an audio destination consisting of a WebRTC MediaStream with a single `AudioMediaStreamTrack`, which can be used in a similar way to a `MediaStream` obtained from MediaDevices.getUserMedia.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioDestinationNode)\nclass MediaStreamAudioDestinationNode(AudioNode):\n    # The `stream` property of the AudioContext interface represents a MediaStream containing a single audio MediaStreamTrack with the same number of channels as the node itself.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioDestinationNode/stream)\n    stream: MediaStream = Field(..., description='The `stream` property of the AudioContext interface represents a MediaStream containing a single audio MediaStreamTrack with the same number of channels as the node itself.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioDestinationNode/stream)')\n\n# The **`MediaStreamAudioSourceNode`** interface is a type of AudioNode which operates as an audio source whose media is received from a MediaStream obtained using the WebRTC or Media Capture and Streams APIs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioSourceNode)\nclass MediaStreamAudioSourceNode(AudioNode):\n    # The MediaStreamAudioSourceNode interface's read-only **`mediaStream`** property indicates the receiving audio.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioSourceNode/mediaStream)\n    mediaStream: MediaStream = Field(..., description='The MediaStreamAudioSourceNode interface\'s read-only **`mediaStream`** property indicates the receiving audio.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioSourceNode/mediaStream)')\n\nclass MediaStreamTrackEventMap(BaseModel):\n    ended: Event = Field(...)\n    mute: Event = Field(...)\n    unmute: Event = Field(...)\n\n# The **`MediaStreamTrack`** interface of the Media Capture and Streams API represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack)\nclass MediaStreamTrack(EventTarget):\n    # The **`contentHint`** property of the MediaStreamTrack interface is a string that hints at the type of content the track contains.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/contentHint)\n    contentHint: str = Field(..., description='The **`contentHint`** property of the MediaStreamTrack interface is a string that hints at the type of content the track contains.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/contentHint)')\n    # The **`enabled`** property of the `true` if the track is allowed to render the source stream or `false` if it is not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/enabled)\n    enabled: bool = Field(..., description='The **`enabled`** property of the `true` if the track is allowed to render the source stream or `false` if it is not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/enabled)')\n    # The **`id`** read-only property of the MediaStreamTrack interface returns a string containing a unique identifier (GUID) for the track, which is generated by the user agent.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/id)\n    id: str = Field(..., description='The **`id`** read-only property of the MediaStreamTrack interface returns a string containing a unique identifier (GUID) for the track, which is generated by the user agent.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/id)')\n    # The **`kind`** read-only property of the MediaStreamTrack interface returns a string set to `'audio'` if the track is an audio track and to `'video'` if it is a video track.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/kind)\n    kind: str = Field(..., description='The **`kind`** read-only property of the MediaStreamTrack interface returns a string set to `\'audio\'` if the track is an audio track and to `\'video\'` if it is a video track.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/kind)')\n    # The **`label`** read-only property of the MediaStreamTrack interface returns a string containing a user agent-assigned label that identifies the track source, as in `'internal microphone'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/label)\n    label: str = Field(..., description='The **`label`** read-only property of the MediaStreamTrack interface returns a string containing a user agent-assigned label that identifies the track source, as in `\'internal microphone\'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/label)')\n    # The **`muted`** read-only property of the indicating whether or not the track is currently unable to provide media output.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/muted)\n    muted: bool = Field(..., description='The **`muted`** read-only property of the indicating whether or not the track is currently unable to provide media output.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/muted)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/ended_event)\n    onended: Union[((this: MediaStreamTrack, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/ended_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/mute_event)\n    onmute: Union[((this: MediaStreamTrack, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/mute_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/unmute_event)\n    onunmute: Union[((this: MediaStreamTrack, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/unmute_event)')\n    # The **`readyState`** read-only property of the MediaStreamTrack interface returns an enumerated value giving the status of the track.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/readyState)\n    readyState: MediaStreamTrackState = Field(..., description='The **`readyState`** read-only property of the MediaStreamTrack interface returns an enumerated value giving the status of the track.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/readyState)')\n\n# The **`MediaStreamTrackEvent`** interface of the Media Capture and Streams API represents events which indicate that a MediaStream has had tracks added to or removed from the stream through calls to Media Capture and Streams API methods.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrackEvent)\nclass MediaStreamTrackEvent(Event):\n    # The **`track`** read-only property of the MediaStreamTrackEvent interface returns the MediaStreamTrack associated with this event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrackEvent/track)\n    track: MediaStreamTrack = Field(..., description='The **`track`** read-only property of the MediaStreamTrackEvent interface returns the MediaStreamTrack associated with this event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrackEvent/track)')\n\n# The **`MessageChannel`** interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two MessagePort properties.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel)\nclass MessageChannel(BaseModel):\n    # The **`port1`** read-only property of the the port attached to the context that originated the channel.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel/port1)\n    port1: MessagePort = Field(..., description='The **`port1`** read-only property of the the port attached to the context that originated the channel.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel/port1)')\n    # The **`port2`** read-only property of the the port attached to the context at the other end of the channel, which the message is initially sent to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel/port2)\n    port2: MessagePort = Field(..., description='The **`port2`** read-only property of the the port attached to the context at the other end of the channel, which the message is initially sent to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel/port2)')\n\n# The **`MessageEvent`** interface represents a message received by a target object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent)\nclass MessageEvent(Event):\n    # The **`data`** read-only property of the The data sent by the message emitter; this can be any data type, depending on what originated this event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/data)\n    data: T = Field(..., description='The **`data`** read-only property of the The data sent by the message emitter; this can be any data type, depending on what originated this event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/data)')\n    # The **`lastEventId`** read-only property of the unique ID for the event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/lastEventId)\n    lastEventId: str = Field(..., description='The **`lastEventId`** read-only property of the unique ID for the event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/lastEventId)')\n    # The **`origin`** read-only property of the origin of the message emitter.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/origin)\n    origin: str = Field(..., description='The **`origin`** read-only property of the origin of the message emitter.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/origin)')\n    # The **`ports`** read-only property of the containing all MessagePort objects sent with the message, in order.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/ports)\n    ports: ReadonlyArray<MessagePort> = Field(..., description='The **`ports`** read-only property of the containing all MessagePort objects sent with the message, in order.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/ports)')\n    # The **`source`** read-only property of the a WindowProxy, MessagePort, or a `MessageEventSource` (which can be a WindowProxy, message emitter.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/source)\n    source: Union[MessageEventSource, null] = Field(..., description='The **`source`** read-only property of the a WindowProxy, MessagePort, or a `MessageEventSource` (which can be a WindowProxy, message emitter.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/source)')\n\nclass MessageEventTargetEventMap(BaseModel):\n    message: MessageEvent = Field(...)\n    messageerror: MessageEvent = Field(...)\n\nclass MessageEventTarget(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/message_event)\n    onmessage: Union[((this: T, ev: MessageEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/message_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/messageerror_event)\n    onmessageerror: Union[((this: T, ev: MessageEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/messageerror_event)')\n\nclass MessagePortEventMap(MessageEventTargetEventMap):\n    message: MessageEvent = Field(...)\n    messageerror: MessageEvent = Field(...)\n\n# The **`MessagePort`** interface of the Channel Messaging API represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort)\nclass MessagePort(EventTarget):\n    pass\n\n# The **`MimeType`** interface provides contains information about a MIME type associated with a particular plugin.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MimeType)\nclass MimeType(BaseModel):\n    # Returns the MIME type's description.
@deprecated\n    description: str = Field(..., description='Returns the MIME type\'s description.
@deprecated')\n    # Returns the Plugin object that implements this MIME type.
@deprecated\n    enabledPlugin: Plugin = Field(..., description='Returns the Plugin object that implements this MIME type.
@deprecated')\n    # Returns the MIME type's typical file extensions, in a comma-separated list.
@deprecated\n    suffixes: str = Field(..., description='Returns the MIME type\'s typical file extensions, in a comma-separated list.
@deprecated')\n    # Returns the MIME type.
@deprecated\n    type: str = Field(..., description='Returns the MIME type.
@deprecated')\n\n# The **`MimeTypeArray`** interface returns an array of MimeType instances, each of which contains information about a supported browser plugins.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MimeTypeArray)\nclass MimeTypeArray(BaseModel):\n    # @deprecated\n    length: float = Field(..., description='@deprecated')\n\n# The **`MouseEvent`** interface represents events that occur due to the user interacting with a pointing device (such as a mouse).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent)\nclass MouseEvent(UIEvent):\n    # The **`MouseEvent.altKey`** read-only property is a boolean value that indicates whether the <kbd>alt</kbd> key was pressed or not when a given mouse event occurs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/altKey)\n    altKey: bool = Field(..., description='The **`MouseEvent.altKey`** read-only property is a boolean value that indicates whether the <kbd>alt</kbd> key was pressed or not when a given mouse event occurs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/altKey)')\n    # The **`MouseEvent.button`** read-only property indicates which button was pressed or released on the mouse to trigger the event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/button)\n    button: float = Field(..., description='The **`MouseEvent.button`** read-only property indicates which button was pressed or released on the mouse to trigger the event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/button)')\n    # The **`MouseEvent.buttons`** read-only property indicates which buttons are pressed on the mouse (or other input device) when a mouse event is triggered.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/buttons)\n    buttons: float = Field(..., description='The **`MouseEvent.buttons`** read-only property indicates which buttons are pressed on the mouse (or other input device) when a mouse event is triggered.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/buttons)')\n    # The **`clientX`** read-only property of the MouseEvent interface provides the horizontal coordinate within the application's viewport at which the event occurred (as opposed to the coordinate within the page).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/clientX)\n    clientX: float = Field(..., description='The **`clientX`** read-only property of the MouseEvent interface provides the horizontal coordinate within the application\'s viewport at which the event occurred (as opposed to the coordinate within the page).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/clientX)')\n    # The **`clientY`** read-only property of the MouseEvent interface provides the vertical coordinate within the application's viewport at which the event occurred (as opposed to the coordinate within the page).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/clientY)\n    clientY: float = Field(..., description='The **`clientY`** read-only property of the MouseEvent interface provides the vertical coordinate within the application\'s viewport at which the event occurred (as opposed to the coordinate within the page).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/clientY)')\n    # The **`MouseEvent.ctrlKey`** read-only property is a boolean value that indicates whether the <kbd>ctrl</kbd> key was pressed or not when a given mouse event occurs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/ctrlKey)\n    ctrlKey: bool = Field(..., description='The **`MouseEvent.ctrlKey`** read-only property is a boolean value that indicates whether the <kbd>ctrl</kbd> key was pressed or not when a given mouse event occurs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/ctrlKey)')\n    # The **`MouseEvent.layerX`** read-only property returns the horizontal coordinate of the event relative to the current layer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/layerX)\n    layerX: float = Field(..., description='The **`MouseEvent.layerX`** read-only property returns the horizontal coordinate of the event relative to the current layer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/layerX)')\n    # The **`MouseEvent.layerY`** read-only property returns the vertical coordinate of the event relative to the current layer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/layerY)\n    layerY: float = Field(..., description='The **`MouseEvent.layerY`** read-only property returns the vertical coordinate of the event relative to the current layer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/layerY)')\n    # The **`MouseEvent.metaKey`** read-only property is a boolean value that indicates whether the <kbd>meta</kbd> key was pressed or not when a given mouse event occurs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/metaKey)\n    metaKey: bool = Field(..., description='The **`MouseEvent.metaKey`** read-only property is a boolean value that indicates whether the <kbd>meta</kbd> key was pressed or not when a given mouse event occurs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/metaKey)')\n    # The **`movementX`** read-only property of the MouseEvent interface provides the difference in the X coordinate of the mouse pointer between the given event and the previous Element/mousemove_event event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/movementX)\n    movementX: float = Field(..., description='The **`movementX`** read-only property of the MouseEvent interface provides the difference in the X coordinate of the mouse pointer between the given event and the previous Element/mousemove_event event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/movementX)')\n    # The **`movementY`** read-only property of the MouseEvent interface provides the difference in the Y coordinate of the mouse pointer between the given event and the previous Element/mousemove_event event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/movementY)\n    movementY: float = Field(..., description='The **`movementY`** read-only property of the MouseEvent interface provides the difference in the Y coordinate of the mouse pointer between the given event and the previous Element/mousemove_event event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/movementY)')\n    # The **`offsetX`** read-only property of the MouseEvent interface provides the offset in the X coordinate of the mouse pointer between that event and the padding edge of the target node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/offsetX)\n    offsetX: float = Field(..., description='The **`offsetX`** read-only property of the MouseEvent interface provides the offset in the X coordinate of the mouse pointer between that event and the padding edge of the target node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/offsetX)')\n    # The **`offsetY`** read-only property of the MouseEvent interface provides the offset in the Y coordinate of the mouse pointer between that event and the padding edge of the target node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/offsetY)\n    offsetY: float = Field(..., description='The **`offsetY`** read-only property of the MouseEvent interface provides the offset in the Y coordinate of the mouse pointer between that event and the padding edge of the target node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/offsetY)')\n    # The **`pageX`** read-only property of the MouseEvent interface returns the X (horizontal) coordinate (in pixels) at which the mouse was clicked, relative to the left edge of the entire document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/pageX)\n    pageX: float = Field(..., description='The **`pageX`** read-only property of the MouseEvent interface returns the X (horizontal) coordinate (in pixels) at which the mouse was clicked, relative to the left edge of the entire document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/pageX)')\n    # The **`pageY`** read-only property of the MouseEvent interface returns the Y (vertical) coordinate (in pixels) at which the mouse was clicked, relative to the top edge of the entire document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/pageY)\n    pageY: float = Field(..., description='The **`pageY`** read-only property of the MouseEvent interface returns the Y (vertical) coordinate (in pixels) at which the mouse was clicked, relative to the top edge of the entire document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/pageY)')\n    # The **`MouseEvent.relatedTarget`** read-only property is the secondary target for the mouse event, if there is one.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/relatedTarget)\n    relatedTarget: Union[EventTarget, null] = Field(..., description='The **`MouseEvent.relatedTarget`** read-only property is the secondary target for the mouse event, if there is one.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/relatedTarget)')\n    # The **`screenX`** read-only property of the MouseEvent interface provides the horizontal coordinate (offset) of the mouse pointer in screen coordinates.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/screenX)\n    screenX: float = Field(..., description='The **`screenX`** read-only property of the MouseEvent interface provides the horizontal coordinate (offset) of the mouse pointer in screen coordinates.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/screenX)')\n    # The **`screenY`** read-only property of the MouseEvent interface provides the vertical coordinate (offset) of the mouse pointer in screen coordinates.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/screenY)\n    screenY: float = Field(..., description='The **`screenY`** read-only property of the MouseEvent interface provides the vertical coordinate (offset) of the mouse pointer in screen coordinates.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/screenY)')\n    # The **`MouseEvent.shiftKey`** read-only property is a boolean value that indicates whether the <kbd>shift</kbd> key was pressed or not when a given mouse event occurs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/shiftKey)\n    shiftKey: bool = Field(..., description='The **`MouseEvent.shiftKey`** read-only property is a boolean value that indicates whether the <kbd>shift</kbd> key was pressed or not when a given mouse event occurs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/shiftKey)')\n    # The **`MouseEvent.x`** property is an alias for the MouseEvent.clientX property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/x)\n    x: float = Field(..., description='The **`MouseEvent.x`** property is an alias for the MouseEvent.clientX property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/x)')\n    # The **`MouseEvent.y`** property is an alias for the MouseEvent.clientY property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/y)\n    y: float = Field(..., description='The **`MouseEvent.y`** property is an alias for the MouseEvent.clientY property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/y)')\n\n# The **`MutationObserver`** interface provides the ability to watch for changes being made to the DOM tree.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationObserver)\nclass MutationObserver(BaseModel):\n    pass\n\n# The **`MutationRecord`** is a read-only interface that represents an individual DOM mutation observed by a MutationObserver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord)\nclass MutationRecord(BaseModel):\n    # The MutationRecord read-only property **`addedNodes`** is a NodeList of nodes added to a target node by a mutation observed with a MutationObserver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/addedNodes)\n    addedNodes: NodeList = Field(..., description='The MutationRecord read-only property **`addedNodes`** is a NodeList of nodes added to a target node by a mutation observed with a MutationObserver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/addedNodes)')\n    # The MutationRecord read-only property **`attributeName`** contains the name of a changed attribute belonging to a node that is observed by a MutationObserver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/attributeName)\n    attributeName: Union[str, null] = Field(..., description='The MutationRecord read-only property **`attributeName`** contains the name of a changed attribute belonging to a node that is observed by a MutationObserver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/attributeName)')\n    # The MutationRecord read-only property **`attributeNamespace`** is the namespace of the mutated attribute in the MutationRecord observed by a MutationObserver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/attributeNamespace)\n    attributeNamespace: Union[str, null] = Field(..., description='The MutationRecord read-only property **`attributeNamespace`** is the namespace of the mutated attribute in the MutationRecord observed by a MutationObserver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/attributeNamespace)')\n    # The MutationRecord read-only property **`nextSibling`** is the next sibling of an added or removed child node of the `target` of a MutationObserver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/nextSibling)\n    nextSibling: Union[Node, null] = Field(..., description='The MutationRecord read-only property **`nextSibling`** is the next sibling of an added or removed child node of the `target` of a MutationObserver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/nextSibling)')\n    # The MutationRecord read-only property **`oldValue`** contains the character data or attribute value of an observed node before it was changed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/oldValue)\n    oldValue: Union[str, null] = Field(..., description='The MutationRecord read-only property **`oldValue`** contains the character data or attribute value of an observed node before it was changed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/oldValue)')\n    # The MutationRecord read-only property **`previousSibling`** is the previous sibling of an added or removed child node of the `target` of a MutationObserver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/previousSibling)\n    previousSibling: Union[Node, null] = Field(..., description='The MutationRecord read-only property **`previousSibling`** is the previous sibling of an added or removed child node of the `target` of a MutationObserver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/previousSibling)')\n    # The MutationRecord read-only property **`removedNodes`** is a NodeList of nodes removed from a target node by a mutation observed with a MutationObserver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/removedNodes)\n    removedNodes: NodeList = Field(..., description='The MutationRecord read-only property **`removedNodes`** is a NodeList of nodes removed from a target node by a mutation observed with a MutationObserver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/removedNodes)')\n    # The MutationRecord read-only property **`target`** is the target (i.e., the mutated/changed node) of a mutation observed with a MutationObserver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/target)\n    target: Node = Field(..., description='The MutationRecord read-only property **`target`** is the target (i.e., the mutated/changed node) of a mutation observed with a MutationObserver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/target)')\n    # The MutationRecord read-only property **`type`** is the type of the MutationRecord observed by a MutationObserver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/type)\n    type: MutationRecordType = Field(..., description='The MutationRecord read-only property **`type`** is the type of the MutationRecord observed by a MutationObserver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/type)')\n\n# The **`NamedNodeMap`** interface represents a collection of Attr objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap)\nclass NamedNodeMap(BaseModel):\n    # The read-only **`length`** property of the NamedNodeMap interface is the number of objects stored in the map.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/length)\n    length: float = Field(..., description='The read-only **`length`** property of the NamedNodeMap interface is the number of objects stored in the map.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/length)')\n\n# The **`NavigationActivation`** interface of the Navigation API represents a recent cross-document navigation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationActivation)\nclass NavigationActivation(BaseModel):\n    # The **`entry`** read-only property of the NavigationActivation interface contains a NavigationHistoryEntry object representing the history entry for the inbound ('to') document in the navigation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationActivation/entry)\n    entry: NavigationHistoryEntry = Field(..., description='The **`entry`** read-only property of the NavigationActivation interface contains a NavigationHistoryEntry object representing the history entry for the inbound (\'to\') document in the navigation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationActivation/entry)')\n    # The **`from`** read-only property of the NavigationActivation interface contains a NavigationHistoryEntry object representing the history entry for the outgoing ('from') document in the navigation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationActivation/from)\n    from: Union[NavigationHistoryEntry, null] = Field(..., description='The **`from`** read-only property of the NavigationActivation interface contains a NavigationHistoryEntry object representing the history entry for the outgoing (\'from\') document in the navigation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationActivation/from)')\n    # The **`navigationType`** read-only property of the NavigationActivation interface contains a string indicating the type of navigation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationActivation/navigationType)\n    navigationType: NavigationType = Field(..., description='The **`navigationType`** read-only property of the NavigationActivation interface contains a string indicating the type of navigation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationActivation/navigationType)')\n\nclass NavigationHistoryEntryEventMap(BaseModel):\n    dispose: Event = Field(...)\n\n# The **`NavigationHistoryEntry`** interface of the Navigation API represents a single navigation history entry.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry)\nclass NavigationHistoryEntry(EventTarget):\n    # The **`id`** read-only property of the NavigationHistoryEntry interface returns the `id` of the history entry, or an empty string if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/id)\n    id: str = Field(..., description='The **`id`** read-only property of the NavigationHistoryEntry interface returns the `id` of the history entry, or an empty string if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/id)')\n    # The **`index`** read-only property of the NavigationHistoryEntry interface returns the index of the history entry in the history entries list (that is, the list returned by Navigation.entries()), or `-1` if the entry does not appear in the list or if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/index)\n    index: float = Field(..., description='The **`index`** read-only property of the NavigationHistoryEntry interface returns the index of the history entry in the history entries list (that is, the list returned by Navigation.entries()), or `-1` if the entry does not appear in the list or if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/index)')\n    # The **`key`** read-only property of the NavigationHistoryEntry interface returns the `key` of the history entry, or an empty string if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/key)\n    key: str = Field(..., description='The **`key`** read-only property of the NavigationHistoryEntry interface returns the `key` of the history entry, or an empty string if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/key)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/dispose_event)\n    ondispose: Union[((this: NavigationHistoryEntry, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/dispose_event)')\n    # The **`sameDocument`** read-only property of the NavigationHistoryEntry interface returns `true` if this history entry is for the same `document` as the current Document value and current document is fully active, or `false` otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/sameDocument)\n    sameDocument: bool = Field(..., description='The **`sameDocument`** read-only property of the NavigationHistoryEntry interface returns `true` if this history entry is for the same `document` as the current Document value and current document is fully active, or `false` otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/sameDocument)')\n    # The **`url`** read-only property of the NavigationHistoryEntry interface returns the absolute URL of this history entry.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/url)\n    url: Union[str, null] = Field(..., description='The **`url`** read-only property of the NavigationHistoryEntry interface returns the absolute URL of this history entry.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/url)')\n\n# The **`NavigationPreloadManager`** interface of the Service Worker API provides methods for managing the preloading of resources in parallel with service worker bootup.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager)\nclass NavigationPreloadManager(BaseModel):\n    pass\n\n# The **`Navigator`** interface represents the state and the identity of the user agent.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator)\nclass Navigator(NavigatorAutomationInformation):\n    # The **`clipboard`** read-only property of the Navigator interface returns a Clipboard object used to read and write the clipboard's contents.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/clipboard)\n    clipboard: Clipboard = Field(..., description='The **`clipboard`** read-only property of the Navigator interface returns a Clipboard object used to read and write the clipboard\'s contents.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/clipboard)')\n    # The **`credentials`** read-only property of the Navigator interface returns the CredentialsContainer object associated with the current document, which exposes methods to request credentials.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/credentials)\n    credentials: CredentialsContainer = Field(..., description='The **`credentials`** read-only property of the Navigator interface returns the CredentialsContainer object associated with the current document, which exposes methods to request credentials.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/credentials)')\n    doNotTrack: Union[str, null] = Field(...)\n    # The **`Navigator.geolocation`** read-only property returns a device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/geolocation)\n    geolocation: Geolocation = Field(..., description='The **`Navigator.geolocation`** read-only property returns a device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/geolocation)')\n    # The **`login`** read-only property of the Navigator interface provides access to the browser's NavigatorLogin object, which a federated identity provider (IdP) can use to set its login status when a user signs into or out of the IdP.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/login)\n    login: NavigatorLogin = Field(..., description='The **`login`** read-only property of the Navigator interface provides access to the browser\'s NavigatorLogin object, which a federated identity provider (IdP) can use to set its login status when a user signs into or out of the IdP.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/login)')\n    # The **`maxTouchPoints`** read-only property of the contact points that are supported by the current device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/maxTouchPoints)\n    maxTouchPoints: float = Field(..., description='The **`maxTouchPoints`** read-only property of the contact points that are supported by the current device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/maxTouchPoints)')\n    # The **`mediaCapabilities`** read-only property of the Navigator interface references a MediaCapabilities object that can expose information about the decoding and encoding capabilities for a given media format and output capabilities.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mediaCapabilities)\n    mediaCapabilities: MediaCapabilities = Field(..., description='The **`mediaCapabilities`** read-only property of the Navigator interface references a MediaCapabilities object that can expose information about the decoding and encoding capabilities for a given media format and output capabilities.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mediaCapabilities)')\n    # The **`mediaDevices`** read-only property of the Navigator interface returns a MediaDevices object, which provides access to connected media input devices like cameras and microphones, as well as screen sharing.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mediaDevices)\n    mediaDevices: MediaDevices = Field(..., description='The **`mediaDevices`** read-only property of the Navigator interface returns a MediaDevices object, which provides access to connected media input devices like cameras and microphones, as well as screen sharing.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mediaDevices)')\n    # The **`mediaSession`** read-only property of the Navigator interface returns a MediaSession object that can be used to share with the browser metadata and other information about the current playback state of media being handled by a document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mediaSession)\n    mediaSession: MediaSession = Field(..., description='The **`mediaSession`** read-only property of the Navigator interface returns a MediaSession object that can be used to share with the browser metadata and other information about the current playback state of media being handled by a document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mediaSession)')\n    # The **`permissions`** read-only property of the Navigator interface returns a status of APIs covered by the Permissions API.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/permissions)\n    permissions: Permissions = Field(..., description='The **`permissions`** read-only property of the Navigator interface returns a status of APIs covered by the Permissions API.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/permissions)')\n    # The **`serviceWorker`** read-only property of the Navigator interface returns the ServiceWorkerContainer object for the associated document, which provides access to registration, removal, upgrade, and communication with the ServiceWorker.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/serviceWorker)\n    serviceWorker: ServiceWorkerContainer = Field(..., description='The **`serviceWorker`** read-only property of the Navigator interface returns the ServiceWorkerContainer object for the associated document, which provides access to registration, removal, upgrade, and communication with the ServiceWorker.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/serviceWorker)')\n    # The read-only **`userActivation`** property of the Navigator interface returns a UserActivation object which contains information about the current window's user activation state.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/userActivation)\n    userActivation: UserActivation = Field(..., description='The read-only **`userActivation`** property of the Navigator interface returns a UserActivation object which contains information about the current window\'s user activation state.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/userActivation)')\n    # The **`wakeLock`** read-only property of the Navigator interface returns a WakeLock interface that allows a document to acquire a screen wake lock.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/wakeLock)\n    wakeLock: WakeLock = Field(..., description='The **`wakeLock`** read-only property of the Navigator interface returns a WakeLock interface that allows a document to acquire a screen wake lock.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/wakeLock)')\n\nclass NavigatorAutomationInformation(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/webdriver)\n    webdriver: bool = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/webdriver)')\n\n# Available only in secure contexts.\nclass NavigatorBadge(BaseModel):\n    pass\n\nclass NavigatorConcurrentHardware(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/hardwareConcurrency)\n    hardwareConcurrency: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/hardwareConcurrency)')\n\nclass NavigatorContentUtils(BaseModel):\n    pass\n\nclass NavigatorCookies(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/cookieEnabled)\n    cookieEnabled: bool = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/cookieEnabled)')\n\nclass NavigatorID(BaseModel):\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/appCodeName)\n    appCodeName: str = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/appCodeName)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/appName)\n    appName: str = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/appName)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/appVersion)\n    appVersion: str = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/appVersion)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/platform)\n    platform: str = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/platform)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/product)\n    product: str = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/product)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/productSub)\n    productSub: str = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/productSub)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/userAgent)\n    userAgent: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/userAgent)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/vendor)\n    vendor: str = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/vendor)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/vendorSub)\n    vendorSub: str = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/vendorSub)')\n\nclass NavigatorLanguage(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/language)\n    language: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/language)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/languages)\n    languages: ReadonlyArray<string> = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/languages)')\n\n# Available only in secure contexts.\nclass NavigatorLocks(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/locks)\n    locks: LockManager = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/locks)')\n\n# The **`NavigatorLogin`** interface of the Federated Credential Management (FedCM) API defines login functionality for federated identity providers (IdPs).
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigatorLogin)\nclass NavigatorLogin(BaseModel):\n    pass\n\nclass NavigatorOnLine(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/onLine)\n    onLine: bool = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/onLine)')\n\nclass NavigatorPlugins(BaseModel):\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mimeTypes)\n    mimeTypes: MimeTypeArray = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mimeTypes)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/pdfViewerEnabled)\n    pdfViewerEnabled: bool = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/pdfViewerEnabled)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/plugins)\n    plugins: PluginArray = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/plugins)')\n\n# Available only in secure contexts.\nclass NavigatorStorage(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/storage)\n    storage: StorageManager = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/storage)')\n\n# The DOM **`Node`** interface is an abstract base class upon which many other DOM API objects are based, thus letting those object types to be used similarly and often interchangeably.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node)\nclass Node(EventTarget):\n    # The read-only **`baseURI`** property of the Node interface returns the absolute base URL of the document containing the node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/baseURI)\n    baseURI: str = Field(..., description='The read-only **`baseURI`** property of the Node interface returns the absolute base URL of the document containing the node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/baseURI)')\n    # The read-only **`childNodes`** property of the Node interface returns a live the first child node is assigned index `0`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/childNodes)\n    childNodes: NodeListOf<ChildNode> = Field(..., description='The read-only **`childNodes`** property of the Node interface returns a live the first child node is assigned index `0`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/childNodes)')\n    # The read-only **`firstChild`** property of the Node interface returns the node's first child in the tree, or `null` if the node has no children.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/firstChild)\n    firstChild: Union[ChildNode, null] = Field(..., description='The read-only **`firstChild`** property of the Node interface returns the node\'s first child in the tree, or `null` if the node has no children.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/firstChild)')\n    # The read-only **`isConnected`** property of the Node interface returns a boolean indicating whether the node is connected (directly or indirectly) to a Document object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/isConnected)\n    isConnected: bool = Field(..., description='The read-only **`isConnected`** property of the Node interface returns a boolean indicating whether the node is connected (directly or indirectly) to a Document object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/isConnected)')\n    # The read-only **`lastChild`** property of the Node interface returns the last child of the node, or `null` if there are no child nodes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/lastChild)\n    lastChild: Union[ChildNode, null] = Field(..., description='The read-only **`lastChild`** property of the Node interface returns the last child of the node, or `null` if there are no child nodes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/lastChild)')\n    # The read-only **`nextSibling`** property of the Node interface returns the node immediately following the specified one in their parent's Node.childNodes, or returns `null` if the specified node is the last child in the parent element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nextSibling)\n    nextSibling: Union[ChildNode, null] = Field(..., description='The read-only **`nextSibling`** property of the Node interface returns the node immediately following the specified one in their parent\'s Node.childNodes, or returns `null` if the specified node is the last child in the parent element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nextSibling)')\n    # The read-only **`nodeName`** property of Node returns the name of the current node as a string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeName)\n    nodeName: str = Field(..., description='The read-only **`nodeName`** property of Node returns the name of the current node as a string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeName)')\n    # The read-only **`nodeType`** property of a Node interface is an integer that identifies what the node is.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeType)\n    nodeType: float = Field(..., description='The read-only **`nodeType`** property of a Node interface is an integer that identifies what the node is.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeType)')\n    # The **`nodeValue`** property of the Node interface returns or sets the value of the current node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeValue)\n    nodeValue: Union[str, null] = Field(..., description='The **`nodeValue`** property of the Node interface returns or sets the value of the current node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeValue)')\n    # The read-only **`ownerDocument`** property of the Node interface returns the top-level document object of the node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/ownerDocument)\n    ownerDocument: Union[Document, null] = Field(..., description='The read-only **`ownerDocument`** property of the Node interface returns the top-level document object of the node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/ownerDocument)')\n    # The read-only **`parentElement`** property of Node interface returns the DOM node's parent Element, or `null` if the node either has no parent, or its parent isn't a DOM Element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/parentElement)\n    parentElement: Union[HTMLElement, null] = Field(..., description='The read-only **`parentElement`** property of Node interface returns the DOM node\'s parent Element, or `null` if the node either has no parent, or its parent isn\'t a DOM Element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/parentElement)')\n    # The read-only **`parentNode`** property of the Node interface returns the parent of the specified node in the DOM tree.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/parentNode)\n    parentNode: Union[ParentNode, null] = Field(..., description='The read-only **`parentNode`** property of the Node interface returns the parent of the specified node in the DOM tree.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/parentNode)')\n    # The read-only **`previousSibling`** property of the Node interface returns the node immediately preceding the specified one in its parent's or `null` if the specified node is the first in that list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/previousSibling)\n    previousSibling: Union[ChildNode, null] = Field(..., description='The read-only **`previousSibling`** property of the Node interface returns the node immediately preceding the specified one in its parent\'s or `null` if the specified node is the first in that list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/previousSibling)')\n    # The **`textContent`** property of the Node interface represents the text content of the node and its descendants.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/textContent)\n    textContent: Union[str, null] = Field(..., description='The **`textContent`** property of the Node interface represents the text content of the node and its descendants.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/textContent)')\n    # node is an element.\n    ELEMENT_NODE: 1 = Field(..., description='node is an element.')\n    ATTRIBUTE_NODE: 2 = Field(...)\n    # node is a Text node.\n    TEXT_NODE: 3 = Field(..., description='node is a Text node.')\n    # node is a CDATASection node.\n    CDATA_SECTION_NODE: 4 = Field(..., description='node is a CDATASection node.')\n    ENTITY_REFERENCE_NODE: 5 = Field(...)\n    ENTITY_NODE: 6 = Field(...)\n    # node is a ProcessingInstruction node.\n    PROCESSING_INSTRUCTION_NODE: 7 = Field(..., description='node is a ProcessingInstruction node.')\n    # node is a Comment node.\n    COMMENT_NODE: 8 = Field(..., description='node is a Comment node.')\n    # node is a document.\n    DOCUMENT_NODE: 9 = Field(..., description='node is a document.')\n    # node is a doctype.\n    DOCUMENT_TYPE_NODE: 10 = Field(..., description='node is a doctype.')\n    # node is a DocumentFragment node.\n    DOCUMENT_FRAGMENT_NODE: 11 = Field(..., description='node is a DocumentFragment node.')\n    NOTATION_NODE: 12 = Field(...)\n    # Set when node and other are not in the same tree.\n    DOCUMENT_POSITION_DISCONNECTED: 0x01 = Field(..., description='Set when node and other are not in the same tree.')\n    # Set when other is preceding node.\n    DOCUMENT_POSITION_PRECEDING: 0x02 = Field(..., description='Set when other is preceding node.')\n    # Set when other is following node.\n    DOCUMENT_POSITION_FOLLOWING: 0x04 = Field(..., description='Set when other is following node.')\n    # Set when other is an ancestor of node.\n    DOCUMENT_POSITION_CONTAINS: 0x08 = Field(..., description='Set when other is an ancestor of node.')\n    # Set when other is a descendant of node.\n    DOCUMENT_POSITION_CONTAINED_BY: 0x10 = Field(..., description='Set when other is a descendant of node.')\n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 0x20 = Field(...)\n\n# The **`NodeIterator`** interface represents an iterator to traverse nodes of a DOM subtree in document order.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator)\nclass NodeIterator(BaseModel):\n    # The **`NodeIterator.filter`** read-only property returns a `NodeFilter` object, that is an object which implements an `acceptNode(node)` method, used to screen nodes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/filter)\n    filter: Union[NodeFilter, null] = Field(..., description='The **`NodeIterator.filter`** read-only property returns a `NodeFilter` object, that is an object which implements an `acceptNode(node)` method, used to screen nodes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/filter)')\n    # The **`NodeIterator.pointerBeforeReferenceNode`** read-only property returns a boolean flag that indicates whether the `NodeFilter` is anchored before (if this value is `true`) or after (if this value is `false`) the anchor node indicated by the A boolean.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/pointerBeforeReferenceNode)\n    pointerBeforeReferenceNode: bool = Field(..., description='The **`NodeIterator.pointerBeforeReferenceNode`** read-only property returns a boolean flag that indicates whether the `NodeFilter` is anchored before (if this value is `true`) or after (if this value is `false`) the anchor node indicated by the A boolean.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/pointerBeforeReferenceNode)')\n    # The **`NodeIterator.referenceNode`** read-only property returns the iterator remains anchored to the reference node as specified by this property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/referenceNode)\n    referenceNode: Node = Field(..., description='The **`NodeIterator.referenceNode`** read-only property returns the iterator remains anchored to the reference node as specified by this property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/referenceNode)')\n    # The **`NodeIterator.root`** read-only property represents the traverses.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/root)\n    root: Node = Field(..., description='The **`NodeIterator.root`** read-only property represents the traverses.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/root)')\n    # The **`NodeIterator.whatToShow`** read-only property represents an `unsigned integer` representing a bitmask signifying what types of nodes should be returned by the NodeIterator.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/whatToShow)\n    whatToShow: float = Field(..., description='The **`NodeIterator.whatToShow`** read-only property represents an `unsigned integer` representing a bitmask signifying what types of nodes should be returned by the NodeIterator.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/whatToShow)')\n\n# **`NodeList`** objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeList)\nclass NodeList(BaseModel):\n    # The **`NodeList.length`** property returns the number of items in a NodeList.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeList/length)\n    length: float = Field(..., description='The **`NodeList.length`** property returns the number of items in a NodeList.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeList/length)')\n\nclass NodeListOf(NodeList):\n    pass\n\nclass NonDocumentTypeChildNode(BaseModel):\n    # Returns the first following sibling that is an element, and null otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/nextElementSibling)\n    nextElementSibling: Union[Element, null] = Field(..., description='Returns the first following sibling that is an element, and null otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/nextElementSibling)')\n    # Returns the first preceding sibling that is an element, and null otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/previousElementSibling)\n    previousElementSibling: Union[Element, null] = Field(..., description='Returns the first preceding sibling that is an element, and null otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/previousElementSibling)')\n\nclass NonElementParentNode(BaseModel):\n    pass\n\nclass NotificationEventMap(BaseModel):\n    click: Event = Field(...)\n    close: Event = Field(...)\n    error: Event = Field(...)\n    show: Event = Field(...)\n\n# The **`Notification`** interface of the Notifications API is used to configure and display desktop notifications to the user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification)\nclass Notification(EventTarget):\n    # The **`badge`** read-only property of the Notification interface returns a string containing the URL of an image to represent the notification when there is not enough space to display the notification itself such as for example, the Android Notification Bar.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/badge)\n    badge: str = Field(..., description='The **`badge`** read-only property of the Notification interface returns a string containing the URL of an image to represent the notification when there is not enough space to display the notification itself such as for example, the Android Notification Bar.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/badge)')\n    # The **`body`** read-only property of the specified in the `body` option of the A string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/body)\n    body: str = Field(..., description='The **`body`** read-only property of the specified in the `body` option of the A string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/body)')\n    # The **`data`** read-only property of the data, as specified in the `data` option of the The notification's data can be any arbitrary data that you want associated with the notification.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/data)\n    data: any = Field(..., description='The **`data`** read-only property of the data, as specified in the `data` option of the The notification\'s data can be any arbitrary data that you want associated with the notification.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/data)')\n    # The **`dir`** read-only property of the Notification interface indicates the text direction of the notification, as specified in the `dir` option of the Notification.Notification constructor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/dir)\n    dir: NotificationDirection = Field(..., description='The **`dir`** read-only property of the Notification interface indicates the text direction of the notification, as specified in the `dir` option of the Notification.Notification constructor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/dir)')\n    # The **`icon`** read-only property of the part of the notification, as specified in the `icon` option of the A string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/icon)\n    icon: str = Field(..., description='The **`icon`** read-only property of the part of the notification, as specified in the `icon` option of the A string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/icon)')\n    # The **`lang`** read-only property of the as specified in the `lang` option of the The language itself is specified using a string representing a language tag according to MISSING: RFC(5646, 'Tags for Identifying Languages (also known as BCP 47)')].
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/lang)\n    lang: str = Field(..., description='The **`lang`** read-only property of the as specified in the `lang` option of the The language itself is specified using a string representing a language tag according to MISSING: RFC(5646, \'Tags for Identifying Languages (also known as BCP 47)\')].
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/lang)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/click_event)\n    onclick: Union[((this: Notification, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/click_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/close_event)\n    onclose: Union[((this: Notification, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/close_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/error_event)\n    onerror: Union[((this: Notification, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/error_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/show_event)\n    onshow: Union[((this: Notification, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/show_event)')\n    # The **`requireInteraction`** read-only property of the Notification interface returns a boolean value indicating that a notification should remain active until the user clicks or dismisses it, rather than closing automatically.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/requireInteraction)\n    requireInteraction: bool = Field(..., description='The **`requireInteraction`** read-only property of the Notification interface returns a boolean value indicating that a notification should remain active until the user clicks or dismisses it, rather than closing automatically.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/requireInteraction)')\n    # The **`silent`** read-only property of the silent, i.e., no sounds or vibrations should be issued regardless of the device settings.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/silent)\n    silent: Union[bool, null] = Field(..., description='The **`silent`** read-only property of the silent, i.e., no sounds or vibrations should be issued regardless of the device settings.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/silent)')\n    # The **`tag`** read-only property of the as specified in the `tag` option of the The idea of notification tags is that more than one notification can share the same tag, linking them together.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/tag)\n    tag: str = Field(..., description='The **`tag`** read-only property of the as specified in the `tag` option of the The idea of notification tags is that more than one notification can share the same tag, linking them together.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/tag)')\n    # The **`title`** read-only property of the specified in the `title` parameter of the A string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/title)\n    title: str = Field(..., description='The **`title`** read-only property of the specified in the `title` parameter of the A string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/title)')\n\n# The **`OES_draw_buffers_indexed`** extension is part of the WebGL API and enables the use of different blend options when writing to multiple color buffers simultaneously.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed)\nclass OES_draw_buffers_indexed(BaseModel):\n    pass\n\n# The **`OES_element_index_uint`** extension is part of the WebGL API and adds support for `gl.UNSIGNED_INT` types to WebGLRenderingContext.drawElements().
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_element_index_uint)\nclass OES_element_index_uint(BaseModel):\n    pass\n\n# The `OES_fbo_render_mipmap` extension is part of the WebGL API and makes it possible to attach any level of a texture to a framebuffer object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_fbo_render_mipmap)\nclass OES_fbo_render_mipmap(BaseModel):\n    pass\n\n# The **`OES_standard_derivatives`** extension is part of the WebGL API and adds the GLSL derivative functions `dFdx`, `dFdy`, and `fwidth`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_standard_derivatives)\nclass OES_standard_derivatives(BaseModel):\n    FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 0x8B8B = Field(...)\n\n# The **`OES_texture_float`** extension is part of the WebGL API and exposes floating-point pixel types for textures.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_float)\nclass OES_texture_float(BaseModel):\n    pass\n\n# The **`OES_texture_float_linear`** extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_float_linear)\nclass OES_texture_float_linear(BaseModel):\n    pass\n\n# The **`OES_texture_half_float`** extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_half_float)\nclass OES_texture_half_float(BaseModel):\n    HALF_FLOAT_OES: 0x8D61 = Field(...)\n\n# The **`OES_texture_half_float_linear`** extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_half_float_linear)\nclass OES_texture_half_float_linear(BaseModel):\n    pass\n\n# The **OES_vertex_array_object** extension is part of the WebGL API and provides vertex array objects (VAOs) which encapsulate vertex array states.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object)\nclass OES_vertex_array_object(BaseModel):\n    VERTEX_ARRAY_BINDING_OES: 0x85B5 = Field(...)\n\n# The `OVR_multiview2` extension is part of the WebGL API and adds support for rendering into multiple views simultaneously.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OVR_multiview2)\nclass OVR_multiview2(BaseModel):\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR: 0x9630 = Field(...)\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR: 0x9632 = Field(...)\n    MAX_VIEWS_OVR: 0x9631 = Field(...)\n    FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: 0x9633 = Field(...)\n\n# The Web Audio API `OfflineAudioCompletionEvent` interface represents events that occur when the processing of an OfflineAudioContext is terminated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioCompletionEvent)\nclass OfflineAudioCompletionEvent(Event):\n    # The **`renderedBuffer`** read-only property of the containing the result of processing an OfflineAudioContext.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioCompletionEvent/renderedBuffer)\n    renderedBuffer: AudioBuffer = Field(..., description='The **`renderedBuffer`** read-only property of the containing the result of processing an OfflineAudioContext.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioCompletionEvent/renderedBuffer)')\n\nclass OfflineAudioContextEventMap(BaseAudioContextEventMap):\n    complete: OfflineAudioCompletionEvent = Field(...)\n\n# The `OfflineAudioContext` interface is an AudioContext interface representing an audio-processing graph built from linked together AudioNodes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext)\nclass OfflineAudioContext(BaseAudioContext):\n    # The **`length`** property of the the buffer in sample-frames.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/length)\n    length: float = Field(..., description='The **`length`** property of the the buffer in sample-frames.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/length)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/complete_event)\n    oncomplete: Union[((this: OfflineAudioContext, ev: OfflineAudioCompletionEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/complete_event)')\n\nclass OffscreenCanvasEventMap(BaseModel):\n    contextlost: Event = Field(...)\n    contextrestored: Event = Field(...)\n\n# When using the canvas element or the Canvas API, rendering, animation, and user interaction usually happen on the main execution thread of a web application.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas)\nclass OffscreenCanvas(EventTarget):\n    # The **`height`** property returns and sets the height of an OffscreenCanvas object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/height)\n    height: float = Field(..., description='The **`height`** property returns and sets the height of an OffscreenCanvas object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/height)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/contextlost_event)\n    oncontextlost: Union[((this: OffscreenCanvas, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/contextlost_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/contextrestored_event)\n    oncontextrestored: Union[((this: OffscreenCanvas, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/contextrestored_event)')\n    # The **`width`** property returns and sets the width of an OffscreenCanvas object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/width)\n    width: float = Field(..., description='The **`width`** property returns and sets the width of an OffscreenCanvas object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/width)')\n\n# The **`OffscreenCanvasRenderingContext2D`** interface is a CanvasRenderingContext2D rendering context for drawing to the bitmap of an `OffscreenCanvas` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvasRenderingContext2D)\nclass OffscreenCanvasRenderingContext2D(CanvasCompositing):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/canvas)\n    canvas: OffscreenCanvas = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/canvas)')\n\n# The **`OscillatorNode`** interface represents a periodic waveform, such as a sine wave.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode)\nclass OscillatorNode(AudioScheduledSourceNode):\n    # The `detune` property of the OscillatorNode interface is an a-rate AudioParam representing detuning of oscillation in cents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/detune)\n    detune: AudioParam = Field(..., description='The `detune` property of the OscillatorNode interface is an a-rate AudioParam representing detuning of oscillation in cents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/detune)')\n    # The **`frequency`** property of the OscillatorNode interface is an a-rate AudioParam representing the frequency of oscillation in hertz.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/frequency)\n    frequency: AudioParam = Field(..., description='The **`frequency`** property of the OscillatorNode interface is an a-rate AudioParam representing the frequency of oscillation in hertz.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/frequency)')\n    # The **`type`** property of the OscillatorNode interface specifies what shape of waveform the oscillator will output.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/type)\n    type: OscillatorType = Field(..., description='The **`type`** property of the OscillatorNode interface specifies what shape of waveform the oscillator will output.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/type)')\n\n# The **`OverconstrainedError`** interface of the Media Capture and Streams API indicates that the set of desired capabilities for the current MediaStreamTrack cannot currently be met.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OverconstrainedError)\nclass OverconstrainedError(DOMException):\n    # The **`constraint`** read-only property of the in the constructor, meaning the constraint that was not satisfied.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OverconstrainedError/constraint)\n    constraint: str = Field(..., description='The **`constraint`** read-only property of the in the constructor, meaning the constraint that was not satisfied.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/OverconstrainedError/constraint)')\n\n# The **`PageRevealEvent`** event object is made available inside handler functions for the Window.pagereveal_event event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PageRevealEvent)\nclass PageRevealEvent(Event):\n    # The **`viewTransition`** read-only property of the PageRevealEvent interface contains a ViewTransition object representing the active view transition for the cross-document navigation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PageRevealEvent/viewTransition)\n    viewTransition: Union[ViewTransition, null] = Field(..., description='The **`viewTransition`** read-only property of the PageRevealEvent interface contains a ViewTransition object representing the active view transition for the cross-document navigation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PageRevealEvent/viewTransition)')\n\n# The **`PageSwapEvent`** event object is made available inside handler functions for the Window.pageswap_event event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PageSwapEvent)\nclass PageSwapEvent(Event):\n    # The **`activation`** read-only property of the PageSwapEvent interface contains a NavigationActivation object containing the navigation type and current and destination document history entries for a same-origin navigation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PageSwapEvent/activation)\n    activation: Union[NavigationActivation, null] = Field(..., description='The **`activation`** read-only property of the PageSwapEvent interface contains a NavigationActivation object containing the navigation type and current and destination document history entries for a same-origin navigation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PageSwapEvent/activation)')\n    # The **`viewTransition`** read-only property of the PageRevealEvent interface contains a ViewTransition object representing the active view transition for the cross-document navigation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PageSwapEvent/viewTransition)\n    viewTransition: Union[ViewTransition, null] = Field(..., description='The **`viewTransition`** read-only property of the PageRevealEvent interface contains a ViewTransition object representing the active view transition for the cross-document navigation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PageSwapEvent/viewTransition)')\n\n# The **`PageTransitionEvent`** event object is available inside handler functions for the `pageshow` and `pagehide` events, fired when a document is being loaded or unloaded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PageTransitionEvent)\nclass PageTransitionEvent(Event):\n    # The **`persisted`** read-only property indicates if a webpage is loading from a cache.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PageTransitionEvent/persisted)\n    persisted: bool = Field(..., description='The **`persisted`** read-only property indicates if a webpage is loading from a cache.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PageTransitionEvent/persisted)')\n\n# The `PannerNode` interface defines an audio-processing object that represents the location, direction, and behavior of an audio source signal in a simulated physical space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode)\nclass PannerNode(AudioNode):\n    # The `coneInnerAngle` property of the PannerNode interface is a double value describing the angle, in degrees, of a cone inside of which there will be no volume reduction.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/coneInnerAngle)\n    coneInnerAngle: float = Field(..., description='The `coneInnerAngle` property of the PannerNode interface is a double value describing the angle, in degrees, of a cone inside of which there will be no volume reduction.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/coneInnerAngle)')\n    # The `coneOuterAngle` property of the PannerNode interface is a double value describing the angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the PannerNode.coneOuterGain property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/coneOuterAngle)\n    coneOuterAngle: float = Field(..., description='The `coneOuterAngle` property of the PannerNode interface is a double value describing the angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the PannerNode.coneOuterGain property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/coneOuterAngle)')\n    # The `coneOuterGain` property of the PannerNode interface is a double value, describing the amount of volume reduction outside the cone, defined by the PannerNode.coneOuterAngle attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/coneOuterGain)\n    coneOuterGain: float = Field(..., description='The `coneOuterGain` property of the PannerNode interface is a double value, describing the amount of volume reduction outside the cone, defined by the PannerNode.coneOuterAngle attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/coneOuterGain)')\n    # The `distanceModel` property of the PannerNode interface is an enumerated value determining which algorithm to use to reduce the volume of the audio source as it moves away from the listener.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/distanceModel)\n    distanceModel: DistanceModelType = Field(..., description='The `distanceModel` property of the PannerNode interface is an enumerated value determining which algorithm to use to reduce the volume of the audio source as it moves away from the listener.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/distanceModel)')\n    # The `maxDistance` property of the PannerNode interface is a double value representing the maximum distance between the audio source and the listener, after which the volume is not reduced any further.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/maxDistance)\n    maxDistance: float = Field(..., description='The `maxDistance` property of the PannerNode interface is a double value representing the maximum distance between the audio source and the listener, after which the volume is not reduced any further.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/maxDistance)')\n    # The **`orientationX`** property of the PannerNode interface indicates the X (horizontal) component of the direction in which the audio source is facing, in a 3D Cartesian coordinate space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationX)\n    orientationX: AudioParam = Field(..., description='The **`orientationX`** property of the PannerNode interface indicates the X (horizontal) component of the direction in which the audio source is facing, in a 3D Cartesian coordinate space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationX)')\n    # The **`orientationY`** property of the PannerNode interface indicates the Y (vertical) component of the direction the audio source is facing, in 3D Cartesian coordinate space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationY)\n    orientationY: AudioParam = Field(..., description='The **`orientationY`** property of the PannerNode interface indicates the Y (vertical) component of the direction the audio source is facing, in 3D Cartesian coordinate space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationY)')\n    # The **`orientationZ`** property of the PannerNode interface indicates the Z (depth) component of the direction the audio source is facing, in 3D Cartesian coordinate space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationZ)\n    orientationZ: AudioParam = Field(..., description='The **`orientationZ`** property of the PannerNode interface indicates the Z (depth) component of the direction the audio source is facing, in 3D Cartesian coordinate space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationZ)')\n    # The `panningModel` property of the PannerNode interface is an enumerated value determining which spatialization algorithm to use to position the audio in 3D space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/panningModel)\n    panningModel: PanningModelType = Field(..., description='The `panningModel` property of the PannerNode interface is an enumerated value determining which spatialization algorithm to use to position the audio in 3D space.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/panningModel)')\n    # The **`positionX`** property of the PannerNode interface specifies the X coordinate of the audio source's position in 3D Cartesian coordinates, corresponding to the _horizontal_ axis (left-right).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/positionX)\n    positionX: AudioParam = Field(..., description='The **`positionX`** property of the PannerNode interface specifies the X coordinate of the audio source\'s position in 3D Cartesian coordinates, corresponding to the _horizontal_ axis (left-right).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/positionX)')\n    # The **`positionY`** property of the PannerNode interface specifies the Y coordinate of the audio source's position in 3D Cartesian coordinates, corresponding to the _vertical_ axis (top-bottom).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/positionY)\n    positionY: AudioParam = Field(..., description='The **`positionY`** property of the PannerNode interface specifies the Y coordinate of the audio source\'s position in 3D Cartesian coordinates, corresponding to the _vertical_ axis (top-bottom).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/positionY)')\n    # The **`positionZ`** property of the PannerNode interface specifies the Z coordinate of the audio source's position in 3D Cartesian coordinates, corresponding to the _depth_ axis (behind-in front of the listener).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/positionZ)\n    positionZ: AudioParam = Field(..., description='The **`positionZ`** property of the PannerNode interface specifies the Z coordinate of the audio source\'s position in 3D Cartesian coordinates, corresponding to the _depth_ axis (behind-in front of the listener).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/positionZ)')\n    # The `refDistance` property of the PannerNode interface is a double value representing the reference distance for reducing volume as the audio source moves further from the listener – i.e., the distance at which the volume reduction starts taking effect.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/refDistance)\n    refDistance: float = Field(..., description='The `refDistance` property of the PannerNode interface is a double value representing the reference distance for reducing volume as the audio source moves further from the listener – i.e., the distance at which the volume reduction starts taking effect.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/refDistance)')\n    # The `rolloffFactor` property of the PannerNode interface is a double value describing how quickly the volume is reduced as the source moves away from the listener.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/rolloffFactor)\n    rolloffFactor: float = Field(..., description='The `rolloffFactor` property of the PannerNode interface is a double value describing how quickly the volume is reduced as the source moves away from the listener.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/rolloffFactor)')\n\nclass ParentNode(Node):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/childElementCount)\n    childElementCount: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/childElementCount)')\n    # Returns the child elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/children)\n    children: HTMLCollection = Field(..., description='Returns the child elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/children)')\n    # Returns the first child that is an element, and null otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/firstElementChild)\n    firstElementChild: Union[Element, null] = Field(..., description='Returns the first child that is an element, and null otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/firstElementChild)')\n    # Returns the last child that is an element, and null otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/lastElementChild)\n    lastElementChild: Union[Element, null] = Field(..., description='Returns the last child that is an element, and null otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/lastElementChild)')\n\n# The **`Path2D`** interface of the Canvas 2D API is used to declare a path that can then be used on a CanvasRenderingContext2D object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Path2D)\nclass Path2D(CanvasPath):\n    pass\n\n# The **`ContactAddress`** interface of the Contact Picker API represents a physical address.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress)\nclass PaymentAddress(BaseModel):\n    # The **`addressLine`** read-only property of the ContactAddress interface is an array of strings, each specifying a line of the address that is not covered by one of the other properties of `ContactAddress`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/addressLine)\n    addressLine: ReadonlyArray<string> = Field(..., description='The **`addressLine`** read-only property of the ContactAddress interface is an array of strings, each specifying a line of the address that is not covered by one of the other properties of `ContactAddress`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/addressLine)')\n    # The **`city`** read-only property of the ContactAddress interface returns a string containing the city or town portion of the address.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/city)\n    city: str = Field(..., description='The **`city`** read-only property of the ContactAddress interface returns a string containing the city or town portion of the address.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/city)')\n    # The **`country`** read-only property of the ContactAddress interface is a string identifying the address's country using the ISO 3166-1 alpha-2 standard.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/country)\n    country: str = Field(..., description='The **`country`** read-only property of the ContactAddress interface is a string identifying the address\'s country using the ISO 3166-1 alpha-2 standard.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/country)')\n    # The read-only **`dependentLocality`** property of the ContactAddress interface is a string containing a locality or sublocality designation within a city, such as a neighborhood, borough, district, or, in the United Kingdom, a dependent locality.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/dependentLocality)\n    dependentLocality: str = Field(..., description='The read-only **`dependentLocality`** property of the ContactAddress interface is a string containing a locality or sublocality designation within a city, such as a neighborhood, borough, district, or, in the United Kingdom, a dependent locality.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/dependentLocality)')\n    # The **`organization`** read-only property of the ContactAddress interface returns a string containing the name of the organization, firm, company, or institution at the address.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/organization)\n    organization: str = Field(..., description='The **`organization`** read-only property of the ContactAddress interface returns a string containing the name of the organization, firm, company, or institution at the address.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/organization)')\n    # The read-only **`phone`** property of the ContactAddress interface returns a string containing the telephone number of the recipient or contact person at the address.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/phone)\n    phone: str = Field(..., description='The read-only **`phone`** property of the ContactAddress interface returns a string containing the telephone number of the recipient or contact person at the address.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/phone)')\n    # The **`postalCode`** read-only property of the ContactAddress interface returns a string containing a code used by a jurisdiction for mail routing, for example, the ZIP Code in the United States or the Postal Index Number (PIN code) in India.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/postalCode)\n    postalCode: str = Field(..., description='The **`postalCode`** read-only property of the ContactAddress interface returns a string containing a code used by a jurisdiction for mail routing, for example, the ZIP Code in the United States or the Postal Index Number (PIN code) in India.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/postalCode)')\n    # The read-only **`recipient`** property of the ContactAddress interface returns a string containing the name of the recipient, purchaser, or contact person at the address.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/recipient)\n    recipient: str = Field(..., description='The read-only **`recipient`** property of the ContactAddress interface returns a string containing the name of the recipient, purchaser, or contact person at the address.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/recipient)')\n    # The read-only **`region`** property of the ContactAddress interface returns a string containing the top-level administrative subdivision of the country in which the address is located.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/region)\n    region: str = Field(..., description='The read-only **`region`** property of the ContactAddress interface returns a string containing the top-level administrative subdivision of the country in which the address is located.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/region)')\n    # The **`sortingCode`** read-only property of the ContactAddress interface returns a string containing a postal sorting code such as is used in France.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/sortingCode)\n    sortingCode: str = Field(..., description='The **`sortingCode`** read-only property of the ContactAddress interface returns a string containing a postal sorting code such as is used in France.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/sortingCode)')\n\n# The **`PaymentMethodChangeEvent`** interface of the Payment Request API describes the PaymentRequest/paymentmethodchange_event event which is fired by some payment handlers when the user switches payment instruments (e.g., a user selects a 'store' card to make a purchase while using Apple Pay).
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent)\nclass PaymentMethodChangeEvent(PaymentRequestUpdateEvent):\n    # The read-only **`methodDetails`** property of the PaymentMethodChangeEvent interface is an object containing any data the payment handler may provide to describe the change the user has made to their payment method.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent/methodDetails)\n    methodDetails: any = Field(..., description='The read-only **`methodDetails`** property of the PaymentMethodChangeEvent interface is an object containing any data the payment handler may provide to describe the change the user has made to their payment method.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent/methodDetails)')\n    # The read-only **`methodName`** property of the PaymentMethodChangeEvent interface is a string which uniquely identifies the payment handler currently selected by the user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent/methodName)\n    methodName: str = Field(..., description='The read-only **`methodName`** property of the PaymentMethodChangeEvent interface is a string which uniquely identifies the payment handler currently selected by the user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent/methodName)')\n\nclass PaymentRequestEventMap(BaseModel):\n    paymentmethodchange: PaymentMethodChangeEvent = Field(...)\n    shippingaddresschange: PaymentRequestUpdateEvent = Field(...)\n    shippingoptionchange: PaymentRequestUpdateEvent = Field(...)\n\n# The Payment Request API's **`PaymentRequest`** interface is the primary access point into the API, and lets web content and apps accept payments from the end user on behalf of the operator of the site or the publisher of the app.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest)\nclass PaymentRequest(EventTarget):\n    # The **`id`** read-only attribute of the When constructing an instance of the PaymentRequest, you are able to supply an custom id.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/id)\n    id: str = Field(..., description='The **`id`** read-only attribute of the When constructing an instance of the PaymentRequest, you are able to supply an custom id.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/id)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/paymentmethodchange_event)\n    onpaymentmethodchange: Union[((this: PaymentRequest, ev: PaymentMethodChangeEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/paymentmethodchange_event)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/shippingaddresschange_event)\n    onshippingaddresschange: Union[((this: PaymentRequest, ev: PaymentRequestUpdateEvent) => any), null] = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/shippingaddresschange_event)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/shippingoptionchange_event)\n    onshippingoptionchange: Union[((this: PaymentRequest, ev: PaymentRequestUpdateEvent) => any), null] = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/shippingoptionchange_event)')\n    # The **`shippingAddress`** read-only property of the PaymentRequest interface returns the shipping address provided by the user.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/shippingAddress)\n    shippingAddress: Union[PaymentAddress, null] = Field(..., description='The **`shippingAddress`** read-only property of the PaymentRequest interface returns the shipping address provided by the user.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/shippingAddress)')\n    # The **`shippingOption`** read-only attribute of the PaymentRequest interface returns either the id of a selected shipping option, null (if no shipping option was set to be selected) or a shipping option selected by the user.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/shippingOption)\n    shippingOption: Union[str, null] = Field(..., description='The **`shippingOption`** read-only attribute of the PaymentRequest interface returns either the id of a selected shipping option, null (if no shipping option was set to be selected) or a shipping option selected by the user.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/shippingOption)')\n    # The **`shippingType`** read-only property of the `'delivery'`, `'pickup'`, or `null` if one was not provided by the constructor.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/shippingType)\n    shippingType: Union[PaymentShippingType, null] = Field(..., description='The **`shippingType`** read-only property of the `\'delivery\'`, `\'pickup\'`, or `null` if one was not provided by the constructor.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/shippingType)')\n\n# The **`PaymentRequestUpdateEvent`** interface is used for events sent to a PaymentRequest instance when changes are made to shipping-related information for a pending PaymentRequest.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequestUpdateEvent)\nclass PaymentRequestUpdateEvent(Event):\n    pass\n\nclass PaymentResponseEventMap(BaseModel):\n    payerdetailchange: PaymentRequestUpdateEvent = Field(...)\n\n# The **`PaymentResponse`** interface of the Payment Request API is returned after a user selects a payment method and approves a payment request.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse)\nclass PaymentResponse(EventTarget):\n    # The **`details`** read-only property of the provides a payment method specific message used by the merchant to process the transaction and determine a successful funds transfer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/details)\n    details: any = Field(..., description='The **`details`** read-only property of the provides a payment method specific message used by the merchant to process the transaction and determine a successful funds transfer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/details)')\n    # The **`methodName`** read-only property of the PaymentResponse interface returns a string uniquely identifying the payment handler selected by the user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/methodName)\n    methodName: str = Field(..., description='The **`methodName`** read-only property of the PaymentResponse interface returns a string uniquely identifying the payment handler selected by the user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/methodName)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/payerdetailchange_event)\n    onpayerdetailchange: Union[((this: PaymentResponse, ev: PaymentRequestUpdateEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/payerdetailchange_event)')\n    # The `payerEmail` read-only property of the PaymentResponse interface returns the email address supplied by the user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/payerEmail)\n    payerEmail: Union[str, null] = Field(..., description='The `payerEmail` read-only property of the PaymentResponse interface returns the email address supplied by the user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/payerEmail)')\n    # The **`payerName`** read-only property of the option is only present when the `requestPayerName` option is set to `true` in the options parameter of the A string containing the payer name.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/payerName)\n    payerName: Union[str, null] = Field(..., description='The **`payerName`** read-only property of the option is only present when the `requestPayerName` option is set to `true` in the options parameter of the A string containing the payer name.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/payerName)')\n    # The `payerPhone` read-only property of the PaymentResponse interface returns the phone number supplied by the user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/payerPhone)\n    payerPhone: Union[str, null] = Field(..., description='The `payerPhone` read-only property of the PaymentResponse interface returns the phone number supplied by the user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/payerPhone)')\n    # The **`requestId`** read-only property of the the `PaymentResponse()` constructor by details.id.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/requestId)\n    requestId: str = Field(..., description='The **`requestId`** read-only property of the the `PaymentResponse()` constructor by details.id.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/requestId)')\n    # The **`shippingAddress`** read-only property of the `PaymentRequest` interface returns a PaymentAddress object containing the shipping address provided by the user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/shippingAddress)\n    shippingAddress: Union[PaymentAddress, null] = Field(..., description='The **`shippingAddress`** read-only property of the `PaymentRequest` interface returns a PaymentAddress object containing the shipping address provided by the user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/shippingAddress)')\n    # The **`shippingOption`** read-only property of the `PaymentRequest` interface returns the ID attribute of the shipping option selected by the user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/shippingOption)\n    shippingOption: Union[str, null] = Field(..., description='The **`shippingOption`** read-only property of the `PaymentRequest` interface returns the ID attribute of the shipping option selected by the user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/shippingOption)')\n\nclass PerformanceEventMap(BaseModel):\n    resourcetimingbufferfull: Event = Field(...)\n\n# The **`Performance`** interface provides access to performance-related information for the current page.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance)\nclass Performance(EventTarget):\n    # The read-only `performance.eventCounts` property is an EventCounts map containing the number of events which have been dispatched per event type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/eventCounts)\n    eventCounts: EventCounts = Field(..., description='The read-only `performance.eventCounts` property is an EventCounts map containing the number of events which have been dispatched per event type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/eventCounts)')\n    # The legacy **`Performance.navigation`** read-only property returns a PerformanceNavigation object representing the type of navigation that occurs in the given browsing context, such as the number of redirections needed to fetch the resource.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/navigation)\n    navigation: PerformanceNavigation = Field(..., description='The legacy **`Performance.navigation`** read-only property returns a PerformanceNavigation object representing the type of navigation that occurs in the given browsing context, such as the number of redirections needed to fetch the resource.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/navigation)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/resourcetimingbufferfull_event)\n    onresourcetimingbufferfull: Union[((this: Performance, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/resourcetimingbufferfull_event)')\n    # The **`timeOrigin`** read-only property of the Performance interface returns the high resolution timestamp that is used as the baseline for performance-related timestamps.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/timeOrigin)\n    timeOrigin: DOMHighResTimeStamp = Field(..., description='The **`timeOrigin`** read-only property of the Performance interface returns the high resolution timestamp that is used as the baseline for performance-related timestamps.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/timeOrigin)')\n    # The legacy **`Performance.timing`** read-only property returns a PerformanceTiming object containing latency-related performance information.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/timing)\n    timing: PerformanceTiming = Field(..., description='The legacy **`Performance.timing`** read-only property returns a PerformanceTiming object containing latency-related performance information.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/timing)')\n\n# The **`PerformanceEntry`** object encapsulates a single performance metric that is part of the browser's performance timeline.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry)\nclass PerformanceEntry(BaseModel):\n    # The read-only **`duration`** property returns a DOMHighResTimeStamp that is the duration of the PerformanceEntry.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/duration)\n    duration: DOMHighResTimeStamp = Field(..., description='The read-only **`duration`** property returns a DOMHighResTimeStamp that is the duration of the PerformanceEntry.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/duration)')\n    # The read-only **`entryType`** property returns a string representing the type of performance metric that this entry represents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/entryType)\n    entryType: str = Field(..., description='The read-only **`entryType`** property returns a string representing the type of performance metric that this entry represents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/entryType)')\n    # The read-only **`name`** property of the PerformanceEntry interface is a string representing the name for a performance entry.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/name)\n    name: str = Field(..., description='The read-only **`name`** property of the PerformanceEntry interface is a string representing the name for a performance entry.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/name)')\n    # The read-only **`startTime`** property returns the first DOMHighResTimeStamp recorded for this PerformanceEntry.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/startTime)\n    startTime: DOMHighResTimeStamp = Field(..., description='The read-only **`startTime`** property returns the first DOMHighResTimeStamp recorded for this PerformanceEntry.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/startTime)')\n\n# The `PerformanceEventTiming` interface of the Event Timing API provides insights into the latency of certain event types triggered by user interaction.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming)\nclass PerformanceEventTiming(PerformanceEntry):\n    # The read-only **`cancelable`** property returns the associated event's `cancelable` property, indicating whether the event can be canceled.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/cancelable)\n    cancelable: bool = Field(..., description='The read-only **`cancelable`** property returns the associated event\'s `cancelable` property, indicating whether the event can be canceled.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/cancelable)')\n    # The read-only **`processingEnd`** property returns the time the last event handler finished executing.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/processingEnd)\n    processingEnd: DOMHighResTimeStamp = Field(..., description='The read-only **`processingEnd`** property returns the time the last event handler finished executing.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/processingEnd)')\n    # The read-only **`processingStart`** property returns the time at which event dispatch started.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/processingStart)\n    processingStart: DOMHighResTimeStamp = Field(..., description='The read-only **`processingStart`** property returns the time at which event dispatch started.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/processingStart)')\n    # The read-only **`target`** property returns the associated event's last `target` which is the node onto which the event was last dispatched.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/target)\n    target: Union[Node, null] = Field(..., description='The read-only **`target`** property returns the associated event\'s last `target` which is the node onto which the event was last dispatched.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/target)')\n\n# **`PerformanceMark`** is an interface for PerformanceEntry objects with an PerformanceEntry.entryType of `'mark'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMark)\nclass PerformanceMark(PerformanceEntry):\n    # The read-only **`detail`** property returns arbitrary metadata that was included in the mark upon construction (either when using Performance.mark or the PerformanceMark.PerformanceMark constructor).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMark/detail)\n    detail: any = Field(..., description='The read-only **`detail`** property returns arbitrary metadata that was included in the mark upon construction (either when using Performance.mark or the PerformanceMark.PerformanceMark constructor).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMark/detail)')\n\n# **`PerformanceMeasure`** is an _abstract_ interface for PerformanceEntry objects with an PerformanceEntry.entryType of `'measure'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMeasure)\nclass PerformanceMeasure(PerformanceEntry):\n    # The read-only **`detail`** property returns arbitrary metadata that was included in the mark upon construction (when using Performance.measure.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMeasure/detail)\n    detail: any = Field(..., description='The read-only **`detail`** property returns arbitrary metadata that was included in the mark upon construction (when using Performance.measure.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMeasure/detail)')\n\n# The legacy **`PerformanceNavigation`** interface represents information about how the navigation to the current document was done.
@deprecated This interface is deprecated in the Navigation Timing Level 2 specification. Please use the PerformanceNavigationTiming interface instead.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigation)\nclass PerformanceNavigation(BaseModel):\n    # The legacy **`PerformanceNavigation.redirectCount`** read-only property returns an `unsigned short` representing the number of REDIRECTs done before reaching the page.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigation/redirectCount)\n    redirectCount: float = Field(..., description='The legacy **`PerformanceNavigation.redirectCount`** read-only property returns an `unsigned short` representing the number of REDIRECTs done before reaching the page.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigation/redirectCount)')\n    # The legacy **`PerformanceNavigation.type`** read-only property returns an `unsigned short` containing a constant describing how the navigation to this page was done.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigation/type)\n    type: float = Field(..., description='The legacy **`PerformanceNavigation.type`** read-only property returns an `unsigned short` containing a constant describing how the navigation to this page was done.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigation/type)')\n    TYPE_NAVIGATE: 0 = Field(...)\n    TYPE_RELOAD: 1 = Field(...)\n    TYPE_BACK_FORWARD: 2 = Field(...)\n    TYPE_RESERVED: 255 = Field(...)\n\n# The **`PerformanceNavigationTiming`** interface provides methods and properties to store and retrieve metrics regarding the browser's document navigation events.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming)\nclass PerformanceNavigationTiming(PerformanceResourceTiming):\n    # The **`domComplete`** read-only property returns a DOMHighResTimeStamp representing the time immediately before the user agent sets the document's `readyState` to `'complete'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domComplete)\n    domComplete: DOMHighResTimeStamp = Field(..., description='The **`domComplete`** read-only property returns a DOMHighResTimeStamp representing the time immediately before the user agent sets the document\'s `readyState` to `\'complete\'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domComplete)')\n    # The **`domContentLoadedEventEnd`** read-only property returns a DOMHighResTimeStamp representing the time immediately after the current document's `DOMContentLoaded` event handler completes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domContentLoadedEventEnd)\n    domContentLoadedEventEnd: DOMHighResTimeStamp = Field(..., description='The **`domContentLoadedEventEnd`** read-only property returns a DOMHighResTimeStamp representing the time immediately after the current document\'s `DOMContentLoaded` event handler completes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domContentLoadedEventEnd)')\n    # The **`domContentLoadedEventStart`** read-only property returns a DOMHighResTimeStamp representing the time immediately before the current document's `DOMContentLoaded` event handler starts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domContentLoadedEventStart)\n    domContentLoadedEventStart: DOMHighResTimeStamp = Field(..., description='The **`domContentLoadedEventStart`** read-only property returns a DOMHighResTimeStamp representing the time immediately before the current document\'s `DOMContentLoaded` event handler starts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domContentLoadedEventStart)')\n    # The **`domInteractive`** read-only property returns a DOMHighResTimeStamp representing the time immediately before the user agent sets the document's `readyState` to `'interactive'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domInteractive)\n    domInteractive: DOMHighResTimeStamp = Field(..., description='The **`domInteractive`** read-only property returns a DOMHighResTimeStamp representing the time immediately before the user agent sets the document\'s `readyState` to `\'interactive\'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domInteractive)')\n    # The **`loadEventEnd`** read-only property returns a DOMHighResTimeStamp representing the time immediately after the current document's `load` event handler completes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/loadEventEnd)\n    loadEventEnd: DOMHighResTimeStamp = Field(..., description='The **`loadEventEnd`** read-only property returns a DOMHighResTimeStamp representing the time immediately after the current document\'s `load` event handler completes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/loadEventEnd)')\n    # The **`loadEventStart`** read-only property returns a DOMHighResTimeStamp representing the time immediately before the current document's `load` event handler starts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/loadEventStart)\n    loadEventStart: DOMHighResTimeStamp = Field(..., description='The **`loadEventStart`** read-only property returns a DOMHighResTimeStamp representing the time immediately before the current document\'s `load` event handler starts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/loadEventStart)')\n    # The **`redirectCount`** read-only property returns a number representing the number of redirects since the last non-redirect navigation in the current browsing context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/redirectCount)\n    redirectCount: float = Field(..., description='The **`redirectCount`** read-only property returns a number representing the number of redirects since the last non-redirect navigation in the current browsing context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/redirectCount)')\n    # The **`type`** read-only property returns the type of navigation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/type)\n    type: NavigationTimingType = Field(..., description='The **`type`** read-only property returns the type of navigation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/type)')\n    # The **`unloadEventEnd`** read-only property returns a DOMHighResTimeStamp representing the time immediately after the current document's `unload` event handler completes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/unloadEventEnd)\n    unloadEventEnd: DOMHighResTimeStamp = Field(..., description='The **`unloadEventEnd`** read-only property returns a DOMHighResTimeStamp representing the time immediately after the current document\'s `unload` event handler completes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/unloadEventEnd)')\n    # The **`unloadEventStart`** read-only property returns a DOMHighResTimeStamp representing the time immediately before the current document's `unload` event handler starts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/unloadEventStart)\n    unloadEventStart: DOMHighResTimeStamp = Field(..., description='The **`unloadEventStart`** read-only property returns a DOMHighResTimeStamp representing the time immediately before the current document\'s `unload` event handler starts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/unloadEventStart)')\n\n# The **`PerformanceObserver`** interface is used to observe performance measurement events and be notified of new PerformanceEntry as they are recorded in the browser's _performance timeline_.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver)\nclass PerformanceObserver(BaseModel):\n    pass\n\n# The **`PerformanceObserverEntryList`** interface is a list of PerformanceEntry that were explicitly observed via the PerformanceObserver.observe method.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList)\nclass PerformanceObserverEntryList(BaseModel):\n    pass\n\n# The **`PerformancePaintTiming`** interface provides timing information about 'paint' (also called 'render') operations during web page construction.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformancePaintTiming)\nclass PerformancePaintTiming(PerformanceEntry):\n    pass\n\n# The **`PerformanceResourceTiming`** interface enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming)\nclass PerformanceResourceTiming(PerformanceEntry):\n    # The **`connectEnd`** read-only property returns the DOMHighResTimeStamp immediately after the browser finishes establishing the connection to the server to retrieve the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/connectEnd)\n    connectEnd: DOMHighResTimeStamp = Field(..., description='The **`connectEnd`** read-only property returns the DOMHighResTimeStamp immediately after the browser finishes establishing the connection to the server to retrieve the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/connectEnd)')\n    # The **`connectStart`** read-only property returns the DOMHighResTimeStamp immediately before the user agent starts establishing the connection to the server to retrieve the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/connectStart)\n    connectStart: DOMHighResTimeStamp = Field(..., description='The **`connectStart`** read-only property returns the DOMHighResTimeStamp immediately before the user agent starts establishing the connection to the server to retrieve the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/connectStart)')\n    # The **`decodedBodySize`** read-only property returns the size (in octets) received from the fetch (HTTP or cache) of the message body after removing any applied content encoding (like gzip or Brotli).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/decodedBodySize)\n    decodedBodySize: float = Field(..., description='The **`decodedBodySize`** read-only property returns the size (in octets) received from the fetch (HTTP or cache) of the message body after removing any applied content encoding (like gzip or Brotli).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/decodedBodySize)')\n    # The **`domainLookupEnd`** read-only property returns the DOMHighResTimeStamp immediately after the browser finishes the domain-name lookup for the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/domainLookupEnd)\n    domainLookupEnd: DOMHighResTimeStamp = Field(..., description='The **`domainLookupEnd`** read-only property returns the DOMHighResTimeStamp immediately after the browser finishes the domain-name lookup for the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/domainLookupEnd)')\n    # The **`domainLookupStart`** read-only property returns the DOMHighResTimeStamp immediately before the browser starts the domain name lookup for the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/domainLookupStart)\n    domainLookupStart: DOMHighResTimeStamp = Field(..., description='The **`domainLookupStart`** read-only property returns the DOMHighResTimeStamp immediately before the browser starts the domain name lookup for the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/domainLookupStart)')\n    # The **`encodedBodySize`** read-only property represents the size (in octets) received from the fetch (HTTP or cache) of the payload body before removing any applied content encodings (like gzip or Brotli).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/encodedBodySize)\n    encodedBodySize: float = Field(..., description='The **`encodedBodySize`** read-only property represents the size (in octets) received from the fetch (HTTP or cache) of the payload body before removing any applied content encodings (like gzip or Brotli).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/encodedBodySize)')\n    # The **`fetchStart`** read-only property represents a DOMHighResTimeStamp immediately before the browser starts to fetch the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/fetchStart)\n    fetchStart: DOMHighResTimeStamp = Field(..., description='The **`fetchStart`** read-only property represents a DOMHighResTimeStamp immediately before the browser starts to fetch the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/fetchStart)')\n    # The **`initiatorType`** read-only property is a string representing web platform feature that initiated the resource load.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/initiatorType)\n    initiatorType: str = Field(..., description='The **`initiatorType`** read-only property is a string representing web platform feature that initiated the resource load.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/initiatorType)')\n    # The **`nextHopProtocol`** read-only property is a string representing the network protocol used to fetch the resource, as identified by the ALPN Protocol ID (RFC7301).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/nextHopProtocol)\n    nextHopProtocol: str = Field(..., description='The **`nextHopProtocol`** read-only property is a string representing the network protocol used to fetch the resource, as identified by the ALPN Protocol ID (RFC7301).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/nextHopProtocol)')\n    # The **`redirectEnd`** read-only property returns a DOMHighResTimeStamp immediately after receiving the last byte of the response of the last redirect.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/redirectEnd)\n    redirectEnd: DOMHighResTimeStamp = Field(..., description='The **`redirectEnd`** read-only property returns a DOMHighResTimeStamp immediately after receiving the last byte of the response of the last redirect.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/redirectEnd)')\n    # The **`redirectStart`** read-only property returns a DOMHighResTimeStamp representing the start time of the fetch which that initiates the redirect.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/redirectStart)\n    redirectStart: DOMHighResTimeStamp = Field(..., description='The **`redirectStart`** read-only property returns a DOMHighResTimeStamp representing the start time of the fetch which that initiates the redirect.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/redirectStart)')\n    # The **`requestStart`** read-only property returns a DOMHighResTimeStamp of the time immediately before the browser starts requesting the resource from the server, cache, or local resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/requestStart)\n    requestStart: DOMHighResTimeStamp = Field(..., description='The **`requestStart`** read-only property returns a DOMHighResTimeStamp of the time immediately before the browser starts requesting the resource from the server, cache, or local resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/requestStart)')\n    # The **`responseEnd`** read-only property returns a DOMHighResTimeStamp immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseEnd)\n    responseEnd: DOMHighResTimeStamp = Field(..., description='The **`responseEnd`** read-only property returns a DOMHighResTimeStamp immediately after the browser receives the last byte of the resource or immediately before the transport connection is closed, whichever comes first.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseEnd)')\n    # The **`responseStart`** read-only property returns a DOMHighResTimeStamp immediately after the browser receives the first byte of the response from the server, cache, or local resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseStart)\n    responseStart: DOMHighResTimeStamp = Field(..., description='The **`responseStart`** read-only property returns a DOMHighResTimeStamp immediately after the browser receives the first byte of the response from the server, cache, or local resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseStart)')\n    # The **`responseStatus`** read-only property represents the HTTP response status code returned when fetching the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseStatus)\n    responseStatus: float = Field(..., description='The **`responseStatus`** read-only property represents the HTTP response status code returned when fetching the resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseStatus)')\n    # The **`secureConnectionStart`** read-only property returns a DOMHighResTimeStamp immediately before the browser starts the handshake process to secure the current connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/secureConnectionStart)\n    secureConnectionStart: DOMHighResTimeStamp = Field(..., description='The **`secureConnectionStart`** read-only property returns a DOMHighResTimeStamp immediately before the browser starts the handshake process to secure the current connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/secureConnectionStart)')\n    # The **`serverTiming`** read-only property returns an array of PerformanceServerTiming entries containing server timing metrics.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/serverTiming)\n    serverTiming: ReadonlyArray<PerformanceServerTiming> = Field(..., description='The **`serverTiming`** read-only property returns an array of PerformanceServerTiming entries containing server timing metrics.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/serverTiming)')\n    # The **`transferSize`** read-only property represents the size (in octets) of the fetched resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/transferSize)\n    transferSize: float = Field(..., description='The **`transferSize`** read-only property represents the size (in octets) of the fetched resource.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/transferSize)')\n    # The **`workerStart`** read-only property of the PerformanceResourceTiming interface returns a The `workerStart` property can have the following values: - A DOMHighResTimeStamp.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/workerStart)\n    workerStart: DOMHighResTimeStamp = Field(..., description='The **`workerStart`** read-only property of the PerformanceResourceTiming interface returns a The `workerStart` property can have the following values: - A DOMHighResTimeStamp.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/workerStart)')\n\n# The **`PerformanceServerTiming`** interface surfaces server metrics that are sent with the response in the Server-Timing HTTP header.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming)\nclass PerformanceServerTiming(BaseModel):\n    # The **`description`** read-only property returns a string value of the server-specified metric description, or an empty string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/description)\n    description: str = Field(..., description='The **`description`** read-only property returns a string value of the server-specified metric description, or an empty string.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/description)')\n    # The **`duration`** read-only property returns a double that contains the server-specified metric duration, or the value `0.0`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/duration)\n    duration: DOMHighResTimeStamp = Field(..., description='The **`duration`** read-only property returns a double that contains the server-specified metric duration, or the value `0.0`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/duration)')\n    # The **`name`** read-only property returns a string value of the server-specified metric name.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/name)\n    name: str = Field(..., description='The **`name`** read-only property returns a string value of the server-specified metric name.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/name)')\n\n# The **`PerformanceTiming`** interface is a legacy interface kept for backwards compatibility and contains properties that offer performance timing information for various events which occur during the loading and use of the current page.
@deprecated This interface is deprecated in the Navigation Timing Level 2 specification. Please use the PerformanceNavigationTiming interface instead.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming)\nclass PerformanceTiming(BaseModel):\n    # The legacy **`PerformanceTiming.connectEnd`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, where the connection is opened network.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/connectEnd)\n    connectEnd: float = Field(..., description='The legacy **`PerformanceTiming.connectEnd`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, where the connection is opened network.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/connectEnd)')\n    # The legacy **`PerformanceTiming.connectStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, where the request to open a connection is sent to the network.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/connectStart)\n    connectStart: float = Field(..., description='The legacy **`PerformanceTiming.connectStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, where the request to open a connection is sent to the network.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/connectStart)')\n    # The legacy **`PerformanceTiming.domComplete`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, when the parser finished its work on the main document, that is when its Document.readyState changes to `'complete'` and the corresponding Document/readystatechange_event event is thrown.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domComplete)\n    domComplete: float = Field(..., description='The legacy **`PerformanceTiming.domComplete`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, when the parser finished its work on the main document, that is when its Document.readyState changes to `\'complete\'` and the corresponding Document/readystatechange_event event is thrown.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domComplete)')\n    # The legacy **`PerformanceTiming.domContentLoadedEventEnd`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, right after all the scripts that need to be executed as soon as possible, in order or not, has been executed.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domContentLoadedEventEnd)\n    domContentLoadedEventEnd: float = Field(..., description='The legacy **`PerformanceTiming.domContentLoadedEventEnd`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, right after all the scripts that need to be executed as soon as possible, in order or not, has been executed.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domContentLoadedEventEnd)')\n    # The legacy **`PerformanceTiming.domContentLoadedEventStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, right before the parser sent the executed right after parsing has been executed.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domContentLoadedEventStart)\n    domContentLoadedEventStart: float = Field(..., description='The legacy **`PerformanceTiming.domContentLoadedEventStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, right before the parser sent the executed right after parsing has been executed.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domContentLoadedEventStart)')\n    # The legacy **`PerformanceTiming.domInteractive`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, when the parser finished its work on the main document, that is when its Document.readyState changes to `'interactive'` and the corresponding Document/readystatechange_event event is thrown.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domInteractive)\n    domInteractive: float = Field(..., description='The legacy **`PerformanceTiming.domInteractive`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, when the parser finished its work on the main document, that is when its Document.readyState changes to `\'interactive\'` and the corresponding Document/readystatechange_event event is thrown.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domInteractive)')\n    # The legacy **`PerformanceTiming.domLoading`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, when the parser started its work, that is when its corresponding Document/readystatechange_event event is thrown.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domLoading)\n    domLoading: float = Field(..., description='The legacy **`PerformanceTiming.domLoading`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, when the parser started its work, that is when its corresponding Document/readystatechange_event event is thrown.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domLoading)')\n    # The legacy **`PerformanceTiming.domainLookupEnd`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, where the domain lookup is finished.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domainLookupEnd)\n    domainLookupEnd: float = Field(..., description='The legacy **`PerformanceTiming.domainLookupEnd`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, where the domain lookup is finished.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domainLookupEnd)')\n    # The legacy **`PerformanceTiming.domainLookupStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, where the domain lookup starts.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domainLookupStart)\n    domainLookupStart: float = Field(..., description='The legacy **`PerformanceTiming.domainLookupStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, where the domain lookup starts.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domainLookupStart)')\n    # The legacy **`PerformanceTiming.fetchStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, the browser is ready to fetch the document using an HTTP request.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/fetchStart)\n    fetchStart: float = Field(..., description='The legacy **`PerformanceTiming.fetchStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, the browser is ready to fetch the document using an HTTP request.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/fetchStart)')\n    # The legacy **`PerformanceTiming.loadEventEnd`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, when the Window/load_event event handler terminated, that is when the load event is completed.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/loadEventEnd)\n    loadEventEnd: float = Field(..., description='The legacy **`PerformanceTiming.loadEventEnd`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, when the Window/load_event event handler terminated, that is when the load event is completed.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/loadEventEnd)')\n    # The legacy **`PerformanceTiming.loadEventStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, when the Window/load_event event was sent for the current document.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/loadEventStart)\n    loadEventStart: float = Field(..., description='The legacy **`PerformanceTiming.loadEventStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, when the Window/load_event event was sent for the current document.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/loadEventStart)')\n    # The legacy **`PerformanceTiming.navigationStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, right after the prompt for unload terminates on the previous document in the same browsing context.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/navigationStart)\n    navigationStart: float = Field(..., description='The legacy **`PerformanceTiming.navigationStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, right after the prompt for unload terminates on the previous document in the same browsing context.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/navigationStart)')\n    # The legacy **`PerformanceTiming.redirectEnd`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, the last HTTP redirect is completed, that is when the last byte of the HTTP response has been received.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/redirectEnd)\n    redirectEnd: float = Field(..., description='The legacy **`PerformanceTiming.redirectEnd`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, the last HTTP redirect is completed, that is when the last byte of the HTTP response has been received.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/redirectEnd)')\n    # The legacy **`PerformanceTiming.redirectStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, the first HTTP redirect starts.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/redirectStart)\n    redirectStart: float = Field(..., description='The legacy **`PerformanceTiming.redirectStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, the first HTTP redirect starts.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/redirectStart)')\n    # The legacy **`PerformanceTiming.requestStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, when the browser sent the request to obtain the actual document, from the server or from a cache.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/requestStart)\n    requestStart: float = Field(..., description='The legacy **`PerformanceTiming.requestStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, when the browser sent the request to obtain the actual document, from the server or from a cache.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/requestStart)')\n    # The legacy **`PerformanceTiming.responseEnd`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, when the browser received the last byte of the response, or when the connection is closed if this happened first, from the server from a cache or from a local resource.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/responseEnd)\n    responseEnd: float = Field(..., description='The legacy **`PerformanceTiming.responseEnd`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, when the browser received the last byte of the response, or when the connection is closed if this happened first, from the server from a cache or from a local resource.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/responseEnd)')\n    # The legacy **`PerformanceTiming.responseStart`** read-only property returns an `unsigned long long` representing the moment in time (in milliseconds since the UNIX epoch) when the browser received the first byte of the response from the server, cache, or local resource.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/responseStart)\n    responseStart: float = Field(..., description='The legacy **`PerformanceTiming.responseStart`** read-only property returns an `unsigned long long` representing the moment in time (in milliseconds since the UNIX epoch) when the browser received the first byte of the response from the server, cache, or local resource.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/responseStart)')\n    # The legacy **`PerformanceTiming.secureConnectionStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, where the secure connection handshake starts.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/secureConnectionStart)\n    secureConnectionStart: float = Field(..., description='The legacy **`PerformanceTiming.secureConnectionStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, where the secure connection handshake starts.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/secureConnectionStart)')\n    # The legacy **`PerformanceTiming.unloadEventEnd`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, the Window/unload_event event handler finishes.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/unloadEventEnd)\n    unloadEventEnd: float = Field(..., description='The legacy **`PerformanceTiming.unloadEventEnd`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, the Window/unload_event event handler finishes.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/unloadEventEnd)')\n    # The legacy **`PerformanceTiming.unloadEventStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, the Window/unload_event event has been thrown.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/unloadEventStart)\n    unloadEventStart: float = Field(..., description='The legacy **`PerformanceTiming.unloadEventStart`** read-only property returns an `unsigned long long` representing the moment, in milliseconds since the UNIX epoch, the Window/unload_event event has been thrown.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/unloadEventStart)')\n\n# The **`PeriodicWave`** interface defines a periodic waveform that can be used to shape the output of an OscillatorNode.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PeriodicWave)\nclass PeriodicWave(BaseModel):\n    pass\n\nclass PermissionStatusEventMap(BaseModel):\n    change: Event = Field(...)\n\n# The **`PermissionStatus`** interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus)\nclass PermissionStatus(EventTarget):\n    # The **`name`** read-only property of the PermissionStatus interface returns the name of a requested permission.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/name)\n    name: str = Field(..., description='The **`name`** read-only property of the PermissionStatus interface returns the name of a requested permission.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/name)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/change_event)\n    onchange: Union[((this: PermissionStatus, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/change_event)')\n    # The **`state`** read-only property of the This property returns one of `'granted'`, `'denied'`, or `'prompt'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/state)\n    state: PermissionState = Field(..., description='The **`state`** read-only property of the This property returns one of `\'granted\'`, `\'denied\'`, or `\'prompt\'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/state)')\n\n# The **`Permissions`** interface of the Permissions API provides the core Permission API functionality, such as methods for querying and revoking permissions - Permissions.query - : Returns the user permission status for a given API.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Permissions)\nclass Permissions(BaseModel):\n    pass\n\n# The **`PictureInPictureEvent`** interface represents picture-in-picture-related events, including HTMLVideoElement/enterpictureinpicture_event, HTMLVideoElement/leavepictureinpicture_event and PictureInPictureWindow/resize_event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureEvent)\nclass PictureInPictureEvent(Event):\n    # The read-only **`pictureInPictureWindow`** property of the PictureInPictureEvent interface returns the PictureInPictureWindow the event relates to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureEvent/pictureInPictureWindow)\n    pictureInPictureWindow: PictureInPictureWindow = Field(..., description='The read-only **`pictureInPictureWindow`** property of the PictureInPictureEvent interface returns the PictureInPictureWindow the event relates to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureEvent/pictureInPictureWindow)')\n\nclass PictureInPictureWindowEventMap(BaseModel):\n    resize: Event = Field(...)\n\n# The **`PictureInPictureWindow`** interface represents an object able to programmatically obtain the **`width`** and **`height`** and **`resize event`** of the floating video window.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow)\nclass PictureInPictureWindow(EventTarget):\n    # The read-only **`height`** property of the PictureInPictureWindow interface returns the height of the floating video window in pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/height)\n    height: float = Field(..., description='The read-only **`height`** property of the PictureInPictureWindow interface returns the height of the floating video window in pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/height)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/resize_event)\n    onresize: Union[((this: PictureInPictureWindow, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/resize_event)')\n    # The read-only **`width`** property of the PictureInPictureWindow interface returns the width of the floating video window in pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/width)\n    width: float = Field(..., description='The read-only **`width`** property of the PictureInPictureWindow interface returns the width of the floating video window in pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/width)')\n\n# The `Plugin` interface provides information about a browser plugin.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Plugin)\nclass Plugin(BaseModel):\n    # Returns the plugin's description.
@deprecated\n    description: str = Field(..., description='Returns the plugin\'s description.
@deprecated')\n    # Returns the plugin library's filename, if applicable on the current platform.
@deprecated\n    filename: str = Field(..., description='Returns the plugin library\'s filename, if applicable on the current platform.
@deprecated')\n    # Returns the number of MIME types, represented by MimeType objects, supported by the plugin.
@deprecated\n    length: float = Field(..., description='Returns the number of MIME types, represented by MimeType objects, supported by the plugin.
@deprecated')\n    # Returns the plugin's name.
@deprecated\n    name: str = Field(..., description='Returns the plugin\'s name.
@deprecated')\n\n# The `PluginArray` interface is used to store a list of Plugin objects; it's returned by the Navigator.plugins property.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PluginArray)\nclass PluginArray(BaseModel):\n    # @deprecated\n    length: float = Field(..., description='@deprecated')\n\n# The **`PointerEvent`** interface represents the state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent)\nclass PointerEvent(MouseEvent):\n    # The **`altitudeAngle`** read-only property of the PointerEvent interface represents the angle between a transducer (a pointer or stylus) axis and the X-Y plane of a device screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/altitudeAngle)\n    altitudeAngle: float = Field(..., description='The **`altitudeAngle`** read-only property of the PointerEvent interface represents the angle between a transducer (a pointer or stylus) axis and the X-Y plane of a device screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/altitudeAngle)')\n    # The **`azimuthAngle`** read-only property of the PointerEvent interface represents the angle between the Y-Z plane and the plane containing both the transducer (pointer or stylus) axis and the Y axis.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/azimuthAngle)\n    azimuthAngle: float = Field(..., description='The **`azimuthAngle`** read-only property of the PointerEvent interface represents the angle between the Y-Z plane and the plane containing both the transducer (pointer or stylus) axis and the Y axis.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/azimuthAngle)')\n    # The **`height`** read-only property of the geometry, along the y-axis (in CSS pixels).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/height)\n    height: float = Field(..., description='The **`height`** read-only property of the geometry, along the y-axis (in CSS pixels).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/height)')\n    # The **`isPrimary`** read-only property of the created the event is the _primary_ pointer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/isPrimary)\n    isPrimary: bool = Field(..., description='The **`isPrimary`** read-only property of the created the event is the _primary_ pointer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/isPrimary)')\n    # The **`pointerId`** read-only property of the event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/pointerId)\n    pointerId: float = Field(..., description='The **`pointerId`** read-only property of the event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/pointerId)')\n    # The **`pointerType`** read-only property of the that caused a given pointer event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/pointerType)\n    pointerType: str = Field(..., description='The **`pointerType`** read-only property of the that caused a given pointer event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/pointerType)')\n    # The **`pressure`** read-only property of the input.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/pressure)\n    pressure: float = Field(..., description='The **`pressure`** read-only property of the input.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/pressure)')\n    # The **`tangentialPressure`** read-only property of the the pointer input (also known as barrel pressure or cylinder stress).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/tangentialPressure)\n    tangentialPressure: float = Field(..., description='The **`tangentialPressure`** read-only property of the the pointer input (also known as barrel pressure or cylinder stress).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/tangentialPressure)')\n    # The **`tiltX`** read-only property of the PointerEvent interface is the angle (in degrees) between the _Y-Z plane_ of the pointer and the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/tiltX)\n    tiltX: float = Field(..., description='The **`tiltX`** read-only property of the PointerEvent interface is the angle (in degrees) between the _Y-Z plane_ of the pointer and the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/tiltX)')\n    # The **`tiltY`** read-only property of the PointerEvent interface is the angle (in degrees) between the _X-Z plane_ of the pointer and the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/tiltY)\n    tiltY: float = Field(..., description='The **`tiltY`** read-only property of the PointerEvent interface is the angle (in degrees) between the _X-Z plane_ of the pointer and the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/tiltY)')\n    # The **`twist`** read-only property of the (e.g., pen stylus) around its major axis, in degrees.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/twist)\n    twist: float = Field(..., description='The **`twist`** read-only property of the (e.g., pen stylus) around its major axis, in degrees.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/twist)')\n    # The **`width`** read-only property of the geometry along the x-axis, measured in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/width)\n    width: float = Field(..., description='The **`width`** read-only property of the geometry along the x-axis, measured in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/width)')\n\n# **`PopStateEvent`** is an interface for the Window/popstate_event event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PopStateEvent)\nclass PopStateEvent(Event):\n    # The **`hasUAVisualTransition`** read-only property of the PopStateEvent interface returns `true` if the user agent performed a visual transition for this navigation before dispatching this event, or `false` otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PopStateEvent/hasUAVisualTransition)\n    hasUAVisualTransition: bool = Field(..., description='The **`hasUAVisualTransition`** read-only property of the PopStateEvent interface returns `true` if the user agent performed a visual transition for this navigation before dispatching this event, or `false` otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PopStateEvent/hasUAVisualTransition)')\n    # The **`state`** read-only property of the PopStateEvent interface represents the state stored when the event was created.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PopStateEvent/state)\n    state: any = Field(..., description='The **`state`** read-only property of the PopStateEvent interface represents the state stored when the event was created.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PopStateEvent/state)')\n\nclass PopoverInvokerElement(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetAction)\n    popoverTargetAction: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetAction)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetElement)\n    popoverTargetElement: Union[Element, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetElement)')\n\n# The **`ProcessingInstruction`** interface represents a processing instruction; that is, a Node which embeds an instruction targeting a specific application but that can be ignored by any other applications which don't recognize the instruction.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ProcessingInstruction)\nclass ProcessingInstruction(CharacterData):\n    ownerDocument: Document = Field(...)\n    # The read-only **`target`** property of the ProcessingInstruction interface represent the application to which the `ProcessingInstruction` is targeted.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ProcessingInstruction/target)\n    target: str = Field(..., description='The read-only **`target`** property of the ProcessingInstruction interface represent the application to which the `ProcessingInstruction` is targeted.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ProcessingInstruction/target)')\n\n# The **`ProgressEvent`** interface represents events that measure the progress of an underlying process, like an HTTP request (e.g., an `XMLHttpRequest`, or the loading of the underlying resource of an img, audio, video, style or link).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent)\nclass ProgressEvent(Event):\n    # The **`ProgressEvent.lengthComputable`** read-only property is a boolean flag indicating if the resource concerned by the A boolean.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/lengthComputable)\n    lengthComputable: bool = Field(..., description='The **`ProgressEvent.lengthComputable`** read-only property is a boolean flag indicating if the resource concerned by the A boolean.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/lengthComputable)')\n    # The **`ProgressEvent.loaded`** read-only property is a number indicating the size of the data already transmitted or processed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/loaded)\n    loaded: float = Field(..., description='The **`ProgressEvent.loaded`** read-only property is a number indicating the size of the data already transmitted or processed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/loaded)')\n    target: Union[T, null] = Field(...)\n    # The **`ProgressEvent.total`** read-only property is a number indicating the total size of the data being transmitted or processed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/total)\n    total: float = Field(..., description='The **`ProgressEvent.total`** read-only property is a number indicating the total size of the data being transmitted or processed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/total)')\n\n# The **`PromiseRejectionEvent`** interface represents events which are sent to the global script context when JavaScript Promises are rejected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent)\nclass PromiseRejectionEvent(Event):\n    # The PromiseRejectionEvent interface's **`promise`** read-only property indicates the JavaScript rejected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent/promise)\n    promise: Promise<any> = Field(..., description='The PromiseRejectionEvent interface\'s **`promise`** read-only property indicates the JavaScript rejected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent/promise)')\n    # The PromiseRejectionEvent **`reason`** read-only property is any JavaScript value or Object which provides the reason passed into Promise.reject().
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent/reason)\n    reason: any = Field(..., description='The PromiseRejectionEvent **`reason`** read-only property is any JavaScript value or Object which provides the reason passed into Promise.reject().
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent/reason)')\n\n# The **`PublicKeyCredential`** interface provides information about a public key / private key pair, which is a credential for logging in to a service using an un-phishable and data-breach resistant asymmetric key pair instead of a password.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential)\nclass PublicKeyCredential(Credential):\n    # The **`authenticatorAttachment`** read-only property of the PublicKeyCredential interface is a string that indicates the general category of authenticator used during the associated CredentialsContainer.create() or CredentialsContainer.get() call.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/authenticatorAttachment)\n    authenticatorAttachment: Union[str, null] = Field(..., description='The **`authenticatorAttachment`** read-only property of the PublicKeyCredential interface is a string that indicates the general category of authenticator used during the associated CredentialsContainer.create() or CredentialsContainer.get() call.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/authenticatorAttachment)')\n    # The **`rawId`** read-only property of the containing the identifier of the credentials.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/rawId)\n    rawId: ArrayBuffer = Field(..., description='The **`rawId`** read-only property of the containing the identifier of the credentials.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/rawId)')\n    # The **`response`** read-only property of the object which is sent from the authenticator to the user agent for the creation/fetching of credentials.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/response)\n    response: AuthenticatorResponse = Field(..., description='The **`response`** read-only property of the object which is sent from the authenticator to the user agent for the creation/fetching of credentials.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/response)')\n\n# The **`PushManager`** interface of the Push API provides a way to receive notifications from third-party servers as well as request URLs for push notifications.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PushManager)\nclass PushManager(BaseModel):\n    pass\n\n# The `PushSubscription` interface of the Push API provides a subscription's URL endpoint along with the public key and secrets that should be used for encrypting push messages to this subscription.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription)\nclass PushSubscription(BaseModel):\n    # The **`endpoint`** read-only property of the the endpoint associated with the push subscription.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/endpoint)\n    endpoint: str = Field(..., description='The **`endpoint`** read-only property of the the endpoint associated with the push subscription.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/endpoint)')\n    # The **`expirationTime`** read-only property of the of the subscription expiration time associated with the push subscription, if there is one, or `null` otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/expirationTime)\n    expirationTime: Union[EpochTimeStamp, null] = Field(..., description='The **`expirationTime`** read-only property of the of the subscription expiration time associated with the push subscription, if there is one, or `null` otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/expirationTime)')\n    # The **`options`** read-only property of the PushSubscription interface is an object containing the options used to create the subscription.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/options)\n    options: PushSubscriptionOptions = Field(..., description='The **`options`** read-only property of the PushSubscription interface is an object containing the options used to create the subscription.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/options)')\n\n# The **`PushSubscriptionOptions`** interface of the Push API represents the options associated with a push subscription.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions)\nclass PushSubscriptionOptions(BaseModel):\n    # The **`applicationServerKey`** read-only property of the PushSubscriptionOptions interface contains the public key used by the push server.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions/applicationServerKey)\n    applicationServerKey: Union[ArrayBuffer, null] = Field(..., description='The **`applicationServerKey`** read-only property of the PushSubscriptionOptions interface contains the public key used by the push server.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions/applicationServerKey)')\n    # The **`userVisibleOnly`** read-only property of the PushSubscriptionOptions interface indicates if the returned push subscription will only be used for messages whose effect is made visible to the user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions/userVisibleOnly)\n    userVisibleOnly: bool = Field(..., description='The **`userVisibleOnly`** read-only property of the PushSubscriptionOptions interface indicates if the returned push subscription will only be used for messages whose effect is made visible to the user.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions/userVisibleOnly)')\n\n# The **`RTCCertificate`** interface of the WebRTC API provides an object representing a certificate that an RTCPeerConnection uses to authenticate.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCCertificate)\nclass RTCCertificate(BaseModel):\n    # The read-only **`expires`** property of the RTCCertificate interface returns the expiration date of the certificate.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCCertificate/expires)\n    expires: EpochTimeStamp = Field(..., description='The read-only **`expires`** property of the RTCCertificate interface returns the expiration date of the certificate.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCCertificate/expires)')\n\nclass RTCDTMFSenderEventMap(BaseModel):\n    tonechange: RTCDTMFToneChangeEvent = Field(...)\n\n# The **`RTCDTMFSender`** interface provides a mechanism for transmitting DTMF codes on a WebRTC RTCPeerConnection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender)\nclass RTCDTMFSender(EventTarget):\n    # The **`canInsertDTMF`** read-only property of the RTCDTMFSender interface returns a boolean value which indicates whether the `RTCDTMFSender` is capable of sending DTMF tones over the RTCPeerConnection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/canInsertDTMF)\n    canInsertDTMF: bool = Field(..., description='The **`canInsertDTMF`** read-only property of the RTCDTMFSender interface returns a boolean value which indicates whether the `RTCDTMFSender` is capable of sending DTMF tones over the RTCPeerConnection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/canInsertDTMF)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/tonechange_event)\n    ontonechange: Union[((this: RTCDTMFSender, ev: RTCDTMFToneChangeEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/tonechange_event)')\n    # The RTCDTMFSender interface's toneBuffer property returns a string containing a list of the DTMF tones currently queued for sending to the remote peer over the RTCPeerConnection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/toneBuffer)\n    toneBuffer: str = Field(..., description='The RTCDTMFSender interface\'s toneBuffer property returns a string containing a list of the DTMF tones currently queued for sending to the remote peer over the RTCPeerConnection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/toneBuffer)')\n\n# The **`RTCDTMFToneChangeEvent`** interface represents events sent to indicate that DTMF tones have started or finished playing.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFToneChangeEvent)\nclass RTCDTMFToneChangeEvent(Event):\n    # The read-only property **`RTCDTMFToneChangeEvent.tone`** returns the DTMF character which has just begun to play, or an empty string (`''`).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFToneChangeEvent/tone)\n    tone: str = Field(..., description='The read-only property **`RTCDTMFToneChangeEvent.tone`** returns the DTMF character which has just begun to play, or an empty string (`\'\'`).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFToneChangeEvent/tone)')\n\nclass RTCDataChannelEventMap(BaseModel):\n    bufferedamountlow: Event = Field(...)\n    close: Event = Field(...)\n    closing: Event = Field(...)\n    error: RTCErrorEvent = Field(...)\n    message: MessageEvent = Field(...)\n    open: Event = Field(...)\n\n# The **`RTCDataChannel`** interface represents a network channel which can be used for bidirectional peer-to-peer transfers of arbitrary data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel)\nclass RTCDataChannel(EventTarget):\n    # The property **`binaryType`** on the the type of object which should be used to represent binary data received on the RTCDataChannel.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/binaryType)\n    binaryType: BinaryType = Field(..., description='The property **`binaryType`** on the the type of object which should be used to represent binary data received on the RTCDataChannel.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/binaryType)')\n    # The read-only `RTCDataChannel` property **`bufferedAmount`** returns the number of bytes of data currently queued to be sent over the data channel.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedAmount)\n    bufferedAmount: float = Field(..., description='The read-only `RTCDataChannel` property **`bufferedAmount`** returns the number of bytes of data currently queued to be sent over the data channel.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedAmount)')\n    # The `RTCDataChannel` property **`bufferedAmountLowThreshold`** is used to specify the number of bytes of buffered outgoing data that is considered 'low.' The default value is 0\.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedAmountLowThreshold)\n    bufferedAmountLowThreshold: float = Field(..., description='The `RTCDataChannel` property **`bufferedAmountLowThreshold`** is used to specify the number of bytes of buffered outgoing data that is considered \'low.\' The default value is 0\.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedAmountLowThreshold)')\n    # The read-only `RTCDataChannel` property **`id`** returns an ID number (between 0 and 65,534) which uniquely identifies the RTCDataChannel.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/id)\n    id: Union[float, null] = Field(..., description='The read-only `RTCDataChannel` property **`id`** returns an ID number (between 0 and 65,534) which uniquely identifies the RTCDataChannel.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/id)')\n    # The read-only `RTCDataChannel` property **`label`** returns a string containing a name describing the data channel.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/label)\n    label: str = Field(..., description='The read-only `RTCDataChannel` property **`label`** returns a string containing a name describing the data channel.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/label)')\n    # The read-only `RTCDataChannel` property **`maxPacketLifeTime`** returns the amount of time, in milliseconds, the browser is allowed to take to attempt to transmit a message, as set when the data channel was created, or `null`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/maxPacketLifeTime)\n    maxPacketLifeTime: Union[float, null] = Field(..., description='The read-only `RTCDataChannel` property **`maxPacketLifeTime`** returns the amount of time, in milliseconds, the browser is allowed to take to attempt to transmit a message, as set when the data channel was created, or `null`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/maxPacketLifeTime)')\n    # The read-only `RTCDataChannel` property **`maxRetransmits`** returns the maximum number of times the browser should try to retransmit a message before giving up, as set when the data channel was created, or `null`, which indicates that there is no maximum.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/maxRetransmits)\n    maxRetransmits: Union[float, null] = Field(..., description='The read-only `RTCDataChannel` property **`maxRetransmits`** returns the maximum number of times the browser should try to retransmit a message before giving up, as set when the data channel was created, or `null`, which indicates that there is no maximum.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/maxRetransmits)')\n    # The read-only `RTCDataChannel` property **`negotiated`** indicates whether the (`true`) or by the WebRTC layer (`false`).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/negotiated)\n    negotiated: bool = Field(..., description='The read-only `RTCDataChannel` property **`negotiated`** indicates whether the (`true`) or by the WebRTC layer (`false`).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/negotiated)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedamountlow_event)\n    onbufferedamountlow: Union[((this: RTCDataChannel, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedamountlow_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/close_event)\n    onclose: Union[((this: RTCDataChannel, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/close_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/closing_event)\n    onclosing: Union[((this: RTCDataChannel, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/closing_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/error_event)\n    onerror: Union[((this: RTCDataChannel, ev: RTCErrorEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/error_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/message_event)\n    onmessage: Union[((this: RTCDataChannel, ev: MessageEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/message_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/open_event)\n    onopen: Union[((this: RTCDataChannel, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/open_event)')\n    # The read-only `RTCDataChannel` property **`ordered`** indicates whether or not the data channel guarantees in-order delivery of messages; the default is `true`, which indicates that the data channel is indeed ordered.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/ordered)\n    ordered: bool = Field(..., description='The read-only `RTCDataChannel` property **`ordered`** indicates whether or not the data channel guarantees in-order delivery of messages; the default is `true`, which indicates that the data channel is indeed ordered.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/ordered)')\n    # The read-only `RTCDataChannel` property **`protocol`** returns a string containing the name of the subprotocol in use.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/protocol)\n    protocol: str = Field(..., description='The read-only `RTCDataChannel` property **`protocol`** returns a string containing the name of the subprotocol in use.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/protocol)')\n    # The read-only `RTCDataChannel` property **`readyState`** returns a string which indicates the state of the data channel's underlying data connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/readyState)\n    readyState: RTCDataChannelState = Field(..., description='The read-only `RTCDataChannel` property **`readyState`** returns a string which indicates the state of the data channel\'s underlying data connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/readyState)')\n\n# The **`RTCDataChannelEvent`** interface represents an event related to a specific RTCDataChannel.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannelEvent)\nclass RTCDataChannelEvent(Event):\n    # The read-only property **`RTCDataChannelEvent.channel`** returns the RTCDataChannel associated with the event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannelEvent/channel)\n    channel: RTCDataChannel = Field(..., description='The read-only property **`RTCDataChannelEvent.channel`** returns the RTCDataChannel associated with the event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannelEvent/channel)')\n\nclass RTCDtlsTransportEventMap(BaseModel):\n    error: RTCErrorEvent = Field(...)\n    statechange: Event = Field(...)\n\n# The **`RTCDtlsTransport`** interface provides access to information about the Datagram Transport Layer Security (**DTLS**) transport over which a RTCPeerConnection's RTP and RTCP packets are sent and received by its RTCRtpSender and RTCRtpReceiver objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport)\nclass RTCDtlsTransport(EventTarget):\n    # The **`iceTransport`** read-only property of the **RTCDtlsTransport** interface contains a reference to the underlying RTCIceTransport.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/iceTransport)\n    iceTransport: RTCIceTransport = Field(..., description='The **`iceTransport`** read-only property of the **RTCDtlsTransport** interface contains a reference to the underlying RTCIceTransport.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/iceTransport)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/error_event)\n    onerror: Union[((this: RTCDtlsTransport, ev: RTCErrorEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/error_event)')\n    onstatechange: Union[((this: RTCDtlsTransport, ev: Event) => any), null] = Field(...)\n    # The **`state`** read-only property of the Datagram Transport Layer Security (**DTLS**) transport state.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/state)\n    state: RTCDtlsTransportState = Field(..., description='The **`state`** read-only property of the Datagram Transport Layer Security (**DTLS**) transport state.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/state)')\n\n# The **`RTCEncodedAudioFrame`** of the WebRTC API represents an encoded audio frame in the WebRTC receiver or sender pipeline, which may be modified using a WebRTC Encoded Transform.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame)\nclass RTCEncodedAudioFrame(BaseModel):\n    # The **`data`** property of the RTCEncodedAudioFrame interface returns a buffer containing the data for an encoded frame.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/data)\n    data: ArrayBuffer = Field(..., description='The **`data`** property of the RTCEncodedAudioFrame interface returns a buffer containing the data for an encoded frame.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/data)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/timestamp)\n    timestamp: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/timestamp)')\n\n# The **`RTCEncodedVideoFrame`** of the WebRTC API represents an encoded video frame in the WebRTC receiver or sender pipeline, which may be modified using a WebRTC Encoded Transform.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame)\nclass RTCEncodedVideoFrame(BaseModel):\n    # The **`data`** property of the RTCEncodedVideoFrame interface returns a buffer containing the frame data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/data)\n    data: ArrayBuffer = Field(..., description='The **`data`** property of the RTCEncodedVideoFrame interface returns a buffer containing the frame data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/data)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/timestamp)\n    timestamp: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/timestamp)')\n    # The **`type`** read-only property of the RTCEncodedVideoFrame interface indicates whether this frame is a key frame, delta frame, or empty frame.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/type)\n    type: RTCEncodedVideoFrameType = Field(..., description='The **`type`** read-only property of the RTCEncodedVideoFrame interface indicates whether this frame is a key frame, delta frame, or empty frame.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/type)')\n\n# The **`RTCError`** interface describes an error which has occurred while handling WebRTC operations.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError)\nclass RTCError(DOMException):\n    # The RTCError interface's read-only **`errorDetail`** property is a string indicating the WebRTC-specific error code that occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/errorDetail)\n    errorDetail: RTCErrorDetailType = Field(..., description='The RTCError interface\'s read-only **`errorDetail`** property is a string indicating the WebRTC-specific error code that occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/errorDetail)')\n    # The RTCError read-only property **`receivedAlert`** specifies the fatal DTLS error which resulted in an alert being received from the remote peer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/receivedAlert)\n    receivedAlert: Union[float, null] = Field(..., description='The RTCError read-only property **`receivedAlert`** specifies the fatal DTLS error which resulted in an alert being received from the remote peer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/receivedAlert)')\n    # The read-only **`sctpCauseCode`** property in an why the SCTP negotiation failed, if the `RTCError` represents an SCTP error.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/sctpCauseCode)\n    sctpCauseCode: Union[float, null] = Field(..., description='The read-only **`sctpCauseCode`** property in an why the SCTP negotiation failed, if the `RTCError` represents an SCTP error.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/sctpCauseCode)')\n    # The RTCError interface's read-only property **`sdpLineNumber`** specifies the line number within the An unsigned integer value indicating the line within the SDP at which the syntax error described by the `RTCError` object occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/sdpLineNumber)\n    sdpLineNumber: Union[float, null] = Field(..., description='The RTCError interface\'s read-only property **`sdpLineNumber`** specifies the line number within the An unsigned integer value indicating the line within the SDP at which the syntax error described by the `RTCError` object occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/sdpLineNumber)')\n    # The read-only **`sentAlert`** property in an while sending data to the remote peer, if the error represents an outbound DTLS error.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/sentAlert)\n    sentAlert: Union[float, null] = Field(..., description='The read-only **`sentAlert`** property in an while sending data to the remote peer, if the error represents an outbound DTLS error.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/sentAlert)')\n\n# The WebRTC API's **`RTCErrorEvent`** interface represents an error sent to a WebRTC object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCErrorEvent)\nclass RTCErrorEvent(Event):\n    # The read-only RTCErrorEvent property **`error`** contains an RTCError object describing the details of the error which the event is announcing.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCErrorEvent/error)\n    error: RTCError = Field(..., description='The read-only RTCErrorEvent property **`error`** contains an RTCError object describing the details of the error which the event is announcing.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCErrorEvent/error)')\n\n# The **`RTCIceCandidate`** interface—part of the WebRTC API—represents a candidate Interactive Connectivity Establishment (ICE) configuration which may be used to establish an RTCPeerConnection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate)\nclass RTCIceCandidate(BaseModel):\n    # The **RTCIceCandidate** interface's read-only **`address`** property is a string providing the IP address of the device which is the source of the candidate.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/address)\n    address: Union[str, null] = Field(..., description='The **RTCIceCandidate** interface\'s read-only **`address`** property is a string providing the IP address of the device which is the source of the candidate.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/address)')\n    # The read-only property **`candidate`** on the RTCIceCandidate interface returns a string describing the candidate in detail.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/candidate)\n    candidate: str = Field(..., description='The read-only property **`candidate`** on the RTCIceCandidate interface returns a string describing the candidate in detail.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/candidate)')\n    # The read-only **`component`** property on the RTCIceCandidate interface is a string which indicates whether the candidate is an RTP or an RTCP candidate.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/component)\n    component: Union[RTCIceComponent, null] = Field(..., description='The read-only **`component`** property on the RTCIceCandidate interface is a string which indicates whether the candidate is an RTP or an RTCP candidate.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/component)')\n    # The **`foundation`** read-only property of the RTCIceCandidate interface is a string that allows correlation of candidates from a common network path on multiple RTCIceTransport objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/foundation)\n    foundation: Union[str, null] = Field(..., description='The **`foundation`** read-only property of the RTCIceCandidate interface is a string that allows correlation of candidates from a common network path on multiple RTCIceTransport objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/foundation)')\n    # The **RTCIceCandidate** interface's read-only **`port`** property contains the port number on the device at the address given by RTCIceCandidate.address at which the candidate's peer can be reached.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/port)\n    port: Union[float, null] = Field(..., description='The **RTCIceCandidate** interface\'s read-only **`port`** property contains the port number on the device at the address given by RTCIceCandidate.address at which the candidate\'s peer can be reached.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/port)')\n    # The **RTCIceCandidate** interface's read-only **`priority`** property specifies the candidate's priority according to the remote peer; the higher this value is, the better the remote peer considers the candidate to be.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/priority)\n    priority: Union[float, null] = Field(..., description='The **RTCIceCandidate** interface\'s read-only **`priority`** property specifies the candidate\'s priority according to the remote peer; the higher this value is, the better the remote peer considers the candidate to be.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/priority)')\n    # The **RTCIceCandidate** interface's read-only **`protocol`** property is a string which indicates whether the candidate uses UDP or TCP as its transport protocol.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/protocol)\n    protocol: Union[RTCIceProtocol, null] = Field(..., description='The **RTCIceCandidate** interface\'s read-only **`protocol`** property is a string which indicates whether the candidate uses UDP or TCP as its transport protocol.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/protocol)')\n    # The **RTCIceCandidate** interface's read-only **`relatedAddress`** property is a string indicating the **related address** of a relay or reflexive candidate.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/relatedAddress)\n    relatedAddress: Union[str, null] = Field(..., description='The **RTCIceCandidate** interface\'s read-only **`relatedAddress`** property is a string indicating the **related address** of a relay or reflexive candidate.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/relatedAddress)')\n    # The **RTCIceCandidate** interface's read-only **`relatedPort`** property indicates the port number of reflexive or relay candidates.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/relatedPort)\n    relatedPort: Union[float, null] = Field(..., description='The **RTCIceCandidate** interface\'s read-only **`relatedPort`** property indicates the port number of reflexive or relay candidates.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/relatedPort)')\n    # The read-only **`sdpMLineIndex`** property on the RTCIceCandidate interface is a zero-based index of the m-line describing the media associated with the candidate.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/sdpMLineIndex)\n    sdpMLineIndex: Union[float, null] = Field(..., description='The read-only **`sdpMLineIndex`** property on the RTCIceCandidate interface is a zero-based index of the m-line describing the media associated with the candidate.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/sdpMLineIndex)')\n    # The read-only property **`sdpMid`** on the RTCIceCandidate interface returns a string specifying the media stream identification tag of the media component with which the candidate is associated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/sdpMid)\n    sdpMid: Union[str, null] = Field(..., description='The read-only property **`sdpMid`** on the RTCIceCandidate interface returns a string specifying the media stream identification tag of the media component with which the candidate is associated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/sdpMid)')\n    # The **RTCIceCandidate** interface's read-only **`tcpType`** property is included on TCP candidates to provide additional details about the candidate type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/tcpType)\n    tcpType: Union[RTCIceTcpCandidateType, null] = Field(..., description='The **RTCIceCandidate** interface\'s read-only **`tcpType`** property is included on TCP candidates to provide additional details about the candidate type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/tcpType)')\n    # The **RTCIceCandidate** interface's read-only **`type`** specifies the type of candidate the object represents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/type)\n    type: Union[RTCIceCandidateType, null] = Field(..., description='The **RTCIceCandidate** interface\'s read-only **`type`** specifies the type of candidate the object represents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/type)')\n    # The read-only **`usernameFragment`** property on the RTCIceCandidate interface is a string indicating the username fragment ('ufrag') that uniquely identifies a single ICE interaction session.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/usernameFragment)\n    usernameFragment: Union[str, null] = Field(..., description='The read-only **`usernameFragment`** property on the RTCIceCandidate interface is a string indicating the username fragment (\'ufrag\') that uniquely identifies a single ICE interaction session.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/usernameFragment)')\n\n# The **`RTCIceCandidatePair`** dictionary describes a pair of ICE candidates which together comprise a description of a viable connection between two WebRTC endpoints.\nclass RTCIceCandidatePair(BaseModel):\n    # The **`local`** property of the **RTCIceCandidatePair** dictionary specifies the RTCIceCandidate which describes the configuration of the local end of a viable WebRTC connection.\n    local: RTCIceCandidate = Field(..., description='The **`local`** property of the **RTCIceCandidatePair** dictionary specifies the RTCIceCandidate which describes the configuration of the local end of a viable WebRTC connection.')\n    # The **`remote`** property of the **RTCIceCandidatePair** dictionary specifies the viable WebRTC connection.\n    remote: RTCIceCandidate = Field(..., description='The **`remote`** property of the **RTCIceCandidatePair** dictionary specifies the viable WebRTC connection.')\n\nclass RTCIceTransportEventMap(BaseModel):\n    gatheringstatechange: Event = Field(...)\n    selectedcandidatepairchange: Event = Field(...)\n    statechange: Event = Field(...)\n\n# The **`RTCIceTransport`** interface provides access to information about the ICE transport layer over which the data is being sent and received.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport)\nclass RTCIceTransport(EventTarget):\n    # The **`gatheringState`** read-only property of the RTCIceTransport interface returns a string that indicates the current gathering state of the ICE agent for this transport: `'new'`, `'gathering'`, or `'complete'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/gatheringState)\n    gatheringState: RTCIceGathererState = Field(..., description='The **`gatheringState`** read-only property of the RTCIceTransport interface returns a string that indicates the current gathering state of the ICE agent for this transport: `\'new\'`, `\'gathering\'`, or `\'complete\'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/gatheringState)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/gatheringstatechange_event)\n    ongatheringstatechange: Union[((this: RTCIceTransport, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/gatheringstatechange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/selectedcandidatepairchange_event)\n    onselectedcandidatepairchange: Union[((this: RTCIceTransport, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/selectedcandidatepairchange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/statechange_event)\n    onstatechange: Union[((this: RTCIceTransport, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/statechange_event)')\n    # The **`state`** read-only property of the RTCIceTransport interface returns the current state of the ICE transport, so you can determine the state of ICE gathering in which the ICE agent currently is operating.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/state)\n    state: RTCIceTransportState = Field(..., description='The **`state`** read-only property of the RTCIceTransport interface returns the current state of the ICE transport, so you can determine the state of ICE gathering in which the ICE agent currently is operating.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/state)')\n\nclass RTCPeerConnectionEventMap(BaseModel):\n    connectionstatechange: Event = Field(...)\n    datachannel: RTCDataChannelEvent = Field(...)\n    icecandidate: RTCPeerConnectionIceEvent = Field(...)\n    icecandidateerror: RTCPeerConnectionIceErrorEvent = Field(...)\n    iceconnectionstatechange: Event = Field(...)\n    icegatheringstatechange: Event = Field(...)\n    negotiationneeded: Event = Field(...)\n    signalingstatechange: Event = Field(...)\n    track: RTCTrackEvent = Field(...)\n\n# The **`RTCPeerConnection`** interface represents a WebRTC connection between the local computer and a remote peer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection)\nclass RTCPeerConnection(EventTarget):\n    # The **`canTrickleIceCandidates`** read-only property of the RTCPeerConnection interface returns a boolean value which indicates whether or not the remote peer can accept trickled ICE candidates.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/canTrickleIceCandidates)\n    canTrickleIceCandidates: Union[bool, null] = Field(..., description='The **`canTrickleIceCandidates`** read-only property of the RTCPeerConnection interface returns a boolean value which indicates whether or not the remote peer can accept trickled ICE candidates.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/canTrickleIceCandidates)')\n    # The **`connectionState`** read-only property of the RTCPeerConnection interface indicates the current state of the peer connection by returning one of the following string values: `new`, `connecting`, `connected`, `disconnected`, `failed`, or `closed`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/connectionState)\n    connectionState: RTCPeerConnectionState = Field(..., description='The **`connectionState`** read-only property of the RTCPeerConnection interface indicates the current state of the peer connection by returning one of the following string values: `new`, `connecting`, `connected`, `disconnected`, `failed`, or `closed`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/connectionState)')\n    # The **`currentLocalDescription`** read-only property of the RTCPeerConnection interface returns an RTCSessionDescription object describing the local end of the connection as it was most recently successfully negotiated since the last time the RTCPeerConnection finished negotiating and connecting to a remote peer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/currentLocalDescription)\n    currentLocalDescription: Union[RTCSessionDescription, null] = Field(..., description='The **`currentLocalDescription`** read-only property of the RTCPeerConnection interface returns an RTCSessionDescription object describing the local end of the connection as it was most recently successfully negotiated since the last time the RTCPeerConnection finished negotiating and connecting to a remote peer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/currentLocalDescription)')\n    # The **`currentRemoteDescription`** read-only property of the RTCPeerConnection interface returns an Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/currentRemoteDescription)\n    currentRemoteDescription: Union[RTCSessionDescription, null] = Field(..., description='The **`currentRemoteDescription`** read-only property of the RTCPeerConnection interface returns an Also included is a list of any ICE candidates that may already have been generated by the ICE agent since the offer or answer represented by the description was first instantiated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/currentRemoteDescription)')\n    # The **`iceConnectionState`** read-only property of the RTCPeerConnection interface returns a string which state of the ICE agent associated with the RTCPeerConnection: `new`, `checking`, `connected`, `completed`, `failed`, `disconnected`, and `closed`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceConnectionState)\n    iceConnectionState: RTCIceConnectionState = Field(..., description='The **`iceConnectionState`** read-only property of the RTCPeerConnection interface returns a string which state of the ICE agent associated with the RTCPeerConnection: `new`, `checking`, `connected`, `completed`, `failed`, `disconnected`, and `closed`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceConnectionState)')\n    # The **`iceGatheringState`** read-only property of the RTCPeerConnection interface returns a string that describes the overall ICE gathering state for this connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceGatheringState)\n    iceGatheringState: RTCIceGatheringState = Field(..., description='The **`iceGatheringState`** read-only property of the RTCPeerConnection interface returns a string that describes the overall ICE gathering state for this connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceGatheringState)')\n    # The **`localDescription`** read-only property of the RTCPeerConnection interface returns an RTCSessionDescription describing the session for the local end of the connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/localDescription)\n    localDescription: Union[RTCSessionDescription, null] = Field(..., description='The **`localDescription`** read-only property of the RTCPeerConnection interface returns an RTCSessionDescription describing the session for the local end of the connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/localDescription)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/connectionstatechange_event)\n    onconnectionstatechange: Union[((this: RTCPeerConnection, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/connectionstatechange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/datachannel_event)\n    ondatachannel: Union[((this: RTCPeerConnection, ev: RTCDataChannelEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/datachannel_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icecandidate_event)\n    onicecandidate: Union[((this: RTCPeerConnection, ev: RTCPeerConnectionIceEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icecandidate_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icecandidateerror_event)\n    onicecandidateerror: Union[((this: RTCPeerConnection, ev: RTCPeerConnectionIceErrorEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icecandidateerror_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceconnectionstatechange_event)\n    oniceconnectionstatechange: Union[((this: RTCPeerConnection, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceconnectionstatechange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event)\n    onicegatheringstatechange: Union[((this: RTCPeerConnection, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/negotiationneeded_event)\n    onnegotiationneeded: Union[((this: RTCPeerConnection, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/negotiationneeded_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/signalingstatechange_event)\n    onsignalingstatechange: Union[((this: RTCPeerConnection, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/signalingstatechange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/track_event)\n    ontrack: Union[((this: RTCPeerConnection, ev: RTCTrackEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/track_event)')\n    # The **`pendingLocalDescription`** read-only property of the RTCPeerConnection interface returns an RTCSessionDescription object describing a pending configuration change for the local end of the connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/pendingLocalDescription)\n    pendingLocalDescription: Union[RTCSessionDescription, null] = Field(..., description='The **`pendingLocalDescription`** read-only property of the RTCPeerConnection interface returns an RTCSessionDescription object describing a pending configuration change for the local end of the connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/pendingLocalDescription)')\n    # The **`pendingRemoteDescription`** read-only property of the RTCPeerConnection interface returns an RTCSessionDescription object describing a pending configuration change for the remote end of the connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/pendingRemoteDescription)\n    pendingRemoteDescription: Union[RTCSessionDescription, null] = Field(..., description='The **`pendingRemoteDescription`** read-only property of the RTCPeerConnection interface returns an RTCSessionDescription object describing a pending configuration change for the remote end of the connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/pendingRemoteDescription)')\n    # The **`remoteDescription`** read-only property of the RTCPeerConnection interface returns a RTCSessionDescription describing the session (which includes configuration and media information) for the remote end of the connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/remoteDescription)\n    remoteDescription: Union[RTCSessionDescription, null] = Field(..., description='The **`remoteDescription`** read-only property of the RTCPeerConnection interface returns a RTCSessionDescription describing the session (which includes configuration and media information) for the remote end of the connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/remoteDescription)')\n    # The **`sctp`** read-only property of the RTCPeerConnection interface returns an RTCSctpTransport describing the SCTP transport over which SCTP data is being sent and received.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/sctp)\n    sctp: Union[RTCSctpTransport, null] = Field(..., description='The **`sctp`** read-only property of the RTCPeerConnection interface returns an RTCSctpTransport describing the SCTP transport over which SCTP data is being sent and received.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/sctp)')\n    # The **`signalingState`** read-only property of the RTCPeerConnection interface returns a string value describing the state of the signaling process on the local end of the connection while connecting or reconnecting to another peer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/signalingState)\n    signalingState: RTCSignalingState = Field(..., description='The **`signalingState`** read-only property of the RTCPeerConnection interface returns a string value describing the state of the signaling process on the local end of the connection while connecting or reconnecting to another peer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/signalingState)')\n\n# The **`RTCPeerConnectionIceErrorEvent`** interface—based upon the Event interface—provides details pertaining to an ICE error announced by sending an RTCPeerConnection.icecandidateerror_event event to the RTCPeerConnection object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent)\nclass RTCPeerConnectionIceErrorEvent(Event):\n    # The RTCPeerConnectionIceErrorEvent property **`address`** is a string which indicates the local IP address being used to communicate with the STUN or TURN server during negotiations.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent/address)\n    address: Union[str, null] = Field(..., description='The RTCPeerConnectionIceErrorEvent property **`address`** is a string which indicates the local IP address being used to communicate with the STUN or TURN server during negotiations.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent/address)')\n    errorCode: float = Field(...)\n    errorText: str = Field(...)\n    port: Union[float, null] = Field(...)\n    url: str = Field(...)\n\n# The **`RTCPeerConnectionIceEvent`** interface represents events that occur in relation to ICE candidates with the target, usually an RTCPeerConnection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceEvent)\nclass RTCPeerConnectionIceEvent(Event):\n    # The read-only **`candidate`** property of the RTCPeerConnectionIceEvent interface returns the An RTCIceCandidate object representing the ICE candidate that has been received, or `null` to indicate that there are no further candidates for this negotiation session.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceEvent/candidate)\n    candidate: Union[RTCIceCandidate, null] = Field(..., description='The read-only **`candidate`** property of the RTCPeerConnectionIceEvent interface returns the An RTCIceCandidate object representing the ICE candidate that has been received, or `null` to indicate that there are no further candidates for this negotiation session.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceEvent/candidate)')\n\n# The **`RTCRtpReceiver`** interface of the WebRTC API manages the reception and decoding of data for a MediaStreamTrack on an RTCPeerConnection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver)\nclass RTCRtpReceiver(BaseModel):\n    # The **`jitterBufferTarget`** property of the RTCRtpReceiver interface is a DOMHighResTimeStamp that indicates the application's preferred duration, in milliseconds, for which the jitter buffer should hold media before playing it out.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/jitterBufferTarget)\n    jitterBufferTarget: Union[DOMHighResTimeStamp, null] = Field(..., description='The **`jitterBufferTarget`** property of the RTCRtpReceiver interface is a DOMHighResTimeStamp that indicates the application\'s preferred duration, in milliseconds, for which the jitter buffer should hold media before playing it out.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/jitterBufferTarget)')\n    # The **`track`** read-only property of the associated with the current RTCRtpReceiver instance.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/track)\n    track: MediaStreamTrack = Field(..., description='The **`track`** read-only property of the associated with the current RTCRtpReceiver instance.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/track)')\n    # The **`transform`** property of the RTCRtpReceiver object is used to insert a transform stream (TransformStream) running in a worker thread into the receiver pipeline.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/transform)\n    transform: Union[RTCRtpTransform, null] = Field(..., description='The **`transform`** property of the RTCRtpReceiver object is used to insert a transform stream (TransformStream) running in a worker thread into the receiver pipeline.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/transform)')\n    # The read-only **`transport`** property of an used to interact with the underlying transport over which the receiver is exchanging Real-time Transport Control Protocol (RTCP) packets.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/transport)\n    transport: Union[RTCDtlsTransport, null] = Field(..., description='The read-only **`transport`** property of an used to interact with the underlying transport over which the receiver is exchanging Real-time Transport Control Protocol (RTCP) packets.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/transport)')\n\n# The **`RTCRtpScriptTransform`** interface of the WebRTC API is used to insert a WebRTC Encoded Transform (a TransformStream running in a worker thread) into the WebRTC sender and receiver pipelines.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpScriptTransform)\nclass RTCRtpScriptTransform(BaseModel):\n    pass\n\n# The **`RTCRtpSender`** interface provides the ability to control and obtain details about how a particular MediaStreamTrack is encoded and sent to a remote peer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender)\nclass RTCRtpSender(BaseModel):\n    # The read-only **`dtmf`** property on the **RTCRtpSender** interface returns a over the RTCPeerConnection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/dtmf)\n    dtmf: Union[RTCDTMFSender, null] = Field(..., description='The read-only **`dtmf`** property on the **RTCRtpSender** interface returns a over the RTCPeerConnection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/dtmf)')\n    # The **`track`** read-only property of the RTCRtpSender interface returns the MediaStreamTrack which is being handled by the `RTCRtpSender`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/track)\n    track: Union[MediaStreamTrack, null] = Field(..., description='The **`track`** read-only property of the RTCRtpSender interface returns the MediaStreamTrack which is being handled by the `RTCRtpSender`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/track)')\n    # The **`transform`** property of the RTCRtpSender object is used to insert a transform stream (TransformStream) running in a worker thread into the sender pipeline.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/transform)\n    transform: Union[RTCRtpTransform, null] = Field(..., description='The **`transform`** property of the RTCRtpSender object is used to insert a transform stream (TransformStream) running in a worker thread into the sender pipeline.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/transform)')\n    # The read-only **`transport`** property of an used to interact with the underlying transport over which the sender is exchanging Real-time Transport Control Protocol (RTCP) packets.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/transport)\n    transport: Union[RTCDtlsTransport, null] = Field(..., description='The read-only **`transport`** property of an used to interact with the underlying transport over which the sender is exchanging Real-time Transport Control Protocol (RTCP) packets.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/transport)')\n\n# The WebRTC interface **`RTCRtpTransceiver`** describes a permanent pairing of an RTCRtpSender and an RTCRtpReceiver, along with some shared state.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver)\nclass RTCRtpTransceiver(BaseModel):\n    # The read-only RTCRtpTransceiver property **`currentDirection`** is a string which indicates the current negotiated directionality of the transceiver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/currentDirection)\n    currentDirection: Union[RTCRtpTransceiverDirection, null] = Field(..., description='The read-only RTCRtpTransceiver property **`currentDirection`** is a string which indicates the current negotiated directionality of the transceiver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/currentDirection)')\n    # The RTCRtpTransceiver property **`direction`** is a string that indicates the transceiver's _preferred_ directionality.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/direction)\n    direction: RTCRtpTransceiverDirection = Field(..., description='The RTCRtpTransceiver property **`direction`** is a string that indicates the transceiver\'s _preferred_ directionality.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/direction)')\n    # The read-only RTCRtpTransceiver interface's **`mid`** property specifies the negotiated media ID (`mid`) which the local and remote peers have agreed upon to uniquely identify the stream's pairing of sender and receiver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/mid)\n    mid: Union[str, null] = Field(..., description='The read-only RTCRtpTransceiver interface\'s **`mid`** property specifies the negotiated media ID (`mid`) which the local and remote peers have agreed upon to uniquely identify the stream\'s pairing of sender and receiver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/mid)')\n    # The read-only **`receiver`** property of WebRTC's RTCRtpTransceiver interface indicates the data for the transceiver's stream.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/receiver)\n    receiver: RTCRtpReceiver = Field(..., description='The read-only **`receiver`** property of WebRTC\'s RTCRtpTransceiver interface indicates the data for the transceiver\'s stream.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/receiver)')\n    # The read-only **`sender`** property of WebRTC's RTCRtpTransceiver interface indicates the for the transceiver's stream.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/sender)\n    sender: RTCRtpSender = Field(..., description='The read-only **`sender`** property of WebRTC\'s RTCRtpTransceiver interface indicates the for the transceiver\'s stream.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/sender)')\n\nclass RTCSctpTransportEventMap(BaseModel):\n    statechange: Event = Field(...)\n\n# The **`RTCSctpTransport`** interface provides information which describes a Stream Control Transmission Protocol (**SCTP**) transport.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport)\nclass RTCSctpTransport(EventTarget):\n    # The **`maxChannels`** read-only property of the RTCSctpTransport interface indicates the maximum number of RTCDataChannel objects that can be opened simultaneously.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/maxChannels)\n    maxChannels: Union[float, null] = Field(..., description='The **`maxChannels`** read-only property of the RTCSctpTransport interface indicates the maximum number of RTCDataChannel objects that can be opened simultaneously.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/maxChannels)')\n    # The **`maxMessageSize`** read-only property of the RTCSctpTransport interface indicates the maximum size of a message that can be sent using the RTCDataChannel.send() method.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/maxMessageSize)\n    maxMessageSize: float = Field(..., description='The **`maxMessageSize`** read-only property of the RTCSctpTransport interface indicates the maximum size of a message that can be sent using the RTCDataChannel.send() method.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/maxMessageSize)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/statechange_event)\n    onstatechange: Union[((this: RTCSctpTransport, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/statechange_event)')\n    # The **`state`** read-only property of the RTCSctpTransport interface provides information which describes a Stream Control Transmission Protocol (SCTP) transport state.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/state)\n    state: RTCSctpTransportState = Field(..., description='The **`state`** read-only property of the RTCSctpTransport interface provides information which describes a Stream Control Transmission Protocol (SCTP) transport state.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/state)')\n    # The **`transport`** read-only property of the RTCSctpTransport interface returns a RTCDtlsTransport object representing the DTLS transport used for the transmission and receipt of data packets.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/transport)\n    transport: RTCDtlsTransport = Field(..., description='The **`transport`** read-only property of the RTCSctpTransport interface returns a RTCDtlsTransport object representing the DTLS transport used for the transmission and receipt of data packets.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/transport)')\n\n# The **`RTCSessionDescription`** interface describes one end of a connection—or potential connection—and how it's configured.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription)\nclass RTCSessionDescription(BaseModel):\n    # The property **`RTCSessionDescription.sdp`** is a read-only string containing the SDP which describes the session.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription/sdp)\n    sdp: str = Field(..., description='The property **`RTCSessionDescription.sdp`** is a read-only string containing the SDP which describes the session.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription/sdp)')\n    # The property **`RTCSessionDescription.type`** is a read-only string value which describes the description's type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription/type)\n    type: RTCSdpType = Field(..., description='The property **`RTCSessionDescription.type`** is a read-only string value which describes the description\'s type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription/type)')\n\n# The **`RTCStatsReport`** interface of the WebRTC API provides a statistics report for a RTCPeerConnection, RTCRtpSender, or RTCRtpReceiver.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCStatsReport)\nclass RTCStatsReport(BaseModel):\n    pass\n\n# The WebRTC API interface **`RTCTrackEvent`** represents the RTCPeerConnection.track_event event, which is sent when a new MediaStreamTrack is added to an RTCRtpReceiver which is part of the RTCPeerConnection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent)\nclass RTCTrackEvent(Event):\n    # The read-only **`receiver`** property of the RTCTrackEvent interface indicates the The RTCRtpReceiver which pairs the `receiver` with a sender and other properties which establish a single bidirectional RTP stream for use by the RTCTrackEvent.track associated with the `RTCTrackEvent`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/receiver)\n    receiver: RTCRtpReceiver = Field(..., description='The read-only **`receiver`** property of the RTCTrackEvent interface indicates the The RTCRtpReceiver which pairs the `receiver` with a sender and other properties which establish a single bidirectional RTP stream for use by the RTCTrackEvent.track associated with the `RTCTrackEvent`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/receiver)')\n    # The WebRTC API interface RTCTrackEvent's read-only **`streams`** property specifies an array of track being added to the RTCPeerConnection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/streams)\n    streams: ReadonlyArray<MediaStream> = Field(..., description='The WebRTC API interface RTCTrackEvent\'s read-only **`streams`** property specifies an array of track being added to the RTCPeerConnection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/streams)')\n    # The
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/track)\n    track: MediaStreamTrack = Field(..., description='The
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/track)')\n    # The WebRTC API interface RTCTrackEvent's read-only **`transceiver`** property indicates the The transceiver pairs the track's The RTCRtpTransceiver which pairs the `receiver` with a sender and other properties which establish a single bidirectional RTP stream for use by the RTCTrackEvent.track associated with the `RTCTrackEvent`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/transceiver)\n    transceiver: RTCRtpTransceiver = Field(..., description='The WebRTC API interface RTCTrackEvent\'s read-only **`transceiver`** property indicates the The transceiver pairs the track\'s The RTCRtpTransceiver which pairs the `receiver` with a sender and other properties which establish a single bidirectional RTP stream for use by the RTCTrackEvent.track associated with the `RTCTrackEvent`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/transceiver)')\n\n# The **`RadioNodeList`** interface represents a collection of elements in a form returned by a call to HTMLFormControlsCollection.namedItem().
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RadioNodeList)\nclass RadioNodeList(NodeListOf):\n    # If the underlying element collection contains radio buttons, the **`RadioNodeList.value`** property represents the checked radio button.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RadioNodeList/value)\n    value: str = Field(..., description='If the underlying element collection contains radio buttons, the **`RadioNodeList.value`** property represents the checked radio button.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RadioNodeList/value)')\n\n# The **`Range`** interface represents a fragment of a document that can contain nodes and parts of text nodes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Range)\nclass Range(AbstractRange):\n    # The **`Range.commonAncestorContainer`** read-only property returns the deepest — or furthest down the document tree — Node that contains both boundary points of the Range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/commonAncestorContainer)\n    commonAncestorContainer: Node = Field(..., description='The **`Range.commonAncestorContainer`** read-only property returns the deepest — or furthest down the document tree — Node that contains both boundary points of the Range.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/commonAncestorContainer)')\n    START_TO_START: 0 = Field(...)\n    START_TO_END: 1 = Field(...)\n    END_TO_END: 2 = Field(...)\n    END_TO_START: 3 = Field(...)\n\n# The **`ReadableByteStreamController`** interface of the Streams API represents a controller for a readable byte stream.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController)\nclass ReadableByteStreamController(BaseModel):\n    # The **`byobRequest`** read-only property of the ReadableByteStreamController interface returns the current BYOB request, or `null` if there are no pending requests.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/byobRequest)\n    byobRequest: Union[ReadableStreamBYOBRequest, null] = Field(..., description='The **`byobRequest`** read-only property of the ReadableByteStreamController interface returns the current BYOB request, or `null` if there are no pending requests.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/byobRequest)')\n    # The **`desiredSize`** read-only property of the ReadableByteStreamController interface returns the number of bytes required to fill the stream's internal queue to its 'desired size'.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/desiredSize)\n    desiredSize: Union[float, null] = Field(..., description='The **`desiredSize`** read-only property of the ReadableByteStreamController interface returns the number of bytes required to fill the stream\'s internal queue to its \'desired size\'.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/desiredSize)')\n\n# The `ReadableStream` interface of the Streams API represents a readable stream of byte data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)\nclass ReadableStream(BaseModel):\n    # The **`locked`** read-only property of the ReadableStream interface returns whether or not the readable stream is locked to a reader.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked)\n    locked: bool = Field(..., description='The **`locked`** read-only property of the ReadableStream interface returns whether or not the readable stream is locked to a reader.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked)')\n\n# The `ReadableStreamBYOBReader` interface of the Streams API defines a reader for a ReadableStream that supports zero-copy reading from an underlying byte source.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader)\nclass ReadableStreamBYOBReader(ReadableStreamGenericReader):\n    pass\n\n# The **`ReadableStreamBYOBRequest`** interface of the Streams API represents a 'pull request' for data from an underlying source that will made as a zero-copy transfer to a consumer (bypassing the stream's internal queues).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest)\nclass ReadableStreamBYOBRequest(BaseModel):\n    # The **`view`** getter property of the ReadableStreamBYOBRequest interface returns the current view.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/view)\n    view: Union[ArrayBufferView<ArrayBuffer>, null] = Field(..., description='The **`view`** getter property of the ReadableStreamBYOBRequest interface returns the current view.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/view)')\n\n# The **`ReadableStreamDefaultController`** interface of the Streams API represents a controller allowing control of a ReadableStream's state and internal queue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController)\nclass ReadableStreamDefaultController(BaseModel):\n    # The **`desiredSize`** read-only property of the required to fill the stream's internal queue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/desiredSize)\n    desiredSize: Union[float, null] = Field(..., description='The **`desiredSize`** read-only property of the required to fill the stream\'s internal queue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/desiredSize)')\n\n# The **`ReadableStreamDefaultReader`** interface of the Streams API represents a default reader that can be used to read stream data supplied from a network (such as a fetch request).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader)\nclass ReadableStreamDefaultReader(ReadableStreamGenericReader):\n    pass\n\nclass ReadableStreamGenericReader(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/closed)\n    closed: Promise<void> = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/closed)')\n\nclass RemotePlaybackEventMap(BaseModel):\n    connect: Event = Field(...)\n    connecting: Event = Field(...)\n    disconnect: Event = Field(...)\n\n# The **`RemotePlayback`** interface of the Remote Playback API allows the page to detect availability of remote playback devices, then connect to and control playing on these devices.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback)\nclass RemotePlayback(EventTarget):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/connect_event)\n    onconnect: Union[((this: RemotePlayback, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/connect_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/connecting_event)\n    onconnecting: Union[((this: RemotePlayback, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/connecting_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/disconnect_event)\n    ondisconnect: Union[((this: RemotePlayback, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/disconnect_event)')\n    # The **`state`** read-only property of the RemotePlayback interface returns the current state of the `RemotePlayback` connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/state)\n    state: RemotePlaybackState = Field(..., description='The **`state`** read-only property of the RemotePlayback interface returns the current state of the `RemotePlayback` connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/state)')\n\n# The `Report` interface of the Reporting API represents a single report.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Report)\nclass Report(BaseModel):\n    # The **`body`** read-only property of the Report interface returns the body of the report, which is a `ReportBody` object containing the detailed report information.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/body)\n    body: Union[ReportBody, null] = Field(..., description='The **`body`** read-only property of the Report interface returns the body of the report, which is a `ReportBody` object containing the detailed report information.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/body)')\n    # The **`type`** read-only property of the Report interface returns the type of report generated, e.g., `deprecation` or `intervention`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/type)\n    type: str = Field(..., description='The **`type`** read-only property of the Report interface returns the type of report generated, e.g., `deprecation` or `intervention`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/type)')\n    # The **`url`** read-only property of the Report interface returns the URL of the document that generated the report.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/url)\n    url: str = Field(..., description='The **`url`** read-only property of the Report interface returns the URL of the document that generated the report.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/url)')\n\n# The **`ReportBody`** interface of the Reporting API represents the body of a report.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportBody)\nclass ReportBody(BaseModel):\n    pass\n\n# The `ReportingObserver` interface of the Reporting API allows you to collect and access reports.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportingObserver)\nclass ReportingObserver(BaseModel):\n    pass\n\n# The **`Request`** interface of the Fetch API represents a resource request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request)\nclass Request(Body):\n    # The **`cache`** read-only property of the Request interface contains the cache mode of the request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/cache)\n    cache: RequestCache = Field(..., description='The **`cache`** read-only property of the Request interface contains the cache mode of the request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/cache)')\n    # The **`credentials`** read-only property of the Request interface reflects the value given to the Request.Request() constructor in the `credentials` option.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/credentials)\n    credentials: RequestCredentials = Field(..., description='The **`credentials`** read-only property of the Request interface reflects the value given to the Request.Request() constructor in the `credentials` option.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/credentials)')\n    # The **`destination`** read-only property of the **Request** interface returns a string describing the type of content being requested.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/destination)\n    destination: RequestDestination = Field(..., description='The **`destination`** read-only property of the **Request** interface returns a string describing the type of content being requested.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/destination)')\n    # The **`headers`** read-only property of the with the request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/headers)\n    headers: Headers = Field(..., description='The **`headers`** read-only property of the with the request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/headers)')\n    # The **`integrity`** read-only property of the Request interface contains the subresource integrity value of the request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/integrity)\n    integrity: str = Field(..., description='The **`integrity`** read-only property of the Request interface contains the subresource integrity value of the request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/integrity)')\n    # The **`keepalive`** read-only property of the Request interface contains the request's `keepalive` setting (`true` or `false`), which indicates whether the browser will keep the associated request alive if the page that initiated it is unloaded before the request is complete.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/keepalive)\n    keepalive: bool = Field(..., description='The **`keepalive`** read-only property of the Request interface contains the request\'s `keepalive` setting (`true` or `false`), which indicates whether the browser will keep the associated request alive if the page that initiated it is unloaded before the request is complete.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/keepalive)')\n    # The **`method`** read-only property of the `POST`, etc.) A String indicating the method of the request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/method)\n    method: str = Field(..., description='The **`method`** read-only property of the `POST`, etc.) A String indicating the method of the request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/method)')\n    # The **`mode`** read-only property of the Request interface contains the mode of the request (e.g., `cors`, `no-cors`, `same-origin`, or `navigate`.) This is used to determine if cross-origin requests lead to valid responses, and which properties of the response are readable.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/mode)\n    mode: RequestMode = Field(..., description='The **`mode`** read-only property of the Request interface contains the mode of the request (e.g., `cors`, `no-cors`, `same-origin`, or `navigate`.) This is used to determine if cross-origin requests lead to valid responses, and which properties of the response are readable.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/mode)')\n    # The **`redirect`** read-only property of the Request interface contains the mode for how redirects are handled.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/redirect)\n    redirect: RequestRedirect = Field(..., description='The **`redirect`** read-only property of the Request interface contains the mode for how redirects are handled.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/redirect)')\n    # The **`referrer`** read-only property of the Request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrer)\n    referrer: str = Field(..., description='The **`referrer`** read-only property of the Request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrer)')\n    # The **`referrerPolicy`** read-only property of the referrer information, sent in the Referer header, should be included with the request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrerPolicy)\n    referrerPolicy: ReferrerPolicy = Field(..., description='The **`referrerPolicy`** read-only property of the referrer information, sent in the Referer header, should be included with the request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrerPolicy)')\n    # The read-only **`signal`** property of the Request interface returns the AbortSignal associated with the request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/signal)\n    signal: AbortSignal = Field(..., description='The read-only **`signal`** property of the Request interface returns the AbortSignal associated with the request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/signal)')\n    # The **`url`** read-only property of the Request interface contains the URL of the request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/url)\n    url: str = Field(..., description='The **`url`** read-only property of the Request interface contains the URL of the request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/url)')\n\n# The **`ResizeObserver`** interface reports changes to the dimensions of an Element's content or border box, or the bounding box of an SVGElement.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserver)\nclass ResizeObserver(BaseModel):\n    pass\n\n# The **`ResizeObserverEntry`** interface represents the object passed to the ResizeObserver.ResizeObserver constructor's callback function, which allows you to access the new dimensions of the Element or SVGElement being observed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry)\nclass ResizeObserverEntry(BaseModel):\n    # The **`borderBoxSize`** read-only property of the ResizeObserverEntry interface returns an array containing the new border box size of the observed element when the callback is run.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/borderBoxSize)\n    borderBoxSize: ReadonlyArray<ResizeObserverSize> = Field(..., description='The **`borderBoxSize`** read-only property of the ResizeObserverEntry interface returns an array containing the new border box size of the observed element when the callback is run.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/borderBoxSize)')\n    # The **`contentBoxSize`** read-only property of the ResizeObserverEntry interface returns an array containing the new content box size of the observed element when the callback is run.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/contentBoxSize)\n    contentBoxSize: ReadonlyArray<ResizeObserverSize> = Field(..., description='The **`contentBoxSize`** read-only property of the ResizeObserverEntry interface returns an array containing the new content box size of the observed element when the callback is run.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/contentBoxSize)')\n    # The `contentRect` read-only property of the object containing the new size of the observed element when the callback is run.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/contentRect)\n    contentRect: DOMRectReadOnly = Field(..., description='The `contentRect` read-only property of the object containing the new size of the observed element when the callback is run.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/contentRect)')\n    # The **`devicePixelContentBoxSize`** read-only property of the ResizeObserverEntry interface returns an array containing the size in device pixels of the observed element when the callback is run.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/devicePixelContentBoxSize)\n    devicePixelContentBoxSize: ReadonlyArray<ResizeObserverSize> = Field(..., description='The **`devicePixelContentBoxSize`** read-only property of the ResizeObserverEntry interface returns an array containing the size in device pixels of the observed element when the callback is run.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/devicePixelContentBoxSize)')\n    # The **`target`** read-only property of the An Element or SVGElement representing the element being observed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/target)\n    target: Element = Field(..., description='The **`target`** read-only property of the An Element or SVGElement representing the element being observed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/target)')\n\n# The **`ResizeObserverSize`** interface of the Resize Observer API is used by the ResizeObserverEntry interface to access the box sizing properties of the element being observed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize)\nclass ResizeObserverSize(BaseModel):\n    # The **`blockSize`** read-only property of the ResizeObserverSize interface returns the length of the observed element's border box in the block dimension.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize/blockSize)\n    blockSize: float = Field(..., description='The **`blockSize`** read-only property of the ResizeObserverSize interface returns the length of the observed element\'s border box in the block dimension.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize/blockSize)')\n    # The **`inlineSize`** read-only property of the ResizeObserverSize interface returns the length of the observed element's border box in the inline dimension.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize/inlineSize)\n    inlineSize: float = Field(..., description='The **`inlineSize`** read-only property of the ResizeObserverSize interface returns the length of the observed element\'s border box in the inline dimension.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize/inlineSize)')\n\n# The **`Response`** interface of the Fetch API represents the response to a request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Response)\nclass Response(Body):\n    # The **`headers`** read-only property of the with the response.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/headers)\n    headers: Headers = Field(..., description='The **`headers`** read-only property of the with the response.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/headers)')\n    # The **`ok`** read-only property of the Response interface contains a Boolean stating whether the response was successful (status in the range 200-299) or not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/ok)\n    ok: bool = Field(..., description='The **`ok`** read-only property of the Response interface contains a Boolean stating whether the response was successful (status in the range 200-299) or not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/ok)')\n    # The **`redirected`** read-only property of the Response interface indicates whether or not the response is the result of a request you made which was redirected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/redirected)\n    redirected: bool = Field(..., description='The **`redirected`** read-only property of the Response interface indicates whether or not the response is the result of a request you made which was redirected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/redirected)')\n    # The **`status`** read-only property of the Response interface contains the HTTP status codes of the response.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/status)\n    status: float = Field(..., description='The **`status`** read-only property of the Response interface contains the HTTP status codes of the response.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/status)')\n    # The **`statusText`** read-only property of the Response interface contains the status message corresponding to the HTTP status code in Response.status.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/statusText)\n    statusText: str = Field(..., description='The **`statusText`** read-only property of the Response interface contains the status message corresponding to the HTTP status code in Response.status.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/statusText)')\n    # The **`type`** read-only property of the Response interface contains the type of the response.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/type)\n    type: ResponseType = Field(..., description='The **`type`** read-only property of the Response interface contains the type of the response.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/type)')\n    # The **`url`** read-only property of the Response interface contains the URL of the response.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/url)\n    url: str = Field(..., description='The **`url`** read-only property of the Response interface contains the URL of the response.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/url)')\n\n# The **`SVGAElement`** interface provides access to the properties of an a element, as well as methods to manipulate them.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAElement)\nclass SVGAElement(SVGGraphicsElement):\n    rel: str = Field(...)\n    # The **`SVGAElement.target`** read-only property of SVGAElement returns an SVGAnimatedString object that specifies the portion of a target window, frame, pane into which a document is to be opened when a link is activated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAElement/target)\n    target: SVGAnimatedString = Field(..., description='The **`SVGAElement.target`** read-only property of SVGAElement returns an SVGAnimatedString object that specifies the portion of a target window, frame, pane into which a document is to be opened when a link is activated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAElement/target)')\n\n# The `SVGAngle` interface is used to represent a value that can be an &lt;angle&gt; or &lt;number&gt; value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle)\nclass SVGAngle(BaseModel):\n    # The **`unitType`** property of the SVGAngle interface is one of the unit type constants and represents the units in which this angle's value is expressed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle/unitType)\n    unitType: float = Field(..., description='The **`unitType`** property of the SVGAngle interface is one of the unit type constants and represents the units in which this angle\'s value is expressed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle/unitType)')\n    # The `value` property of the SVGAngle interface represents the floating point value of the `<angle>` in degrees.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle/value)\n    value: float = Field(..., description='The `value` property of the SVGAngle interface represents the floating point value of the `<angle>` in degrees.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle/value)')\n    # The `valueAsString` property of the SVGAngle interface represents the angle's value as a string, in the units expressed by SVGAngle.unitType.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle/valueAsString)\n    valueAsString: str = Field(..., description='The `valueAsString` property of the SVGAngle interface represents the angle\'s value as a string, in the units expressed by SVGAngle.unitType.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle/valueAsString)')\n    # The `valueInSpecifiedUnits` property of the SVGAngle interface represents the value of this angle as a number, in the units expressed by the angle's SVGAngle.unitType.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle/valueInSpecifiedUnits)\n    valueInSpecifiedUnits: float = Field(..., description='The `valueInSpecifiedUnits` property of the SVGAngle interface represents the value of this angle as a number, in the units expressed by the angle\'s SVGAngle.unitType.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle/valueInSpecifiedUnits)')\n    SVG_ANGLETYPE_UNKNOWN: 0 = Field(...)\n    SVG_ANGLETYPE_UNSPECIFIED: 1 = Field(...)\n    SVG_ANGLETYPE_DEG: 2 = Field(...)\n    SVG_ANGLETYPE_RAD: 3 = Field(...)\n    SVG_ANGLETYPE_GRAD: 4 = Field(...)\n\n# The **`SVGAnimateElement`** interface corresponds to the animate element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimateElement)\nclass SVGAnimateElement(SVGAnimationElement):\n    pass\n\n# The **`SVGAnimateMotionElement`** interface corresponds to the animateMotion element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimateMotionElement)\nclass SVGAnimateMotionElement(SVGAnimationElement):\n    pass\n\n# The `SVGAnimateTransformElement` interface corresponds to the animateTransform element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimateTransformElement)\nclass SVGAnimateTransformElement(SVGAnimationElement):\n    pass\n\n# The **`SVGAnimatedAngle`** interface is used for attributes of basic type \<angle> which can be animated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedAngle)\nclass SVGAnimatedAngle(BaseModel):\n    # The **`animVal`** read-only property of the SVGAnimatedAngle interface represents the current animated value of the associated `<angle>` on an SVG element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedAngle/animVal)\n    animVal: SVGAngle = Field(..., description='The **`animVal`** read-only property of the SVGAnimatedAngle interface represents the current animated value of the associated `<angle>` on an SVG element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedAngle/animVal)')\n    # The **`baseVal`** read-only property of the SVGAnimatedAngle interface represents the base (non-animated) value of the associated `<angle>` on an SVG element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedAngle/baseVal)\n    baseVal: SVGAngle = Field(..., description='The **`baseVal`** read-only property of the SVGAnimatedAngle interface represents the base (non-animated) value of the associated `<angle>` on an SVG element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedAngle/baseVal)')\n\n# The **`SVGAnimatedBoolean`** interface is used for attributes of type boolean which can be animated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedBoolean)\nclass SVGAnimatedBoolean(BaseModel):\n    # The **`animVal`** read-only property of the SVGAnimatedBoolean interface represents the current animated value of the associated animatable boolean SVG attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedBoolean/animVal)\n    animVal: bool = Field(..., description='The **`animVal`** read-only property of the SVGAnimatedBoolean interface represents the current animated value of the associated animatable boolean SVG attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedBoolean/animVal)')\n    # The **`baseVal`** property of the SVGAnimatedBoolean interface is the value of the associated animatable boolean SVG attribute in its base (none-animated) state.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedBoolean/baseVal)\n    baseVal: bool = Field(..., description='The **`baseVal`** property of the SVGAnimatedBoolean interface is the value of the associated animatable boolean SVG attribute in its base (none-animated) state.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedBoolean/baseVal)')\n\n# The **`SVGAnimatedEnumeration`** interface describes attribute values which are constants from a particular enumeration and which can be animated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedEnumeration)\nclass SVGAnimatedEnumeration(BaseModel):\n    # The **`animVal`** property of the SVGAnimatedEnumeration interface contains the current value of an SVG enumeration.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedEnumeration/animVal)\n    animVal: float = Field(..., description='The **`animVal`** property of the SVGAnimatedEnumeration interface contains the current value of an SVG enumeration.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedEnumeration/animVal)')\n    # The **`baseVal`** property of the SVGAnimatedEnumeration interface contains the initial value of an SVG enumeration.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedEnumeration/baseVal)\n    baseVal: float = Field(..., description='The **`baseVal`** property of the SVGAnimatedEnumeration interface contains the initial value of an SVG enumeration.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedEnumeration/baseVal)')\n\n# The **`SVGAnimatedInteger`** interface is used for attributes of basic type \<integer> which can be animated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedInteger)\nclass SVGAnimatedInteger(BaseModel):\n    # The **`animVal`** property of the SVGAnimatedInteger interface represents the animated value of an `<integer>`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedInteger/animVal)\n    animVal: float = Field(..., description='The **`animVal`** property of the SVGAnimatedInteger interface represents the animated value of an `<integer>`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedInteger/animVal)')\n    # The **`baseVal`** property of the SVGAnimatedInteger interface represents the base (non-animated) value of an animatable `<integer>`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedInteger/baseVal)\n    baseVal: float = Field(..., description='The **`baseVal`** property of the SVGAnimatedInteger interface represents the base (non-animated) value of an animatable `<integer>`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedInteger/baseVal)')\n\n# The **`SVGAnimatedLength`** interface represents attributes of type \<length> which can be animated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLength)\nclass SVGAnimatedLength(BaseModel):\n    # The **`animVal`** property of the SVGAnimatedLength interface contains the current value of an SVG enumeration.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLength/animVal)\n    animVal: SVGLength = Field(..., description='The **`animVal`** property of the SVGAnimatedLength interface contains the current value of an SVG enumeration.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLength/animVal)')\n    # The **`baseVal`** property of the SVGAnimatedLength interface contains the initial value of an SVG enumeration.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLength/baseVal)\n    baseVal: SVGLength = Field(..., description='The **`baseVal`** property of the SVGAnimatedLength interface contains the initial value of an SVG enumeration.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLength/baseVal)')\n\n# The **`SVGAnimatedLengthList`** interface is used for attributes of type SVGLengthList which can be animated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLengthList)\nclass SVGAnimatedLengthList(BaseModel):\n    # The **`animVal`** read-only property of the SVGAnimatedLengthList interface represents the animated value of an attribute that accepts a list of `<length>`, `<percentage>`, or `<number>` values.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLengthList/animVal)\n    animVal: SVGLengthList = Field(..., description='The **`animVal`** read-only property of the SVGAnimatedLengthList interface represents the animated value of an attribute that accepts a list of `<length>`, `<percentage>`, or `<number>` values.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLengthList/animVal)')\n    # The **`baseVal`** read-only property of the SVGAnimatedLengthList interface represents the base (non-animated) value of an animatable attribute that accepts a list of `<length>`, `<percentage>`, or `<number>` values.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLengthList/baseVal)\n    baseVal: SVGLengthList = Field(..., description='The **`baseVal`** read-only property of the SVGAnimatedLengthList interface represents the base (non-animated) value of an animatable attribute that accepts a list of `<length>`, `<percentage>`, or `<number>` values.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLengthList/baseVal)')\n\n# The **`SVGAnimatedNumber`** interface represents attributes of type \<number> which can be animated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumber)\nclass SVGAnimatedNumber(BaseModel):\n    # The **`animVal`** read-only property of the SVGAnimatedNumber interface represents the animated value of an SVG element's numeric attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumber/animVal)\n    animVal: float = Field(..., description='The **`animVal`** read-only property of the SVGAnimatedNumber interface represents the animated value of an SVG element\'s numeric attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumber/animVal)')\n    # The **`baseVal`** property of the SVGAnimatedNumber interface represents the base (non-animated) value of an animatable numeric attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumber/baseVal)\n    baseVal: float = Field(..., description='The **`baseVal`** property of the SVGAnimatedNumber interface represents the base (non-animated) value of an animatable numeric attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumber/baseVal)')\n\n# The **`SVGAnimatedNumberList`** interface represents a list of attributes of type \<number> which can be animated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumberList)\nclass SVGAnimatedNumberList(BaseModel):\n    # The **`animVal`** read-only property of the SVGAnimatedNumberList interface represents the current animated value of an animatable attribute that accepts a list of `<number>` values.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumberList/animVal)\n    animVal: SVGNumberList = Field(..., description='The **`animVal`** read-only property of the SVGAnimatedNumberList interface represents the current animated value of an animatable attribute that accepts a list of `<number>` values.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumberList/animVal)')\n    # The **`baseVal`** read-only property of the SVGAnimatedNumberList interface represents the base (non-animated) value of an animatable attribute that accepts a list of `<number>` values.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumberList/baseVal)\n    baseVal: SVGNumberList = Field(..., description='The **`baseVal`** read-only property of the SVGAnimatedNumberList interface represents the base (non-animated) value of an animatable attribute that accepts a list of `<number>` values.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumberList/baseVal)')\n\nclass SVGAnimatedPoints(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPolygonElement/animatedPoints)\n    animatedPoints: SVGPointList = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPolygonElement/animatedPoints)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPolygonElement/points)\n    points: SVGPointList = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPolygonElement/points)')\n\n# The **`SVGAnimatedPreserveAspectRatio`** interface represents attributes of type SVGPreserveAspectRatio which can be animated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedPreserveAspectRatio)\nclass SVGAnimatedPreserveAspectRatio(BaseModel):\n    # The **`animVal`** read-only property of the SVGAnimatedPreserveAspectRatio interface represents the value of the preserveAspectRatio attribute of an SVG element after any animations or transformations are applied.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedPreserveAspectRatio/animVal)\n    animVal: SVGPreserveAspectRatio = Field(..., description='The **`animVal`** read-only property of the SVGAnimatedPreserveAspectRatio interface represents the value of the preserveAspectRatio attribute of an SVG element after any animations or transformations are applied.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedPreserveAspectRatio/animVal)')\n    # The **`baseVal`** read-only property of the SVGAnimatedPreserveAspectRatio interface represents the base (non-animated) value of the preserveAspectRatio attribute of an SVG element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedPreserveAspectRatio/baseVal)\n    baseVal: SVGPreserveAspectRatio = Field(..., description='The **`baseVal`** read-only property of the SVGAnimatedPreserveAspectRatio interface represents the base (non-animated) value of the preserveAspectRatio attribute of an SVG element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedPreserveAspectRatio/baseVal)')\n\n# The **`SVGAnimatedRect`** interface represents an SVGRect attribute that can be animated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedRect)\nclass SVGAnimatedRect(BaseModel):\n    # The **`animVal`** read-only property of the SVGAnimatedRect interface represents the current animated value of the `viewBox` attribute of an SVG element as a read-only DOMRectReadOnly object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedRect/animVal)\n    animVal: DOMRectReadOnly = Field(..., description='The **`animVal`** read-only property of the SVGAnimatedRect interface represents the current animated value of the `viewBox` attribute of an SVG element as a read-only DOMRectReadOnly object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedRect/animVal)')\n    # The **`baseVal`** read-only property of the SVGAnimatedRect interface represents the current non-animated value of the `viewBox` attribute of an SVG element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedRect/baseVal)\n    baseVal: DOMRect = Field(..., description='The **`baseVal`** read-only property of the SVGAnimatedRect interface represents the current non-animated value of the `viewBox` attribute of an SVG element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedRect/baseVal)')\n\n# The **`SVGAnimatedString`** interface represents string attributes which can be animated from each SVG declaration.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString)\nclass SVGAnimatedString(BaseModel):\n    # The `animVal` read-only property of the SVGAnimatedString interface contains the same value as the SVGAnimatedString.baseVal property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString/animVal)\n    animVal: str = Field(..., description='The `animVal` read-only property of the SVGAnimatedString interface contains the same value as the SVGAnimatedString.baseVal property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString/animVal)')\n    # BaseVal gets or sets the base value of the given attribute before any animations are applied.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString/baseVal)\n    baseVal: str = Field(..., description='BaseVal gets or sets the base value of the given attribute before any animations are applied.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString/baseVal)')\n\n# The **`SVGAnimatedTransformList`** interface represents attributes which take a list of numbers and which can be animated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedTransformList)\nclass SVGAnimatedTransformList(BaseModel):\n    # The **`animVal`** read-only property of the SVGAnimatedTransformList interface represents the animated value of the `transform` attribute of an SVG element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedTransformList/animVal)\n    animVal: SVGTransformList = Field(..., description='The **`animVal`** read-only property of the SVGAnimatedTransformList interface represents the animated value of the `transform` attribute of an SVG element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedTransformList/animVal)')\n    # The **`baseVal`** read-only property of the SVGAnimatedTransformList interface represents the non-animated value of the `transform` attribute of an SVG element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedTransformList/baseVal)\n    baseVal: SVGTransformList = Field(..., description='The **`baseVal`** read-only property of the SVGAnimatedTransformList interface represents the non-animated value of the `transform` attribute of an SVG element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedTransformList/baseVal)')\n\n# The **`SVGAnimationElement`** interface is the base interface for all of the animation element interfaces: SVGAnimateElement, SVGSetElement, SVGAnimateColorElement, SVGAnimateMotionElement and SVGAnimateTransformElement.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement)\nclass SVGAnimationElement(SVGElement):\n    # The **`targetElement`** read-only property of the SVGAnimationElement interface refers to the element which is being animated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/targetElement)\n    targetElement: Union[SVGElement, null] = Field(..., description='The **`targetElement`** read-only property of the SVGAnimationElement interface refers to the element which is being animated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/targetElement)')\n\n# The **`SVGCircleElement`** interface is an interface for the circle element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement)\nclass SVGCircleElement(SVGGeometryElement):\n    # The **`cx`** read-only property of the SVGCircleElement interface reflects the cx attribute of a circle element and by that defines the x-coordinate of the circle's center.< If unspecified, the effect is as if the value is set to `0`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/cx)\n    cx: SVGAnimatedLength = Field(..., description='The **`cx`** read-only property of the SVGCircleElement interface reflects the cx attribute of a circle element and by that defines the x-coordinate of the circle\'s center.< If unspecified, the effect is as if the value is set to `0`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/cx)')\n    # The **`cy`** read-only property of the SVGCircleElement interface reflects the cy attribute of a circle element and by that defines the y-coordinate of the circle's center.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/cy)\n    cy: SVGAnimatedLength = Field(..., description='The **`cy`** read-only property of the SVGCircleElement interface reflects the cy attribute of a circle element and by that defines the y-coordinate of the circle\'s center.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/cy)')\n    # The **`r`** read-only property of the SVGCircleElement interface reflects the r attribute of a circle element and by that defines the radius of the circle.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/r)\n    r: SVGAnimatedLength = Field(..., description='The **`r`** read-only property of the SVGCircleElement interface reflects the r attribute of a circle element and by that defines the radius of the circle.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/r)')\n\n# The **`SVGClipPathElement`** interface provides access to the properties of clipPath elements, as well as methods to manipulate them.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement)\nclass SVGClipPathElement(SVGElement):\n    # The read-only **`clipPathUnits`** property of the SVGClipPathElement interface reflects the clipPathUnits attribute of a clipPath element which defines the coordinate system to use for the content of the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement/clipPathUnits)\n    clipPathUnits: SVGAnimatedEnumeration = Field(..., description='The read-only **`clipPathUnits`** property of the SVGClipPathElement interface reflects the clipPathUnits attribute of a clipPath element which defines the coordinate system to use for the content of the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement/clipPathUnits)')\n    # The read-only **`transform`** property of the SVGClipPathElement interface reflects the transform attribute of a clipPath element, that is a list of transformations applied to the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement/transform)\n    transform: SVGAnimatedTransformList = Field(..., description='The read-only **`transform`** property of the SVGClipPathElement interface reflects the transform attribute of a clipPath element, that is a list of transformations applied to the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement/transform)')\n\n# The **`SVGComponentTransferFunctionElement`** interface represents a base interface used by the component transfer function interfaces.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement)\nclass SVGComponentTransferFunctionElement(SVGElement):\n    # The **`amplitude`** read-only property of the SVGComponentTransferFunctionElement interface reflects the amplitude attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/amplitude)\n    amplitude: SVGAnimatedNumber = Field(..., description='The **`amplitude`** read-only property of the SVGComponentTransferFunctionElement interface reflects the amplitude attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/amplitude)')\n    # The **`exponent`** read-only property of the SVGComponentTransferFunctionElement interface reflects the exponent attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/exponent)\n    exponent: SVGAnimatedNumber = Field(..., description='The **`exponent`** read-only property of the SVGComponentTransferFunctionElement interface reflects the exponent attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/exponent)')\n    # The **`intercept`** read-only property of the SVGComponentTransferFunctionElement interface reflects the intercept attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/intercept)\n    intercept: SVGAnimatedNumber = Field(..., description='The **`intercept`** read-only property of the SVGComponentTransferFunctionElement interface reflects the intercept attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/intercept)')\n    # The **`offset`** read-only property of the SVGComponentTransferFunctionElement interface reflects the offset attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/offset)\n    offset: SVGAnimatedNumber = Field(..., description='The **`offset`** read-only property of the SVGComponentTransferFunctionElement interface reflects the offset attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/offset)')\n    # The **`slope`** read-only property of the SVGComponentTransferFunctionElement interface reflects the slope attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/slope)\n    slope: SVGAnimatedNumber = Field(..., description='The **`slope`** read-only property of the SVGComponentTransferFunctionElement interface reflects the slope attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/slope)')\n    # The **`tableValues`** read-only property of the SVGComponentTransferFunctionElement interface reflects the tableValues attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/tableValues)\n    tableValues: SVGAnimatedNumberList = Field(..., description='The **`tableValues`** read-only property of the SVGComponentTransferFunctionElement interface reflects the tableValues attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/tableValues)')\n    # The **`type`** read-only property of the SVGComponentTransferFunctionElement interface reflects the type attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/type)\n    type: SVGAnimatedEnumeration = Field(..., description='The **`type`** read-only property of the SVGComponentTransferFunctionElement interface reflects the type attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/type)')\n    SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0 = Field(...)\n    SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1 = Field(...)\n    SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2 = Field(...)\n    SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3 = Field(...)\n    SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4 = Field(...)\n    SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5 = Field(...)\n\n# The **`SVGDefsElement`** interface corresponds to the defs element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGDefsElement)\nclass SVGDefsElement(SVGGraphicsElement):\n    pass\n\n# The **`SVGDescElement`** interface corresponds to the desc element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGDescElement)\nclass SVGDescElement(SVGElement):\n    pass\n\nclass SVGElementEventMap(ElementEventMap):\n    pass\n\n# All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the `SVGElement` interface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGElement)\nclass SVGElement(Element):\n    # @deprecated\n    className: any = Field(..., description='@deprecated')\n    # The **`ownerSVGElement`** property of the SVGElement interface reflects the nearest ancestor svg element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGElement/ownerSVGElement)\n    ownerSVGElement: Union[SVGSVGElement, null] = Field(..., description='The **`ownerSVGElement`** property of the SVGElement interface reflects the nearest ancestor svg element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGElement/ownerSVGElement)')\n    # The **`viewportElement`** property of the SVGElement interface represents the `SVGElement` which established the current viewport.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGElement/viewportElement)\n    viewportElement: Union[SVGElement, null] = Field(..., description='The **`viewportElement`** property of the SVGElement interface represents the `SVGElement` which established the current viewport.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGElement/viewportElement)')\n\n# The **`SVGEllipseElement`** interface provides access to the properties of ellipse elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement)\nclass SVGEllipseElement(SVGGeometryElement):\n    # The **`cx`** read-only property of the SVGEllipseElement interface describes the x-axis coordinate of the center of the ellipse as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement/cx)\n    cx: SVGAnimatedLength = Field(..., description='The **`cx`** read-only property of the SVGEllipseElement interface describes the x-axis coordinate of the center of the ellipse as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement/cx)')\n    # The **`cy`** read-only property of the SVGEllipseElement interface describes the y-axis coordinate of the center of the ellipse as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement/cy)\n    cy: SVGAnimatedLength = Field(..., description='The **`cy`** read-only property of the SVGEllipseElement interface describes the y-axis coordinate of the center of the ellipse as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement/cy)')\n    # The **`rx`** read-only property of the SVGEllipseElement interface describes the x-axis radius of the ellipse as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement/rx)\n    rx: SVGAnimatedLength = Field(..., description='The **`rx`** read-only property of the SVGEllipseElement interface describes the x-axis radius of the ellipse as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement/rx)')\n    # The **`ry`** read-only property of the SVGEllipseElement interface describes the y-axis radius of the ellipse as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement/ry)\n    ry: SVGAnimatedLength = Field(..., description='The **`ry`** read-only property of the SVGEllipseElement interface describes the y-axis radius of the ellipse as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement/ry)')\n\n# The **`SVGFEBlendElement`** interface corresponds to the feBlend element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement)\nclass SVGFEBlendElement(SVGElement):\n    # The **`in1`** read-only property of the SVGFEBlendElement interface reflects the in attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/in1)\n    in1: SVGAnimatedString = Field(..., description='The **`in1`** read-only property of the SVGFEBlendElement interface reflects the in attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/in1)')\n    # The **`in2`** read-only property of the SVGFEBlendElement interface reflects the in2 attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/in2)\n    in2: SVGAnimatedString = Field(..., description='The **`in2`** read-only property of the SVGFEBlendElement interface reflects the in2 attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/in2)')\n    # The **`mode`** read-only property of the SVGFEBlendElement interface reflects the mode attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/mode)\n    mode: SVGAnimatedEnumeration = Field(..., description='The **`mode`** read-only property of the SVGFEBlendElement interface reflects the mode attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/mode)')\n    SVG_FEBLEND_MODE_UNKNOWN: 0 = Field(...)\n    SVG_FEBLEND_MODE_NORMAL: 1 = Field(...)\n    SVG_FEBLEND_MODE_MULTIPLY: 2 = Field(...)\n    SVG_FEBLEND_MODE_SCREEN: 3 = Field(...)\n    SVG_FEBLEND_MODE_DARKEN: 4 = Field(...)\n    SVG_FEBLEND_MODE_LIGHTEN: 5 = Field(...)\n    SVG_FEBLEND_MODE_OVERLAY: 6 = Field(...)\n    SVG_FEBLEND_MODE_COLOR_DODGE: 7 = Field(...)\n    SVG_FEBLEND_MODE_COLOR_BURN: 8 = Field(...)\n    SVG_FEBLEND_MODE_HARD_LIGHT: 9 = Field(...)\n    SVG_FEBLEND_MODE_SOFT_LIGHT: 10 = Field(...)\n    SVG_FEBLEND_MODE_DIFFERENCE: 11 = Field(...)\n    SVG_FEBLEND_MODE_EXCLUSION: 12 = Field(...)\n    SVG_FEBLEND_MODE_HUE: 13 = Field(...)\n    SVG_FEBLEND_MODE_SATURATION: 14 = Field(...)\n    SVG_FEBLEND_MODE_COLOR: 15 = Field(...)\n    SVG_FEBLEND_MODE_LUMINOSITY: 16 = Field(...)\n\n# The **`SVGFEColorMatrixElement`** interface corresponds to the feColorMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement)\nclass SVGFEColorMatrixElement(SVGElement):\n    # The **`in1`** read-only property of the SVGFEColorMatrixElement interface reflects the in attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/in1)\n    in1: SVGAnimatedString = Field(..., description='The **`in1`** read-only property of the SVGFEColorMatrixElement interface reflects the in attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/in1)')\n    # The **`type`** read-only property of the SVGFEColorMatrixElement interface reflects the type attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/type)\n    type: SVGAnimatedEnumeration = Field(..., description='The **`type`** read-only property of the SVGFEColorMatrixElement interface reflects the type attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/type)')\n    # The **`values`** read-only property of the SVGFEColorMatrixElement interface reflects the values attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/values)\n    values: SVGAnimatedNumberList = Field(..., description='The **`values`** read-only property of the SVGFEColorMatrixElement interface reflects the values attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/values)')\n    SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0 = Field(...)\n    SVG_FECOLORMATRIX_TYPE_MATRIX: 1 = Field(...)\n    SVG_FECOLORMATRIX_TYPE_SATURATE: 2 = Field(...)\n    SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3 = Field(...)\n    SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4 = Field(...)\n\n# The **`SVGFEComponentTransferElement`** interface corresponds to the feComponentTransfer element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEComponentTransferElement)\nclass SVGFEComponentTransferElement(SVGElement):\n    # The **`in1`** read-only property of the SVGFEComponentTransferElement interface reflects the in attribute of the given feComponentTransfer element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEComponentTransferElement/in1)\n    in1: SVGAnimatedString = Field(..., description='The **`in1`** read-only property of the SVGFEComponentTransferElement interface reflects the in attribute of the given feComponentTransfer element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEComponentTransferElement/in1)')\n\n# The **`SVGFECompositeElement`** interface corresponds to the feComposite element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement)\nclass SVGFECompositeElement(SVGElement):\n    # The **`in1`** read-only property of the SVGFECompositeElement interface reflects the in attribute of the given feComposite element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/in1)\n    in1: SVGAnimatedString = Field(..., description='The **`in1`** read-only property of the SVGFECompositeElement interface reflects the in attribute of the given feComposite element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/in1)')\n    # The **`in2`** read-only property of the SVGFECompositeElement interface reflects the in2 attribute of the given feComposite element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/in2)\n    in2: SVGAnimatedString = Field(..., description='The **`in2`** read-only property of the SVGFECompositeElement interface reflects the in2 attribute of the given feComposite element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/in2)')\n    # The **`k1`** read-only property of the SVGFECompositeElement interface reflects the k1 attribute of the given feComposite element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/k1)\n    k1: SVGAnimatedNumber = Field(..., description='The **`k1`** read-only property of the SVGFECompositeElement interface reflects the k1 attribute of the given feComposite element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/k1)')\n    # The **`k2`** read-only property of the SVGFECompositeElement interface reflects the k2 attribute of the given feComposite element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/k2)\n    k2: SVGAnimatedNumber = Field(..., description='The **`k2`** read-only property of the SVGFECompositeElement interface reflects the k2 attribute of the given feComposite element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/k2)')\n    # The **`k3`** read-only property of the SVGFECompositeElement interface reflects the k3 attribute of the given feComposite element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/k3)\n    k3: SVGAnimatedNumber = Field(..., description='The **`k3`** read-only property of the SVGFECompositeElement interface reflects the k3 attribute of the given feComposite element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/k3)')\n    # The **`k4`** read-only property of the SVGFECompositeElement interface reflects the k4 attribute of the given feComposite element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/k4)\n    k4: SVGAnimatedNumber = Field(..., description='The **`k4`** read-only property of the SVGFECompositeElement interface reflects the k4 attribute of the given feComposite element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/k4)')\n    # The **`operator`** read-only property of the SVGFECompositeElement interface reflects the operator attribute of the given feComposite element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/operator)\n    operator: SVGAnimatedEnumeration = Field(..., description='The **`operator`** read-only property of the SVGFECompositeElement interface reflects the operator attribute of the given feComposite element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/operator)')\n    SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0 = Field(...)\n    SVG_FECOMPOSITE_OPERATOR_OVER: 1 = Field(...)\n    SVG_FECOMPOSITE_OPERATOR_IN: 2 = Field(...)\n    SVG_FECOMPOSITE_OPERATOR_OUT: 3 = Field(...)\n    SVG_FECOMPOSITE_OPERATOR_ATOP: 4 = Field(...)\n    SVG_FECOMPOSITE_OPERATOR_XOR: 5 = Field(...)\n    SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6 = Field(...)\n\n# The **`SVGFEConvolveMatrixElement`** interface corresponds to the feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement)\nclass SVGFEConvolveMatrixElement(SVGElement):\n    # The **`bias`** read-only property of the SVGFEConvolveMatrixElement interface reflects the bias attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/bias)\n    bias: SVGAnimatedNumber = Field(..., description='The **`bias`** read-only property of the SVGFEConvolveMatrixElement interface reflects the bias attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/bias)')\n    # The **`divisor`** read-only property of the SVGFEConvolveMatrixElement interface reflects the divisor attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/divisor)\n    divisor: SVGAnimatedNumber = Field(..., description='The **`divisor`** read-only property of the SVGFEConvolveMatrixElement interface reflects the divisor attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/divisor)')\n    # The **`edgeMode`** read-only property of the SVGFEConvolveMatrixElement interface reflects the edgeMode attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/edgeMode)\n    edgeMode: SVGAnimatedEnumeration = Field(..., description='The **`edgeMode`** read-only property of the SVGFEConvolveMatrixElement interface reflects the edgeMode attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/edgeMode)')\n    # The **`in1`** read-only property of the SVGFEConvolveMatrixElement interface reflects the in attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/in1)\n    in1: SVGAnimatedString = Field(..., description='The **`in1`** read-only property of the SVGFEConvolveMatrixElement interface reflects the in attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/in1)')\n    # The **`kernelMatrix`** read-only property of the SVGFEConvolveMatrixElement interface reflects the kernelMatrix attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/kernelMatrix)\n    kernelMatrix: SVGAnimatedNumberList = Field(..., description='The **`kernelMatrix`** read-only property of the SVGFEConvolveMatrixElement interface reflects the kernelMatrix attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/kernelMatrix)')\n    # The **`kernelUnitLengthX`** read-only property of the SVGFEConvolveMatrixElement interface reflects the kernelUnitLength attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/kernelUnitLengthX)\n    kernelUnitLengthX: SVGAnimatedNumber = Field(..., description='The **`kernelUnitLengthX`** read-only property of the SVGFEConvolveMatrixElement interface reflects the kernelUnitLength attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/kernelUnitLengthX)')\n    # The **`kernelUnitLengthY`** read-only property of the SVGFEConvolveMatrixElement interface reflects the kernelUnitLength attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/kernelUnitLengthY)\n    kernelUnitLengthY: SVGAnimatedNumber = Field(..., description='The **`kernelUnitLengthY`** read-only property of the SVGFEConvolveMatrixElement interface reflects the kernelUnitLength attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/kernelUnitLengthY)')\n    # The **`orderX`** read-only property of the SVGFEConvolveMatrixElement interface reflects the order attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/orderX)\n    orderX: SVGAnimatedInteger = Field(..., description='The **`orderX`** read-only property of the SVGFEConvolveMatrixElement interface reflects the order attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/orderX)')\n    # The **`orderY`** read-only property of the SVGFEConvolveMatrixElement interface reflects the order attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/orderY)\n    orderY: SVGAnimatedInteger = Field(..., description='The **`orderY`** read-only property of the SVGFEConvolveMatrixElement interface reflects the order attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/orderY)')\n    # The **`preserveAlpha`** read-only property of the SVGFEConvolveMatrixElement interface reflects the preserveAlpha attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/preserveAlpha)\n    preserveAlpha: SVGAnimatedBoolean = Field(..., description='The **`preserveAlpha`** read-only property of the SVGFEConvolveMatrixElement interface reflects the preserveAlpha attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/preserveAlpha)')\n    # The **`targetX`** read-only property of the SVGFEConvolveMatrixElement interface reflects the targetX attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/targetX)\n    targetX: SVGAnimatedInteger = Field(..., description='The **`targetX`** read-only property of the SVGFEConvolveMatrixElement interface reflects the targetX attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/targetX)')\n    # The **`targetY`** read-only property of the SVGFEConvolveMatrixElement interface reflects the targetY attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/targetY)\n    targetY: SVGAnimatedInteger = Field(..., description='The **`targetY`** read-only property of the SVGFEConvolveMatrixElement interface reflects the targetY attribute of the given feConvolveMatrix element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/targetY)')\n    SVG_EDGEMODE_UNKNOWN: 0 = Field(...)\n    SVG_EDGEMODE_DUPLICATE: 1 = Field(...)\n    SVG_EDGEMODE_WRAP: 2 = Field(...)\n    SVG_EDGEMODE_NONE: 3 = Field(...)\n\n# The **`SVGFEDiffuseLightingElement`** interface corresponds to the feDiffuseLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement)\nclass SVGFEDiffuseLightingElement(SVGElement):\n    # The **`diffuseConstant`** read-only property of the SVGFEDiffuseLightingElement interface reflects the diffuseConstant attribute of the given feDiffuseLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement/diffuseConstant)\n    diffuseConstant: SVGAnimatedNumber = Field(..., description='The **`diffuseConstant`** read-only property of the SVGFEDiffuseLightingElement interface reflects the diffuseConstant attribute of the given feDiffuseLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement/diffuseConstant)')\n    # The **`in1`** read-only property of the SVGFEDiffuseLightingElement interface reflects the in attribute of the given feDiffuseLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement/in1)\n    in1: SVGAnimatedString = Field(..., description='The **`in1`** read-only property of the SVGFEDiffuseLightingElement interface reflects the in attribute of the given feDiffuseLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement/in1)')\n    # The **`kernelUnitLengthX`** read-only property of the SVGFEDiffuseLightingElement interface reflects the X component of the kernelUnitLength attribute of the given feDiffuseLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement/kernelUnitLengthX)\n    kernelUnitLengthX: SVGAnimatedNumber = Field(..., description='The **`kernelUnitLengthX`** read-only property of the SVGFEDiffuseLightingElement interface reflects the X component of the kernelUnitLength attribute of the given feDiffuseLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement/kernelUnitLengthX)')\n    # The **`kernelUnitLengthY`** read-only property of the SVGFEDiffuseLightingElement interface reflects the Y component of the kernelUnitLength attribute of the given feDiffuseLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement/kernelUnitLengthY)\n    kernelUnitLengthY: SVGAnimatedNumber = Field(..., description='The **`kernelUnitLengthY`** read-only property of the SVGFEDiffuseLightingElement interface reflects the Y component of the kernelUnitLength attribute of the given feDiffuseLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement/kernelUnitLengthY)')\n    # The **`surfaceScale`** read-only property of the SVGFEDiffuseLightingElement interface reflects the surfaceScale attribute of the given feDiffuseLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement/surfaceScale)\n    surfaceScale: SVGAnimatedNumber = Field(..., description='The **`surfaceScale`** read-only property of the SVGFEDiffuseLightingElement interface reflects the surfaceScale attribute of the given feDiffuseLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement/surfaceScale)')\n\n# The **`SVGFEDisplacementMapElement`** interface corresponds to the feDisplacementMap element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement)\nclass SVGFEDisplacementMapElement(SVGElement):\n    # The **`in1`** read-only property of the SVGFEDisplacementMapElement interface reflects the in attribute of the given feDisplacementMap element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement/in1)\n    in1: SVGAnimatedString = Field(..., description='The **`in1`** read-only property of the SVGFEDisplacementMapElement interface reflects the in attribute of the given feDisplacementMap element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement/in1)')\n    # The **`in2`** read-only property of the SVGFEDisplacementMapElement interface reflects the in2 attribute of the given feDisplacementMap element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement/in2)\n    in2: SVGAnimatedString = Field(..., description='The **`in2`** read-only property of the SVGFEDisplacementMapElement interface reflects the in2 attribute of the given feDisplacementMap element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement/in2)')\n    # The **`scale`** read-only property of the SVGFEDisplacementMapElement interface reflects the scale attribute of the given feDisplacementMap element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement/scale)\n    scale: SVGAnimatedNumber = Field(..., description='The **`scale`** read-only property of the SVGFEDisplacementMapElement interface reflects the scale attribute of the given feDisplacementMap element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement/scale)')\n    # The **`xChannelSelector`** read-only property of the SVGFEDisplacementMapElement interface reflects the xChannelSelector attribute of the given feDisplacementMap element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement/xChannelSelector)\n    xChannelSelector: SVGAnimatedEnumeration = Field(..., description='The **`xChannelSelector`** read-only property of the SVGFEDisplacementMapElement interface reflects the xChannelSelector attribute of the given feDisplacementMap element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement/xChannelSelector)')\n    # The **`yChannelSelector`** read-only property of the SVGFEDisplacementMapElement interface reflects the yChannelSelector attribute of the given feDisplacementMap element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement/yChannelSelector)\n    yChannelSelector: SVGAnimatedEnumeration = Field(..., description='The **`yChannelSelector`** read-only property of the SVGFEDisplacementMapElement interface reflects the yChannelSelector attribute of the given feDisplacementMap element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement/yChannelSelector)')\n    SVG_CHANNEL_UNKNOWN: 0 = Field(...)\n    SVG_CHANNEL_R: 1 = Field(...)\n    SVG_CHANNEL_G: 2 = Field(...)\n    SVG_CHANNEL_B: 3 = Field(...)\n    SVG_CHANNEL_A: 4 = Field(...)\n\n# The **`SVGFEDistantLightElement`** interface corresponds to the feDistantLight element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDistantLightElement)\nclass SVGFEDistantLightElement(SVGElement):\n    # The **`azimuth`** read-only property of the SVGFEDistantLightElement interface reflects the azimuth attribute of the given feDistantLight element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDistantLightElement/azimuth)\n    azimuth: SVGAnimatedNumber = Field(..., description='The **`azimuth`** read-only property of the SVGFEDistantLightElement interface reflects the azimuth attribute of the given feDistantLight element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDistantLightElement/azimuth)')\n    # The **`elevation`** read-only property of the SVGFEDistantLightElement interface reflects the elevation attribute of the given feDistantLight element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDistantLightElement/elevation)\n    elevation: SVGAnimatedNumber = Field(..., description='The **`elevation`** read-only property of the SVGFEDistantLightElement interface reflects the elevation attribute of the given feDistantLight element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDistantLightElement/elevation)')\n\n# The **`SVGFEDropShadowElement`** interface corresponds to the feDropShadow element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement)\nclass SVGFEDropShadowElement(SVGElement):\n    # The **`dx`** read-only property of the SVGFEDropShadowElement interface reflects the dx attribute of the given feDropShadow element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement/dx)\n    dx: SVGAnimatedNumber = Field(..., description='The **`dx`** read-only property of the SVGFEDropShadowElement interface reflects the dx attribute of the given feDropShadow element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement/dx)')\n    # The **`dy`** read-only property of the SVGFEDropShadowElement interface reflects the dy attribute of the given feDropShadow element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement/dy)\n    dy: SVGAnimatedNumber = Field(..., description='The **`dy`** read-only property of the SVGFEDropShadowElement interface reflects the dy attribute of the given feDropShadow element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement/dy)')\n    # The **`in1`** read-only property of the SVGFEDropShadowElement interface reflects the in attribute of the given feDropShadow element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement/in1)\n    in1: SVGAnimatedString = Field(..., description='The **`in1`** read-only property of the SVGFEDropShadowElement interface reflects the in attribute of the given feDropShadow element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement/in1)')\n    # The **`stdDeviationX`** read-only property of the SVGFEDropShadowElement interface reflects the (possibly automatically computed) X component of the stdDeviation attribute of the given feDropShadow element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement/stdDeviationX)\n    stdDeviationX: SVGAnimatedNumber = Field(..., description='The **`stdDeviationX`** read-only property of the SVGFEDropShadowElement interface reflects the (possibly automatically computed) X component of the stdDeviation attribute of the given feDropShadow element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement/stdDeviationX)')\n    # The **`stdDeviationY`** read-only property of the SVGFEDropShadowElement interface reflects the (possibly automatically computed) Y component of the stdDeviation attribute of the given feDropShadow element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement/stdDeviationY)\n    stdDeviationY: SVGAnimatedNumber = Field(..., description='The **`stdDeviationY`** read-only property of the SVGFEDropShadowElement interface reflects the (possibly automatically computed) Y component of the stdDeviation attribute of the given feDropShadow element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement/stdDeviationY)')\n\n# The **`SVGFEFloodElement`** interface corresponds to the feFlood element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFloodElement)\nclass SVGFEFloodElement(SVGElement):\n    pass\n\n# The **`SVGFEFuncAElement`** interface corresponds to the feFuncA element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncAElement)\nclass SVGFEFuncAElement(SVGComponentTransferFunctionElement):\n    pass\n\n# The **`SVGFEFuncBElement`** interface corresponds to the feFuncB element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncBElement)\nclass SVGFEFuncBElement(SVGComponentTransferFunctionElement):\n    pass\n\n# The **`SVGFEFuncGElement`** interface corresponds to the feFuncG element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncGElement)\nclass SVGFEFuncGElement(SVGComponentTransferFunctionElement):\n    pass\n\n# The **`SVGFEFuncRElement`** interface corresponds to the feFuncR element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncRElement)\nclass SVGFEFuncRElement(SVGComponentTransferFunctionElement):\n    pass\n\n# The **`SVGFEGaussianBlurElement`** interface corresponds to the feGaussianBlur element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEGaussianBlurElement)\nclass SVGFEGaussianBlurElement(SVGElement):\n    # The **`in1`** read-only property of the SVGFEGaussianBlurElement interface reflects the in attribute of the given feGaussianBlur element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEGaussianBlurElement/in1)\n    in1: SVGAnimatedString = Field(..., description='The **`in1`** read-only property of the SVGFEGaussianBlurElement interface reflects the in attribute of the given feGaussianBlur element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEGaussianBlurElement/in1)')\n    # The **`stdDeviationX`** read-only property of the SVGFEGaussianBlurElement interface reflects the (possibly automatically computed) X component of the stdDeviation attribute of the given feGaussianBlur element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEGaussianBlurElement/stdDeviationX)\n    stdDeviationX: SVGAnimatedNumber = Field(..., description='The **`stdDeviationX`** read-only property of the SVGFEGaussianBlurElement interface reflects the (possibly automatically computed) X component of the stdDeviation attribute of the given feGaussianBlur element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEGaussianBlurElement/stdDeviationX)')\n    # The **`stdDeviationY`** read-only property of the SVGFEGaussianBlurElement interface reflects the (possibly automatically computed) Y component of the stdDeviation attribute of the given feGaussianBlur element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEGaussianBlurElement/stdDeviationY)\n    stdDeviationY: SVGAnimatedNumber = Field(..., description='The **`stdDeviationY`** read-only property of the SVGFEGaussianBlurElement interface reflects the (possibly automatically computed) Y component of the stdDeviation attribute of the given feGaussianBlur element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEGaussianBlurElement/stdDeviationY)')\n\n# The **`SVGFEImageElement`** interface corresponds to the feImage element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEImageElement)\nclass SVGFEImageElement(SVGElement):\n    # The **`preserveAspectRatio`** read-only property of the SVGFEImageElement interface reflects the preserveAspectRatio attribute of the given feImage element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEImageElement/preserveAspectRatio)\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio = Field(..., description='The **`preserveAspectRatio`** read-only property of the SVGFEImageElement interface reflects the preserveAspectRatio attribute of the given feImage element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEImageElement/preserveAspectRatio)')\n\n# The **`SVGFEMergeElement`** interface corresponds to the feMerge element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMergeElement)\nclass SVGFEMergeElement(SVGElement):\n    pass\n\n# The **`SVGFEMergeNodeElement`** interface corresponds to the feMergeNode element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMergeNodeElement)\nclass SVGFEMergeNodeElement(SVGElement):\n    # The **`in1`** read-only property of the SVGFEMergeNodeElement interface reflects the in attribute of the given feMergeNode element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMergeNodeElement/in1)\n    in1: SVGAnimatedString = Field(..., description='The **`in1`** read-only property of the SVGFEMergeNodeElement interface reflects the in attribute of the given feMergeNode element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMergeNodeElement/in1)')\n\n# The **`SVGFEMorphologyElement`** interface corresponds to the feMorphology element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement)\nclass SVGFEMorphologyElement(SVGElement):\n    # The **`in1`** read-only property of the SVGFEMorphologyElement interface reflects the in attribute of the given feMorphology element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement/in1)\n    in1: SVGAnimatedString = Field(..., description='The **`in1`** read-only property of the SVGFEMorphologyElement interface reflects the in attribute of the given feMorphology element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement/in1)')\n    # The **`operator`** read-only property of the SVGFEMorphologyElement interface reflects the operator attribute of the given feMorphology element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement/operator)\n    operator: SVGAnimatedEnumeration = Field(..., description='The **`operator`** read-only property of the SVGFEMorphologyElement interface reflects the operator attribute of the given feMorphology element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement/operator)')\n    # The **`radiusX`** read-only property of the SVGFEMorphologyElement interface reflects the X component of the radius attribute of the given feMorphology element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement/radiusX)\n    radiusX: SVGAnimatedNumber = Field(..., description='The **`radiusX`** read-only property of the SVGFEMorphologyElement interface reflects the X component of the radius attribute of the given feMorphology element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement/radiusX)')\n    # The **`radiusY`** read-only property of the SVGFEMorphologyElement interface reflects the Y component of the radius attribute of the given feMorphology element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement/radiusY)\n    radiusY: SVGAnimatedNumber = Field(..., description='The **`radiusY`** read-only property of the SVGFEMorphologyElement interface reflects the Y component of the radius attribute of the given feMorphology element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement/radiusY)')\n    SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0 = Field(...)\n    SVG_MORPHOLOGY_OPERATOR_ERODE: 1 = Field(...)\n    SVG_MORPHOLOGY_OPERATOR_DILATE: 2 = Field(...)\n\n# The **`SVGFEOffsetElement`** interface corresponds to the feOffset element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEOffsetElement)\nclass SVGFEOffsetElement(SVGElement):\n    # The **`dx`** read-only property of the SVGFEOffsetElement interface reflects the dx attribute of the given feOffset element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEOffsetElement/dx)\n    dx: SVGAnimatedNumber = Field(..., description='The **`dx`** read-only property of the SVGFEOffsetElement interface reflects the dx attribute of the given feOffset element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEOffsetElement/dx)')\n    # The **`dy`** read-only property of the SVGFEOffsetElement interface reflects the dy attribute of the given feOffset element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEOffsetElement/dy)\n    dy: SVGAnimatedNumber = Field(..., description='The **`dy`** read-only property of the SVGFEOffsetElement interface reflects the dy attribute of the given feOffset element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEOffsetElement/dy)')\n    # The **`in1`** read-only property of the SVGFEOffsetElement interface reflects the in attribute of the given feOffset element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEOffsetElement/in1)\n    in1: SVGAnimatedString = Field(..., description='The **`in1`** read-only property of the SVGFEOffsetElement interface reflects the in attribute of the given feOffset element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEOffsetElement/in1)')\n\n# The **`SVGFEPointLightElement`** interface corresponds to the fePointLight element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEPointLightElement)\nclass SVGFEPointLightElement(SVGElement):\n    # The **`x`** read-only property of the SVGFEPointLightElement interface describes the horizontal coordinate of the position of an SVG filter primitive as a SVGAnimatedNumber.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEPointLightElement/x)\n    x: SVGAnimatedNumber = Field(..., description='The **`x`** read-only property of the SVGFEPointLightElement interface describes the horizontal coordinate of the position of an SVG filter primitive as a SVGAnimatedNumber.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEPointLightElement/x)')\n    # The **`y`** read-only property of the SVGFEPointLightElement interface describes the vertical coordinate of the position of an SVG filter primitive as a SVGAnimatedNumber.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEPointLightElement/y)\n    y: SVGAnimatedNumber = Field(..., description='The **`y`** read-only property of the SVGFEPointLightElement interface describes the vertical coordinate of the position of an SVG filter primitive as a SVGAnimatedNumber.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEPointLightElement/y)')\n    # The **`z`** read-only property of the SVGFEPointLightElement interface describes the z-axis value of the position of an SVG filter primitive as a SVGAnimatedNumber.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEPointLightElement/z)\n    z: SVGAnimatedNumber = Field(..., description='The **`z`** read-only property of the SVGFEPointLightElement interface describes the z-axis value of the position of an SVG filter primitive as a SVGAnimatedNumber.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEPointLightElement/z)')\n\n# The **`SVGFESpecularLightingElement`** interface corresponds to the feSpecularLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement)\nclass SVGFESpecularLightingElement(SVGElement):\n    # The **`in1`** read-only property of the SVGFESpecularLightingElement interface reflects the in attribute of the given feSpecularLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/in1)\n    in1: SVGAnimatedString = Field(..., description='The **`in1`** read-only property of the SVGFESpecularLightingElement interface reflects the in attribute of the given feSpecularLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/in1)')\n    # The **`kernelUnitLengthX`** read-only property of the SVGFESpecularLightingElement interface reflects the x value of the kernelUnitLength attribute of the given feSpecularLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/kernelUnitLengthX)\n    kernelUnitLengthX: SVGAnimatedNumber = Field(..., description='The **`kernelUnitLengthX`** read-only property of the SVGFESpecularLightingElement interface reflects the x value of the kernelUnitLength attribute of the given feSpecularLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/kernelUnitLengthX)')\n    # The **`kernelUnitLengthY`** read-only property of the SVGFESpecularLightingElement interface reflects the y value of the kernelUnitLength attribute of the given feSpecularLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/kernelUnitLengthY)\n    kernelUnitLengthY: SVGAnimatedNumber = Field(..., description='The **`kernelUnitLengthY`** read-only property of the SVGFESpecularLightingElement interface reflects the y value of the kernelUnitLength attribute of the given feSpecularLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/kernelUnitLengthY)')\n    # The **`specularConstant`** read-only property of the SVGFESpecularLightingElement interface reflects the specularConstant attribute of the given feSpecularLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/specularConstant)\n    specularConstant: SVGAnimatedNumber = Field(..., description='The **`specularConstant`** read-only property of the SVGFESpecularLightingElement interface reflects the specularConstant attribute of the given feSpecularLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/specularConstant)')\n    # The **`specularExponent`** read-only property of the SVGFESpecularLightingElement interface reflects the specularExponent attribute of the given feSpecularLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/specularExponent)\n    specularExponent: SVGAnimatedNumber = Field(..., description='The **`specularExponent`** read-only property of the SVGFESpecularLightingElement interface reflects the specularExponent attribute of the given feSpecularLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/specularExponent)')\n    # The **`surfaceScale`** read-only property of the SVGFESpecularLightingElement interface reflects the surfaceScale attribute of the given feSpecularLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/surfaceScale)\n    surfaceScale: SVGAnimatedNumber = Field(..., description='The **`surfaceScale`** read-only property of the SVGFESpecularLightingElement interface reflects the surfaceScale attribute of the given feSpecularLighting element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/surfaceScale)')\n\n# The **`SVGFESpotLightElement`** interface corresponds to the feSpotLight element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement)\nclass SVGFESpotLightElement(SVGElement):\n    # The **`limitingConeAngle`** read-only property of the SVGFESpotLightElement interface reflects the limitingConeAngle attribute of the given feSpotLight element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/limitingConeAngle)\n    limitingConeAngle: SVGAnimatedNumber = Field(..., description='The **`limitingConeAngle`** read-only property of the SVGFESpotLightElement interface reflects the limitingConeAngle attribute of the given feSpotLight element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/limitingConeAngle)')\n    # The **`pointsAtX`** read-only property of the SVGFESpotLightElement interface reflects the pointsAtX attribute of the given feSpotLight element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/pointsAtX)\n    pointsAtX: SVGAnimatedNumber = Field(..., description='The **`pointsAtX`** read-only property of the SVGFESpotLightElement interface reflects the pointsAtX attribute of the given feSpotLight element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/pointsAtX)')\n    # The **`pointsAtY`** read-only property of the SVGFESpotLightElement interface reflects the pointsAtY attribute of the given feSpotLight element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/pointsAtY)\n    pointsAtY: SVGAnimatedNumber = Field(..., description='The **`pointsAtY`** read-only property of the SVGFESpotLightElement interface reflects the pointsAtY attribute of the given feSpotLight element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/pointsAtY)')\n    # The **`pointsAtZ`** read-only property of the SVGFESpotLightElement interface reflects the pointsAtZ attribute of the given feSpotLight element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/pointsAtZ)\n    pointsAtZ: SVGAnimatedNumber = Field(..., description='The **`pointsAtZ`** read-only property of the SVGFESpotLightElement interface reflects the pointsAtZ attribute of the given feSpotLight element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/pointsAtZ)')\n    # The **`specularExponent`** read-only property of the SVGFESpotLightElement interface reflects the specularExponent attribute of the given feSpotLight element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/specularExponent)\n    specularExponent: SVGAnimatedNumber = Field(..., description='The **`specularExponent`** read-only property of the SVGFESpotLightElement interface reflects the specularExponent attribute of the given feSpotLight element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/specularExponent)')\n    # The **`x`** read-only property of the SVGFESpotLightElement interface describes the horizontal coordinate of the position of an SVG filter primitive as a SVGAnimatedNumber.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/x)\n    x: SVGAnimatedNumber = Field(..., description='The **`x`** read-only property of the SVGFESpotLightElement interface describes the horizontal coordinate of the position of an SVG filter primitive as a SVGAnimatedNumber.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/x)')\n    # The **`y`** read-only property of the SVGFESpotLightElement interface describes the vertical coordinate of the position of an SVG filter primitive as a SVGAnimatedNumber.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/y)\n    y: SVGAnimatedNumber = Field(..., description='The **`y`** read-only property of the SVGFESpotLightElement interface describes the vertical coordinate of the position of an SVG filter primitive as a SVGAnimatedNumber.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/y)')\n    # The **`z`** read-only property of the SVGFESpotLightElement interface describes the z-axis value of the position of an SVG filter primitive as a SVGAnimatedNumber.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/z)\n    z: SVGAnimatedNumber = Field(..., description='The **`z`** read-only property of the SVGFESpotLightElement interface describes the z-axis value of the position of an SVG filter primitive as a SVGAnimatedNumber.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/z)')\n\n# The **`SVGFETileElement`** interface corresponds to the feTile element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETileElement)\nclass SVGFETileElement(SVGElement):\n    # The **`in1`** read-only property of the SVGFETileElement interface reflects the in attribute of the given feTile element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETileElement/in1)\n    in1: SVGAnimatedString = Field(..., description='The **`in1`** read-only property of the SVGFETileElement interface reflects the in attribute of the given feTile element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETileElement/in1)')\n\n# The **`SVGFETurbulenceElement`** interface corresponds to the feTurbulence element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement)\nclass SVGFETurbulenceElement(SVGElement):\n    # The **`baseFrequencyX`** read-only property of the SVGFETurbulenceElement interface reflects the X component of the baseFrequency attribute of the given feTurbulence element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/baseFrequencyX)\n    baseFrequencyX: SVGAnimatedNumber = Field(..., description='The **`baseFrequencyX`** read-only property of the SVGFETurbulenceElement interface reflects the X component of the baseFrequency attribute of the given feTurbulence element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/baseFrequencyX)')\n    # The **`baseFrequencyY`** read-only property of the SVGFETurbulenceElement interface reflects the Y component of the baseFrequency attribute of the given feTurbulence element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/baseFrequencyY)\n    baseFrequencyY: SVGAnimatedNumber = Field(..., description='The **`baseFrequencyY`** read-only property of the SVGFETurbulenceElement interface reflects the Y component of the baseFrequency attribute of the given feTurbulence element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/baseFrequencyY)')\n    # The **`numOctaves`** read-only property of the SVGFETurbulenceElement interface reflects the numOctaves attribute of the given feTurbulence element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/numOctaves)\n    numOctaves: SVGAnimatedInteger = Field(..., description='The **`numOctaves`** read-only property of the SVGFETurbulenceElement interface reflects the numOctaves attribute of the given feTurbulence element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/numOctaves)')\n    # The **`seed`** read-only property of the SVGFETurbulenceElement interface reflects the seed attribute of the given feTurbulence element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/seed)\n    seed: SVGAnimatedNumber = Field(..., description='The **`seed`** read-only property of the SVGFETurbulenceElement interface reflects the seed attribute of the given feTurbulence element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/seed)')\n    # The **`stitchTiles`** read-only property of the SVGFETurbulenceElement interface reflects the stitchTiles attribute of the given feTurbulence element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/stitchTiles)\n    stitchTiles: SVGAnimatedEnumeration = Field(..., description='The **`stitchTiles`** read-only property of the SVGFETurbulenceElement interface reflects the stitchTiles attribute of the given feTurbulence element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/stitchTiles)')\n    # The **`type`** read-only property of the SVGFETurbulenceElement interface reflects the type attribute of the given feTurbulence element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/type)\n    type: SVGAnimatedEnumeration = Field(..., description='The **`type`** read-only property of the SVGFETurbulenceElement interface reflects the type attribute of the given feTurbulence element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/type)')\n    SVG_TURBULENCE_TYPE_UNKNOWN: 0 = Field(...)\n    SVG_TURBULENCE_TYPE_FRACTALNOISE: 1 = Field(...)\n    SVG_TURBULENCE_TYPE_TURBULENCE: 2 = Field(...)\n    SVG_STITCHTYPE_UNKNOWN: 0 = Field(...)\n    SVG_STITCHTYPE_STITCH: 1 = Field(...)\n    SVG_STITCHTYPE_NOSTITCH: 2 = Field(...)\n\n# The **`SVGFilterElement`** interface provides access to the properties of filter elements, as well as methods to manipulate them.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement)\nclass SVGFilterElement(SVGElement):\n    # The **`filterUnits`** read-only property of the SVGFilterElement interface reflects the filterUnits attribute of the given filter element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/filterUnits)\n    filterUnits: SVGAnimatedEnumeration = Field(..., description='The **`filterUnits`** read-only property of the SVGFilterElement interface reflects the filterUnits attribute of the given filter element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/filterUnits)')\n    # The **`height`** read-only property of the SVGFilterElement interface describes the vertical size of an SVG filter primitive as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/height)\n    height: SVGAnimatedLength = Field(..., description='The **`height`** read-only property of the SVGFilterElement interface describes the vertical size of an SVG filter primitive as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/height)')\n    # The **`primitiveUnits`** read-only property of the SVGFilterElement interface reflects the primitiveUnits attribute of the given filter element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/primitiveUnits)\n    primitiveUnits: SVGAnimatedEnumeration = Field(..., description='The **`primitiveUnits`** read-only property of the SVGFilterElement interface reflects the primitiveUnits attribute of the given filter element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/primitiveUnits)')\n    # The **`width`** read-only property of the SVGFilterElement interface describes the horizontal size of an SVG filter primitive as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/width)\n    width: SVGAnimatedLength = Field(..., description='The **`width`** read-only property of the SVGFilterElement interface describes the horizontal size of an SVG filter primitive as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/width)')\n    # The **`x`** read-only property of the SVGFilterElement interface describes the horizontal coordinate of the position of an SVG filter primitive as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/x)\n    x: SVGAnimatedLength = Field(..., description='The **`x`** read-only property of the SVGFilterElement interface describes the horizontal coordinate of the position of an SVG filter primitive as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/x)')\n    # The **`y`** read-only property of the SVGFilterElement interface describes the vertical coordinate of the position of an SVG filter primitive as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/y)\n    y: SVGAnimatedLength = Field(..., description='The **`y`** read-only property of the SVGFilterElement interface describes the vertical coordinate of the position of an SVG filter primitive as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/y)')\n\nclass SVGFilterPrimitiveStandardAttributes(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/height)\n    height: SVGAnimatedLength = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/height)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/result)\n    result: SVGAnimatedString = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/result)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/width)\n    width: SVGAnimatedLength = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/width)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/x)\n    x: SVGAnimatedLength = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/x)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/y)\n    y: SVGAnimatedLength = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/y)')\n\nclass SVGFitToViewBox(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/preserveAspectRatio)\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/preserveAspectRatio)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/viewBox)\n    viewBox: SVGAnimatedRect = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/viewBox)')\n\n# The **`SVGForeignObjectElement`** interface provides access to the properties of foreignObject elements, as well as methods to manipulate them.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement)\nclass SVGForeignObjectElement(SVGGraphicsElement):\n    # The **`height`** read-only property of the SVGForeignObjectElement interface describes the height of the `<foreignObject>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement/height)\n    height: SVGAnimatedLength = Field(..., description='The **`height`** read-only property of the SVGForeignObjectElement interface describes the height of the `<foreignObject>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement/height)')\n    # The **`width`** read-only property of the SVGForeignObjectElement interface describes the width of the `<foreignObject>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement/width)\n    width: SVGAnimatedLength = Field(..., description='The **`width`** read-only property of the SVGForeignObjectElement interface describes the width of the `<foreignObject>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement/width)')\n    # The **`x`** read-only property of the SVGForeignObjectElement interface describes the x-axis coordinate of the `<foreignObject>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement/x)\n    x: SVGAnimatedLength = Field(..., description='The **`x`** read-only property of the SVGForeignObjectElement interface describes the x-axis coordinate of the `<foreignObject>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement/x)')\n    # The **`y`** read-only property of the SVGForeignObjectElement interface describes the y-axis coordinate of the `<foreignObject>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement/y)\n    y: SVGAnimatedLength = Field(..., description='The **`y`** read-only property of the SVGForeignObjectElement interface describes the y-axis coordinate of the `<foreignObject>` element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement/y)')\n\n# The **`SVGGElement`** interface corresponds to the g element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGElement)\nclass SVGGElement(SVGGraphicsElement):\n    pass\n\n# The `SVGGeometryElement` interface represents SVG elements whose rendering is defined by geometry with an equivalent path, and which can be filled and stroked.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement)\nclass SVGGeometryElement(SVGGraphicsElement):\n    # The **`SVGGeometryElement.pathLength`** property reflects the A number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/pathLength)\n    pathLength: SVGAnimatedNumber = Field(..., description='The **`SVGGeometryElement.pathLength`** property reflects the A number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/pathLength)')\n\n# The **`SVGGradient`** interface is a base interface used by SVGLinearGradientElement and SVGRadialGradientElement.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGradientElement)\nclass SVGGradientElement(SVGElement):\n    # The **`gradientTransform`** read-only property of the SVGGradientElement interface reflects the gradientTransform attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGradientElement/gradientTransform)\n    gradientTransform: SVGAnimatedTransformList = Field(..., description='The **`gradientTransform`** read-only property of the SVGGradientElement interface reflects the gradientTransform attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGradientElement/gradientTransform)')\n    # The **`gradientUnits`** read-only property of the SVGGradientElement interface reflects the gradientUnits attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGradientElement/gradientUnits)\n    gradientUnits: SVGAnimatedEnumeration = Field(..., description='The **`gradientUnits`** read-only property of the SVGGradientElement interface reflects the gradientUnits attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGradientElement/gradientUnits)')\n    # The **`spreadMethod`** read-only property of the SVGGradientElement interface reflects the spreadMethod attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGradientElement/spreadMethod)\n    spreadMethod: SVGAnimatedEnumeration = Field(..., description='The **`spreadMethod`** read-only property of the SVGGradientElement interface reflects the spreadMethod attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGradientElement/spreadMethod)')\n    SVG_SPREADMETHOD_UNKNOWN: 0 = Field(...)\n    SVG_SPREADMETHOD_PAD: 1 = Field(...)\n    SVG_SPREADMETHOD_REFLECT: 2 = Field(...)\n    SVG_SPREADMETHOD_REPEAT: 3 = Field(...)\n\n# The **`SVGGraphicsElement`** interface represents SVG elements whose primary purpose is to directly render graphics into a group.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGraphicsElement)\nclass SVGGraphicsElement(SVGElement):\n    # The **`transform`** read-only property of the SVGGraphicsElement interface reflects the computed value of the transform property and its corresponding transform attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGraphicsElement/transform)\n    transform: SVGAnimatedTransformList = Field(..., description='The **`transform`** read-only property of the SVGGraphicsElement interface reflects the computed value of the transform property and its corresponding transform attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGraphicsElement/transform)')\n\n# The **`SVGImageElement`** interface corresponds to the image element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement)\nclass SVGImageElement(SVGGraphicsElement):\n    # The **`crossOrigin`** property of the SVGImageElement interface is a string which specifies the Cross-Origin Resource Sharing (CORS) setting to use when retrieving the image.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/crossOrigin)\n    crossOrigin: Union[str, null] = Field(..., description='The **`crossOrigin`** property of the SVGImageElement interface is a string which specifies the Cross-Origin Resource Sharing (CORS) setting to use when retrieving the image.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/crossOrigin)')\n    # The **`height`** read-only property of the corresponding to the height attribute of the given An SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/height)\n    height: SVGAnimatedLength = Field(..., description='The **`height`** read-only property of the corresponding to the height attribute of the given An SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/height)')\n    # The **`preserveAspectRatio`** read-only property of the SVGImageElement interface returns an element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/preserveAspectRatio)\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio = Field(..., description='The **`preserveAspectRatio`** read-only property of the SVGImageElement interface returns an element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/preserveAspectRatio)')\n    # The **`width`** read-only property of the corresponding to the width attribute of the given image element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/width)\n    width: SVGAnimatedLength = Field(..., description='The **`width`** read-only property of the corresponding to the width attribute of the given image element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/width)')\n    # The **`x`** read-only property of the corresponding to the x attribute of the given image element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/x)\n    x: SVGAnimatedLength = Field(..., description='The **`x`** read-only property of the corresponding to the x attribute of the given image element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/x)')\n    # The **`y`** read-only property of the corresponding to the y attribute of the given image element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/y)\n    y: SVGAnimatedLength = Field(..., description='The **`y`** read-only property of the corresponding to the y attribute of the given image element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/y)')\n\n# The **`SVGLength`** interface correspond to the \<length> basic data type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength)\nclass SVGLength(BaseModel):\n    # The **`unitType`** property of the SVGLength interface that represents type of the value as specified by one of the `SVG_LENGTHTYPE_*` constants defined on this interface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength/unitType)\n    unitType: float = Field(..., description='The **`unitType`** property of the SVGLength interface that represents type of the value as specified by one of the `SVG_LENGTHTYPE_*` constants defined on this interface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength/unitType)')\n    # The `value` property of the SVGLength interface represents the floating point value of the \<length> in user units.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength/value)\n    value: float = Field(..., description='The `value` property of the SVGLength interface represents the floating point value of the \<length> in user units.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength/value)')\n    # The `valueAsString` property of the SVGLength interface represents the \<length>'s value as a string, in the units expressed by SVGLength.unitType.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength/valueAsString)\n    valueAsString: str = Field(..., description='The `valueAsString` property of the SVGLength interface represents the \<length>\'s value as a string, in the units expressed by SVGLength.unitType.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength/valueAsString)')\n    # The `valueInSpecifiedUnits` property of the SVGLength interface represents floating point value, in the units expressed by SVGLength.unitType.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength/valueInSpecifiedUnits)\n    valueInSpecifiedUnits: float = Field(..., description='The `valueInSpecifiedUnits` property of the SVGLength interface represents floating point value, in the units expressed by SVGLength.unitType.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength/valueInSpecifiedUnits)')\n    SVG_LENGTHTYPE_UNKNOWN: 0 = Field(...)\n    SVG_LENGTHTYPE_NUMBER: 1 = Field(...)\n    SVG_LENGTHTYPE_PERCENTAGE: 2 = Field(...)\n    SVG_LENGTHTYPE_EMS: 3 = Field(...)\n    SVG_LENGTHTYPE_EXS: 4 = Field(...)\n    SVG_LENGTHTYPE_PX: 5 = Field(...)\n    SVG_LENGTHTYPE_CM: 6 = Field(...)\n    SVG_LENGTHTYPE_MM: 7 = Field(...)\n    SVG_LENGTHTYPE_IN: 8 = Field(...)\n    SVG_LENGTHTYPE_PT: 9 = Field(...)\n    SVG_LENGTHTYPE_PC: 10 = Field(...)\n\n# The **`SVGLengthList`** interface defines a list of SVGLength objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList)\nclass SVGLengthList(BaseModel):\n    # The **`length`** property of the SVGLengthList interface returns the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList/length)\n    length: float = Field(..., description='The **`length`** property of the SVGLengthList interface returns the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList/length)')\n    # The **`numberOfItems`** property of the SVGLengthList interface returns the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList/numberOfItems)\n    numberOfItems: float = Field(..., description='The **`numberOfItems`** property of the SVGLengthList interface returns the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList/numberOfItems)')\n\n# The **`SVGLineElement`** interface provides access to the properties of line elements, as well as methods to manipulate them.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLineElement)\nclass SVGLineElement(SVGGeometryElement):\n    # The **`x1`** read-only property of the SVGLineElement interface describes the start of the SVG line along the x-axis as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLineElement/x1)\n    x1: SVGAnimatedLength = Field(..., description='The **`x1`** read-only property of the SVGLineElement interface describes the start of the SVG line along the x-axis as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLineElement/x1)')\n    # The **`x2`** read-only property of the SVGLineElement interface describes the x-axis coordinate value of the end of a line as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLineElement/x2)\n    x2: SVGAnimatedLength = Field(..., description='The **`x2`** read-only property of the SVGLineElement interface describes the x-axis coordinate value of the end of a line as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLineElement/x2)')\n    # The **`y1`** read-only property of the SVGLineElement interface describes the start of the SVG line along the y-axis as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLineElement/y1)\n    y1: SVGAnimatedLength = Field(..., description='The **`y1`** read-only property of the SVGLineElement interface describes the start of the SVG line along the y-axis as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLineElement/y1)')\n    # The **`y2`** read-only property of the SVGLineElement interface describes the v-axis coordinate value of the end of a line as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLineElement/y2)\n    y2: SVGAnimatedLength = Field(..., description='The **`y2`** read-only property of the SVGLineElement interface describes the v-axis coordinate value of the end of a line as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLineElement/y2)')\n\n# The **`SVGLinearGradientElement`** interface corresponds to the linearGradient element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement)\nclass SVGLinearGradientElement(SVGGradientElement):\n    # The **`x1`** read-only property of the SVGLinearGradientElement interface describes the x-axis coordinate of the start point of the gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement/x1)\n    x1: SVGAnimatedLength = Field(..., description='The **`x1`** read-only property of the SVGLinearGradientElement interface describes the x-axis coordinate of the start point of the gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement/x1)')\n    # The **`x2`** read-only property of the SVGLinearGradientElement interface describes the x-axis coordinate of the start point of the gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement/x2)\n    x2: SVGAnimatedLength = Field(..., description='The **`x2`** read-only property of the SVGLinearGradientElement interface describes the x-axis coordinate of the start point of the gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement/x2)')\n    # The **`y1`** read-only property of the SVGLinearGradientElement interface describes the y-axis coordinate of the start point of the gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement/y1)\n    y1: SVGAnimatedLength = Field(..., description='The **`y1`** read-only property of the SVGLinearGradientElement interface describes the y-axis coordinate of the start point of the gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement/y1)')\n    # The **`y2`** read-only property of the SVGLinearGradientElement interface describes the y-axis coordinate of the start point of the gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement/y2)\n    y2: SVGAnimatedLength = Field(..., description='The **`y2`** read-only property of the SVGLinearGradientElement interface describes the y-axis coordinate of the start point of the gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement/y2)')\n\n# The **`SVGMPathElement`** interface corresponds to the mpath element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMPathElement)\nclass SVGMPathElement(SVGElement):\n    pass\n\n# The **`SVGMarkerElement`** interface provides access to the properties of marker elements, as well as methods to manipulate them.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement)\nclass SVGMarkerElement(SVGElement):\n    # The **`markerHeight`** read-only property of the SVGMarkerElement interface returns an SVGAnimatedLength object containing the height of the marker viewport as defined by the markerHeight attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerHeight)\n    markerHeight: SVGAnimatedLength = Field(..., description='The **`markerHeight`** read-only property of the SVGMarkerElement interface returns an SVGAnimatedLength object containing the height of the marker viewport as defined by the markerHeight attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerHeight)')\n    # The **`markerUnits`** read-only property of the SVGMarkerElement interface returns an SVGAnimatedEnumeration object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerUnits)\n    markerUnits: SVGAnimatedEnumeration = Field(..., description='The **`markerUnits`** read-only property of the SVGMarkerElement interface returns an SVGAnimatedEnumeration object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerUnits)')\n    # The **`markerWidth`** read-only property of the SVGMarkerElement interface returns an SVGAnimatedLength object containing the width of the marker viewport as defined by the markerWidth attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerWidth)\n    markerWidth: SVGAnimatedLength = Field(..., description='The **`markerWidth`** read-only property of the SVGMarkerElement interface returns an SVGAnimatedLength object containing the width of the marker viewport as defined by the markerWidth attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerWidth)')\n    # The **`orientAngle`** read-only property of the SVGMarkerElement interface returns an SVGAnimatedAngle object containing the angle of the orient attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/orientAngle)\n    orientAngle: SVGAnimatedAngle = Field(..., description='The **`orientAngle`** read-only property of the SVGMarkerElement interface returns an SVGAnimatedAngle object containing the angle of the orient attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/orientAngle)')\n    # The **`orientType`** read-only property of the SVGMarkerElement interface returns an SVGAnimatedEnumeration object indicating whether the orient attribute is `auto`, an angle value, or something else.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/orientType)\n    orientType: SVGAnimatedEnumeration = Field(..., description='The **`orientType`** read-only property of the SVGMarkerElement interface returns an SVGAnimatedEnumeration object indicating whether the orient attribute is `auto`, an angle value, or something else.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/orientType)')\n    # The **`refX`** read-only property of the SVGMarkerElement interface returns an SVGAnimatedLength object containing the value of the refX attribute of the marker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/refX)\n    refX: SVGAnimatedLength = Field(..., description='The **`refX`** read-only property of the SVGMarkerElement interface returns an SVGAnimatedLength object containing the value of the refX attribute of the marker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/refX)')\n    # The **`refY`** read-only property of the SVGMarkerElement interface returns an SVGAnimatedLength object containing the value of the refY attribute of the marker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/refY)\n    refY: SVGAnimatedLength = Field(..., description='The **`refY`** read-only property of the SVGMarkerElement interface returns an SVGAnimatedLength object containing the value of the refY attribute of the marker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/refY)')\n    SVG_MARKERUNITS_UNKNOWN: 0 = Field(...)\n    SVG_MARKERUNITS_USERSPACEONUSE: 1 = Field(...)\n    SVG_MARKERUNITS_STROKEWIDTH: 2 = Field(...)\n    SVG_MARKER_ORIENT_UNKNOWN: 0 = Field(...)\n    SVG_MARKER_ORIENT_AUTO: 1 = Field(...)\n    SVG_MARKER_ORIENT_ANGLE: 2 = Field(...)\n\n# The **`SVGMaskElement`** interface provides access to the properties of mask elements, as well as methods to manipulate them.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement)\nclass SVGMaskElement(SVGElement):\n    # The read-only **`height`** property of the SVGMaskElement interface returns an SVGAnimatedLength object containing the value of the height attribute of the marker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/height)\n    height: SVGAnimatedLength = Field(..., description='The read-only **`height`** property of the SVGMaskElement interface returns an SVGAnimatedLength object containing the value of the height attribute of the marker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/height)')\n    # The read-only **`maskContentUnits`** property of the SVGMaskElement interface reflects the maskContentUnits attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/maskContentUnits)\n    maskContentUnits: SVGAnimatedEnumeration = Field(..., description='The read-only **`maskContentUnits`** property of the SVGMaskElement interface reflects the maskContentUnits attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/maskContentUnits)')\n    # The read-only **`maskUnits`** property of the SVGMaskElement interface reflects the maskUnits attribute of a mask element which defines the coordinate system to use for the mask of the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/maskUnits)\n    maskUnits: SVGAnimatedEnumeration = Field(..., description='The read-only **`maskUnits`** property of the SVGMaskElement interface reflects the maskUnits attribute of a mask element which defines the coordinate system to use for the mask of the element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/maskUnits)')\n    # The read-only **`width`** property of the SVGMaskElement interface returns an SVGAnimatedLength object containing the value of the width attribute of the marker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/width)\n    width: SVGAnimatedLength = Field(..., description='The read-only **`width`** property of the SVGMaskElement interface returns an SVGAnimatedLength object containing the value of the width attribute of the marker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/width)')\n    # The read-only **`x`** property of the SVGMaskElement interface returns an SVGAnimatedLength object containing the value of the x attribute of the mask.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/x)\n    x: SVGAnimatedLength = Field(..., description='The read-only **`x`** property of the SVGMaskElement interface returns an SVGAnimatedLength object containing the value of the x attribute of the mask.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/x)')\n    # The read-only **`y`** property of the SVGMaskElement interface returns an SVGAnimatedLength object containing the value of the y attribute of the marker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/y)\n    y: SVGAnimatedLength = Field(..., description='The read-only **`y`** property of the SVGMaskElement interface returns an SVGAnimatedLength object containing the value of the y attribute of the marker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/y)')\n\n# The **`SVGMetadataElement`** interface corresponds to the metadata element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMetadataElement)\nclass SVGMetadataElement(SVGElement):\n    pass\n\n# The **`SVGNumber`** interface corresponds to the &lt;number&gt; basic data type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumber)\nclass SVGNumber(BaseModel):\n    # The **`value`** read-only property of the SVGNumber interface represents the number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumber/value)\n    value: float = Field(..., description='The **`value`** read-only property of the SVGNumber interface represents the number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumber/value)')\n\n# The **`SVGNumberList`** interface defines a list of numbers.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList)\nclass SVGNumberList(BaseModel):\n    # The **`length`** property of the SVGNumberList interface returns the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList/length)\n    length: float = Field(..., description='The **`length`** property of the SVGNumberList interface returns the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList/length)')\n    # The **`numberOfItems`** property of the SVGNumberList interface returns the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList/numberOfItems)\n    numberOfItems: float = Field(..., description='The **`numberOfItems`** property of the SVGNumberList interface returns the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList/numberOfItems)')\n\n# The **`SVGPathElement`** interface corresponds to the path element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPathElement)\nclass SVGPathElement(SVGGeometryElement):\n    # The **`pathLength`** read-only property of the SVGPathElement interface reflects the pathLength attribute of the given path element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPathElement/pathLength)\n    pathLength: SVGAnimatedNumber = Field(..., description='The **`pathLength`** read-only property of the SVGPathElement interface reflects the pathLength attribute of the given path element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPathElement/pathLength)')\n\n# The **`SVGPatternElement`** interface corresponds to the pattern element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement)\nclass SVGPatternElement(SVGElement):\n    # The **`height`** read-only property of the SVGPatternElement interface describes the height of the pattern as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/height)\n    height: SVGAnimatedLength = Field(..., description='The **`height`** read-only property of the SVGPatternElement interface describes the height of the pattern as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/height)')\n    # The **`patternContentUnits`** read-only property of the SVGPatternElement interface reflects the patternContentUnits attribute of the given pattern element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/patternContentUnits)\n    patternContentUnits: SVGAnimatedEnumeration = Field(..., description='The **`patternContentUnits`** read-only property of the SVGPatternElement interface reflects the patternContentUnits attribute of the given pattern element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/patternContentUnits)')\n    # The **`patternTransform`** read-only property of the SVGPatternElement interface reflects the patternTransform attribute of the given pattern element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/patternTransform)\n    patternTransform: SVGAnimatedTransformList = Field(..., description='The **`patternTransform`** read-only property of the SVGPatternElement interface reflects the patternTransform attribute of the given pattern element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/patternTransform)')\n    # The **`patternUnits`** read-only property of the SVGPatternElement interface reflects the patternUnits attribute of the given pattern element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/patternUnits)\n    patternUnits: SVGAnimatedEnumeration = Field(..., description='The **`patternUnits`** read-only property of the SVGPatternElement interface reflects the patternUnits attribute of the given pattern element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/patternUnits)')\n    # The **`width`** read-only property of the SVGPatternElement interface describes the width of the pattern as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/width)\n    width: SVGAnimatedLength = Field(..., description='The **`width`** read-only property of the SVGPatternElement interface describes the width of the pattern as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/width)')\n    # The **`x`** read-only property of the SVGPatternElement interface describes the x-axis coordinate of the start point of the pattern as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/x)\n    x: SVGAnimatedLength = Field(..., description='The **`x`** read-only property of the SVGPatternElement interface describes the x-axis coordinate of the start point of the pattern as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/x)')\n    # The **`y`** read-only property of the SVGPatternElement interface describes the y-axis coordinate of the start point of the pattern as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/y)\n    y: SVGAnimatedLength = Field(..., description='The **`y`** read-only property of the SVGPatternElement interface describes the y-axis coordinate of the start point of the pattern as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/y)')\n\n# The **`SVGPointList`** interface represents a list of DOMPoint objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList)\nclass SVGPointList(BaseModel):\n    # The **`length`** read-only property of the SVGPointList interface returns the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/length)\n    length: float = Field(..., description='The **`length`** read-only property of the SVGPointList interface returns the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/length)')\n    # The **`numberOfItems`** read-only property of the SVGPointList interface returns the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/numberOfItems)\n    numberOfItems: float = Field(..., description='The **`numberOfItems`** read-only property of the SVGPointList interface returns the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/numberOfItems)')\n\n# The **`SVGPolygonElement`** interface provides access to the properties of polygon elements, as well as methods to manipulate them.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPolygonElement)\nclass SVGPolygonElement(SVGGeometryElement):\n    pass\n\n# The **`SVGPolylineElement`** interface provides access to the properties of polyline elements, as well as methods to manipulate them.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPolylineElement)\nclass SVGPolylineElement(SVGGeometryElement):\n    pass\n\n# The **`SVGPreserveAspectRatio`** interface corresponds to the preserveAspectRatio attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPreserveAspectRatio)\nclass SVGPreserveAspectRatio(BaseModel):\n    # The **`align`** read-only property of the SVGPreserveAspectRatio interface reflects the type of the alignment value as specified by one of the `SVG_PRESERVEASPECTRATIO_*` constants defined on this interface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPreserveAspectRatio/align)\n    align: float = Field(..., description='The **`align`** read-only property of the SVGPreserveAspectRatio interface reflects the type of the alignment value as specified by one of the `SVG_PRESERVEASPECTRATIO_*` constants defined on this interface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPreserveAspectRatio/align)')\n    # The **`meetOrSlice`** read-only property of the SVGPreserveAspectRatio interface reflects the type of the meet-or-slice value as specified by one of the `SVG_MEETORSLICE_*` constants defined on this interface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPreserveAspectRatio/meetOrSlice)\n    meetOrSlice: float = Field(..., description='The **`meetOrSlice`** read-only property of the SVGPreserveAspectRatio interface reflects the type of the meet-or-slice value as specified by one of the `SVG_MEETORSLICE_*` constants defined on this interface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPreserveAspectRatio/meetOrSlice)')\n    SVG_PRESERVEASPECTRATIO_UNKNOWN: 0 = Field(...)\n    SVG_PRESERVEASPECTRATIO_NONE: 1 = Field(...)\n    SVG_PRESERVEASPECTRATIO_XMINYMIN: 2 = Field(...)\n    SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3 = Field(...)\n    SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4 = Field(...)\n    SVG_PRESERVEASPECTRATIO_XMINYMID: 5 = Field(...)\n    SVG_PRESERVEASPECTRATIO_XMIDYMID: 6 = Field(...)\n    SVG_PRESERVEASPECTRATIO_XMAXYMID: 7 = Field(...)\n    SVG_PRESERVEASPECTRATIO_XMINYMAX: 8 = Field(...)\n    SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9 = Field(...)\n    SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10 = Field(...)\n    SVG_MEETORSLICE_UNKNOWN: 0 = Field(...)\n    SVG_MEETORSLICE_MEET: 1 = Field(...)\n    SVG_MEETORSLICE_SLICE: 2 = Field(...)\n\n# The **`SVGRadialGradientElement`** interface corresponds to the RadialGradient element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement)\nclass SVGRadialGradientElement(SVGGradientElement):\n    # The **`cx`** read-only property of the SVGRadialGradientElement interface describes the x-axis coordinate of the center of the radial gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/cx)\n    cx: SVGAnimatedLength = Field(..., description='The **`cx`** read-only property of the SVGRadialGradientElement interface describes the x-axis coordinate of the center of the radial gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/cx)')\n    # The **`cy`** read-only property of the SVGRadialGradientElement interface describes the y-axis coordinate of the center of the radial gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/cy)\n    cy: SVGAnimatedLength = Field(..., description='The **`cy`** read-only property of the SVGRadialGradientElement interface describes the y-axis coordinate of the center of the radial gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/cy)')\n    # The **`fr`** read-only property of the SVGRadialGradientElement interface describes the radius of the focal circle of the radial gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/fr)\n    fr: SVGAnimatedLength = Field(..., description='The **`fr`** read-only property of the SVGRadialGradientElement interface describes the radius of the focal circle of the radial gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/fr)')\n    # The **`fx`** read-only property of the SVGRadialGradientElement interface describes the x-axis coordinate of the focal point of the radial gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/fx)\n    fx: SVGAnimatedLength = Field(..., description='The **`fx`** read-only property of the SVGRadialGradientElement interface describes the x-axis coordinate of the focal point of the radial gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/fx)')\n    # The **`fy`** read-only property of the SVGRadialGradientElement interface describes the y-axis coordinate of the focal point of the radial gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/fy)\n    fy: SVGAnimatedLength = Field(..., description='The **`fy`** read-only property of the SVGRadialGradientElement interface describes the y-axis coordinate of the focal point of the radial gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/fy)')\n    # The **`r`** read-only property of the SVGRadialGradientElement interface describes the radius of the radial gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/r)\n    r: SVGAnimatedLength = Field(..., description='The **`r`** read-only property of the SVGRadialGradientElement interface describes the radius of the radial gradient as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/r)')\n\n# The `SVGRectElement` interface provides access to the properties of rect elements, as well as methods to manipulate them.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement)\nclass SVGRectElement(SVGGeometryElement):\n    # The **`height`** read-only property of the SVGRectElement interface describes the vertical size of an SVG rectangle as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/height)\n    height: SVGAnimatedLength = Field(..., description='The **`height`** read-only property of the SVGRectElement interface describes the vertical size of an SVG rectangle as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/height)')\n    # The **`rx`** read-only property of the SVGRectElement interface describes the horizontal curve of the corners of an SVG rectangle as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/rx)\n    rx: SVGAnimatedLength = Field(..., description='The **`rx`** read-only property of the SVGRectElement interface describes the horizontal curve of the corners of an SVG rectangle as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/rx)')\n    # The **`ry`** read-only property of the SVGRectElement interface describes the vertical curve of the corners of an SVG rectangle as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/ry)\n    ry: SVGAnimatedLength = Field(..., description='The **`ry`** read-only property of the SVGRectElement interface describes the vertical curve of the corners of an SVG rectangle as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/ry)')\n    # The **`width`** read-only property of the SVGRectElement interface describes the horizontal size of an SVG rectangle as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/width)\n    width: SVGAnimatedLength = Field(..., description='The **`width`** read-only property of the SVGRectElement interface describes the horizontal size of an SVG rectangle as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/width)')\n    # The **`x`** read-only property of the SVGRectElement interface describes the horizontal coordinate of the position of an SVG rectangle as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/x)\n    x: SVGAnimatedLength = Field(..., description='The **`x`** read-only property of the SVGRectElement interface describes the horizontal coordinate of the position of an SVG rectangle as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/x)')\n    # The **`y`** read-only property of the SVGRectElement interface describes the vertical coordinate of the position of an SVG rectangle as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/y)\n    y: SVGAnimatedLength = Field(..., description='The **`y`** read-only property of the SVGRectElement interface describes the vertical coordinate of the position of an SVG rectangle as a SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/y)')\n\nclass SVGSVGElementEventMap(SVGElementEventMap):\n    pass\n\n# The **`SVGSVGElement`** interface provides access to the properties of svg elements, as well as methods to manipulate them.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement)\nclass SVGSVGElement(SVGGraphicsElement):\n    # The **`currentScale`** property of the SVGSVGElement interface reflects the current scale factor relative to the initial view to take into account user magnification and panning operations on the outermost svg element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/currentScale)\n    currentScale: float = Field(..., description='The **`currentScale`** property of the SVGSVGElement interface reflects the current scale factor relative to the initial view to take into account user magnification and panning operations on the outermost svg element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/currentScale)')\n    # The **`currentTranslate`** read-only property of the SVGSVGElement interface reflects the translation factor that takes into account user 'magnification' corresponding to an outermost svg element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/currentTranslate)\n    currentTranslate: DOMPointReadOnly = Field(..., description='The **`currentTranslate`** read-only property of the SVGSVGElement interface reflects the translation factor that takes into account user \'magnification\' corresponding to an outermost svg element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/currentTranslate)')\n    # The **`height`** read-only property of the SVGSVGElement interface describes the vertical size of element as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/height)\n    height: SVGAnimatedLength = Field(..., description='The **`height`** read-only property of the SVGSVGElement interface describes the vertical size of element as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/height)')\n    # The **`width`** read-only property of the SVGSVGElement interface describes the horizontal size of element as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/width)\n    width: SVGAnimatedLength = Field(..., description='The **`width`** read-only property of the SVGSVGElement interface describes the horizontal size of element as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/width)')\n    # The **`x`** read-only property of the SVGSVGElement interface describes the horizontal coordinate of the position of that SVG as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/x)\n    x: SVGAnimatedLength = Field(..., description='The **`x`** read-only property of the SVGSVGElement interface describes the horizontal coordinate of the position of that SVG as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/x)')\n    # The **`y`** read-only property of the SVGSVGElement interface describes the vertical coordinate of the position of that SVG as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/y)\n    y: SVGAnimatedLength = Field(..., description='The **`y`** read-only property of the SVGSVGElement interface describes the vertical coordinate of the position of that SVG as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/y)')\n\n# The **`SVGScriptElement`** interface corresponds to the SVG script element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGScriptElement)\nclass SVGScriptElement(SVGElement):\n    # The **`type`** read-only property of the SVGScriptElement interface reflects the type attribute of the given script element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGScriptElement/type)\n    type: str = Field(..., description='The **`type`** read-only property of the SVGScriptElement interface reflects the type attribute of the given script element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGScriptElement/type)')\n\n# The **`SVGSetElement`** interface corresponds to the set element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSetElement)\nclass SVGSetElement(SVGAnimationElement):\n    pass\n\n# The **`SVGStopElement`** interface corresponds to the stop element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStopElement)\nclass SVGStopElement(SVGElement):\n    # The **`offset`** read-only property of the SVGStopElement interface reflects the offset attribute of the given stop element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStopElement/offset)\n    offset: SVGAnimatedNumber = Field(..., description='The **`offset`** read-only property of the SVGStopElement interface reflects the offset attribute of the given stop element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStopElement/offset)')\n\n# The **`SVGStringList`** interface defines a list of strings.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList)\nclass SVGStringList(BaseModel):\n    # The **`length`** property of the SVGStringList interface returns the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList/length)\n    length: float = Field(..., description='The **`length`** property of the SVGStringList interface returns the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList/length)')\n    # The **`numberOfItems`** property of the SVGStringList interface returns the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList/numberOfItems)\n    numberOfItems: float = Field(..., description='The **`numberOfItems`** property of the SVGStringList interface returns the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList/numberOfItems)')\n\n# The **`SVGStyleElement`** interface corresponds to the SVG style element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement)\nclass SVGStyleElement(SVGElement):\n    disabled: bool = Field(...)\n    # The **`SVGStyleElement.media`** property is a media query string corresponding to the `media` attribute of the given SVG style element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/media)\n    media: str = Field(..., description='The **`SVGStyleElement.media`** property is a media query string corresponding to the `media` attribute of the given SVG style element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/media)')\n    # The **`SVGStyleElement.title`** property is a string corresponding to the `title` attribute of the given SVG style element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/title)\n    title: str = Field(..., description='The **`SVGStyleElement.title`** property is a string corresponding to the `title` attribute of the given SVG style element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/title)')\n    # The **`SVGStyleElement.type`** property returns the type of the current style.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/type)\n    type: str = Field(..., description='The **`SVGStyleElement.type`** property returns the type of the current style.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/type)')\n\n# The **`SVGSwitchElement`** interface corresponds to the switch element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSwitchElement)\nclass SVGSwitchElement(SVGGraphicsElement):\n    pass\n\n# The **`SVGSymbolElement`** interface corresponds to the symbol element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSymbolElement)\nclass SVGSymbolElement(SVGElement):\n    pass\n\n# The **`SVGTSpanElement`** interface represents a tspan element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTSpanElement)\nclass SVGTSpanElement(SVGTextPositioningElement):\n    pass\n\nclass SVGTests(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/requiredExtensions)\n    requiredExtensions: SVGStringList = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/requiredExtensions)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/systemLanguage)\n    systemLanguage: SVGStringList = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/systemLanguage)')\n\n# The **`SVGTextContentElement`** interface is implemented by elements that support rendering child text content.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement)\nclass SVGTextContentElement(SVGGraphicsElement):\n    # The **`lengthAdjust`** read-only property of the SVGTextContentElement interface reflects the lengthAdjust attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement/lengthAdjust)\n    lengthAdjust: SVGAnimatedEnumeration = Field(..., description='The **`lengthAdjust`** read-only property of the SVGTextContentElement interface reflects the lengthAdjust attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement/lengthAdjust)')\n    # The **`textLength`** read-only property of the SVGTextContentElement interface reflects the textLength attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement/textLength)\n    textLength: SVGAnimatedLength = Field(..., description='The **`textLength`** read-only property of the SVGTextContentElement interface reflects the textLength attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement/textLength)')\n    LENGTHADJUST_UNKNOWN: 0 = Field(...)\n    LENGTHADJUST_SPACING: 1 = Field(...)\n    LENGTHADJUST_SPACINGANDGLYPHS: 2 = Field(...)\n\n# The **`SVGTextElement`** interface corresponds to the text elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextElement)\nclass SVGTextElement(SVGTextPositioningElement):\n    pass\n\n# The **`SVGTextPathElement`** interface corresponds to the textPath element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPathElement)\nclass SVGTextPathElement(SVGTextContentElement):\n    # The **`method`** read-only property of the SVGTextPathElement interface reflects the method attribute of the given textPath element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPathElement/method)\n    method: SVGAnimatedEnumeration = Field(..., description='The **`method`** read-only property of the SVGTextPathElement interface reflects the method attribute of the given textPath element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPathElement/method)')\n    # The **`spacing`** read-only property of the SVGTextPathElement interface reflects the spacing attribute of the given textPath element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPathElement/spacing)\n    spacing: SVGAnimatedEnumeration = Field(..., description='The **`spacing`** read-only property of the SVGTextPathElement interface reflects the spacing attribute of the given textPath element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPathElement/spacing)')\n    # The **`startOffset`** read-only property of the SVGTextPathElement interface reflects the X component of the startOffset attribute of the given textPath, which defines an offset from the start of the path for the initial current text position along the path after converting the path to the `<textPath>` element's coordinate system.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPathElement/startOffset)\n    startOffset: SVGAnimatedLength = Field(..., description='The **`startOffset`** read-only property of the SVGTextPathElement interface reflects the X component of the startOffset attribute of the given textPath, which defines an offset from the start of the path for the initial current text position along the path after converting the path to the `<textPath>` element\'s coordinate system.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPathElement/startOffset)')\n    TEXTPATH_METHODTYPE_UNKNOWN: 0 = Field(...)\n    TEXTPATH_METHODTYPE_ALIGN: 1 = Field(...)\n    TEXTPATH_METHODTYPE_STRETCH: 2 = Field(...)\n    TEXTPATH_SPACINGTYPE_UNKNOWN: 0 = Field(...)\n    TEXTPATH_SPACINGTYPE_AUTO: 1 = Field(...)\n    TEXTPATH_SPACINGTYPE_EXACT: 2 = Field(...)\n\n# The **`SVGTextPositioningElement`** interface is implemented by elements that support attributes that position individual text glyphs.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement)\nclass SVGTextPositioningElement(SVGTextContentElement):\n    # The **`dx`** read-only property of the SVGTextPositioningElement interface describes the x-axis coordinate of the SVGTextElement or SVGTSpanElement as an SVGAnimatedLengthList.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement/dx)\n    dx: SVGAnimatedLengthList = Field(..., description='The **`dx`** read-only property of the SVGTextPositioningElement interface describes the x-axis coordinate of the SVGTextElement or SVGTSpanElement as an SVGAnimatedLengthList.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement/dx)')\n    # The **`dy`** read-only property of the SVGTextPositioningElement interface describes the y-axis coordinate of the SVGTextElement or SVGTSpanElement as an SVGAnimatedLengthList.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement/dy)\n    dy: SVGAnimatedLengthList = Field(..., description='The **`dy`** read-only property of the SVGTextPositioningElement interface describes the y-axis coordinate of the SVGTextElement or SVGTSpanElement as an SVGAnimatedLengthList.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement/dy)')\n    # The **`rotate`** read-only property of the SVGTextPositioningElement interface reflects the rotation of individual text glyphs, as specified by the rotate attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement/rotate)\n    rotate: SVGAnimatedNumberList = Field(..., description='The **`rotate`** read-only property of the SVGTextPositioningElement interface reflects the rotation of individual text glyphs, as specified by the rotate attribute of the given element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement/rotate)')\n    # The **`x`** read-only property of the SVGTextPositioningElement interface describes the x-axis coordinate of the SVGTextElement or SVGTSpanElement as an SVGAnimatedLengthList.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement/x)\n    x: SVGAnimatedLengthList = Field(..., description='The **`x`** read-only property of the SVGTextPositioningElement interface describes the x-axis coordinate of the SVGTextElement or SVGTSpanElement as an SVGAnimatedLengthList.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement/x)')\n    # The **`y`** read-only property of the SVGTextPositioningElement interface describes the y-axis coordinate of the SVGTextElement or SVGTSpanElement as an SVGAnimatedLengthList.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement/y)\n    y: SVGAnimatedLengthList = Field(..., description='The **`y`** read-only property of the SVGTextPositioningElement interface describes the y-axis coordinate of the SVGTextElement or SVGTSpanElement as an SVGAnimatedLengthList.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement/y)')\n\n# The **`SVGTitleElement`** interface corresponds to the title element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTitleElement)\nclass SVGTitleElement(SVGElement):\n    pass\n\n# The **`SVGTransform`** interface reflects one of the component transformations within an SVGTransformList; thus, an `SVGTransform` object corresponds to a single component (e.g., `scale(…)` or `matrix(…)`) within a transform attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform)\nclass SVGTransform(BaseModel):\n    # The **`angle`** read-only property of the SVGTransform interface represents the angle of the transformation in degrees.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform/angle)\n    angle: float = Field(..., description='The **`angle`** read-only property of the SVGTransform interface represents the angle of the transformation in degrees.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform/angle)')\n    # The **`matrix`** read-only property of the SVGTransform interface represents the transformation matrix that corresponds to the transformation `type`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform/matrix)\n    matrix: DOMMatrix = Field(..., description='The **`matrix`** read-only property of the SVGTransform interface represents the transformation matrix that corresponds to the transformation `type`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform/matrix)')\n    # The **`type`** read-only property of the SVGTransform interface represents the `type` of transformation applied, specified by one of the `SVG_TRANSFORM_*` constants defined on this interface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform/type)\n    type: float = Field(..., description='The **`type`** read-only property of the SVGTransform interface represents the `type` of transformation applied, specified by one of the `SVG_TRANSFORM_*` constants defined on this interface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform/type)')\n    SVG_TRANSFORM_UNKNOWN: 0 = Field(...)\n    SVG_TRANSFORM_MATRIX: 1 = Field(...)\n    SVG_TRANSFORM_TRANSLATE: 2 = Field(...)\n    SVG_TRANSFORM_SCALE: 3 = Field(...)\n    SVG_TRANSFORM_ROTATE: 4 = Field(...)\n    SVG_TRANSFORM_SKEWX: 5 = Field(...)\n    SVG_TRANSFORM_SKEWY: 6 = Field(...)\n\n# The **`SVGTransformList`** interface defines a list of SVGTransform objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList)\nclass SVGTransformList(BaseModel):\n    # The **`length`** read-only property of the SVGTransformList interface represents the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList/length)\n    length: float = Field(..., description='The **`length`** read-only property of the SVGTransformList interface represents the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList/length)')\n    # The **`numberOfItems`** read-only property of the SVGTransformList interface represents the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList/numberOfItems)\n    numberOfItems: float = Field(..., description='The **`numberOfItems`** read-only property of the SVGTransformList interface represents the number of items in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList/numberOfItems)')\n\nclass SVGURIReference(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAElement/href)\n    href: SVGAnimatedString = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAElement/href)')\n\n# The **`SVGUnitTypes`** interface defines a commonly used set of constants used for reflecting gradientUnits, patternContentUnits and other similar attributes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUnitTypes)\nclass SVGUnitTypes(BaseModel):\n    SVG_UNIT_TYPE_UNKNOWN: 0 = Field(...)\n    SVG_UNIT_TYPE_USERSPACEONUSE: 1 = Field(...)\n    SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2 = Field(...)\n\n# The **`SVGUseElement`** interface corresponds to the use element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUseElement)\nclass SVGUseElement(SVGGraphicsElement):\n    # The **`height`** read-only property of the SVGUseElement interface describes the height of the referenced element as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUseElement/height)\n    height: SVGAnimatedLength = Field(..., description='The **`height`** read-only property of the SVGUseElement interface describes the height of the referenced element as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUseElement/height)')\n    # The **`width`** read-only property of the SVGUseElement interface describes the width of the referenced element as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUseElement/width)\n    width: SVGAnimatedLength = Field(..., description='The **`width`** read-only property of the SVGUseElement interface describes the width of the referenced element as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUseElement/width)')\n    # The **`x`** read-only property of the SVGUseElement interface describes the x-axis coordinate of the start point of the referenced element as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUseElement/x)\n    x: SVGAnimatedLength = Field(..., description='The **`x`** read-only property of the SVGUseElement interface describes the x-axis coordinate of the start point of the referenced element as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUseElement/x)')\n    # The **`y`** read-only property of the SVGUseElement interface describes the y-axis coordinate of the start point of the referenced element as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUseElement/y)\n    y: SVGAnimatedLength = Field(..., description='The **`y`** read-only property of the SVGUseElement interface describes the y-axis coordinate of the start point of the referenced element as an SVGAnimatedLength.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUseElement/y)')\n\n# The **`SVGViewElement`** interface provides access to the properties of view elements, as well as methods to manipulate them.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGViewElement)\nclass SVGViewElement(SVGElement):\n    pass\n\n# The `Screen` interface represents a screen, usually the one on which the current window is being rendered, and is obtained using window.screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen)\nclass Screen(BaseModel):\n    # The read-only Screen interface's **`availHeight`** property returns the height, in CSS pixels, of the space available for Web content on the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/availHeight)\n    availHeight: float = Field(..., description='The read-only Screen interface\'s **`availHeight`** property returns the height, in CSS pixels, of the space available for Web content on the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/availHeight)')\n    # The **`Screen.availWidth`** property returns the amount of horizontal space (in CSS pixels) available to the window.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/availWidth)\n    availWidth: float = Field(..., description='The **`Screen.availWidth`** property returns the amount of horizontal space (in CSS pixels) available to the window.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/availWidth)')\n    # The **`Screen.colorDepth`** read-only property returns the color depth of the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/colorDepth)\n    colorDepth: float = Field(..., description='The **`Screen.colorDepth`** read-only property returns the color depth of the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/colorDepth)')\n    # The **`Screen.height`** read-only property returns the height of the screen in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/height)\n    height: float = Field(..., description='The **`Screen.height`** read-only property returns the height of the screen in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/height)')\n    # The **`orientation`** read-only property of the An instance of ScreenOrientation representing the orientation of the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/orientation)\n    orientation: ScreenOrientation = Field(..., description='The **`orientation`** read-only property of the An instance of ScreenOrientation representing the orientation of the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/orientation)')\n    # Returns the bit depth of the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/pixelDepth)\n    pixelDepth: float = Field(..., description='Returns the bit depth of the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/pixelDepth)')\n    # The **`Screen.width`** read-only property returns the width of the screen in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/width)\n    width: float = Field(..., description='The **`Screen.width`** read-only property returns the width of the screen in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/width)')\n\nclass ScreenOrientationEventMap(BaseModel):\n    change: Event = Field(...)\n\n# The **`ScreenOrientation`** interface of the Screen Orientation API provides information about the current orientation of the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation)\nclass ScreenOrientation(EventTarget):\n    # The **`angle`** read-only property of the angle.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/angle)\n    angle: float = Field(..., description='The **`angle`** read-only property of the angle.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/angle)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/change_event)\n    onchange: Union[((this: ScreenOrientation, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/change_event)')\n    # The **`type`** read-only property of the type, one of `portrait-primary`, `portrait-secondary`, `landscape-primary`, or `landscape-secondary`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/type)\n    type: OrientationType = Field(..., description='The **`type`** read-only property of the type, one of `portrait-primary`, `portrait-secondary`, `landscape-primary`, or `landscape-secondary`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/type)')\n\nclass ScriptProcessorNodeEventMap(BaseModel):\n    audioprocess: AudioProcessingEvent = Field(...)\n\n# The `ScriptProcessorNode` interface allows the generation, processing, or analyzing of audio using JavaScript.
@deprecated As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and was replaced by AudioWorklet (see AudioWorkletNode).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ScriptProcessorNode)\nclass ScriptProcessorNode(AudioNode):\n    # The `bufferSize` property of the ScriptProcessorNode interface returns an integer representing both the input and output buffer size, in sample-frames.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ScriptProcessorNode/bufferSize)\n    bufferSize: float = Field(..., description='The `bufferSize` property of the ScriptProcessorNode interface returns an integer representing both the input and output buffer size, in sample-frames.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ScriptProcessorNode/bufferSize)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ScriptProcessorNode/audioprocess_event)\n    onaudioprocess: Union[((this: ScriptProcessorNode, ev: AudioProcessingEvent) => any), null] = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ScriptProcessorNode/audioprocess_event)')\n\n# The **`SecurityPolicyViolationEvent`** interface inherits from Event, and represents the event object of a `securitypolicyviolation` event sent on an Element/securitypolicyviolation_event, Document/securitypolicyviolation_event, or WorkerGlobalScope/securitypolicyviolation_event when its Content Security Policy (CSP) is violated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent)\nclass SecurityPolicyViolationEvent(Event):\n    # The **`blockedURI`** read-only property of the SecurityPolicyViolationEvent interface is a string representing the URI of the resource that was blocked because it violates a Content Security Policy (CSP).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/blockedURI)\n    blockedURI: str = Field(..., description='The **`blockedURI`** read-only property of the SecurityPolicyViolationEvent interface is a string representing the URI of the resource that was blocked because it violates a Content Security Policy (CSP).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/blockedURI)')\n    # The **`columnNumber`** read-only property of the SecurityPolicyViolationEvent interface is the column number in the document or worker script at which the Content Security Policy (CSP) violation occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/columnNumber)\n    columnNumber: float = Field(..., description='The **`columnNumber`** read-only property of the SecurityPolicyViolationEvent interface is the column number in the document or worker script at which the Content Security Policy (CSP) violation occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/columnNumber)')\n    # The **`disposition`** read-only property of the SecurityPolicyViolationEvent interface indicates how the violated Content Security Policy (CSP) is configured to be treated by the user agent.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/disposition)\n    disposition: SecurityPolicyViolationEventDisposition = Field(..., description='The **`disposition`** read-only property of the SecurityPolicyViolationEvent interface indicates how the violated Content Security Policy (CSP) is configured to be treated by the user agent.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/disposition)')\n    # The **`documentURI`** read-only property of the SecurityPolicyViolationEvent interface is a string representing the URI of the document or worker in which the Content Security Policy (CSP) violation occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/documentURI)\n    documentURI: str = Field(..., description='The **`documentURI`** read-only property of the SecurityPolicyViolationEvent interface is a string representing the URI of the document or worker in which the Content Security Policy (CSP) violation occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/documentURI)')\n    # The **`effectiveDirective`** read-only property of the SecurityPolicyViolationEvent interface is a string representing the Content Security Policy (CSP) directive that was violated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/effectiveDirective)\n    effectiveDirective: str = Field(..., description='The **`effectiveDirective`** read-only property of the SecurityPolicyViolationEvent interface is a string representing the Content Security Policy (CSP) directive that was violated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/effectiveDirective)')\n    # The **`lineNumber`** read-only property of the SecurityPolicyViolationEvent interface is the line number in the document or worker script at which the Content Security Policy (CSP) violation occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/lineNumber)\n    lineNumber: float = Field(..., description='The **`lineNumber`** read-only property of the SecurityPolicyViolationEvent interface is the line number in the document or worker script at which the Content Security Policy (CSP) violation occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/lineNumber)')\n    # The **`originalPolicy`** read-only property of the SecurityPolicyViolationEvent interface is a string containing the Content Security Policy (CSP) whose enforcement uncovered the violation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/originalPolicy)\n    originalPolicy: str = Field(..., description='The **`originalPolicy`** read-only property of the SecurityPolicyViolationEvent interface is a string containing the Content Security Policy (CSP) whose enforcement uncovered the violation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/originalPolicy)')\n    # The **`referrer`** read-only property of the SecurityPolicyViolationEvent interface is a string representing the referrer for the resources whose Content Security Policy (CSP) was violated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/referrer)\n    referrer: str = Field(..., description='The **`referrer`** read-only property of the SecurityPolicyViolationEvent interface is a string representing the referrer for the resources whose Content Security Policy (CSP) was violated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/referrer)')\n    # The **`sample`** read-only property of the SecurityPolicyViolationEvent interface is a string representing a sample of the resource that caused the Content Security Policy (CSP) violation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/sample)\n    sample: str = Field(..., description='The **`sample`** read-only property of the SecurityPolicyViolationEvent interface is a string representing a sample of the resource that caused the Content Security Policy (CSP) violation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/sample)')\n    # The **`sourceFile`** read-only property of the SecurityPolicyViolationEvent interface is a string representing the URL of the script in which the Content Security Policy (CSP) violation occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/sourceFile)\n    sourceFile: str = Field(..., description='The **`sourceFile`** read-only property of the SecurityPolicyViolationEvent interface is a string representing the URL of the script in which the Content Security Policy (CSP) violation occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/sourceFile)')\n    # The **`statusCode`** read-only property of the SecurityPolicyViolationEvent interface is a number representing the HTTP status code of the window or worker in which the Content Security Policy (CSP) violation occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/statusCode)\n    statusCode: float = Field(..., description='The **`statusCode`** read-only property of the SecurityPolicyViolationEvent interface is a number representing the HTTP status code of the window or worker in which the Content Security Policy (CSP) violation occurred.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/statusCode)')\n    # The **`violatedDirective`** read-only property of the SecurityPolicyViolationEvent interface is a string representing the Content Security Policy (CSP) directive that was violated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/violatedDirective)\n    violatedDirective: str = Field(..., description='The **`violatedDirective`** read-only property of the SecurityPolicyViolationEvent interface is a string representing the Content Security Policy (CSP) directive that was violated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/violatedDirective)')\n\n# A **`Selection`** object represents the range of text selected by the user or the current position of the caret.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection)\nclass Selection(BaseModel):\n    # The **`Selection.anchorNode`** read-only property returns the Node in which the selection begins.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/anchorNode)\n    anchorNode: Union[Node, null] = Field(..., description='The **`Selection.anchorNode`** read-only property returns the Node in which the selection begins.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/anchorNode)')\n    # The **`Selection.anchorOffset`** read-only property returns the number of characters that the selection's anchor is offset within the In the case of Selection.anchorNode being another type of node, **`Selection.anchorOffset`** returns the number of Node.childNodes the selection's anchor is offset within the Selection.anchorNode.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/anchorOffset)\n    anchorOffset: float = Field(..., description='The **`Selection.anchorOffset`** read-only property returns the number of characters that the selection\'s anchor is offset within the In the case of Selection.anchorNode being another type of node, **`Selection.anchorOffset`** returns the number of Node.childNodes the selection\'s anchor is offset within the Selection.anchorNode.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/anchorOffset)')\n    # The **`direction`** read-only property of the Selection interface is a string that provides the direction of the current selection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/direction)\n    direction: str = Field(..., description='The **`direction`** read-only property of the Selection interface is a string that provides the direction of the current selection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/direction)')\n    # The **`Selection.focusNode`** read-only property returns the Node in which the selection ends.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/focusNode)\n    focusNode: Union[Node, null] = Field(..., description='The **`Selection.focusNode`** read-only property returns the Node in which the selection ends.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/focusNode)')\n    # The **`Selection.focusOffset`** read-only property returns the number of characters that the selection's focus is offset within the In the case of Selection.focusNode being another type of node, **`Selection.focusOffset`** returns the number of Node.childNodes the selection's focus is offset within the Selection.focusNode.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/focusOffset)\n    focusOffset: float = Field(..., description='The **`Selection.focusOffset`** read-only property returns the number of characters that the selection\'s focus is offset within the In the case of Selection.focusNode being another type of node, **`Selection.focusOffset`** returns the number of Node.childNodes the selection\'s focus is offset within the Selection.focusNode.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/focusOffset)')\n    # The **`Selection.isCollapsed`** read-only property returns a boolean value which indicates whether or not there is currently any text selected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/isCollapsed)\n    isCollapsed: bool = Field(..., description='The **`Selection.isCollapsed`** read-only property returns a boolean value which indicates whether or not there is currently any text selected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/isCollapsed)')\n    # The **`Selection.rangeCount`** read-only property returns the number of ranges in the selection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/rangeCount)\n    rangeCount: float = Field(..., description='The **`Selection.rangeCount`** read-only property returns the number of ranges in the selection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/rangeCount)')\n    # The **`type`** read-only property of the type of the current selection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/type)\n    type: str = Field(..., description='The **`type`** read-only property of the type of the current selection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/type)')\n\nclass ServiceWorkerEventMap(AbstractWorkerEventMap):\n    statechange: Event = Field(...)\n\n# The **`ServiceWorker`** interface of the Service Worker API provides a reference to a service worker.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker)\nclass ServiceWorker(EventTarget):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/statechange_event)\n    onstatechange: Union[((this: ServiceWorker, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/statechange_event)')\n    # Returns the `ServiceWorker` serialized script URL defined as part of `ServiceWorkerRegistration`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/scriptURL)\n    scriptURL: str = Field(..., description='Returns the `ServiceWorker` serialized script URL defined as part of `ServiceWorkerRegistration`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/scriptURL)')\n    # The **`state`** read-only property of the of the service worker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/state)\n    state: ServiceWorkerState = Field(..., description='The **`state`** read-only property of the of the service worker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/state)')\n\nclass ServiceWorkerContainerEventMap(BaseModel):\n    controllerchange: Event = Field(...)\n    message: MessageEvent = Field(...)\n    messageerror: MessageEvent = Field(...)\n\n# The **`ServiceWorkerContainer`** interface of the Service Worker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer)\nclass ServiceWorkerContainer(EventTarget):\n    # The **`controller`** read-only property of the ServiceWorkerContainer interface returns a `activated` (the same object returned by `null` if the request is a force refresh (_Shift_ + refresh) or if there is no active worker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controller)\n    controller: Union[ServiceWorker, null] = Field(..., description='The **`controller`** read-only property of the ServiceWorkerContainer interface returns a `activated` (the same object returned by `null` if the request is a force refresh (_Shift_ + refresh) or if there is no active worker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controller)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controllerchange_event)\n    oncontrollerchange: Union[((this: ServiceWorkerContainer, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controllerchange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/message_event)\n    onmessage: Union[((this: ServiceWorkerContainer, ev: MessageEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/message_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/messageerror_event)\n    onmessageerror: Union[((this: ServiceWorkerContainer, ev: MessageEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/messageerror_event)')\n    # The **`ready`** read-only property of the ServiceWorkerContainer interface provides a way of delaying code execution until a service worker is active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/ready)\n    ready: Promise<ServiceWorkerRegistration> = Field(..., description='The **`ready`** read-only property of the ServiceWorkerContainer interface provides a way of delaying code execution until a service worker is active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/ready)')\n\nclass ServiceWorkerRegistrationEventMap(BaseModel):\n    updatefound: Event = Field(...)\n\n# The **`ServiceWorkerRegistration`** interface of the Service Worker API represents the service worker registration.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration)\nclass ServiceWorkerRegistration(EventTarget):\n    # The **`active`** read-only property of the This property is initially set to `null`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/active)\n    active: Union[ServiceWorker, null] = Field(..., description='The **`active`** read-only property of the This property is initially set to `null`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/active)')\n    # The **`cookies`** read-only property of the ServiceWorkerRegistration interface returns a reference to the CookieStoreManager interface, which enables a web app to subscribe to and unsubscribe from cookie change events in a service worker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/cookies)\n    cookies: CookieStoreManager = Field(..., description='The **`cookies`** read-only property of the ServiceWorkerRegistration interface returns a reference to the CookieStoreManager interface, which enables a web app to subscribe to and unsubscribe from cookie change events in a service worker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/cookies)')\n    # The **`installing`** read-only property of the initially set to `null`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/installing)\n    installing: Union[ServiceWorker, null] = Field(..., description='The **`installing`** read-only property of the initially set to `null`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/installing)')\n    # The **`navigationPreload`** read-only property of the ServiceWorkerRegistration interface returns the NavigationPreloadManager associated with the current service worker registration.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/navigationPreload)\n    navigationPreload: NavigationPreloadManager = Field(..., description='The **`navigationPreload`** read-only property of the ServiceWorkerRegistration interface returns the NavigationPreloadManager associated with the current service worker registration.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/navigationPreload)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updatefound_event)\n    onupdatefound: Union[((this: ServiceWorkerRegistration, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updatefound_event)')\n    # The **`pushManager`** read-only property of the support for subscribing, getting an active subscription, and accessing push permission status.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/pushManager)\n    pushManager: PushManager = Field(..., description='The **`pushManager`** read-only property of the support for subscribing, getting an active subscription, and accessing push permission status.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/pushManager)')\n    # The **`scope`** read-only property of the ServiceWorkerRegistration interface returns a string representing a URL that defines a service worker's registration scope; that is, the range of URLs a service worker can control.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/scope)\n    scope: str = Field(..., description='The **`scope`** read-only property of the ServiceWorkerRegistration interface returns a string representing a URL that defines a service worker\'s registration scope; that is, the range of URLs a service worker can control.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/scope)')\n    # The **`updateViaCache`** read-only property of the ServiceWorkerRegistration interface returns the value of the setting used to determine the circumstances in which the browser will consult the HTTP cache when it tries to update the service worker or any scripts that are imported via WorkerGlobalScope.importScripts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updateViaCache)\n    updateViaCache: ServiceWorkerUpdateViaCache = Field(..., description='The **`updateViaCache`** read-only property of the ServiceWorkerRegistration interface returns the value of the setting used to determine the circumstances in which the browser will consult the HTTP cache when it tries to update the service worker or any scripts that are imported via WorkerGlobalScope.importScripts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updateViaCache)')\n    # The **`waiting`** read-only property of the set to `null`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/waiting)\n    waiting: Union[ServiceWorker, null] = Field(..., description='The **`waiting`** read-only property of the set to `null`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/waiting)')\n\nclass ShadowRootEventMap(BaseModel):\n    slotchange: Event = Field(...)\n\n# The **`ShadowRoot`** interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot)\nclass ShadowRoot(DocumentFragment):\n    # The **`clonable`** read-only property of the ShadowRoot interface returns `true` if the shadow root is clonable, and `false` otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/clonable)\n    clonable: bool = Field(..., description='The **`clonable`** read-only property of the ShadowRoot interface returns `true` if the shadow root is clonable, and `false` otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/clonable)')\n    # The **`delegatesFocus`** read-only property of the ShadowRoot interface returns `true` if the shadow root delegates focus, and `false` otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/delegatesFocus)\n    delegatesFocus: bool = Field(..., description='The **`delegatesFocus`** read-only property of the ShadowRoot interface returns `true` if the shadow root delegates focus, and `false` otherwise.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/delegatesFocus)')\n    # The **`host`** read-only property of the ShadowRoot returns a reference to the DOM element the `ShadowRoot` is attached to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/host)\n    host: Element = Field(..., description='The **`host`** read-only property of the ShadowRoot returns a reference to the DOM element the `ShadowRoot` is attached to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/host)')\n    # The **`innerHTML`** property of the ShadowRoot interface sets gets or sets the HTML markup to the DOM tree inside the `ShadowRoot`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/innerHTML)\n    innerHTML: str = Field(..., description='The **`innerHTML`** property of the ShadowRoot interface sets gets or sets the HTML markup to the DOM tree inside the `ShadowRoot`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/innerHTML)')\n    # The **`mode`** read-only property of the ShadowRoot specifies its mode — either `open` or `closed`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/mode)\n    mode: ShadowRootMode = Field(..., description='The **`mode`** read-only property of the ShadowRoot specifies its mode — either `open` or `closed`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/mode)')\n    onslotchange: Union[((this: ShadowRoot, ev: Event) => any), null] = Field(...)\n    # The **`serializable`** read-only property of the ShadowRoot interface returns `true` if the shadow root is serializable.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/serializable)\n    serializable: bool = Field(..., description='The **`serializable`** read-only property of the ShadowRoot interface returns `true` if the shadow root is serializable.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/serializable)')\n    # The read-only **`slotAssignment`** property of the ShadowRoot interface returns the _slot assignment mode_ for the shadow DOM tree.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/slotAssignment)\n    slotAssignment: SlotAssignmentMode = Field(..., description='The read-only **`slotAssignment`** property of the ShadowRoot interface returns the _slot assignment mode_ for the shadow DOM tree.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/slotAssignment)')\n\n# The **`SharedWorker`** interface represents a specific kind of worker that can be _accessed_ from several browsing contexts, such as several windows, iframes or even workers.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SharedWorker)\nclass SharedWorker(EventTarget):\n    # The **`port`** property of the SharedWorker interface returns a MessagePort object used to communicate and control the shared worker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SharedWorker/port)\n    port: MessagePort = Field(..., description='The **`port`** property of the SharedWorker interface returns a MessagePort object used to communicate and control the shared worker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SharedWorker/port)')\n\nclass Slottable(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/assignedSlot)\n    assignedSlot: Union[HTMLSlotElement, null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/assignedSlot)')\n\nclass SourceBufferEventMap(BaseModel):\n    abort: Event = Field(...)\n    error: Event = Field(...)\n    update: Event = Field(...)\n    updateend: Event = Field(...)\n    updatestart: Event = Field(...)\n\n# The **`SourceBuffer`** interface represents a chunk of media to be passed into an HTMLMediaElement and played, via a MediaSource object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer)\nclass SourceBuffer(EventTarget):\n    # The **`appendWindowEnd`** property of the timestamp range that can be used to filter what media data is appended to the `SourceBuffer`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendWindowEnd)\n    appendWindowEnd: float = Field(..., description='The **`appendWindowEnd`** property of the timestamp range that can be used to filter what media data is appended to the `SourceBuffer`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendWindowEnd)')\n    # The **`appendWindowStart`** property of the timestamp range that can be used to filter what media data is appended to the `SourceBuffer`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendWindowStart)\n    appendWindowStart: float = Field(..., description='The **`appendWindowStart`** property of the timestamp range that can be used to filter what media data is appended to the `SourceBuffer`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendWindowStart)')\n    # The **`buffered`** read-only property of the buffered in the `SourceBuffer` as a normalized TimeRanges object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/buffered)\n    buffered: TimeRanges = Field(..., description='The **`buffered`** read-only property of the buffered in the `SourceBuffer` as a normalized TimeRanges object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/buffered)')\n    # The **`mode`** property of the SourceBuffer interface controls whether media segments can be appended to the `SourceBuffer` in any order, or in a strict sequence.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/mode)\n    mode: AppendMode = Field(..., description='The **`mode`** property of the SourceBuffer interface controls whether media segments can be appended to the `SourceBuffer` in any order, or in a strict sequence.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/mode)')\n    onabort: Union[((this: SourceBuffer, ev: Event) => any), null] = Field(...)\n    onerror: Union[((this: SourceBuffer, ev: Event) => any), null] = Field(...)\n    onupdate: Union[((this: SourceBuffer, ev: Event) => any), null] = Field(...)\n    onupdateend: Union[((this: SourceBuffer, ev: Event) => any), null] = Field(...)\n    onupdatestart: Union[((this: SourceBuffer, ev: Event) => any), null] = Field(...)\n    # The **`timestampOffset`** property of the media segments that are appended to the `SourceBuffer`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/timestampOffset)\n    timestampOffset: float = Field(..., description='The **`timestampOffset`** property of the media segments that are appended to the `SourceBuffer`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/timestampOffset)')\n    # The **`updating`** read-only property of the currently being updated — i.e., whether an SourceBuffer.appendBuffer() or SourceBuffer.remove() operation is currently in progress.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/updating)\n    updating: bool = Field(..., description='The **`updating`** read-only property of the currently being updated — i.e., whether an SourceBuffer.appendBuffer() or SourceBuffer.remove() operation is currently in progress.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/updating)')\n\nclass SourceBufferListEventMap(BaseModel):\n    addsourcebuffer: Event = Field(...)\n    removesourcebuffer: Event = Field(...)\n\n# The **`SourceBufferList`** interface represents a simple container list for multiple SourceBuffer objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBufferList)\nclass SourceBufferList(EventTarget):\n    # The **`length`** read-only property of the An unsigned long number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBufferList/length)\n    length: float = Field(..., description='The **`length`** read-only property of the An unsigned long number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBufferList/length)')\n    onaddsourcebuffer: Union[((this: SourceBufferList, ev: Event) => any), null] = Field(...)\n    onremovesourcebuffer: Union[((this: SourceBufferList, ev: Event) => any), null] = Field(...)\n\n# The **`SpeechRecognitionAlternative`** interface of the Web Speech API represents a single word that has been recognized by the speech recognition service.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative)\nclass SpeechRecognitionAlternative(BaseModel):\n    # The **`confidence`** read-only property of the confident the speech recognition system is that the recognition is correct.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative/confidence)\n    confidence: float = Field(..., description='The **`confidence`** read-only property of the confident the speech recognition system is that the recognition is correct.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative/confidence)')\n    # The **`transcript`** read-only property of the transcript of the recognized word(s).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative/transcript)\n    transcript: str = Field(..., description='The **`transcript`** read-only property of the transcript of the recognized word(s).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative/transcript)')\n\n# The **`SpeechRecognitionResult`** interface of the Web Speech API represents a single recognition match, which may contain multiple SpeechRecognitionAlternative objects.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult)\nclass SpeechRecognitionResult(BaseModel):\n    # The **`isFinal`** read-only property of the whether this result is final (`true`) or not (`false`) — if so, then this is the final time this result will be returned; if not, then this result is an interim result, and may be updated later on.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult/isFinal)\n    isFinal: bool = Field(..., description='The **`isFinal`** read-only property of the whether this result is final (`true`) or not (`false`) — if so, then this is the final time this result will be returned; if not, then this result is an interim result, and may be updated later on.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult/isFinal)')\n    # The **`length`** read-only property of the — the number of SpeechRecognitionAlternative objects contained in the result (also referred to as 'n-best alternatives'.) The number of alternatives contained in the result depends on what the recognition was first initiated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult/length)\n    length: float = Field(..., description='The **`length`** read-only property of the — the number of SpeechRecognitionAlternative objects contained in the result (also referred to as \'n-best alternatives\'.) The number of alternatives contained in the result depends on what the recognition was first initiated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult/length)')\n\n# The **`SpeechRecognitionResultList`** interface of the Web Speech API represents a list of SpeechRecognitionResult objects, or a single one if results are being captured in SpeechRecognition.continuous mode.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResultList)\nclass SpeechRecognitionResultList(BaseModel):\n    # The **`length`** read-only property of the 'array' — the number of SpeechRecognitionResult objects in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResultList/length)\n    length: float = Field(..., description='The **`length`** read-only property of the \'array\' — the number of SpeechRecognitionResult objects in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResultList/length)')\n\nclass SpeechSynthesisEventMap(BaseModel):\n    voiceschanged: Event = Field(...)\n\n# The **`SpeechSynthesis`** interface of the Web Speech API is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis)\nclass SpeechSynthesis(EventTarget):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/voiceschanged_event)\n    onvoiceschanged: Union[((this: SpeechSynthesis, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/voiceschanged_event)')\n    # The **`paused`** read-only property of the `true` if the `SpeechSynthesis` object is in a paused state, or `false` if not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/paused)\n    paused: bool = Field(..., description='The **`paused`** read-only property of the `true` if the `SpeechSynthesis` object is in a paused state, or `false` if not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/paused)')\n    # The **`pending`** read-only property of the `true` if the utterance queue contains as-yet-unspoken utterances.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/pending)\n    pending: bool = Field(..., description='The **`pending`** read-only property of the `true` if the utterance queue contains as-yet-unspoken utterances.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/pending)')\n    # The **`speaking`** read-only property of the `true` if an utterance is currently in the process of being spoken — even if `SpeechSynthesis` is in a A boolean value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/speaking)\n    speaking: bool = Field(..., description='The **`speaking`** read-only property of the `true` if an utterance is currently in the process of being spoken — even if `SpeechSynthesis` is in a A boolean value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/speaking)')\n\n# The **`SpeechSynthesisErrorEvent`** interface of the Web Speech API contains information about any errors that occur while processing SpeechSynthesisUtterance objects in the speech service.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisErrorEvent)\nclass SpeechSynthesisErrorEvent(SpeechSynthesisEvent):\n    # The **`error`** property of the A string containing the error reason.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisErrorEvent/error)\n    error: SpeechSynthesisErrorCode = Field(..., description='The **`error`** property of the A string containing the error reason.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisErrorEvent/error)')\n\n# The **`SpeechSynthesisEvent`** interface of the Web Speech API contains information about the current state of SpeechSynthesisUtterance objects that have been processed in the speech service.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent)\nclass SpeechSynthesisEvent(Event):\n    # The **`charIndex`** read-only property of the SpeechSynthesisUtterance interface returns the index position of the character in SpeechSynthesisUtterance.text that was being spoken when the event was triggered.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/charIndex)\n    charIndex: float = Field(..., description='The **`charIndex`** read-only property of the SpeechSynthesisUtterance interface returns the index position of the character in SpeechSynthesisUtterance.text that was being spoken when the event was triggered.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/charIndex)')\n    # The read-only **`charLength`** property of the SpeechSynthesisEvent interface returns the number of characters left to be spoken after the character at the SpeechSynthesisEvent.charIndex position.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/charLength)\n    charLength: float = Field(..., description='The read-only **`charLength`** property of the SpeechSynthesisEvent interface returns the number of characters left to be spoken after the character at the SpeechSynthesisEvent.charIndex position.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/charLength)')\n    # The **`elapsedTime`** read-only property of the SpeechSynthesisEvent returns the elapsed time in seconds, after the SpeechSynthesisUtterance.text started being spoken, at which the event was triggered.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/elapsedTime)\n    elapsedTime: float = Field(..., description='The **`elapsedTime`** read-only property of the SpeechSynthesisEvent returns the elapsed time in seconds, after the SpeechSynthesisUtterance.text started being spoken, at which the event was triggered.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/elapsedTime)')\n    # The **`name`** read-only property of the SpeechSynthesisUtterance interface returns the name associated with certain types of events occurring as the SpeechSynthesisUtterance.text is being spoken: the name of the SSML marker reached in the case of a SpeechSynthesisUtterance.mark_event event, or the type of boundary reached in the case of a SpeechSynthesisUtterance.boundary_event event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/name)\n    name: str = Field(..., description='The **`name`** read-only property of the SpeechSynthesisUtterance interface returns the name associated with certain types of events occurring as the SpeechSynthesisUtterance.text is being spoken: the name of the SSML marker reached in the case of a SpeechSynthesisUtterance.mark_event event, or the type of boundary reached in the case of a SpeechSynthesisUtterance.boundary_event event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/name)')\n    # The **`utterance`** read-only property of the SpeechSynthesisUtterance interface returns the SpeechSynthesisUtterance instance that the event was triggered on.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/utterance)\n    utterance: SpeechSynthesisUtterance = Field(..., description='The **`utterance`** read-only property of the SpeechSynthesisUtterance interface returns the SpeechSynthesisUtterance instance that the event was triggered on.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/utterance)')\n\nclass SpeechSynthesisUtteranceEventMap(BaseModel):\n    boundary: SpeechSynthesisEvent = Field(...)\n    end: SpeechSynthesisEvent = Field(...)\n    error: SpeechSynthesisErrorEvent = Field(...)\n    mark: SpeechSynthesisEvent = Field(...)\n    pause: SpeechSynthesisEvent = Field(...)\n    resume: SpeechSynthesisEvent = Field(...)\n    start: SpeechSynthesisEvent = Field(...)\n\n# The **`SpeechSynthesisUtterance`** interface of the Web Speech API represents a speech request.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance)\nclass SpeechSynthesisUtterance(EventTarget):\n    # The **`lang`** property of the SpeechSynthesisUtterance interface gets and sets the language of the utterance.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/lang)\n    lang: str = Field(..., description='The **`lang`** property of the SpeechSynthesisUtterance interface gets and sets the language of the utterance.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/lang)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/boundary_event)\n    onboundary: Union[((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/boundary_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/end_event)\n    onend: Union[((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/end_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/error_event)\n    onerror: Union[((this: SpeechSynthesisUtterance, ev: SpeechSynthesisErrorEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/error_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/mark_event)\n    onmark: Union[((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/mark_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/pause_event)\n    onpause: Union[((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/pause_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/resume_event)\n    onresume: Union[((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/resume_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/start_event)\n    onstart: Union[((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/start_event)')\n    # The **`pitch`** property of the SpeechSynthesisUtterance interface gets and sets the pitch at which the utterance will be spoken at.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/pitch)\n    pitch: float = Field(..., description='The **`pitch`** property of the SpeechSynthesisUtterance interface gets and sets the pitch at which the utterance will be spoken at.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/pitch)')\n    # The **`rate`** property of the SpeechSynthesisUtterance interface gets and sets the speed at which the utterance will be spoken at.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/rate)\n    rate: float = Field(..., description='The **`rate`** property of the SpeechSynthesisUtterance interface gets and sets the speed at which the utterance will be spoken at.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/rate)')\n    # The **`text`** property of the The text may be provided as plain text, or a well-formed SSML document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/text)\n    text: str = Field(..., description='The **`text`** property of the The text may be provided as plain text, or a well-formed SSML document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/text)')\n    # The **`voice`** property of the SpeechSynthesisUtterance interface gets and sets the voice that will be used to speak the utterance.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/voice)\n    voice: Union[SpeechSynthesisVoice, null] = Field(..., description='The **`voice`** property of the SpeechSynthesisUtterance interface gets and sets the voice that will be used to speak the utterance.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/voice)')\n    # The **`volume`** property of the SpeechSynthesisUtterance interface gets and sets the volume that the utterance will be spoken at.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/volume)\n    volume: float = Field(..., description='The **`volume`** property of the SpeechSynthesisUtterance interface gets and sets the volume that the utterance will be spoken at.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/volume)')\n\n# The **`SpeechSynthesisVoice`** interface of the Web Speech API represents a voice that the system supports.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice)\nclass SpeechSynthesisVoice(BaseModel):\n    # The **`default`** read-only property of the indicating whether the voice is the default voice for the current app (`true`), or not (`false`.) A boolean value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/default)\n    default: bool = Field(..., description='The **`default`** read-only property of the indicating whether the voice is the default voice for the current app (`true`), or not (`false`.) A boolean value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/default)')\n    # The **`lang`** read-only property of the SpeechSynthesisVoice interface returns a BCP 47 language tag indicating the language of the voice.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/lang)\n    lang: str = Field(..., description='The **`lang`** read-only property of the SpeechSynthesisVoice interface returns a BCP 47 language tag indicating the language of the voice.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/lang)')\n    # The **`localService`** read-only property of the indicating whether the voice is supplied by a local speech synthesizer service (`true`), or a remote speech synthesizer service (`false`.) This property is provided to allow differentiation in the case that some voice options are provided by a remote service; it is possible that remote voices might have extra latency, bandwidth or cost associated with them, so such distinction may be useful.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/localService)\n    localService: bool = Field(..., description='The **`localService`** read-only property of the indicating whether the voice is supplied by a local speech synthesizer service (`true`), or a remote speech synthesizer service (`false`.) This property is provided to allow differentiation in the case that some voice options are provided by a remote service; it is possible that remote voices might have extra latency, bandwidth or cost associated with them, so such distinction may be useful.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/localService)')\n    # The **`name`** read-only property of the represents the voice.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/name)\n    name: str = Field(..., description='The **`name`** read-only property of the represents the voice.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/name)')\n    # The **`voiceURI`** read-only property of the the speech synthesis service for this voice.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/voiceURI)\n    voiceURI: str = Field(..., description='The **`voiceURI`** read-only property of the the speech synthesis service for this voice.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/voiceURI)')\n\n# The DOM **`StaticRange`** interface extends AbstractRange to provide a method to specify a range of content in the DOM whose contents don't update to reflect changes which occur within the DOM tree.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StaticRange)\nclass StaticRange(AbstractRange):\n    pass\n\n# The `StereoPannerNode` interface of the Web Audio API represents a simple stereo panner node that can be used to pan an audio stream left or right.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StereoPannerNode)\nclass StereoPannerNode(AudioNode):\n    # The `pan` property of the StereoPannerNode interface is an a-rate AudioParam representing the amount of panning to apply.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StereoPannerNode/pan)\n    pan: AudioParam = Field(..., description='The `pan` property of the StereoPannerNode interface is an a-rate AudioParam representing the amount of panning to apply.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StereoPannerNode/pan)')\n\n# The **`Storage`** interface of the Web Storage API provides access to a particular domain's session or local storage.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage)\nclass Storage(BaseModel):\n    # The **`length`** read-only property of the `Storage` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/length)\n    length: float = Field(..., description='The **`length`** read-only property of the `Storage` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/length)')\n\n# The **`StorageEvent`** interface is implemented by the Window/storage_event event, which is sent to a window when a storage area the window has access to is changed within the context of another document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent)\nclass StorageEvent(Event):\n    # The **`key`** property of the StorageEvent interface returns the key for the storage item that was changed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/key)\n    key: Union[str, null] = Field(..., description='The **`key`** property of the StorageEvent interface returns the key for the storage item that was changed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/key)')\n    # The **`newValue`** property of the StorageEvent interface returns the new value of the storage item whose value was changed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/newValue)\n    newValue: Union[str, null] = Field(..., description='The **`newValue`** property of the StorageEvent interface returns the new value of the storage item whose value was changed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/newValue)')\n    # The **`oldValue`** property of the StorageEvent interface returns the original value of the storage item whose value changed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/oldValue)\n    oldValue: Union[str, null] = Field(..., description='The **`oldValue`** property of the StorageEvent interface returns the original value of the storage item whose value changed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/oldValue)')\n    # The **`storageArea`** property of the StorageEvent interface returns the storage object that was affected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/storageArea)\n    storageArea: Union[Storage, null] = Field(..., description='The **`storageArea`** property of the StorageEvent interface returns the storage object that was affected.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/storageArea)')\n    # The **`url`** property of the StorageEvent interface returns the URL of the document whose storage changed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/url)\n    url: str = Field(..., description='The **`url`** property of the StorageEvent interface returns the URL of the document whose storage changed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/url)')\n\n# The **`StorageManager`** interface of the Storage API provides an interface for managing persistence permissions and estimating available storage.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageManager)\nclass StorageManager(BaseModel):\n    pass\n\n# @deprecated\nclass StyleMedia(BaseModel):\n    type: str = Field(...)\n\n# The **`StylePropertyMap`** interface of the CSS Typed Object Model API provides a representation of a CSS declaration block that is an alternative to CSSStyleDeclaration.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMap)\nclass StylePropertyMap(StylePropertyMapReadOnly):\n    pass\n\n# The **`StylePropertyMapReadOnly`** interface of the CSS Typed Object Model API provides a read-only representation of a CSS declaration block that is an alternative to CSSStyleDeclaration.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly)\nclass StylePropertyMapReadOnly(BaseModel):\n    # The **`size`** read-only property of the containing the size of the `StylePropertyMapReadOnly` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/size)\n    size: float = Field(..., description='The **`size`** read-only property of the containing the size of the `StylePropertyMapReadOnly` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/size)')\n\n# An object implementing the `StyleSheet` interface represents a single style sheet.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet)\nclass StyleSheet(BaseModel):\n    # The **`disabled`** property of the applying to the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/disabled)\n    disabled: bool = Field(..., description='The **`disabled`** property of the applying to the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/disabled)')\n    # The **`href`** property of the StyleSheet interface returns the location of the style sheet.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/href)\n    href: Union[str, null] = Field(..., description='The **`href`** property of the StyleSheet interface returns the location of the style sheet.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/href)')\n    # The **`ownerNode`** property of the with the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/ownerNode)\n    ownerNode: Union[Element, ProcessingInstruction, null] = Field(..., description='The **`ownerNode`** property of the with the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/ownerNode)')\n    # The **`parentStyleSheet`** property of the the given style sheet.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/parentStyleSheet)\n    parentStyleSheet: Union[CSSStyleSheet, null] = Field(..., description='The **`parentStyleSheet`** property of the the given style sheet.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/parentStyleSheet)')\n    # The **`title`** property of the StyleSheet interface returns the advisory title of the current style sheet.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/title)\n    title: Union[str, null] = Field(..., description='The **`title`** property of the StyleSheet interface returns the advisory title of the current style sheet.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/title)')\n    # The **`type`** property of the StyleSheet interface specifies the style sheet language for the given style sheet.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/type)\n    type: str = Field(..., description='The **`type`** property of the StyleSheet interface specifies the style sheet language for the given style sheet.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/type)')\n\n# The `StyleSheetList` interface represents a list of CSSStyleSheet objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheetList)\nclass StyleSheetList(BaseModel):\n    # The **`length`** read-only property of the StyleSheetList interface returns the number of CSSStyleSheet objects in the collection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheetList/length)\n    length: float = Field(..., description='The **`length`** read-only property of the StyleSheetList interface returns the number of CSSStyleSheet objects in the collection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheetList/length)')\n\n# The **`SubmitEvent`** interface defines the object used to represent an HTML form's HTMLFormElement.submit_event event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SubmitEvent)\nclass SubmitEvent(Event):\n    # The read-only **`submitter`** property found on the SubmitEvent interface specifies the submit button or other element that was invoked to cause the form to be submitted.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SubmitEvent/submitter)\n    submitter: Union[HTMLElement, null] = Field(..., description='The read-only **`submitter`** property found on the SubmitEvent interface specifies the submit button or other element that was invoked to cause the form to be submitted.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SubmitEvent/submitter)')\n\n# The **`SubtleCrypto`** interface of the Web Crypto API provides a number of low-level cryptographic functions.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto)\nclass SubtleCrypto(BaseModel):\n    pass\n\n# The **`Text`** interface represents a text Node in a DOM tree.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Text)\nclass Text(CharacterData):\n    # The read-only **`wholeText`** property of the Text interface returns the full text of all Text nodes logically adjacent to the node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Text/wholeText)\n    wholeText: str = Field(..., description='The read-only **`wholeText`** property of the Text interface returns the full text of all Text nodes logically adjacent to the node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Text/wholeText)')\n\n# The **`TextDecoder`** interface represents a decoder for a specific text encoding, such as `UTF-8`, `ISO-8859-2`, `KOI8-R`, `GBK`, etc.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder)\nclass TextDecoder(TextDecoderCommon):\n    pass\n\nclass TextDecoderCommon(BaseModel):\n    # Returns encoding's name, lowercased.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/encoding)\n    encoding: str = Field(..., description='Returns encoding\'s name, lowercased.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/encoding)')\n    # Returns true if error mode is "fatal", otherwise false.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/fatal)\n    fatal: bool = Field(..., description='Returns true if error mode is "fatal", otherwise false.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/fatal)')\n    # Returns the value of ignore BOM.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/ignoreBOM)\n    ignoreBOM: bool = Field(..., description='Returns the value of ignore BOM.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/ignoreBOM)')\n\n# The **`TextDecoderStream`** interface of the Encoding API converts a stream of text in a binary encoding, such as UTF-8 etc., to a stream of strings.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoderStream)\nclass TextDecoderStream(GenericTransformStream):\n    readable: ReadableStream<string> = Field(...)\n    writable: WritableStream<BufferSource> = Field(...)\n\n# The **`TextEncoder`** interface takes a stream of code points as input and emits a stream of UTF-8 bytes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder)\nclass TextEncoder(TextEncoderCommon):\n    pass\n\nclass TextEncoderCommon(BaseModel):\n    # Returns "utf-8".
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder/encoding)\n    encoding: str = Field(..., description='Returns "utf-8".
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder/encoding)')\n\n# The **`TextEncoderStream`** interface of the Encoding API converts a stream of strings into bytes in the UTF-8 encoding.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoderStream)\nclass TextEncoderStream(GenericTransformStream):\n    readable: ReadableStream<Uint8Array<ArrayBuffer>> = Field(...)\n    writable: WritableStream<string> = Field(...)\n\n# The **`TextEvent`** interface is a legacy UI event interface for reporting changes to text UI elements.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEvent)\nclass TextEvent(UIEvent):\n    # The **`data`** read-only property of the TextEvent interface returns the last character added to the input element.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEvent/data)\n    data: str = Field(..., description='The **`data`** read-only property of the TextEvent interface returns the last character added to the input element.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEvent/data)')\n\n# The **`TextMetrics`** interface represents the dimensions of a piece of text in the canvas; a `TextMetrics` instance can be retrieved using the CanvasRenderingContext2D.measureText() method.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics)\nclass TextMetrics(BaseModel):\n    # The read-only **`actualBoundingBoxAscent`** property of the TextMetrics interface is a `double` giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the top of the bounding rectangle used to render the text, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxAscent)\n    actualBoundingBoxAscent: float = Field(..., description='The read-only **`actualBoundingBoxAscent`** property of the TextMetrics interface is a `double` giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the top of the bounding rectangle used to render the text, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxAscent)')\n    # The read-only `actualBoundingBoxDescent` property of the TextMetrics interface is a `double` giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the bottom of the bounding rectangle used to render the text, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxDescent)\n    actualBoundingBoxDescent: float = Field(..., description='The read-only `actualBoundingBoxDescent` property of the TextMetrics interface is a `double` giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the bottom of the bounding rectangle used to render the text, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxDescent)')\n    # The read-only `actualBoundingBoxLeft` property of the TextMetrics interface is a `double` giving the distance parallel to the baseline from the alignment point given by the CanvasRenderingContext2D.textAlign property to the left side of the bounding rectangle of the given text, in CSS pixels; positive numbers indicating a distance going left from the given alignment point.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxLeft)\n    actualBoundingBoxLeft: float = Field(..., description='The read-only `actualBoundingBoxLeft` property of the TextMetrics interface is a `double` giving the distance parallel to the baseline from the alignment point given by the CanvasRenderingContext2D.textAlign property to the left side of the bounding rectangle of the given text, in CSS pixels; positive numbers indicating a distance going left from the given alignment point.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxLeft)')\n    # The read-only `actualBoundingBoxRight` property of the TextMetrics interface is a `double` giving the distance parallel to the baseline from the alignment point given by the CanvasRenderingContext2D.textAlign property to the right side of the bounding rectangle of the given text, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxRight)\n    actualBoundingBoxRight: float = Field(..., description='The read-only `actualBoundingBoxRight` property of the TextMetrics interface is a `double` giving the distance parallel to the baseline from the alignment point given by the CanvasRenderingContext2D.textAlign property to the right side of the bounding rectangle of the given text, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxRight)')\n    # The read-only `alphabeticBaseline` property of the TextMetrics interface is a `double` giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the alphabetic baseline of the line box, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/alphabeticBaseline)\n    alphabeticBaseline: float = Field(..., description='The read-only `alphabeticBaseline` property of the TextMetrics interface is a `double` giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the alphabetic baseline of the line box, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/alphabeticBaseline)')\n    # The read-only `emHeightAscent` property of the TextMetrics interface returns the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the top of the _em_ square in the line box, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/emHeightAscent)\n    emHeightAscent: float = Field(..., description='The read-only `emHeightAscent` property of the TextMetrics interface returns the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the top of the _em_ square in the line box, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/emHeightAscent)')\n    # The read-only `emHeightDescent` property of the TextMetrics interface returns the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the bottom of the _em_ square in the line box, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/emHeightDescent)\n    emHeightDescent: float = Field(..., description='The read-only `emHeightDescent` property of the TextMetrics interface returns the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the bottom of the _em_ square in the line box, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/emHeightDescent)')\n    # The read-only `fontBoundingBoxAscent` property of the TextMetrics interface returns the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute, to the top of the highest bounding rectangle of all the fonts used to render the text, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/fontBoundingBoxAscent)\n    fontBoundingBoxAscent: float = Field(..., description='The read-only `fontBoundingBoxAscent` property of the TextMetrics interface returns the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute, to the top of the highest bounding rectangle of all the fonts used to render the text, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/fontBoundingBoxAscent)')\n    # The read-only `fontBoundingBoxDescent` property of the TextMetrics interface returns the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the bottom of the bounding rectangle of all the fonts used to render the text, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/fontBoundingBoxDescent)\n    fontBoundingBoxDescent: float = Field(..., description='The read-only `fontBoundingBoxDescent` property of the TextMetrics interface returns the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the bottom of the bounding rectangle of all the fonts used to render the text, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/fontBoundingBoxDescent)')\n    # The read-only `hangingBaseline` property of the TextMetrics interface is a `double` giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the hanging baseline of the line box, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/hangingBaseline)\n    hangingBaseline: float = Field(..., description='The read-only `hangingBaseline` property of the TextMetrics interface is a `double` giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the hanging baseline of the line box, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/hangingBaseline)')\n    # The read-only `ideographicBaseline` property of the TextMetrics interface is a `double` giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the ideographic baseline of the line box, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/ideographicBaseline)\n    ideographicBaseline: float = Field(..., description='The read-only `ideographicBaseline` property of the TextMetrics interface is a `double` giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the ideographic baseline of the line box, in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/ideographicBaseline)')\n    # The read-only **`width`** property of the TextMetrics interface contains the text's advance width (the width of that inline box) in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/width)\n    width: float = Field(..., description='The read-only **`width`** property of the TextMetrics interface contains the text\'s advance width (the width of that inline box) in CSS pixels.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/width)')\n\nclass TextTrackEventMap(BaseModel):\n    cuechange: Event = Field(...)\n\n# The **`TextTrack`** interface of the WebVTT API represents a text track associated with a media element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack)\nclass TextTrack(EventTarget):\n    # The **`activeCues`** read-only property of the TextTrack interface returns a TextTrackCueList object listing the currently active cues.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/activeCues)\n    activeCues: Union[TextTrackCueList, null] = Field(..., description='The **`activeCues`** read-only property of the TextTrack interface returns a TextTrackCueList object listing the currently active cues.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/activeCues)')\n    # The **`cues`** read-only property of the TextTrack interface returns a TextTrackCueList object containing all of the track's cues.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/cues)\n    cues: Union[TextTrackCueList, null] = Field(..., description='The **`cues`** read-only property of the TextTrack interface returns a TextTrackCueList object containing all of the track\'s cues.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/cues)')\n    # The **`id`** read-only property of the TextTrack interface returns the ID of the track if it has one.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/id)\n    id: str = Field(..., description='The **`id`** read-only property of the TextTrack interface returns the ID of the track if it has one.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/id)')\n    # The **`inBandMetadataTrackDispatchType`** read-only property of the TextTrack interface returns the text track's in-band metadata dispatch type of the text track represented by the TextTrack object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/inBandMetadataTrackDispatchType)\n    inBandMetadataTrackDispatchType: str = Field(..., description='The **`inBandMetadataTrackDispatchType`** read-only property of the TextTrack interface returns the text track\'s in-band metadata dispatch type of the text track represented by the TextTrack object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/inBandMetadataTrackDispatchType)')\n    # The **`kind`** read-only property of the TextTrack interface returns the kind of text track this object represents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/kind)\n    kind: TextTrackKind = Field(..., description='The **`kind`** read-only property of the TextTrack interface returns the kind of text track this object represents.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/kind)')\n    # The **`label`** read-only property of the TextTrack interface returns a human-readable label for the text track, if it is available.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/label)\n    label: str = Field(..., description='The **`label`** read-only property of the TextTrack interface returns a human-readable label for the text track, if it is available.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/label)')\n    # The **`language`** read-only property of the TextTrack interface returns the language of the text track.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/language)\n    language: str = Field(..., description='The **`language`** read-only property of the TextTrack interface returns the language of the text track.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/language)')\n    # The TextTrack interface's **`mode`** property is a string specifying and controlling the text track's mode: `disabled`, `hidden`, or `showing`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/mode)\n    mode: TextTrackMode = Field(..., description='The TextTrack interface\'s **`mode`** property is a string specifying and controlling the text track\'s mode: `disabled`, `hidden`, or `showing`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/mode)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/cuechange_event)\n    oncuechange: Union[((this: TextTrack, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/cuechange_event)')\n\nclass TextTrackCueEventMap(BaseModel):\n    enter: Event = Field(...)\n    exit: Event = Field(...)\n\n# The **`TextTrackCue`** interface of the WebVTT API is the abstract base class for the various derived cue types, such as VTTCue; you will work with these derived types rather than the base class.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue)\nclass TextTrackCue(EventTarget):\n    # The **`endTime`** property of the TextTrackCue interface returns and sets the end time of the cue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/endTime)\n    endTime: float = Field(..., description='The **`endTime`** property of the TextTrackCue interface returns and sets the end time of the cue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/endTime)')\n    # The **`id`** property of the TextTrackCue interface returns and sets the identifier for this cue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/id)\n    id: str = Field(..., description='The **`id`** property of the TextTrackCue interface returns and sets the identifier for this cue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/id)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/enter_event)\n    onenter: Union[((this: TextTrackCue, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/enter_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/exit_event)\n    onexit: Union[((this: TextTrackCue, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/exit_event)')\n    # The **`pauseOnExit`** property of the TextTrackCue interface returns or sets the flag indicating whether playback of the media should pause when the end of the range to which this cue applies is reached.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/pauseOnExit)\n    pauseOnExit: bool = Field(..., description='The **`pauseOnExit`** property of the TextTrackCue interface returns or sets the flag indicating whether playback of the media should pause when the end of the range to which this cue applies is reached.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/pauseOnExit)')\n    # The **`startTime`** property of the TextTrackCue interface returns and sets the start time of the cue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/startTime)\n    startTime: float = Field(..., description='The **`startTime`** property of the TextTrackCue interface returns and sets the start time of the cue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/startTime)')\n    # The **`track`** read-only property of the TextTrackCue interface returns the TextTrack object that this cue belongs to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/track)\n    track: Union[TextTrack, null] = Field(..., description='The **`track`** read-only property of the TextTrackCue interface returns the TextTrack object that this cue belongs to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/track)')\n\n# The **`TextTrackCueList`** interface of the WebVTT API is an array-like object that represents a dynamically updating list of TextTrackCue objects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCueList)\nclass TextTrackCueList(BaseModel):\n    # The **`length`** read-only property of the TextTrackCueList interface returns the number of cues in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCueList/length)\n    length: float = Field(..., description='The **`length`** read-only property of the TextTrackCueList interface returns the number of cues in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCueList/length)')\n\nclass TextTrackListEventMap(BaseModel):\n    addtrack: TrackEvent = Field(...)\n    change: Event = Field(...)\n    removetrack: TrackEvent = Field(...)\n\n# The **`TextTrackList`** interface is used to represent a list of the text tracks defined for the associated video or audio element, with each track represented by a separate textTrack object in the list.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList)\nclass TextTrackList(EventTarget):\n    # The read-only **TextTrackList** property **`length`** returns the number of entries in the `TextTrackList`, each of which is a TextTrack representing one track in the media element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/length)\n    length: float = Field(..., description='The read-only **TextTrackList** property **`length`** returns the number of entries in the `TextTrackList`, each of which is a TextTrack representing one track in the media element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/length)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/addtrack_event)\n    onaddtrack: Union[((this: TextTrackList, ev: TrackEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/addtrack_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/change_event)\n    onchange: Union[((this: TextTrackList, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/change_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/removetrack_event)\n    onremovetrack: Union[((this: TextTrackList, ev: TrackEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/removetrack_event)')\n\n# When loading a media resource for use by an audio or video element, the **`TimeRanges`** interface is used for representing the time ranges of the media resource that have been buffered, the time ranges that have been played, and the time ranges that are seekable.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TimeRanges)\nclass TimeRanges(BaseModel):\n    # The **`TimeRanges.length`** read-only property returns the number of ranges in the object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TimeRanges/length)\n    length: float = Field(..., description='The **`TimeRanges.length`** read-only property returns the number of ranges in the object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TimeRanges/length)')\n\n# The **`ToggleEvent`** interface represents an event notifying the user an Element's state has changed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ToggleEvent)\nclass ToggleEvent(Event):\n    # The **`newState`** read-only property of the ToggleEvent interface is a string representing the state the element is transitioning to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ToggleEvent/newState)\n    newState: str = Field(..., description='The **`newState`** read-only property of the ToggleEvent interface is a string representing the state the element is transitioning to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ToggleEvent/newState)')\n    # The **`oldState`** read-only property of the ToggleEvent interface is a string representing the state the element is transitioning from.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ToggleEvent/oldState)\n    oldState: str = Field(..., description='The **`oldState`** read-only property of the ToggleEvent interface is a string representing the state the element is transitioning from.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ToggleEvent/oldState)')\n\n# The **`Touch`** interface represents a single contact point on a touch-sensitive device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch)\nclass Touch(BaseModel):\n    # The `Touch.clientX` read-only property returns the X coordinate of the touch point relative to the viewport, not including any scroll offset.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/clientX)\n    clientX: float = Field(..., description='The `Touch.clientX` read-only property returns the X coordinate of the touch point relative to the viewport, not including any scroll offset.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/clientX)')\n    # The **`Touch.clientY`** read-only property returns the Y coordinate of the touch point relative to the browser's viewport, not including any scroll offset.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/clientY)\n    clientY: float = Field(..., description='The **`Touch.clientY`** read-only property returns the Y coordinate of the touch point relative to the browser\'s viewport, not including any scroll offset.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/clientY)')\n    # The **`Touch.force`** read-only property returns the amount of pressure the user is applying to the touch surface for a Touch point.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/force)\n    force: float = Field(..., description='The **`Touch.force`** read-only property returns the amount of pressure the user is applying to the touch surface for a Touch point.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/force)')\n    # The **`Touch.identifier`** returns a value uniquely identifying this point of contact with the touch surface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/identifier)\n    identifier: float = Field(..., description='The **`Touch.identifier`** returns a value uniquely identifying this point of contact with the touch surface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/identifier)')\n    # The **`Touch.pageX`** read-only property returns the X coordinate of the touch point relative to the viewport, including any scroll offset.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/pageX)\n    pageX: float = Field(..., description='The **`Touch.pageX`** read-only property returns the X coordinate of the touch point relative to the viewport, including any scroll offset.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/pageX)')\n    # The **`Touch.pageY`** read-only property returns the Y coordinate of the touch point relative to the viewport, including any scroll offset.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/pageY)\n    pageY: float = Field(..., description='The **`Touch.pageY`** read-only property returns the Y coordinate of the touch point relative to the viewport, including any scroll offset.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/pageY)')\n    # The **`radiusX`** read-only property of the Touch interface returns the X radius of the ellipse that most closely circumscribes the area of contact with the touch surface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/radiusX)\n    radiusX: float = Field(..., description='The **`radiusX`** read-only property of the Touch interface returns the X radius of the ellipse that most closely circumscribes the area of contact with the touch surface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/radiusX)')\n    # The **`radiusY`** read-only property of the Touch interface returns the Y radius of the ellipse that most closely circumscribes the area of contact with the touch surface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/radiusY)\n    radiusY: float = Field(..., description='The **`radiusY`** read-only property of the Touch interface returns the Y radius of the ellipse that most closely circumscribes the area of contact with the touch surface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/radiusY)')\n    # The **`rotationAngle`** read-only property of the Touch interface returns the rotation angle, in degrees, of the contact area ellipse defined by Touch.radiusX and Touch.radiusY.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/rotationAngle)\n    rotationAngle: float = Field(..., description='The **`rotationAngle`** read-only property of the Touch interface returns the rotation angle, in degrees, of the contact area ellipse defined by Touch.radiusX and Touch.radiusY.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/rotationAngle)')\n    # Returns the X coordinate of the touch point relative to the screen, not including any scroll offset.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/screenX)\n    screenX: float = Field(..., description='Returns the X coordinate of the touch point relative to the screen, not including any scroll offset.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/screenX)')\n    # Returns the Y coordinate of the touch point relative to the screen, not including any scroll offset.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/screenY)\n    screenY: float = Field(..., description='Returns the Y coordinate of the touch point relative to the screen, not including any scroll offset.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/screenY)')\n    # The read-only **`target`** property of the `Touch` interface returns the (EventTarget) on which the touch contact started when it was first placed on the surface, even if the touch point has since moved outside the interactive area of that element or even been removed from the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/target)\n    target: EventTarget = Field(..., description='The read-only **`target`** property of the `Touch` interface returns the (EventTarget) on which the touch contact started when it was first placed on the surface, even if the touch point has since moved outside the interactive area of that element or even been removed from the document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/target)')\n\n# The **`TouchEvent`** interface represents an UIEvent which is sent when the state of contacts with a touch-sensitive surface changes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent)\nclass TouchEvent(UIEvent):\n    # The read-only **`altKey`** property of the TouchEvent interface returns a boolean value indicating whether or not the <kbd>alt</kbd> (Alternate) key is enabled when the touch event is created.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/altKey)\n    altKey: bool = Field(..., description='The read-only **`altKey`** property of the TouchEvent interface returns a boolean value indicating whether or not the <kbd>alt</kbd> (Alternate) key is enabled when the touch event is created.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/altKey)')\n    # The **`changedTouches`** read-only property is a TouchList whose touch points (Touch objects) varies depending on the event type, as follows: - For the Element/touchstart_event event, it is a list of the touch points that became active with the current event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/changedTouches)\n    changedTouches: TouchList = Field(..., description='The **`changedTouches`** read-only property is a TouchList whose touch points (Touch objects) varies depending on the event type, as follows: - For the Element/touchstart_event event, it is a list of the touch points that became active with the current event.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/changedTouches)')\n    # The read-only **`ctrlKey`** property of the TouchEvent interface returns a boolean value indicating whether the <kbd>control</kbd> (Control) key is enabled when the touch event is created.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/ctrlKey)\n    ctrlKey: bool = Field(..., description='The read-only **`ctrlKey`** property of the TouchEvent interface returns a boolean value indicating whether the <kbd>control</kbd> (Control) key is enabled when the touch event is created.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/ctrlKey)')\n    # The read-only **`metaKey`** property of the TouchEvent interface returns a boolean value indicating whether or not the <kbd>Meta</kbd> key is enabled when the touch event is created.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/metaKey)\n    metaKey: bool = Field(..., description='The read-only **`metaKey`** property of the TouchEvent interface returns a boolean value indicating whether or not the <kbd>Meta</kbd> key is enabled when the touch event is created.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/metaKey)')\n    # The read-only **`shiftKey`** property of the `TouchEvent` interface returns a boolean value indicating whether or not the <kbd>shift</kbd> key is enabled when the touch event is created.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/shiftKey)\n    shiftKey: bool = Field(..., description='The read-only **`shiftKey`** property of the `TouchEvent` interface returns a boolean value indicating whether or not the <kbd>shift</kbd> key is enabled when the touch event is created.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/shiftKey)')\n    # The **`targetTouches`** read-only property is a TouchList listing all the Touch objects for touch points that are still in contact with the touch surface **and** whose Element/touchstart_event event occurred inside the same target element as the current target element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/targetTouches)\n    targetTouches: TouchList = Field(..., description='The **`targetTouches`** read-only property is a TouchList listing all the Touch objects for touch points that are still in contact with the touch surface **and** whose Element/touchstart_event event occurred inside the same target element as the current target element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/targetTouches)')\n    # **`touches`** is a read-only TouchList listing all the Touch objects for touch points that are currently in contact with the touch surface, regardless of whether or not they've changed or what their target element was at Element/touchstart_event time.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/touches)\n    touches: TouchList = Field(..., description='**`touches`** is a read-only TouchList listing all the Touch objects for touch points that are currently in contact with the touch surface, regardless of whether or not they\'ve changed or what their target element was at Element/touchstart_event time.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/touches)')\n\n# The **`TouchList`** interface represents a list of contact points on a touch surface.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchList)\nclass TouchList(BaseModel):\n    # The **`length`** read-only property indicates the number of items (touch points) in a given TouchList.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchList/length)\n    length: float = Field(..., description='The **`length`** read-only property indicates the number of items (touch points) in a given TouchList.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchList/length)')\n\n# The **`TrackEvent`** interface of the HTML DOM API is used for events which represent changes to a set of available tracks on an HTML media element; these events are `addtrack` and `removetrack`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TrackEvent)\nclass TrackEvent(Event):\n    # The read-only **`track`** property of the TrackEvent interface specifies the media track object to which the event applies.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TrackEvent/track)\n    track: Union[TextTrack, null] = Field(..., description='The read-only **`track`** property of the TrackEvent interface specifies the media track object to which the event applies.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TrackEvent/track)')\n\n# The **`TransformStream`** interface of the Streams API represents a concrete implementation of the pipe chain _transform stream_ concept.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStream)\nclass TransformStream(BaseModel):\n    # The **`readable`** read-only property of the TransformStream interface returns the ReadableStream instance controlled by this `TransformStream`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStream/readable)\n    readable: ReadableStream<O> = Field(..., description='The **`readable`** read-only property of the TransformStream interface returns the ReadableStream instance controlled by this `TransformStream`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStream/readable)')\n    # The **`writable`** read-only property of the TransformStream interface returns the WritableStream instance controlled by this `TransformStream`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStream/writable)\n    writable: WritableStream<I> = Field(..., description='The **`writable`** read-only property of the TransformStream interface returns the WritableStream instance controlled by this `TransformStream`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStream/writable)')\n\n# The **`TransformStreamDefaultController`** interface of the Streams API provides methods to manipulate the associated ReadableStream and WritableStream.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController)\nclass TransformStreamDefaultController(BaseModel):\n    # The **`desiredSize`** read-only property of the TransformStreamDefaultController interface returns the desired size to fill the queue of the associated ReadableStream.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/desiredSize)\n    desiredSize: Union[float, null] = Field(..., description='The **`desiredSize`** read-only property of the TransformStreamDefaultController interface returns the desired size to fill the queue of the associated ReadableStream.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/desiredSize)')\n\n# The **`TransitionEvent`** interface represents events providing information related to transitions.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent)\nclass TransitionEvent(Event):\n    # The **`TransitionEvent.elapsedTime`** read-only property is a `float` giving the amount of time the animation has been running, in seconds, when this event fired.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent/elapsedTime)\n    elapsedTime: float = Field(..., description='The **`TransitionEvent.elapsedTime`** read-only property is a `float` giving the amount of time the animation has been running, in seconds, when this event fired.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent/elapsedTime)')\n    # The **`propertyName`** read-only property of TransitionEvent objects is a string containing the name of the CSS property associated with the transition.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent/propertyName)\n    propertyName: str = Field(..., description='The **`propertyName`** read-only property of TransitionEvent objects is a string containing the name of the CSS property associated with the transition.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent/propertyName)')\n    # The **`TransitionEvent.pseudoElement`** read-only property is a string, starting with `'::'`, containing the name of the pseudo-element the animation runs on.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent/pseudoElement)\n    pseudoElement: str = Field(..., description='The **`TransitionEvent.pseudoElement`** read-only property is a string, starting with `\'::\'`, containing the name of the pseudo-element the animation runs on.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent/pseudoElement)')\n\n# The **`TreeWalker`** object represents the nodes of a document subtree and a position within them.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker)\nclass TreeWalker(BaseModel):\n    # The **`TreeWalker.currentNode`** property represents the A Node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/currentNode)\n    currentNode: Node = Field(..., description='The **`TreeWalker.currentNode`** property represents the A Node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/currentNode)')\n    # The **`TreeWalker.filter`** read-only property returns the `NodeFilter` associated with the TreeWalker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/filter)\n    filter: Union[NodeFilter, null] = Field(..., description='The **`TreeWalker.filter`** read-only property returns the `NodeFilter` associated with the TreeWalker.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/filter)')\n    # The **`TreeWalker.root`** read-only property returns the root Node that the TreeWalker traverses.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/root)\n    root: Node = Field(..., description='The **`TreeWalker.root`** read-only property returns the root Node that the TreeWalker traverses.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/root)')\n    # The **`TreeWalker.whatToShow`** read-only property returns a bitmask that indicates the types of nodes to show.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/whatToShow)\n    whatToShow: float = Field(..., description='The **`TreeWalker.whatToShow`** read-only property returns a bitmask that indicates the types of nodes to show.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/whatToShow)')\n\n# The **`UIEvent`** interface represents simple user interface events.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent)\nclass UIEvent(Event):\n    # The **`UIEvent.detail`** read-only property, when non-zero, provides the current (or next, depending on the event) click count.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent/detail)\n    detail: float = Field(..., description='The **`UIEvent.detail`** read-only property, when non-zero, provides the current (or next, depending on the event) click count.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent/detail)')\n    # The **`UIEvent.view`** read-only property returns the is the Window object the event happened in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent/view)\n    view: Union[Window, null] = Field(..., description='The **`UIEvent.view`** read-only property returns the is the Window object the event happened in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent/view)')\n    # The **`UIEvent.which`** read-only property of the UIEvent interface returns a number that indicates which button was pressed on the mouse, or the numeric `keyCode` or the character code (`charCode`) of the key pressed on the keyboard.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent/which)\n    which: float = Field(..., description='The **`UIEvent.which`** read-only property of the UIEvent interface returns a number that indicates which button was pressed on the mouse, or the numeric `keyCode` or the character code (`charCode`) of the key pressed on the keyboard.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent/which)')\n\n# The **`URL`** interface is used to parse, construct, normalize, and encode URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL)\nclass URL(BaseModel):\n    # The **`hash`** property of the URL interface is a string containing a `'#'` followed by the fragment identifier of the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/hash)\n    hash: str = Field(..., description='The **`hash`** property of the URL interface is a string containing a `\'#\'` followed by the fragment identifier of the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/hash)')\n    # The **`host`** property of the URL interface is a string containing the host, which is the URL.hostname, and then, if the port of the URL is nonempty, a `':'`, followed by the URL.port of the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/host)\n    host: str = Field(..., description='The **`host`** property of the URL interface is a string containing the host, which is the URL.hostname, and then, if the port of the URL is nonempty, a `\':\'`, followed by the URL.port of the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/host)')\n    # The **`hostname`** property of the URL interface is a string containing either the domain name or IP address of the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/hostname)\n    hostname: str = Field(..., description='The **`hostname`** property of the URL interface is a string containing either the domain name or IP address of the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/hostname)')\n    # The **`href`** property of the URL interface is a string containing the whole URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/href)\n    href: str = Field(..., description='The **`href`** property of the URL interface is a string containing the whole URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/href)')\n    # The **`origin`** read-only property of the URL interface returns a string containing the Unicode serialization of the origin of the represented URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/origin)\n    origin: str = Field(..., description='The **`origin`** read-only property of the URL interface returns a string containing the Unicode serialization of the origin of the represented URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/origin)')\n    # The **`password`** property of the URL interface is a string containing the password component of the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/password)\n    password: str = Field(..., description='The **`password`** property of the URL interface is a string containing the password component of the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/password)')\n    # The **`pathname`** property of the URL interface represents a location in a hierarchical structure.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/pathname)\n    pathname: str = Field(..., description='The **`pathname`** property of the URL interface represents a location in a hierarchical structure.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/pathname)')\n    # The **`port`** property of the URL interface is a string containing the port number of the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/port)\n    port: str = Field(..., description='The **`port`** property of the URL interface is a string containing the port number of the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/port)')\n    # The **`protocol`** property of the URL interface is a string containing the protocol or scheme of the URL, including the final `':'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/protocol)\n    protocol: str = Field(..., description='The **`protocol`** property of the URL interface is a string containing the protocol or scheme of the URL, including the final `\':\'`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/protocol)')\n    # The **`search`** property of the URL interface is a search string, also called a _query string_, that is a string containing a `'?'` followed by the parameters of the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/search)\n    search: str = Field(..., description='The **`search`** property of the URL interface is a search string, also called a _query string_, that is a string containing a `\'?\'` followed by the parameters of the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/search)')\n    # The **`searchParams`** read-only property of the access to the [MISSING: httpmethod('GET')] decoded query arguments contained in the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/searchParams)\n    searchParams: URLSearchParams = Field(..., description='The **`searchParams`** read-only property of the access to the [MISSING: httpmethod(\'GET\')] decoded query arguments contained in the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/searchParams)')\n    # The **`username`** property of the URL interface is a string containing the username component of the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/username)\n    username: str = Field(..., description='The **`username`** property of the URL interface is a string containing the username component of the URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/username)')\n\n# The **`URLSearchParams`** interface defines utility methods to work with the query string of a URL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams)\nclass URLSearchParams(BaseModel):\n    # The **`size`** read-only property of the URLSearchParams interface indicates the total number of search parameter entries.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/size)\n    size: float = Field(..., description='The **`size`** read-only property of the URLSearchParams interface indicates the total number of search parameter entries.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/size)')\n\n# The **`UserActivation`** interface provides information about whether a user is currently interacting with the page, or has completed an interaction since page load.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/UserActivation)\nclass UserActivation(BaseModel):\n    # The read-only **`hasBeenActive`** property of the UserActivation interface indicates whether the current window has sticky activation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/UserActivation/hasBeenActive)\n    hasBeenActive: bool = Field(..., description='The read-only **`hasBeenActive`** property of the UserActivation interface indicates whether the current window has sticky activation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/UserActivation/hasBeenActive)')\n    # The read-only **`isActive`** property of the UserActivation interface indicates whether the current window has transient activation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/UserActivation/isActive)\n    isActive: bool = Field(..., description='The read-only **`isActive`** property of the UserActivation interface indicates whether the current window has transient activation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/UserActivation/isActive)')\n\n# The `VTTCue` interface of the WebVTT API represents a cue that can be added to the text track associated with a particular video (or other media).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue)\nclass VTTCue(TextTrackCue):\n    # The **`align`** property of the VTTCue interface represents the alignment of all of the lines of text in the text box.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/align)\n    align: AlignSetting = Field(..., description='The **`align`** property of the VTTCue interface represents the alignment of all of the lines of text in the text box.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/align)')\n    # The **`line`** property of the VTTCue interface represents the cue line of this WebVTT cue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/line)\n    line: LineAndPositionSetting = Field(..., description='The **`line`** property of the VTTCue interface represents the cue line of this WebVTT cue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/line)')\n    # The **`lineAlign`** property of the VTTCue interface represents the alignment of this VTT cue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/lineAlign)\n    lineAlign: LineAlignSetting = Field(..., description='The **`lineAlign`** property of the VTTCue interface represents the alignment of this VTT cue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/lineAlign)')\n    # The **`position`** property of the VTTCue interface represents the indentation of the cue within the line.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/position)\n    position: LineAndPositionSetting = Field(..., description='The **`position`** property of the VTTCue interface represents the indentation of the cue within the line.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/position)')\n    # The **`positionAlign`** property of the VTTCue interface is used to determine what VTTCue.position is anchored to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/positionAlign)\n    positionAlign: PositionAlignSetting = Field(..., description='The **`positionAlign`** property of the VTTCue interface is used to determine what VTTCue.position is anchored to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/positionAlign)')\n    # The **`region`** property of the VTTCue interface returns and sets the VTTRegion that this cue belongs to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/region)\n    region: Union[VTTRegion, null] = Field(..., description='The **`region`** property of the VTTCue interface returns and sets the VTTRegion that this cue belongs to.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/region)')\n    # The **`size`** property of the VTTCue interface represents the size of the cue as a percentage of the video size.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/size)\n    size: float = Field(..., description='The **`size`** property of the VTTCue interface represents the size of the cue as a percentage of the video size.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/size)')\n    # The **`snapToLines`** property of the VTTCue interface is a Boolean indicating if the VTTCue.line property is an integer number of lines, or a percentage of the video size.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/snapToLines)\n    snapToLines: bool = Field(..., description='The **`snapToLines`** property of the VTTCue interface is a Boolean indicating if the VTTCue.line property is an integer number of lines, or a percentage of the video size.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/snapToLines)')\n    # The **`text`** property of the VTTCue interface represents the text contents of the cue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/text)\n    text: str = Field(..., description='The **`text`** property of the VTTCue interface represents the text contents of the cue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/text)')\n    # The **`vertical`** property of the VTTCue interface is a string representing the cue's writing direction.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/vertical)\n    vertical: DirectionSetting = Field(..., description='The **`vertical`** property of the VTTCue interface is a string representing the cue\'s writing direction.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/vertical)')\n\n# The `VTTRegion` interface of the WebVTT API describes a portion of the video to render a VTTCue onto.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion)\nclass VTTRegion(BaseModel):\n    id: str = Field(...)\n    lines: float = Field(...)\n    regionAnchorX: float = Field(...)\n    regionAnchorY: float = Field(...)\n    scroll: ScrollSetting = Field(...)\n    viewportAnchorX: float = Field(...)\n    viewportAnchorY: float = Field(...)\n    width: float = Field(...)\n\n# The **`ValidityState`** interface represents the _validity states_ that an element can be in, with respect to constraint validation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState)\nclass ValidityState(BaseModel):\n    # The read-only **`badInput`** property of the ValidityState interface indicates if the user has provided input that the browser is unable to convert.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/badInput)\n    badInput: bool = Field(..., description='The read-only **`badInput`** property of the ValidityState interface indicates if the user has provided input that the browser is unable to convert.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/badInput)')\n    # The read-only **`customError`** property of the `ValidityState` interface returns `true` if an element doesn't meet the validation required in the custom validity set by the element's HTMLInputElement.setCustomValidity method.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/customError)\n    customError: bool = Field(..., description='The read-only **`customError`** property of the `ValidityState` interface returns `true` if an element doesn\'t meet the validation required in the custom validity set by the element\'s HTMLInputElement.setCustomValidity method.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/customError)')\n    # The read-only **`patternMismatch`** property of the `ValidityState` interface indicates if the value of an input, after having been edited by the user, does not conform to the constraints set by the element's `pattern` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/patternMismatch)\n    patternMismatch: bool = Field(..., description='The read-only **`patternMismatch`** property of the `ValidityState` interface indicates if the value of an input, after having been edited by the user, does not conform to the constraints set by the element\'s `pattern` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/patternMismatch)')\n    # The read-only **`rangeOverflow`** property of the `ValidityState` interface indicates if the value of an input, after having been edited by the user, does not conform to the constraints set by the element's `max` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/rangeOverflow)\n    rangeOverflow: bool = Field(..., description='The read-only **`rangeOverflow`** property of the `ValidityState` interface indicates if the value of an input, after having been edited by the user, does not conform to the constraints set by the element\'s `max` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/rangeOverflow)')\n    # The read-only **`rangeUnderflow`** property of the `ValidityState` interface indicates if the value of an input, after having been edited by the user, does not conform to the constraints set by the element's `min` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/rangeUnderflow)\n    rangeUnderflow: bool = Field(..., description='The read-only **`rangeUnderflow`** property of the `ValidityState` interface indicates if the value of an input, after having been edited by the user, does not conform to the constraints set by the element\'s `min` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/rangeUnderflow)')\n    # The read-only **`stepMismatch`** property of the `ValidityState` interface indicates if the value of an input, after having been edited by the user, does not conform to the constraints set by the element's `step` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/stepMismatch)\n    stepMismatch: bool = Field(..., description='The read-only **`stepMismatch`** property of the `ValidityState` interface indicates if the value of an input, after having been edited by the user, does not conform to the constraints set by the element\'s `step` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/stepMismatch)')\n    # The read-only **`tooLong`** property of the `ValidityState` interface indicates if the value of an input or textarea, after having been edited by the user, exceeds the maximum code-unit length established by the element's `maxlength` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/tooLong)\n    tooLong: bool = Field(..., description='The read-only **`tooLong`** property of the `ValidityState` interface indicates if the value of an input or textarea, after having been edited by the user, exceeds the maximum code-unit length established by the element\'s `maxlength` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/tooLong)')\n    # The read-only **`tooShort`** property of the `ValidityState` interface indicates if the value of an input, button, select, output, fieldset or textarea, after having been edited by the user, is less than the minimum code-unit length established by the element's `minlength` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/tooShort)\n    tooShort: bool = Field(..., description='The read-only **`tooShort`** property of the `ValidityState` interface indicates if the value of an input, button, select, output, fieldset or textarea, after having been edited by the user, is less than the minimum code-unit length established by the element\'s `minlength` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/tooShort)')\n    # The read-only **`typeMismatch`** property of the `ValidityState` interface indicates if the value of an input, after having been edited by the user, does not conform to the constraints set by the element's `type` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/typeMismatch)\n    typeMismatch: bool = Field(..., description='The read-only **`typeMismatch`** property of the `ValidityState` interface indicates if the value of an input, after having been edited by the user, does not conform to the constraints set by the element\'s `type` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/typeMismatch)')\n    # The read-only **`valid`** property of the `ValidityState` interface indicates if the value of an input element meets all its validation constraints, and is therefore considered to be valid.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/valid)\n    valid: bool = Field(..., description='The read-only **`valid`** property of the `ValidityState` interface indicates if the value of an input element meets all its validation constraints, and is therefore considered to be valid.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/valid)')\n    # The read-only **`valueMissing`** property of the `ValidityState` interface indicates if a `required` control, such as an input, select, or textarea, has an empty value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/valueMissing)\n    valueMissing: bool = Field(..., description='The read-only **`valueMissing`** property of the `ValidityState` interface indicates if a `required` control, such as an input, select, or textarea, has an empty value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/valueMissing)')\n\n# The **`VideoColorSpace`** interface of the WebCodecs API represents the color space of a video.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace)\nclass VideoColorSpace(BaseModel):\n    # The **`fullRange`** read-only property of the VideoColorSpace interface returns `true` if full-range color values are used.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/fullRange)\n    fullRange: Union[bool, null] = Field(..., description='The **`fullRange`** read-only property of the VideoColorSpace interface returns `true` if full-range color values are used.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/fullRange)')\n    # The **`matrix`** read-only property of the VideoColorSpace interface returns the matrix coefficient of the video.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/matrix)\n    matrix: Union[VideoMatrixCoefficients, null] = Field(..., description='The **`matrix`** read-only property of the VideoColorSpace interface returns the matrix coefficient of the video.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/matrix)')\n    # The **`primaries`** read-only property of the VideoColorSpace interface returns the color gamut of the video.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/primaries)\n    primaries: Union[VideoColorPrimaries, null] = Field(..., description='The **`primaries`** read-only property of the VideoColorSpace interface returns the color gamut of the video.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/primaries)')\n    # The **`transfer`** read-only property of the VideoColorSpace interface returns the opto-electronic transfer characteristics of the video.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/transfer)\n    transfer: Union[VideoTransferCharacteristics, null] = Field(..., description='The **`transfer`** read-only property of the VideoColorSpace interface returns the opto-electronic transfer characteristics of the video.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/transfer)')\n\nclass VideoDecoderEventMap(BaseModel):\n    dequeue: Event = Field(...)\n\n# The **`VideoDecoder`** interface of the WebCodecs API decodes chunks of video.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder)\nclass VideoDecoder(EventTarget):\n    # The **`decodeQueueSize`** read-only property of the VideoDecoder interface returns the number of pending decode requests in the queue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/decodeQueueSize)\n    decodeQueueSize: float = Field(..., description='The **`decodeQueueSize`** read-only property of the VideoDecoder interface returns the number of pending decode requests in the queue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/decodeQueueSize)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/dequeue_event)\n    ondequeue: Union[((this: VideoDecoder, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/dequeue_event)')\n    # The **`state`** property of the VideoDecoder interface returns the current state of the underlying codec.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/state)\n    state: CodecState = Field(..., description='The **`state`** property of the VideoDecoder interface returns the current state of the underlying codec.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/state)')\n\nclass VideoEncoderEventMap(BaseModel):\n    dequeue: Event = Field(...)\n\n# The **`VideoEncoder`** interface of the WebCodecs API encodes VideoFrame objects into EncodedVideoChunks.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder)\nclass VideoEncoder(EventTarget):\n    # The **`encodeQueueSize`** read-only property of the VideoEncoder interface returns the number of pending encode requests in the queue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/encodeQueueSize)\n    encodeQueueSize: float = Field(..., description='The **`encodeQueueSize`** read-only property of the VideoEncoder interface returns the number of pending encode requests in the queue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/encodeQueueSize)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/dequeue_event)\n    ondequeue: Union[((this: VideoEncoder, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/dequeue_event)')\n    # The **`state`** read-only property of the VideoEncoder interface returns the current state of the underlying codec.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/state)\n    state: CodecState = Field(..., description='The **`state`** read-only property of the VideoEncoder interface returns the current state of the underlying codec.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/state)')\n\n# The **`VideoFrame`** interface of the Web Codecs API represents a frame of a video.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame)\nclass VideoFrame(BaseModel):\n    # The **`codedHeight`** property of the VideoFrame interface returns the height of the VideoFrame in pixels, potentially including non-visible padding, and prior to considering potential ratio adjustments.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedHeight)\n    codedHeight: float = Field(..., description='The **`codedHeight`** property of the VideoFrame interface returns the height of the VideoFrame in pixels, potentially including non-visible padding, and prior to considering potential ratio adjustments.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedHeight)')\n    # The **`codedRect`** property of the VideoFrame interface returns a DOMRectReadOnly with the width and height matching VideoFrame.codedWidth and VideoFrame.codedHeight.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedRect)\n    codedRect: Union[DOMRectReadOnly, null] = Field(..., description='The **`codedRect`** property of the VideoFrame interface returns a DOMRectReadOnly with the width and height matching VideoFrame.codedWidth and VideoFrame.codedHeight.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedRect)')\n    # The **`codedWidth`** property of the VideoFrame interface returns the width of the `VideoFrame` in pixels, potentially including non-visible padding, and prior to considering potential ratio adjustments.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedWidth)\n    codedWidth: float = Field(..., description='The **`codedWidth`** property of the VideoFrame interface returns the width of the `VideoFrame` in pixels, potentially including non-visible padding, and prior to considering potential ratio adjustments.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedWidth)')\n    # The **`colorSpace`** property of the VideoFrame interface returns a VideoColorSpace object representing the color space of the video.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/colorSpace)\n    colorSpace: VideoColorSpace = Field(..., description='The **`colorSpace`** property of the VideoFrame interface returns a VideoColorSpace object representing the color space of the video.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/colorSpace)')\n    # The **`displayHeight`** property of the VideoFrame interface returns the height of the `VideoFrame` after applying aspect ratio adjustments.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/displayHeight)\n    displayHeight: float = Field(..., description='The **`displayHeight`** property of the VideoFrame interface returns the height of the `VideoFrame` after applying aspect ratio adjustments.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/displayHeight)')\n    # The **`displayWidth`** property of the VideoFrame interface returns the width of the `VideoFrame` after applying aspect ratio adjustments.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/displayWidth)\n    displayWidth: float = Field(..., description='The **`displayWidth`** property of the VideoFrame interface returns the width of the `VideoFrame` after applying aspect ratio adjustments.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/displayWidth)')\n    # The **`duration`** property of the VideoFrame interface returns an integer indicating the duration of the video in microseconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/duration)\n    duration: Union[float, null] = Field(..., description='The **`duration`** property of the VideoFrame interface returns an integer indicating the duration of the video in microseconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/duration)')\n    # The **`format`** property of the VideoFrame interface returns the pixel format of the `VideoFrame`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/format)\n    format: Union[VideoPixelFormat, null] = Field(..., description='The **`format`** property of the VideoFrame interface returns the pixel format of the `VideoFrame`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/format)')\n    # The **`timestamp`** property of the VideoFrame interface returns an integer indicating the timestamp of the video in microseconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/timestamp)\n    timestamp: float = Field(..., description='The **`timestamp`** property of the VideoFrame interface returns an integer indicating the timestamp of the video in microseconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/timestamp)')\n    # The **`visibleRect`** property of the VideoFrame interface returns a DOMRectReadOnly describing the visible rectangle of pixels for this `VideoFrame`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/visibleRect)\n    visibleRect: Union[DOMRectReadOnly, null] = Field(..., description='The **`visibleRect`** property of the VideoFrame interface returns a DOMRectReadOnly describing the visible rectangle of pixels for this `VideoFrame`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/visibleRect)')\n\n# A **`VideoPlaybackQuality`** object is returned by the HTMLVideoElement.getVideoPlaybackQuality() method and contains metrics that can be used to determine the playback quality of a video.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality)\nclass VideoPlaybackQuality(BaseModel):\n    # The VideoPlaybackQuality interface's read-only **`corruptedVideoFrames`** property the number of corrupted video frames that have been received since the video element was last loaded or reloaded.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/corruptedVideoFrames)\n    corruptedVideoFrames: float = Field(..., description='The VideoPlaybackQuality interface\'s read-only **`corruptedVideoFrames`** property the number of corrupted video frames that have been received since the video element was last loaded or reloaded.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/corruptedVideoFrames)')\n    # The read-only **`creationTime`** property on the the browsing context was created this quality sample was recorded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/creationTime)\n    creationTime: DOMHighResTimeStamp = Field(..., description='The read-only **`creationTime`** property on the the browsing context was created this quality sample was recorded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/creationTime)')\n    # The read-only **`droppedVideoFrames`** property of the VideoPlaybackQuality interface returns the number of video frames which have been dropped rather than being displayed since the last time the media was loaded into the HTMLVideoElement.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/droppedVideoFrames)\n    droppedVideoFrames: float = Field(..., description='The read-only **`droppedVideoFrames`** property of the VideoPlaybackQuality interface returns the number of video frames which have been dropped rather than being displayed since the last time the media was loaded into the HTMLVideoElement.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/droppedVideoFrames)')\n    # The VideoPlaybackQuality interface's **`totalVideoFrames`** read-only property returns the total number of video frames that have been displayed or dropped since the media was loaded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/totalVideoFrames)\n    totalVideoFrames: float = Field(..., description='The VideoPlaybackQuality interface\'s **`totalVideoFrames`** read-only property returns the total number of video frames that have been displayed or dropped since the media was loaded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/totalVideoFrames)')\n\n# The **`ViewTransition`** interface of the View Transition API represents an active view transition, and provides functionality to react to the transition reaching different states (e.g., ready to run the animation, or animation finished) or skip the transition altogether.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ViewTransition)\nclass ViewTransition(BaseModel):\n    # The **`finished`** read-only property of the `finished` will only reject in the case of a same-document (SPA) transition, if the callback passed to Document.startViewTransition() throws or returns a promise that rejects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ViewTransition/finished)\n    finished: Promise<void> = Field(..., description='The **`finished`** read-only property of the `finished` will only reject in the case of a same-document (SPA) transition, if the callback passed to Document.startViewTransition() throws or returns a promise that rejects.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ViewTransition/finished)')\n    # The **`ready`** read-only property of the `ready` will reject if the transition cannot begin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ViewTransition/ready)\n    ready: Promise<void> = Field(..., description='The **`ready`** read-only property of the `ready` will reject if the transition cannot begin.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ViewTransition/ready)')\n    types: ViewTransitionTypeSet = Field(...)\n    # The **`updateCallbackDone`** read-only property of the `updateCallbackDone` is useful when you don't care about the success/failure of a same-document (SPA) view transition animation, and just want to know if and when the DOM is updated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ViewTransition/updateCallbackDone)\n    updateCallbackDone: Promise<void> = Field(..., description='The **`updateCallbackDone`** read-only property of the `updateCallbackDone` is useful when you don\'t care about the success/failure of a same-document (SPA) view transition animation, and just want to know if and when the DOM is updated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/ViewTransition/updateCallbackDone)')\n\nclass ViewTransitionTypeSet(BaseModel):\n    pass\n\nclass VisualViewportEventMap(BaseModel):\n    resize: Event = Field(...)\n    scroll: Event = Field(...)\n\n# The **`VisualViewport`** interface of the Visual Viewport API represents the visual viewport for a given window.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport)\nclass VisualViewport(EventTarget):\n    # The **`height`** read-only property of the VisualViewport interface returns the height of the visual viewport, in CSS pixels, or `0` if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/height)\n    height: float = Field(..., description='The **`height`** read-only property of the VisualViewport interface returns the height of the visual viewport, in CSS pixels, or `0` if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/height)')\n    # The **`offsetLeft`** read-only property of the VisualViewport interface returns the offset of the left edge of the visual viewport from the left edge of the layout viewport in CSS pixels, or `0` if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/offsetLeft)\n    offsetLeft: float = Field(..., description='The **`offsetLeft`** read-only property of the VisualViewport interface returns the offset of the left edge of the visual viewport from the left edge of the layout viewport in CSS pixels, or `0` if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/offsetLeft)')\n    # The **`offsetTop`** read-only property of the VisualViewport interface returns the offset of the top edge of the visual viewport from the top edge of the layout viewport in CSS pixels, or `0` if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/offsetTop)\n    offsetTop: float = Field(..., description='The **`offsetTop`** read-only property of the VisualViewport interface returns the offset of the top edge of the visual viewport from the top edge of the layout viewport in CSS pixels, or `0` if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/offsetTop)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/resize_event)\n    onresize: Union[((this: VisualViewport, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/resize_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/scroll_event)\n    onscroll: Union[((this: VisualViewport, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/scroll_event)')\n    # The **`pageLeft`** read-only property of the VisualViewport interface returns the x coordinate of the left edge of the visual viewport relative to the initial containing block origin, in CSS pixels, or `0` if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/pageLeft)\n    pageLeft: float = Field(..., description='The **`pageLeft`** read-only property of the VisualViewport interface returns the x coordinate of the left edge of the visual viewport relative to the initial containing block origin, in CSS pixels, or `0` if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/pageLeft)')\n    # The **`pageTop`** read-only property of the VisualViewport interface returns the y coordinate of the top edge of the visual viewport relative to the initial containing block origin, in CSS pixels, or `0` if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/pageTop)\n    pageTop: float = Field(..., description='The **`pageTop`** read-only property of the VisualViewport interface returns the y coordinate of the top edge of the visual viewport relative to the initial containing block origin, in CSS pixels, or `0` if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/pageTop)')\n    # The **`scale`** read-only property of the VisualViewport interface returns the pinch-zoom scaling factor applied to the visual viewport, or `0` if current document is not fully active, or `1` if there is no output device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/scale)\n    scale: float = Field(..., description='The **`scale`** read-only property of the VisualViewport interface returns the pinch-zoom scaling factor applied to the visual viewport, or `0` if current document is not fully active, or `1` if there is no output device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/scale)')\n    # The **`width`** read-only property of the VisualViewport interface returns the width of the visual viewport, in CSS pixels, or `0` if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/width)\n    width: float = Field(..., description='The **`width`** read-only property of the VisualViewport interface returns the width of the visual viewport, in CSS pixels, or `0` if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/width)')\n\n# The **`WEBGL_color_buffer_float`** extension is part of the WebGL API and adds the ability to render to 32-bit floating-point color buffers.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_color_buffer_float)\nclass WEBGL_color_buffer_float(BaseModel):\n    RGBA32F_EXT: 0x8814 = Field(...)\n    FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 0x8211 = Field(...)\n    UNSIGNED_NORMALIZED_EXT: 0x8C17 = Field(...)\n\n# The **`WEBGL_compressed_texture_astc`** extension is part of the WebGL API and exposes Adaptive Scalable Texture Compression (ASTC) compressed texture formats to WebGL.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_astc)\nclass WEBGL_compressed_texture_astc(BaseModel):\n    COMPRESSED_RGBA_ASTC_4x4_KHR: 0x93B0 = Field(...)\n    COMPRESSED_RGBA_ASTC_5x4_KHR: 0x93B1 = Field(...)\n    COMPRESSED_RGBA_ASTC_5x5_KHR: 0x93B2 = Field(...)\n    COMPRESSED_RGBA_ASTC_6x5_KHR: 0x93B3 = Field(...)\n    COMPRESSED_RGBA_ASTC_6x6_KHR: 0x93B4 = Field(...)\n    COMPRESSED_RGBA_ASTC_8x5_KHR: 0x93B5 = Field(...)\n    COMPRESSED_RGBA_ASTC_8x6_KHR: 0x93B6 = Field(...)\n    COMPRESSED_RGBA_ASTC_8x8_KHR: 0x93B7 = Field(...)\n    COMPRESSED_RGBA_ASTC_10x5_KHR: 0x93B8 = Field(...)\n    COMPRESSED_RGBA_ASTC_10x6_KHR: 0x93B9 = Field(...)\n    COMPRESSED_RGBA_ASTC_10x8_KHR: 0x93BA = Field(...)\n    COMPRESSED_RGBA_ASTC_10x10_KHR: 0x93BB = Field(...)\n    COMPRESSED_RGBA_ASTC_12x10_KHR: 0x93BC = Field(...)\n    COMPRESSED_RGBA_ASTC_12x12_KHR: 0x93BD = Field(...)\n    COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: 0x93D0 = Field(...)\n    COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: 0x93D1 = Field(...)\n    COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: 0x93D2 = Field(...)\n    COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: 0x93D3 = Field(...)\n    COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: 0x93D4 = Field(...)\n    COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: 0x93D5 = Field(...)\n    COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: 0x93D6 = Field(...)\n    COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: 0x93D7 = Field(...)\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: 0x93D8 = Field(...)\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: 0x93D9 = Field(...)\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: 0x93DA = Field(...)\n    COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: 0x93DB = Field(...)\n    COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: 0x93DC = Field(...)\n    COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: 0x93DD = Field(...)\n\n# The **`WEBGL_compressed_texture_etc`** extension is part of the WebGL API and exposes 10 ETC/EAC compressed texture formats.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_etc)\nclass WEBGL_compressed_texture_etc(BaseModel):\n    COMPRESSED_R11_EAC: 0x9270 = Field(...)\n    COMPRESSED_SIGNED_R11_EAC: 0x9271 = Field(...)\n    COMPRESSED_RG11_EAC: 0x9272 = Field(...)\n    COMPRESSED_SIGNED_RG11_EAC: 0x9273 = Field(...)\n    COMPRESSED_RGB8_ETC2: 0x9274 = Field(...)\n    COMPRESSED_SRGB8_ETC2: 0x9275 = Field(...)\n    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9276 = Field(...)\n    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9277 = Field(...)\n    COMPRESSED_RGBA8_ETC2_EAC: 0x9278 = Field(...)\n    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: 0x9279 = Field(...)\n\n# The **`WEBGL_compressed_texture_etc1`** extension is part of the WebGL API and exposes the ETC1 compressed texture format.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_etc1)\nclass WEBGL_compressed_texture_etc1(BaseModel):\n    COMPRESSED_RGB_ETC1_WEBGL: 0x8D64 = Field(...)\n\n# The **`WEBGL_compressed_texture_pvrtc`** extension is part of the WebGL API and exposes four PVRTC compressed texture formats.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_pvrtc)\nclass WEBGL_compressed_texture_pvrtc(BaseModel):\n    COMPRESSED_RGB_PVRTC_4BPPV1_IMG: 0x8C00 = Field(...)\n    COMPRESSED_RGB_PVRTC_2BPPV1_IMG: 0x8C01 = Field(...)\n    COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: 0x8C02 = Field(...)\n    COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: 0x8C03 = Field(...)\n\n# The **`WEBGL_compressed_texture_s3tc`** extension is part of the WebGL API and exposes four S3TC compressed texture formats.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_s3tc)\nclass WEBGL_compressed_texture_s3tc(BaseModel):\n    COMPRESSED_RGB_S3TC_DXT1_EXT: 0x83F0 = Field(...)\n    COMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83F1 = Field(...)\n    COMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83F2 = Field(...)\n    COMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83F3 = Field(...)\n\n# The **`WEBGL_compressed_texture_s3tc_srgb`** extension is part of the WebGL API and exposes four S3TC compressed texture formats for the sRGB colorspace.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb)\nclass WEBGL_compressed_texture_s3tc_srgb(BaseModel):\n    COMPRESSED_SRGB_S3TC_DXT1_EXT: 0x8C4C = Field(...)\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: 0x8C4D = Field(...)\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: 0x8C4E = Field(...)\n    COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: 0x8C4F = Field(...)\n\n# The **`WEBGL_debug_renderer_info`** extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_renderer_info)\nclass WEBGL_debug_renderer_info(BaseModel):\n    UNMASKED_VENDOR_WEBGL: 0x9245 = Field(...)\n    UNMASKED_RENDERER_WEBGL: 0x9246 = Field(...)\n\n# The **`WEBGL_debug_shaders`** extension is part of the WebGL API and exposes a method to debug shaders from privileged contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_shaders)\nclass WEBGL_debug_shaders(BaseModel):\n    pass\n\n# The **`WEBGL_depth_texture`** extension is part of the WebGL API and defines 2D depth and depth-stencil textures.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_depth_texture)\nclass WEBGL_depth_texture(BaseModel):\n    UNSIGNED_INT_24_8_WEBGL: 0x84FA = Field(...)\n\n# The **`WEBGL_draw_buffers`** extension is part of the WebGL API and enables a fragment shader to write to several textures, which is useful for deferred shading, for example.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers)\nclass WEBGL_draw_buffers(BaseModel):\n    COLOR_ATTACHMENT0_WEBGL: 0x8CE0 = Field(...)\n    COLOR_ATTACHMENT1_WEBGL: 0x8CE1 = Field(...)\n    COLOR_ATTACHMENT2_WEBGL: 0x8CE2 = Field(...)\n    COLOR_ATTACHMENT3_WEBGL: 0x8CE3 = Field(...)\n    COLOR_ATTACHMENT4_WEBGL: 0x8CE4 = Field(...)\n    COLOR_ATTACHMENT5_WEBGL: 0x8CE5 = Field(...)\n    COLOR_ATTACHMENT6_WEBGL: 0x8CE6 = Field(...)\n    COLOR_ATTACHMENT7_WEBGL: 0x8CE7 = Field(...)\n    COLOR_ATTACHMENT8_WEBGL: 0x8CE8 = Field(...)\n    COLOR_ATTACHMENT9_WEBGL: 0x8CE9 = Field(...)\n    COLOR_ATTACHMENT10_WEBGL: 0x8CEA = Field(...)\n    COLOR_ATTACHMENT11_WEBGL: 0x8CEB = Field(...)\n    COLOR_ATTACHMENT12_WEBGL: 0x8CEC = Field(...)\n    COLOR_ATTACHMENT13_WEBGL: 0x8CED = Field(...)\n    COLOR_ATTACHMENT14_WEBGL: 0x8CEE = Field(...)\n    COLOR_ATTACHMENT15_WEBGL: 0x8CEF = Field(...)\n    DRAW_BUFFER0_WEBGL: 0x8825 = Field(...)\n    DRAW_BUFFER1_WEBGL: 0x8826 = Field(...)\n    DRAW_BUFFER2_WEBGL: 0x8827 = Field(...)\n    DRAW_BUFFER3_WEBGL: 0x8828 = Field(...)\n    DRAW_BUFFER4_WEBGL: 0x8829 = Field(...)\n    DRAW_BUFFER5_WEBGL: 0x882A = Field(...)\n    DRAW_BUFFER6_WEBGL: 0x882B = Field(...)\n    DRAW_BUFFER7_WEBGL: 0x882C = Field(...)\n    DRAW_BUFFER8_WEBGL: 0x882D = Field(...)\n    DRAW_BUFFER9_WEBGL: 0x882E = Field(...)\n    DRAW_BUFFER10_WEBGL: 0x882F = Field(...)\n    DRAW_BUFFER11_WEBGL: 0x8830 = Field(...)\n    DRAW_BUFFER12_WEBGL: 0x8831 = Field(...)\n    DRAW_BUFFER13_WEBGL: 0x8832 = Field(...)\n    DRAW_BUFFER14_WEBGL: 0x8833 = Field(...)\n    DRAW_BUFFER15_WEBGL: 0x8834 = Field(...)\n    MAX_COLOR_ATTACHMENTS_WEBGL: 0x8CDF = Field(...)\n    MAX_DRAW_BUFFERS_WEBGL: 0x8824 = Field(...)\n\n# The **WEBGL_lose_context** extension is part of the WebGL API and exposes functions to simulate losing and restoring a WebGLRenderingContext.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_lose_context)\nclass WEBGL_lose_context(BaseModel):\n    pass\n\n# The **`WEBGL_multi_draw`** extension is part of the WebGL API and allows to render more than one primitive with a single function call.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw)\nclass WEBGL_multi_draw(BaseModel):\n    pass\n\n# The **`WakeLock`** interface of the Screen Wake Lock API can be used to request a lock that prevents device screens from dimming or locking when an application needs to keep running.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLock)\nclass WakeLock(BaseModel):\n    pass\n\nclass WakeLockSentinelEventMap(BaseModel):\n    release: Event = Field(...)\n\n# The **`WakeLockSentinel`** interface of the Screen Wake Lock API can be used to monitor the status of the platform screen wake lock, and manually release the lock when needed.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel)\nclass WakeLockSentinel(EventTarget):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/release_event)\n    onrelease: Union[((this: WakeLockSentinel, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/release_event)')\n    # The **`released`** read-only property of the WakeLockSentinel interface returns a boolean that indicates whether a WakeLockSentinel has been released.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/released)\n    released: bool = Field(..., description='The **`released`** read-only property of the WakeLockSentinel interface returns a boolean that indicates whether a WakeLockSentinel has been released.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/released)')\n    # The **`type`** read-only property of the WakeLockSentinel interface returns a string representation of the currently acquired WakeLockSentinel type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/type)\n    type: WakeLockType = Field(..., description='The **`type`** read-only property of the WakeLockSentinel interface returns a string representation of the currently acquired WakeLockSentinel type.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/type)')\n\n# The **`WaveShaperNode`** interface represents a non-linear distorter.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WaveShaperNode)\nclass WaveShaperNode(AudioNode):\n    # The `curve` property of the WaveShaperNode interface is a Float32Array of numbers describing the distortion to apply.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WaveShaperNode/curve)\n    curve: Union[Float32Array<ArrayBuffer>, null] = Field(..., description='The `curve` property of the WaveShaperNode interface is a Float32Array of numbers describing the distortion to apply.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WaveShaperNode/curve)')\n    # The `oversample` property of the WaveShaperNode interface is an enumerated value indicating if oversampling must be used.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WaveShaperNode/oversample)\n    oversample: OverSampleType = Field(..., description='The `oversample` property of the WaveShaperNode interface is an enumerated value indicating if oversampling must be used.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WaveShaperNode/oversample)')\n\n# The **WebGL2RenderingContext** interface provides the OpenGL ES 3.0 rendering context for the drawing surface of an HTML canvas element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext)\nclass WebGL2RenderingContext(WebGL2RenderingContextBase):\n    pass\n\nclass WebGL2RenderingContextBase(BaseModel):\n    READ_BUFFER: 0x0C02 = Field(...)\n    UNPACK_ROW_LENGTH: 0x0CF2 = Field(...)\n    UNPACK_SKIP_ROWS: 0x0CF3 = Field(...)\n    UNPACK_SKIP_PIXELS: 0x0CF4 = Field(...)\n    PACK_ROW_LENGTH: 0x0D02 = Field(...)\n    PACK_SKIP_ROWS: 0x0D03 = Field(...)\n    PACK_SKIP_PIXELS: 0x0D04 = Field(...)\n    COLOR: 0x1800 = Field(...)\n    DEPTH: 0x1801 = Field(...)\n    STENCIL: 0x1802 = Field(...)\n    RED: 0x1903 = Field(...)\n    RGB8: 0x8051 = Field(...)\n    RGB10_A2: 0x8059 = Field(...)\n    TEXTURE_BINDING_3D: 0x806A = Field(...)\n    UNPACK_SKIP_IMAGES: 0x806D = Field(...)\n    UNPACK_IMAGE_HEIGHT: 0x806E = Field(...)\n    TEXTURE_3D: 0x806F = Field(...)\n    TEXTURE_WRAP_R: 0x8072 = Field(...)\n    MAX_3D_TEXTURE_SIZE: 0x8073 = Field(...)\n    UNSIGNED_INT_2_10_10_10_REV: 0x8368 = Field(...)\n    MAX_ELEMENTS_VERTICES: 0x80E8 = Field(...)\n    MAX_ELEMENTS_INDICES: 0x80E9 = Field(...)\n    TEXTURE_MIN_LOD: 0x813A = Field(...)\n    TEXTURE_MAX_LOD: 0x813B = Field(...)\n    TEXTURE_BASE_LEVEL: 0x813C = Field(...)\n    TEXTURE_MAX_LEVEL: 0x813D = Field(...)\n    MIN: 0x8007 = Field(...)\n    MAX: 0x8008 = Field(...)\n    DEPTH_COMPONENT24: 0x81A6 = Field(...)\n    MAX_TEXTURE_LOD_BIAS: 0x84FD = Field(...)\n    TEXTURE_COMPARE_MODE: 0x884C = Field(...)\n    TEXTURE_COMPARE_FUNC: 0x884D = Field(...)\n    CURRENT_QUERY: 0x8865 = Field(...)\n    QUERY_RESULT: 0x8866 = Field(...)\n    QUERY_RESULT_AVAILABLE: 0x8867 = Field(...)\n    STREAM_READ: 0x88E1 = Field(...)\n    STREAM_COPY: 0x88E2 = Field(...)\n    STATIC_READ: 0x88E5 = Field(...)\n    STATIC_COPY: 0x88E6 = Field(...)\n    DYNAMIC_READ: 0x88E9 = Field(...)\n    DYNAMIC_COPY: 0x88EA = Field(...)\n    MAX_DRAW_BUFFERS: 0x8824 = Field(...)\n    DRAW_BUFFER0: 0x8825 = Field(...)\n    DRAW_BUFFER1: 0x8826 = Field(...)\n    DRAW_BUFFER2: 0x8827 = Field(...)\n    DRAW_BUFFER3: 0x8828 = Field(...)\n    DRAW_BUFFER4: 0x8829 = Field(...)\n    DRAW_BUFFER5: 0x882A = Field(...)\n    DRAW_BUFFER6: 0x882B = Field(...)\n    DRAW_BUFFER7: 0x882C = Field(...)\n    DRAW_BUFFER8: 0x882D = Field(...)\n    DRAW_BUFFER9: 0x882E = Field(...)\n    DRAW_BUFFER10: 0x882F = Field(...)\n    DRAW_BUFFER11: 0x8830 = Field(...)\n    DRAW_BUFFER12: 0x8831 = Field(...)\n    DRAW_BUFFER13: 0x8832 = Field(...)\n    DRAW_BUFFER14: 0x8833 = Field(...)\n    DRAW_BUFFER15: 0x8834 = Field(...)\n    MAX_FRAGMENT_UNIFORM_COMPONENTS: 0x8B49 = Field(...)\n    MAX_VERTEX_UNIFORM_COMPONENTS: 0x8B4A = Field(...)\n    SAMPLER_3D: 0x8B5F = Field(...)\n    SAMPLER_2D_SHADOW: 0x8B62 = Field(...)\n    FRAGMENT_SHADER_DERIVATIVE_HINT: 0x8B8B = Field(...)\n    PIXEL_PACK_BUFFER: 0x88EB = Field(...)\n    PIXEL_UNPACK_BUFFER: 0x88EC = Field(...)\n    PIXEL_PACK_BUFFER_BINDING: 0x88ED = Field(...)\n    PIXEL_UNPACK_BUFFER_BINDING: 0x88EF = Field(...)\n    FLOAT_MAT2x3: 0x8B65 = Field(...)\n    FLOAT_MAT2x4: 0x8B66 = Field(...)\n    FLOAT_MAT3x2: 0x8B67 = Field(...)\n    FLOAT_MAT3x4: 0x8B68 = Field(...)\n    FLOAT_MAT4x2: 0x8B69 = Field(...)\n    FLOAT_MAT4x3: 0x8B6A = Field(...)\n    SRGB: 0x8C40 = Field(...)\n    SRGB8: 0x8C41 = Field(...)\n    SRGB8_ALPHA8: 0x8C43 = Field(...)\n    COMPARE_REF_TO_TEXTURE: 0x884E = Field(...)\n    RGBA32F: 0x8814 = Field(...)\n    RGB32F: 0x8815 = Field(...)\n    RGBA16F: 0x881A = Field(...)\n    RGB16F: 0x881B = Field(...)\n    VERTEX_ATTRIB_ARRAY_INTEGER: 0x88FD = Field(...)\n    MAX_ARRAY_TEXTURE_LAYERS: 0x88FF = Field(...)\n    MIN_PROGRAM_TEXEL_OFFSET: 0x8904 = Field(...)\n    MAX_PROGRAM_TEXEL_OFFSET: 0x8905 = Field(...)\n    MAX_VARYING_COMPONENTS: 0x8B4B = Field(...)\n    TEXTURE_2D_ARRAY: 0x8C1A = Field(...)\n    TEXTURE_BINDING_2D_ARRAY: 0x8C1D = Field(...)\n    R11F_G11F_B10F: 0x8C3A = Field(...)\n    UNSIGNED_INT_10F_11F_11F_REV: 0x8C3B = Field(...)\n    RGB9_E5: 0x8C3D = Field(...)\n    UNSIGNED_INT_5_9_9_9_REV: 0x8C3E = Field(...)\n    TRANSFORM_FEEDBACK_BUFFER_MODE: 0x8C7F = Field(...)\n    MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 0x8C80 = Field(...)\n    TRANSFORM_FEEDBACK_VARYINGS: 0x8C83 = Field(...)\n    TRANSFORM_FEEDBACK_BUFFER_START: 0x8C84 = Field(...)\n    TRANSFORM_FEEDBACK_BUFFER_SIZE: 0x8C85 = Field(...)\n    TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8C88 = Field(...)\n    RASTERIZER_DISCARD: 0x8C89 = Field(...)\n    MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8C8A = Field(...)\n    MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8C8B = Field(...)\n    INTERLEAVED_ATTRIBS: 0x8C8C = Field(...)\n    SEPARATE_ATTRIBS: 0x8C8D = Field(...)\n    TRANSFORM_FEEDBACK_BUFFER: 0x8C8E = Field(...)\n    TRANSFORM_FEEDBACK_BUFFER_BINDING: 0x8C8F = Field(...)\n    RGBA32UI: 0x8D70 = Field(...)\n    RGB32UI: 0x8D71 = Field(...)\n    RGBA16UI: 0x8D76 = Field(...)\n    RGB16UI: 0x8D77 = Field(...)\n    RGBA8UI: 0x8D7C = Field(...)\n    RGB8UI: 0x8D7D = Field(...)\n    RGBA32I: 0x8D82 = Field(...)\n    RGB32I: 0x8D83 = Field(...)\n    RGBA16I: 0x8D88 = Field(...)\n    RGB16I: 0x8D89 = Field(...)\n    RGBA8I: 0x8D8E = Field(...)\n    RGB8I: 0x8D8F = Field(...)\n    RED_INTEGER: 0x8D94 = Field(...)\n    RGB_INTEGER: 0x8D98 = Field(...)\n    RGBA_INTEGER: 0x8D99 = Field(...)\n    SAMPLER_2D_ARRAY: 0x8DC1 = Field(...)\n    SAMPLER_2D_ARRAY_SHADOW: 0x8DC4 = Field(...)\n    SAMPLER_CUBE_SHADOW: 0x8DC5 = Field(...)\n    UNSIGNED_INT_VEC2: 0x8DC6 = Field(...)\n    UNSIGNED_INT_VEC3: 0x8DC7 = Field(...)\n    UNSIGNED_INT_VEC4: 0x8DC8 = Field(...)\n    INT_SAMPLER_2D: 0x8DCA = Field(...)\n    INT_SAMPLER_3D: 0x8DCB = Field(...)\n    INT_SAMPLER_CUBE: 0x8DCC = Field(...)\n    INT_SAMPLER_2D_ARRAY: 0x8DCF = Field(...)\n    UNSIGNED_INT_SAMPLER_2D: 0x8DD2 = Field(...)\n    UNSIGNED_INT_SAMPLER_3D: 0x8DD3 = Field(...)\n    UNSIGNED_INT_SAMPLER_CUBE: 0x8DD4 = Field(...)\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8DD7 = Field(...)\n    DEPTH_COMPONENT32F: 0x8CAC = Field(...)\n    DEPTH32F_STENCIL8: 0x8CAD = Field(...)\n    FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8DAD = Field(...)\n    FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 0x8210 = Field(...)\n    FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 0x8211 = Field(...)\n    FRAMEBUFFER_ATTACHMENT_RED_SIZE: 0x8212 = Field(...)\n    FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 0x8213 = Field(...)\n    FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 0x8214 = Field(...)\n    FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 0x8215 = Field(...)\n    FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 0x8216 = Field(...)\n    FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 0x8217 = Field(...)\n    FRAMEBUFFER_DEFAULT: 0x8218 = Field(...)\n    UNSIGNED_INT_24_8: 0x84FA = Field(...)\n    DEPTH24_STENCIL8: 0x88F0 = Field(...)\n    UNSIGNED_NORMALIZED: 0x8C17 = Field(...)\n    DRAW_FRAMEBUFFER_BINDING: 0x8CA6 = Field(...)\n    READ_FRAMEBUFFER: 0x8CA8 = Field(...)\n    DRAW_FRAMEBUFFER: 0x8CA9 = Field(...)\n    READ_FRAMEBUFFER_BINDING: 0x8CAA = Field(...)\n    RENDERBUFFER_SAMPLES: 0x8CAB = Field(...)\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 0x8CD4 = Field(...)\n    MAX_COLOR_ATTACHMENTS: 0x8CDF = Field(...)\n    COLOR_ATTACHMENT1: 0x8CE1 = Field(...)\n    COLOR_ATTACHMENT2: 0x8CE2 = Field(...)\n    COLOR_ATTACHMENT3: 0x8CE3 = Field(...)\n    COLOR_ATTACHMENT4: 0x8CE4 = Field(...)\n    COLOR_ATTACHMENT5: 0x8CE5 = Field(...)\n    COLOR_ATTACHMENT6: 0x8CE6 = Field(...)\n    COLOR_ATTACHMENT7: 0x8CE7 = Field(...)\n    COLOR_ATTACHMENT8: 0x8CE8 = Field(...)\n    COLOR_ATTACHMENT9: 0x8CE9 = Field(...)\n    COLOR_ATTACHMENT10: 0x8CEA = Field(...)\n    COLOR_ATTACHMENT11: 0x8CEB = Field(...)\n    COLOR_ATTACHMENT12: 0x8CEC = Field(...)\n    COLOR_ATTACHMENT13: 0x8CED = Field(...)\n    COLOR_ATTACHMENT14: 0x8CEE = Field(...)\n    COLOR_ATTACHMENT15: 0x8CEF = Field(...)\n    FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 0x8D56 = Field(...)\n    MAX_SAMPLES: 0x8D57 = Field(...)\n    HALF_FLOAT: 0x140B = Field(...)\n    RG: 0x8227 = Field(...)\n    RG_INTEGER: 0x8228 = Field(...)\n    R8: 0x8229 = Field(...)\n    RG8: 0x822B = Field(...)\n    R16F: 0x822D = Field(...)\n    R32F: 0x822E = Field(...)\n    RG16F: 0x822F = Field(...)\n    RG32F: 0x8230 = Field(...)\n    R8I: 0x8231 = Field(...)\n    R8UI: 0x8232 = Field(...)\n    R16I: 0x8233 = Field(...)\n    R16UI: 0x8234 = Field(...)\n    R32I: 0x8235 = Field(...)\n    R32UI: 0x8236 = Field(...)\n    RG8I: 0x8237 = Field(...)\n    RG8UI: 0x8238 = Field(...)\n    RG16I: 0x8239 = Field(...)\n    RG16UI: 0x823A = Field(...)\n    RG32I: 0x823B = Field(...)\n    RG32UI: 0x823C = Field(...)\n    VERTEX_ARRAY_BINDING: 0x85B5 = Field(...)\n    R8_SNORM: 0x8F94 = Field(...)\n    RG8_SNORM: 0x8F95 = Field(...)\n    RGB8_SNORM: 0x8F96 = Field(...)\n    RGBA8_SNORM: 0x8F97 = Field(...)\n    SIGNED_NORMALIZED: 0x8F9C = Field(...)\n    COPY_READ_BUFFER: 0x8F36 = Field(...)\n    COPY_WRITE_BUFFER: 0x8F37 = Field(...)\n    COPY_READ_BUFFER_BINDING: 0x8F36 = Field(...)\n    COPY_WRITE_BUFFER_BINDING: 0x8F37 = Field(...)\n    UNIFORM_BUFFER: 0x8A11 = Field(...)\n    UNIFORM_BUFFER_BINDING: 0x8A28 = Field(...)\n    UNIFORM_BUFFER_START: 0x8A29 = Field(...)\n    UNIFORM_BUFFER_SIZE: 0x8A2A = Field(...)\n    MAX_VERTEX_UNIFORM_BLOCKS: 0x8A2B = Field(...)\n    MAX_FRAGMENT_UNIFORM_BLOCKS: 0x8A2D = Field(...)\n    MAX_COMBINED_UNIFORM_BLOCKS: 0x8A2E = Field(...)\n    MAX_UNIFORM_BUFFER_BINDINGS: 0x8A2F = Field(...)\n    MAX_UNIFORM_BLOCK_SIZE: 0x8A30 = Field(...)\n    MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 0x8A31 = Field(...)\n    MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 0x8A33 = Field(...)\n    UNIFORM_BUFFER_OFFSET_ALIGNMENT: 0x8A34 = Field(...)\n    ACTIVE_UNIFORM_BLOCKS: 0x8A36 = Field(...)\n    UNIFORM_TYPE: 0x8A37 = Field(...)\n    UNIFORM_SIZE: 0x8A38 = Field(...)\n    UNIFORM_BLOCK_INDEX: 0x8A3A = Field(...)\n    UNIFORM_OFFSET: 0x8A3B = Field(...)\n    UNIFORM_ARRAY_STRIDE: 0x8A3C = Field(...)\n    UNIFORM_MATRIX_STRIDE: 0x8A3D = Field(...)\n    UNIFORM_IS_ROW_MAJOR: 0x8A3E = Field(...)\n    UNIFORM_BLOCK_BINDING: 0x8A3F = Field(...)\n    UNIFORM_BLOCK_DATA_SIZE: 0x8A40 = Field(...)\n    UNIFORM_BLOCK_ACTIVE_UNIFORMS: 0x8A42 = Field(...)\n    UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 0x8A43 = Field(...)\n    UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 0x8A44 = Field(...)\n    UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 0x8A46 = Field(...)\n    INVALID_INDEX: 0xFFFFFFFF = Field(...)\n    MAX_VERTEX_OUTPUT_COMPONENTS: 0x9122 = Field(...)\n    MAX_FRAGMENT_INPUT_COMPONENTS: 0x9125 = Field(...)\n    MAX_SERVER_WAIT_TIMEOUT: 0x9111 = Field(...)\n    OBJECT_TYPE: 0x9112 = Field(...)\n    SYNC_CONDITION: 0x9113 = Field(...)\n    SYNC_STATUS: 0x9114 = Field(...)\n    SYNC_FLAGS: 0x9115 = Field(...)\n    SYNC_FENCE: 0x9116 = Field(...)\n    SYNC_GPU_COMMANDS_COMPLETE: 0x9117 = Field(...)\n    UNSIGNALED: 0x9118 = Field(...)\n    SIGNALED: 0x9119 = Field(...)\n    ALREADY_SIGNALED: 0x911A = Field(...)\n    TIMEOUT_EXPIRED: 0x911B = Field(...)\n    CONDITION_SATISFIED: 0x911C = Field(...)\n    WAIT_FAILED: 0x911D = Field(...)\n    SYNC_FLUSH_COMMANDS_BIT: 0x00000001 = Field(...)\n    VERTEX_ATTRIB_ARRAY_DIVISOR: 0x88FE = Field(...)\n    ANY_SAMPLES_PASSED: 0x8C2F = Field(...)\n    ANY_SAMPLES_PASSED_CONSERVATIVE: 0x8D6A = Field(...)\n    SAMPLER_BINDING: 0x8919 = Field(...)\n    RGB10_A2UI: 0x906F = Field(...)\n    INT_2_10_10_10_REV: 0x8D9F = Field(...)\n    TRANSFORM_FEEDBACK: 0x8E22 = Field(...)\n    TRANSFORM_FEEDBACK_PAUSED: 0x8E23 = Field(...)\n    TRANSFORM_FEEDBACK_ACTIVE: 0x8E24 = Field(...)\n    TRANSFORM_FEEDBACK_BINDING: 0x8E25 = Field(...)\n    TEXTURE_IMMUTABLE_FORMAT: 0x912F = Field(...)\n    MAX_ELEMENT_INDEX: 0x8D6B = Field(...)\n    TEXTURE_IMMUTABLE_LEVELS: 0x82DF = Field(...)\n    TIMEOUT_IGNORED: -1 = Field(...)\n    MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 0x9247 = Field(...)\n\nclass WebGL2RenderingContextOverloads(BaseModel):\n    pass\n\n# The **WebGLActiveInfo** interface is part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo)\nclass WebGLActiveInfo(BaseModel):\n    # The read-only **`WebGLActiveInfo.name`** property represents the name of the requested data returned by calling the WebGLRenderingContext.getActiveAttrib() or WebGLRenderingContext.getActiveUniform() methods.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/name)\n    name: str = Field(..., description='The read-only **`WebGLActiveInfo.name`** property represents the name of the requested data returned by calling the WebGLRenderingContext.getActiveAttrib() or WebGLRenderingContext.getActiveUniform() methods.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/name)')\n    # The read-only **`WebGLActiveInfo.size`** property is a Number representing the size of the requested data returned by calling the WebGLRenderingContext.getActiveAttrib() or WebGLRenderingContext.getActiveUniform() methods.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/size)\n    size: GLint = Field(..., description='The read-only **`WebGLActiveInfo.size`** property is a Number representing the size of the requested data returned by calling the WebGLRenderingContext.getActiveAttrib() or WebGLRenderingContext.getActiveUniform() methods.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/size)')\n    # The read-only **`WebGLActiveInfo.type`** property represents the type of the requested data returned by calling the WebGLRenderingContext.getActiveAttrib() or WebGLRenderingContext.getActiveUniform() methods.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/type)\n    type: GLenum = Field(..., description='The read-only **`WebGLActiveInfo.type`** property represents the type of the requested data returned by calling the WebGLRenderingContext.getActiveAttrib() or WebGLRenderingContext.getActiveUniform() methods.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/type)')\n\n# The **WebGLBuffer** interface is part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLBuffer)\nclass WebGLBuffer(BaseModel):\n    pass\n\n# The **WebGLContextEvent** interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLContextEvent)\nclass WebGLContextEvent(Event):\n    # The read-only **`WebGLContextEvent.statusMessage`** property contains additional event status information, or is an empty string if no additional information is available.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLContextEvent/statusMessage)\n    statusMessage: str = Field(..., description='The read-only **`WebGLContextEvent.statusMessage`** property contains additional event status information, or is an empty string if no additional information is available.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLContextEvent/statusMessage)')\n\n# The **WebGLFramebuffer** interface is part of the WebGL API and represents a collection of buffers that serve as a rendering destination.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLFramebuffer)\nclass WebGLFramebuffer(BaseModel):\n    pass\n\n# The **`WebGLProgram`** is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLProgram)\nclass WebGLProgram(BaseModel):\n    pass\n\n# The **`WebGLQuery`** interface is part of the WebGL 2 API and provides ways to asynchronously query for information.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLQuery)\nclass WebGLQuery(BaseModel):\n    pass\n\n# The **WebGLRenderbuffer** interface is part of the WebGL API and represents a buffer that can contain an image, or that can be a source or target of a rendering operation.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderbuffer)\nclass WebGLRenderbuffer(BaseModel):\n    pass\n\n# The **`WebGLRenderingContext`** interface provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML canvas element.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext)\nclass WebGLRenderingContext(WebGLRenderingContextBase):\n    pass\n\nclass WebGLRenderingContextBase(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/canvas)\n    canvas: Union[HTMLCanvasElement, OffscreenCanvas] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/canvas)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawingBufferColorSpace)\n    drawingBufferColorSpace: PredefinedColorSpace = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawingBufferColorSpace)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawingBufferHeight)\n    drawingBufferHeight: GLsizei = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawingBufferHeight)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawingBufferWidth)\n    drawingBufferWidth: GLsizei = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawingBufferWidth)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/unpackColorSpace)\n    unpackColorSpace: PredefinedColorSpace = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/unpackColorSpace)')\n    DEPTH_BUFFER_BIT: 0x00000100 = Field(...)\n    STENCIL_BUFFER_BIT: 0x00000400 = Field(...)\n    COLOR_BUFFER_BIT: 0x00004000 = Field(...)\n    POINTS: 0x0000 = Field(...)\n    LINES: 0x0001 = Field(...)\n    LINE_LOOP: 0x0002 = Field(...)\n    LINE_STRIP: 0x0003 = Field(...)\n    TRIANGLES: 0x0004 = Field(...)\n    TRIANGLE_STRIP: 0x0005 = Field(...)\n    TRIANGLE_FAN: 0x0006 = Field(...)\n    ZERO: 0 = Field(...)\n    ONE: 1 = Field(...)\n    SRC_COLOR: 0x0300 = Field(...)\n    ONE_MINUS_SRC_COLOR: 0x0301 = Field(...)\n    SRC_ALPHA: 0x0302 = Field(...)\n    ONE_MINUS_SRC_ALPHA: 0x0303 = Field(...)\n    DST_ALPHA: 0x0304 = Field(...)\n    ONE_MINUS_DST_ALPHA: 0x0305 = Field(...)\n    DST_COLOR: 0x0306 = Field(...)\n    ONE_MINUS_DST_COLOR: 0x0307 = Field(...)\n    SRC_ALPHA_SATURATE: 0x0308 = Field(...)\n    FUNC_ADD: 0x8006 = Field(...)\n    BLEND_EQUATION: 0x8009 = Field(...)\n    BLEND_EQUATION_RGB: 0x8009 = Field(...)\n    BLEND_EQUATION_ALPHA: 0x883D = Field(...)\n    FUNC_SUBTRACT: 0x800A = Field(...)\n    FUNC_REVERSE_SUBTRACT: 0x800B = Field(...)\n    BLEND_DST_RGB: 0x80C8 = Field(...)\n    BLEND_SRC_RGB: 0x80C9 = Field(...)\n    BLEND_DST_ALPHA: 0x80CA = Field(...)\n    BLEND_SRC_ALPHA: 0x80CB = Field(...)\n    CONSTANT_COLOR: 0x8001 = Field(...)\n    ONE_MINUS_CONSTANT_COLOR: 0x8002 = Field(...)\n    CONSTANT_ALPHA: 0x8003 = Field(...)\n    ONE_MINUS_CONSTANT_ALPHA: 0x8004 = Field(...)\n    BLEND_COLOR: 0x8005 = Field(...)\n    ARRAY_BUFFER: 0x8892 = Field(...)\n    ELEMENT_ARRAY_BUFFER: 0x8893 = Field(...)\n    ARRAY_BUFFER_BINDING: 0x8894 = Field(...)\n    ELEMENT_ARRAY_BUFFER_BINDING: 0x8895 = Field(...)\n    STREAM_DRAW: 0x88E0 = Field(...)\n    STATIC_DRAW: 0x88E4 = Field(...)\n    DYNAMIC_DRAW: 0x88E8 = Field(...)\n    BUFFER_SIZE: 0x8764 = Field(...)\n    BUFFER_USAGE: 0x8765 = Field(...)\n    CURRENT_VERTEX_ATTRIB: 0x8626 = Field(...)\n    FRONT: 0x0404 = Field(...)\n    BACK: 0x0405 = Field(...)\n    FRONT_AND_BACK: 0x0408 = Field(...)\n    CULL_FACE: 0x0B44 = Field(...)\n    BLEND: 0x0BE2 = Field(...)\n    DITHER: 0x0BD0 = Field(...)\n    STENCIL_TEST: 0x0B90 = Field(...)\n    DEPTH_TEST: 0x0B71 = Field(...)\n    SCISSOR_TEST: 0x0C11 = Field(...)\n    POLYGON_OFFSET_FILL: 0x8037 = Field(...)\n    SAMPLE_ALPHA_TO_COVERAGE: 0x809E = Field(...)\n    SAMPLE_COVERAGE: 0x80A0 = Field(...)\n    NO_ERROR: 0 = Field(...)\n    INVALID_ENUM: 0x0500 = Field(...)\n    INVALID_VALUE: 0x0501 = Field(...)\n    INVALID_OPERATION: 0x0502 = Field(...)\n    OUT_OF_MEMORY: 0x0505 = Field(...)\n    CW: 0x0900 = Field(...)\n    CCW: 0x0901 = Field(...)\n    LINE_WIDTH: 0x0B21 = Field(...)\n    ALIASED_POINT_SIZE_RANGE: 0x846D = Field(...)\n    ALIASED_LINE_WIDTH_RANGE: 0x846E = Field(...)\n    CULL_FACE_MODE: 0x0B45 = Field(...)\n    FRONT_FACE: 0x0B46 = Field(...)\n    DEPTH_RANGE: 0x0B70 = Field(...)\n    DEPTH_WRITEMASK: 0x0B72 = Field(...)\n    DEPTH_CLEAR_VALUE: 0x0B73 = Field(...)\n    DEPTH_FUNC: 0x0B74 = Field(...)\n    STENCIL_CLEAR_VALUE: 0x0B91 = Field(...)\n    STENCIL_FUNC: 0x0B92 = Field(...)\n    STENCIL_FAIL: 0x0B94 = Field(...)\n    STENCIL_PASS_DEPTH_FAIL: 0x0B95 = Field(...)\n    STENCIL_PASS_DEPTH_PASS: 0x0B96 = Field(...)\n    STENCIL_REF: 0x0B97 = Field(...)\n    STENCIL_VALUE_MASK: 0x0B93 = Field(...)\n    STENCIL_WRITEMASK: 0x0B98 = Field(...)\n    STENCIL_BACK_FUNC: 0x8800 = Field(...)\n    STENCIL_BACK_FAIL: 0x8801 = Field(...)\n    STENCIL_BACK_PASS_DEPTH_FAIL: 0x8802 = Field(...)\n    STENCIL_BACK_PASS_DEPTH_PASS: 0x8803 = Field(...)\n    STENCIL_BACK_REF: 0x8CA3 = Field(...)\n    STENCIL_BACK_VALUE_MASK: 0x8CA4 = Field(...)\n    STENCIL_BACK_WRITEMASK: 0x8CA5 = Field(...)\n    VIEWPORT: 0x0BA2 = Field(...)\n    SCISSOR_BOX: 0x0C10 = Field(...)\n    COLOR_CLEAR_VALUE: 0x0C22 = Field(...)\n    COLOR_WRITEMASK: 0x0C23 = Field(...)\n    UNPACK_ALIGNMENT: 0x0CF5 = Field(...)\n    PACK_ALIGNMENT: 0x0D05 = Field(...)\n    MAX_TEXTURE_SIZE: 0x0D33 = Field(...)\n    MAX_VIEWPORT_DIMS: 0x0D3A = Field(...)\n    SUBPIXEL_BITS: 0x0D50 = Field(...)\n    RED_BITS: 0x0D52 = Field(...)\n    GREEN_BITS: 0x0D53 = Field(...)\n    BLUE_BITS: 0x0D54 = Field(...)\n    ALPHA_BITS: 0x0D55 = Field(...)\n    DEPTH_BITS: 0x0D56 = Field(...)\n    STENCIL_BITS: 0x0D57 = Field(...)\n    POLYGON_OFFSET_UNITS: 0x2A00 = Field(...)\n    POLYGON_OFFSET_FACTOR: 0x8038 = Field(...)\n    TEXTURE_BINDING_2D: 0x8069 = Field(...)\n    SAMPLE_BUFFERS: 0x80A8 = Field(...)\n    SAMPLES: 0x80A9 = Field(...)\n    SAMPLE_COVERAGE_VALUE: 0x80AA = Field(...)\n    SAMPLE_COVERAGE_INVERT: 0x80AB = Field(...)\n    COMPRESSED_TEXTURE_FORMATS: 0x86A3 = Field(...)\n    DONT_CARE: 0x1100 = Field(...)\n    FASTEST: 0x1101 = Field(...)\n    NICEST: 0x1102 = Field(...)\n    GENERATE_MIPMAP_HINT: 0x8192 = Field(...)\n    BYTE: 0x1400 = Field(...)\n    UNSIGNED_BYTE: 0x1401 = Field(...)\n    SHORT: 0x1402 = Field(...)\n    UNSIGNED_SHORT: 0x1403 = Field(...)\n    INT: 0x1404 = Field(...)\n    UNSIGNED_INT: 0x1405 = Field(...)\n    FLOAT: 0x1406 = Field(...)\n    DEPTH_COMPONENT: 0x1902 = Field(...)\n    ALPHA: 0x1906 = Field(...)\n    RGB: 0x1907 = Field(...)\n    RGBA: 0x1908 = Field(...)\n    LUMINANCE: 0x1909 = Field(...)\n    LUMINANCE_ALPHA: 0x190A = Field(...)\n    UNSIGNED_SHORT_4_4_4_4: 0x8033 = Field(...)\n    UNSIGNED_SHORT_5_5_5_1: 0x8034 = Field(...)\n    UNSIGNED_SHORT_5_6_5: 0x8363 = Field(...)\n    FRAGMENT_SHADER: 0x8B30 = Field(...)\n    VERTEX_SHADER: 0x8B31 = Field(...)\n    MAX_VERTEX_ATTRIBS: 0x8869 = Field(...)\n    MAX_VERTEX_UNIFORM_VECTORS: 0x8DFB = Field(...)\n    MAX_VARYING_VECTORS: 0x8DFC = Field(...)\n    MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0x8B4D = Field(...)\n    MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0x8B4C = Field(...)\n    MAX_TEXTURE_IMAGE_UNITS: 0x8872 = Field(...)\n    MAX_FRAGMENT_UNIFORM_VECTORS: 0x8DFD = Field(...)\n    SHADER_TYPE: 0x8B4F = Field(...)\n    DELETE_STATUS: 0x8B80 = Field(...)\n    LINK_STATUS: 0x8B82 = Field(...)\n    VALIDATE_STATUS: 0x8B83 = Field(...)\n    ATTACHED_SHADERS: 0x8B85 = Field(...)\n    ACTIVE_UNIFORMS: 0x8B86 = Field(...)\n    ACTIVE_ATTRIBUTES: 0x8B89 = Field(...)\n    SHADING_LANGUAGE_VERSION: 0x8B8C = Field(...)\n    CURRENT_PROGRAM: 0x8B8D = Field(...)\n    NEVER: 0x0200 = Field(...)\n    LESS: 0x0201 = Field(...)\n    EQUAL: 0x0202 = Field(...)\n    LEQUAL: 0x0203 = Field(...)\n    GREATER: 0x0204 = Field(...)\n    NOTEQUAL: 0x0205 = Field(...)\n    GEQUAL: 0x0206 = Field(...)\n    ALWAYS: 0x0207 = Field(...)\n    KEEP: 0x1E00 = Field(...)\n    REPLACE: 0x1E01 = Field(...)\n    INCR: 0x1E02 = Field(...)\n    DECR: 0x1E03 = Field(...)\n    INVERT: 0x150A = Field(...)\n    INCR_WRAP: 0x8507 = Field(...)\n    DECR_WRAP: 0x8508 = Field(...)\n    VENDOR: 0x1F00 = Field(...)\n    RENDERER: 0x1F01 = Field(...)\n    VERSION: 0x1F02 = Field(...)\n    NEAREST: 0x2600 = Field(...)\n    LINEAR: 0x2601 = Field(...)\n    NEAREST_MIPMAP_NEAREST: 0x2700 = Field(...)\n    LINEAR_MIPMAP_NEAREST: 0x2701 = Field(...)\n    NEAREST_MIPMAP_LINEAR: 0x2702 = Field(...)\n    LINEAR_MIPMAP_LINEAR: 0x2703 = Field(...)\n    TEXTURE_MAG_FILTER: 0x2800 = Field(...)\n    TEXTURE_MIN_FILTER: 0x2801 = Field(...)\n    TEXTURE_WRAP_S: 0x2802 = Field(...)\n    TEXTURE_WRAP_T: 0x2803 = Field(...)\n    TEXTURE_2D: 0x0DE1 = Field(...)\n    TEXTURE: 0x1702 = Field(...)\n    TEXTURE_CUBE_MAP: 0x8513 = Field(...)\n    TEXTURE_BINDING_CUBE_MAP: 0x8514 = Field(...)\n    TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515 = Field(...)\n    TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516 = Field(...)\n    TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517 = Field(...)\n    TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518 = Field(...)\n    TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519 = Field(...)\n    TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851A = Field(...)\n    MAX_CUBE_MAP_TEXTURE_SIZE: 0x851C = Field(...)\n    TEXTURE0: 0x84C0 = Field(...)\n    TEXTURE1: 0x84C1 = Field(...)\n    TEXTURE2: 0x84C2 = Field(...)\n    TEXTURE3: 0x84C3 = Field(...)\n    TEXTURE4: 0x84C4 = Field(...)\n    TEXTURE5: 0x84C5 = Field(...)\n    TEXTURE6: 0x84C6 = Field(...)\n    TEXTURE7: 0x84C7 = Field(...)\n    TEXTURE8: 0x84C8 = Field(...)\n    TEXTURE9: 0x84C9 = Field(...)\n    TEXTURE10: 0x84CA = Field(...)\n    TEXTURE11: 0x84CB = Field(...)\n    TEXTURE12: 0x84CC = Field(...)\n    TEXTURE13: 0x84CD = Field(...)\n    TEXTURE14: 0x84CE = Field(...)\n    TEXTURE15: 0x84CF = Field(...)\n    TEXTURE16: 0x84D0 = Field(...)\n    TEXTURE17: 0x84D1 = Field(...)\n    TEXTURE18: 0x84D2 = Field(...)\n    TEXTURE19: 0x84D3 = Field(...)\n    TEXTURE20: 0x84D4 = Field(...)\n    TEXTURE21: 0x84D5 = Field(...)\n    TEXTURE22: 0x84D6 = Field(...)\n    TEXTURE23: 0x84D7 = Field(...)\n    TEXTURE24: 0x84D8 = Field(...)\n    TEXTURE25: 0x84D9 = Field(...)\n    TEXTURE26: 0x84DA = Field(...)\n    TEXTURE27: 0x84DB = Field(...)\n    TEXTURE28: 0x84DC = Field(...)\n    TEXTURE29: 0x84DD = Field(...)\n    TEXTURE30: 0x84DE = Field(...)\n    TEXTURE31: 0x84DF = Field(...)\n    ACTIVE_TEXTURE: 0x84E0 = Field(...)\n    REPEAT: 0x2901 = Field(...)\n    CLAMP_TO_EDGE: 0x812F = Field(...)\n    MIRRORED_REPEAT: 0x8370 = Field(...)\n    FLOAT_VEC2: 0x8B50 = Field(...)\n    FLOAT_VEC3: 0x8B51 = Field(...)\n    FLOAT_VEC4: 0x8B52 = Field(...)\n    INT_VEC2: 0x8B53 = Field(...)\n    INT_VEC3: 0x8B54 = Field(...)\n    INT_VEC4: 0x8B55 = Field(...)\n    BOOL: 0x8B56 = Field(...)\n    BOOL_VEC2: 0x8B57 = Field(...)\n    BOOL_VEC3: 0x8B58 = Field(...)\n    BOOL_VEC4: 0x8B59 = Field(...)\n    FLOAT_MAT2: 0x8B5A = Field(...)\n    FLOAT_MAT3: 0x8B5B = Field(...)\n    FLOAT_MAT4: 0x8B5C = Field(...)\n    SAMPLER_2D: 0x8B5E = Field(...)\n    SAMPLER_CUBE: 0x8B60 = Field(...)\n    VERTEX_ATTRIB_ARRAY_ENABLED: 0x8622 = Field(...)\n    VERTEX_ATTRIB_ARRAY_SIZE: 0x8623 = Field(...)\n    VERTEX_ATTRIB_ARRAY_STRIDE: 0x8624 = Field(...)\n    VERTEX_ATTRIB_ARRAY_TYPE: 0x8625 = Field(...)\n    VERTEX_ATTRIB_ARRAY_NORMALIZED: 0x886A = Field(...)\n    VERTEX_ATTRIB_ARRAY_POINTER: 0x8645 = Field(...)\n    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 0x889F = Field(...)\n    IMPLEMENTATION_COLOR_READ_TYPE: 0x8B9A = Field(...)\n    IMPLEMENTATION_COLOR_READ_FORMAT: 0x8B9B = Field(...)\n    COMPILE_STATUS: 0x8B81 = Field(...)\n    LOW_FLOAT: 0x8DF0 = Field(...)\n    MEDIUM_FLOAT: 0x8DF1 = Field(...)\n    HIGH_FLOAT: 0x8DF2 = Field(...)\n    LOW_INT: 0x8DF3 = Field(...)\n    MEDIUM_INT: 0x8DF4 = Field(...)\n    HIGH_INT: 0x8DF5 = Field(...)\n    FRAMEBUFFER: 0x8D40 = Field(...)\n    RENDERBUFFER: 0x8D41 = Field(...)\n    RGBA4: 0x8056 = Field(...)\n    RGB5_A1: 0x8057 = Field(...)\n    RGBA8: 0x8058 = Field(...)\n    RGB565: 0x8D62 = Field(...)\n    DEPTH_COMPONENT16: 0x81A5 = Field(...)\n    STENCIL_INDEX8: 0x8D48 = Field(...)\n    DEPTH_STENCIL: 0x84F9 = Field(...)\n    RENDERBUFFER_WIDTH: 0x8D42 = Field(...)\n    RENDERBUFFER_HEIGHT: 0x8D43 = Field(...)\n    RENDERBUFFER_INTERNAL_FORMAT: 0x8D44 = Field(...)\n    RENDERBUFFER_RED_SIZE: 0x8D50 = Field(...)\n    RENDERBUFFER_GREEN_SIZE: 0x8D51 = Field(...)\n    RENDERBUFFER_BLUE_SIZE: 0x8D52 = Field(...)\n    RENDERBUFFER_ALPHA_SIZE: 0x8D53 = Field(...)\n    RENDERBUFFER_DEPTH_SIZE: 0x8D54 = Field(...)\n    RENDERBUFFER_STENCIL_SIZE: 0x8D55 = Field(...)\n    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 0x8CD0 = Field(...)\n    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 0x8CD1 = Field(...)\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 0x8CD2 = Field(...)\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 0x8CD3 = Field(...)\n    COLOR_ATTACHMENT0: 0x8CE0 = Field(...)\n    DEPTH_ATTACHMENT: 0x8D00 = Field(...)\n    STENCIL_ATTACHMENT: 0x8D20 = Field(...)\n    DEPTH_STENCIL_ATTACHMENT: 0x821A = Field(...)\n    NONE: 0 = Field(...)\n    FRAMEBUFFER_COMPLETE: 0x8CD5 = Field(...)\n    FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 0x8CD6 = Field(...)\n    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 0x8CD7 = Field(...)\n    FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 0x8CD9 = Field(...)\n    FRAMEBUFFER_UNSUPPORTED: 0x8CDD = Field(...)\n    FRAMEBUFFER_BINDING: 0x8CA6 = Field(...)\n    RENDERBUFFER_BINDING: 0x8CA7 = Field(...)\n    MAX_RENDERBUFFER_SIZE: 0x84E8 = Field(...)\n    INVALID_FRAMEBUFFER_OPERATION: 0x0506 = Field(...)\n    UNPACK_FLIP_Y_WEBGL: 0x9240 = Field(...)\n    UNPACK_PREMULTIPLY_ALPHA_WEBGL: 0x9241 = Field(...)\n    CONTEXT_LOST_WEBGL: 0x9242 = Field(...)\n    UNPACK_COLORSPACE_CONVERSION_WEBGL: 0x9243 = Field(...)\n    BROWSER_DEFAULT_WEBGL: 0x9244 = Field(...)\n\nclass WebGLRenderingContextOverloads(BaseModel):\n    pass\n\n# The **`WebGLSampler`** interface is part of the WebGL 2 API and stores sampling parameters for WebGLTexture access inside of a shader.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLSampler)\nclass WebGLSampler(BaseModel):\n    pass\n\n# The **WebGLShader** is part of the WebGL API and can either be a vertex or a fragment shader.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShader)\nclass WebGLShader(BaseModel):\n    pass\n\n# The **WebGLShaderPrecisionFormat** interface is part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat)\nclass WebGLShaderPrecisionFormat(BaseModel):\n    # The read-only **`WebGLShaderPrecisionFormat.precision`** property returns the number of bits of precision that can be represented.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/precision)\n    precision: GLint = Field(..., description='The read-only **`WebGLShaderPrecisionFormat.precision`** property returns the number of bits of precision that can be represented.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/precision)')\n    # The read-only **`WebGLShaderPrecisionFormat.rangeMax`** property returns the base 2 log of the absolute value of the maximum value that can be represented.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/rangeMax)\n    rangeMax: GLint = Field(..., description='The read-only **`WebGLShaderPrecisionFormat.rangeMax`** property returns the base 2 log of the absolute value of the maximum value that can be represented.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/rangeMax)')\n    # The read-only **`WebGLShaderPrecisionFormat.rangeMin`** property returns the base 2 log of the absolute value of the minimum value that can be represented.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/rangeMin)\n    rangeMin: GLint = Field(..., description='The read-only **`WebGLShaderPrecisionFormat.rangeMin`** property returns the base 2 log of the absolute value of the minimum value that can be represented.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/rangeMin)')\n\n# The **`WebGLSync`** interface is part of the WebGL 2 API and is used to synchronize activities between the GPU and the application.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLSync)\nclass WebGLSync(BaseModel):\n    pass\n\n# The **WebGLTexture** interface is part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLTexture)\nclass WebGLTexture(BaseModel):\n    pass\n\n# The **`WebGLTransformFeedback`** interface is part of the WebGL 2 API and enables transform feedback, which is the process of capturing primitives generated by vertex processing.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLTransformFeedback)\nclass WebGLTransformFeedback(BaseModel):\n    pass\n\n# The **WebGLUniformLocation** interface is part of the WebGL API and represents the location of a uniform variable in a shader program.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLUniformLocation)\nclass WebGLUniformLocation(BaseModel):\n    pass\n\n# The **`WebGLVertexArrayObject`** interface is part of the WebGL 2 API, represents vertex array objects (VAOs) pointing to vertex array data, and provides names for different sets of vertex data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLVertexArrayObject)\nclass WebGLVertexArrayObject(BaseModel):\n    pass\n\n# [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLVertexArrayObject)\nclass WebGLVertexArrayObjectOES(BaseModel):\n    pass\n\nclass WebSocketEventMap(BaseModel):\n    close: CloseEvent = Field(...)\n    error: Event = Field(...)\n    message: MessageEvent = Field(...)\n    open: Event = Field(...)\n\n# The `WebSocket` object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket)\nclass WebSocket(EventTarget):\n    # The **`WebSocket.binaryType`** property controls the type of binary data being received over the WebSocket connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/binaryType)\n    binaryType: BinaryType = Field(..., description='The **`WebSocket.binaryType`** property controls the type of binary data being received over the WebSocket connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/binaryType)')\n    # The **`WebSocket.bufferedAmount`** read-only property returns the number of bytes of data that have been queued using calls to `send()` but not yet transmitted to the network.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/bufferedAmount)\n    bufferedAmount: float = Field(..., description='The **`WebSocket.bufferedAmount`** read-only property returns the number of bytes of data that have been queued using calls to `send()` but not yet transmitted to the network.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/bufferedAmount)')\n    # The **`WebSocket.extensions`** read-only property returns the extensions selected by the server.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/extensions)\n    extensions: str = Field(..., description='The **`WebSocket.extensions`** read-only property returns the extensions selected by the server.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/extensions)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/close_event)\n    onclose: Union[((this: WebSocket, ev: CloseEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/close_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/error_event)\n    onerror: Union[((this: WebSocket, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/error_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/message_event)\n    onmessage: Union[((this: WebSocket, ev: MessageEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/message_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/open_event)\n    onopen: Union[((this: WebSocket, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/open_event)')\n    # The **`WebSocket.protocol`** read-only property returns the name of the sub-protocol the server selected; this will be one of the strings specified in the `protocols` parameter when creating the WebSocket object, or the empty string if no connection is established.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/protocol)\n    protocol: str = Field(..., description='The **`WebSocket.protocol`** read-only property returns the name of the sub-protocol the server selected; this will be one of the strings specified in the `protocols` parameter when creating the WebSocket object, or the empty string if no connection is established.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/protocol)')\n    # The **`WebSocket.readyState`** read-only property returns the current state of the WebSocket connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/readyState)\n    readyState: float = Field(..., description='The **`WebSocket.readyState`** read-only property returns the current state of the WebSocket connection.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/readyState)')\n    # The **`WebSocket.url`** read-only property returns the absolute URL of the WebSocket as resolved by the constructor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/url)\n    url: str = Field(..., description='The **`WebSocket.url`** read-only property returns the absolute URL of the WebSocket as resolved by the constructor.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/url)')\n    CONNECTING: 0 = Field(...)\n    OPEN: 1 = Field(...)\n    CLOSING: 2 = Field(...)\n    CLOSED: 3 = Field(...)\n\n# The **`WebTransport`** interface of the WebTransport API provides functionality to enable a user agent to connect to an HTTP/3 server, initiate reliable and unreliable transport in either or both directions, and close the connection once it is no longer needed.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport)\nclass WebTransport(BaseModel):\n    # The **`closed`** read-only property of the WebTransport interface returns a promise that resolves when the transport is closed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/closed)\n    closed: Promise<WebTransportCloseInfo> = Field(..., description='The **`closed`** read-only property of the WebTransport interface returns a promise that resolves when the transport is closed.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/closed)')\n    # The **`datagrams`** read-only property of the WebTransport interface returns a WebTransportDatagramDuplexStream instance that can be used to send and receive datagrams — unreliable data transmission.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/datagrams)\n    datagrams: WebTransportDatagramDuplexStream = Field(..., description='The **`datagrams`** read-only property of the WebTransport interface returns a WebTransportDatagramDuplexStream instance that can be used to send and receive datagrams — unreliable data transmission.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/datagrams)')\n    # The **`incomingBidirectionalStreams`** read-only property of the WebTransport interface represents one or more bidirectional streams opened by the server.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/incomingBidirectionalStreams)\n    incomingBidirectionalStreams: ReadableStream = Field(..., description='The **`incomingBidirectionalStreams`** read-only property of the WebTransport interface represents one or more bidirectional streams opened by the server.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/incomingBidirectionalStreams)')\n    # The **`incomingUnidirectionalStreams`** read-only property of the WebTransport interface represents one or more unidirectional streams opened by the server.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/incomingUnidirectionalStreams)\n    incomingUnidirectionalStreams: ReadableStream = Field(..., description='The **`incomingUnidirectionalStreams`** read-only property of the WebTransport interface represents one or more unidirectional streams opened by the server.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/incomingUnidirectionalStreams)')\n    # The **`ready`** read-only property of the WebTransport interface returns a promise that resolves when the transport is ready to use.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/ready)\n    ready: Promise<void> = Field(..., description='The **`ready`** read-only property of the WebTransport interface returns a promise that resolves when the transport is ready to use.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/ready)')\n\n# The **`WebTransportBidirectionalStream`** interface of the WebTransport API represents a bidirectional stream created by a server or a client that can be used for reliable transport.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream)\nclass WebTransportBidirectionalStream(BaseModel):\n    # The **`readable`** read-only property of the WebTransportBidirectionalStream interface returns a WebTransportReceiveStream instance that can be used to reliably read incoming data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream/readable)\n    readable: ReadableStream = Field(..., description='The **`readable`** read-only property of the WebTransportBidirectionalStream interface returns a WebTransportReceiveStream instance that can be used to reliably read incoming data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream/readable)')\n    # The **`writable`** read-only property of the WebTransportBidirectionalStream interface returns a WebTransportSendStream instance that can be used to write outgoing data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream/writable)\n    writable: WritableStream = Field(..., description='The **`writable`** read-only property of the WebTransportBidirectionalStream interface returns a WebTransportSendStream instance that can be used to write outgoing data.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream/writable)')\n\n# The **`WebTransportDatagramDuplexStream`** interface of the WebTransport API represents a duplex stream that can be used for unreliable transport of datagrams between client and server.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream)\nclass WebTransportDatagramDuplexStream(BaseModel):\n    # The **`incomingHighWaterMark`** property of the WebTransportDatagramDuplexStream interface gets or sets the high water mark for incoming chunks of data — this is the maximum size, in chunks, that the incoming ReadableStream's internal queue can reach before it is considered full.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/incomingHighWaterMark)\n    incomingHighWaterMark: float = Field(..., description='The **`incomingHighWaterMark`** property of the WebTransportDatagramDuplexStream interface gets or sets the high water mark for incoming chunks of data — this is the maximum size, in chunks, that the incoming ReadableStream\'s internal queue can reach before it is considered full.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/incomingHighWaterMark)')\n    # The **`incomingMaxAge`** property of the WebTransportDatagramDuplexStream interface gets or sets the maximum age for incoming datagrams, in milliseconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/incomingMaxAge)\n    incomingMaxAge: Union[float, null] = Field(..., description='The **`incomingMaxAge`** property of the WebTransportDatagramDuplexStream interface gets or sets the maximum age for incoming datagrams, in milliseconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/incomingMaxAge)')\n    # The **`maxDatagramSize`** read-only property of the WebTransportDatagramDuplexStream interface returns the maximum allowable size of outgoing datagrams, in bytes, that can be written to WebTransportDatagramDuplexStream.writable.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/maxDatagramSize)\n    maxDatagramSize: float = Field(..., description='The **`maxDatagramSize`** read-only property of the WebTransportDatagramDuplexStream interface returns the maximum allowable size of outgoing datagrams, in bytes, that can be written to WebTransportDatagramDuplexStream.writable.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/maxDatagramSize)')\n    # The **`outgoingHighWaterMark`** property of the WebTransportDatagramDuplexStream interface gets or sets the high water mark for outgoing chunks of data — this is the maximum size, in chunks, that the outgoing WritableStream's internal queue can reach before it is considered full.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/outgoingHighWaterMark)\n    outgoingHighWaterMark: float = Field(..., description='The **`outgoingHighWaterMark`** property of the WebTransportDatagramDuplexStream interface gets or sets the high water mark for outgoing chunks of data — this is the maximum size, in chunks, that the outgoing WritableStream\'s internal queue can reach before it is considered full.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/outgoingHighWaterMark)')\n    # The **`outgoingMaxAge`** property of the WebTransportDatagramDuplexStream interface gets or sets the maximum age for outgoing datagrams, in milliseconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/outgoingMaxAge)\n    outgoingMaxAge: Union[float, null] = Field(..., description='The **`outgoingMaxAge`** property of the WebTransportDatagramDuplexStream interface gets or sets the maximum age for outgoing datagrams, in milliseconds.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/outgoingMaxAge)')\n    # The **`readable`** read-only property of the WebTransportDatagramDuplexStream interface returns a ReadableStream instance that can be used to unreliably read incoming datagrams from the stream.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/readable)\n    readable: ReadableStream = Field(..., description='The **`readable`** read-only property of the WebTransportDatagramDuplexStream interface returns a ReadableStream instance that can be used to unreliably read incoming datagrams from the stream.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/readable)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/writable)\n    writable: WritableStream = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/writable)')\n\n# The **`WebTransportError`** interface of the WebTransport API represents an error related to the API, which can arise from server errors, network connection problems, or client-initiated abort operations (for example, arising from a WritableStream.abort() call).
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError)\nclass WebTransportError(DOMException):\n    # The **`source`** read-only property of the WebTransportError interface returns an enumerated value indicating the source of the error.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError/source)\n    source: WebTransportErrorSource = Field(..., description='The **`source`** read-only property of the WebTransportError interface returns an enumerated value indicating the source of the error.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError/source)')\n    # The **`streamErrorCode`** read-only property of the WebTransportError interface returns a number in the range 0-255 indicating the application protocol error code for this error, or `null` if one is not available.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError/streamErrorCode)\n    streamErrorCode: Union[float, null] = Field(..., description='The **`streamErrorCode`** read-only property of the WebTransportError interface returns a number in the range 0-255 indicating the application protocol error code for this error, or `null` if one is not available.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError/streamErrorCode)')\n\n# The **`WheelEvent`** interface represents events that occur due to the user moving a mouse wheel or similar input device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent)\nclass WheelEvent(MouseEvent):\n    # The **`WheelEvent.deltaMode`** read-only property returns an `unsigned long` representing the unit of the delta values scroll amount.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaMode)\n    deltaMode: float = Field(..., description='The **`WheelEvent.deltaMode`** read-only property returns an `unsigned long` representing the unit of the delta values scroll amount.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaMode)')\n    # The **`WheelEvent.deltaX`** read-only property is a `double` representing the horizontal scroll amount in the You must check the `deltaMode` property to determine the unit of the `deltaX` value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaX)\n    deltaX: float = Field(..., description='The **`WheelEvent.deltaX`** read-only property is a `double` representing the horizontal scroll amount in the You must check the `deltaMode` property to determine the unit of the `deltaX` value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaX)')\n    # The **`WheelEvent.deltaY`** read-only property is a `double` representing the vertical scroll amount in the You must check the `deltaMode` property to determine the unit of the `deltaY` value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaY)\n    deltaY: float = Field(..., description='The **`WheelEvent.deltaY`** read-only property is a `double` representing the vertical scroll amount in the You must check the `deltaMode` property to determine the unit of the `deltaY` value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaY)')\n    # The **`WheelEvent.deltaZ`** read-only property is a `double` representing the scroll amount along the z-axis, in the You must check the `deltaMode` property to determine the unit of the `deltaZ` value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaZ)\n    deltaZ: float = Field(..., description='The **`WheelEvent.deltaZ`** read-only property is a `double` representing the scroll amount along the z-axis, in the You must check the `deltaMode` property to determine the unit of the `deltaZ` value.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaZ)')\n    DOM_DELTA_PIXEL: 0x00 = Field(...)\n    DOM_DELTA_LINE: 0x01 = Field(...)\n    DOM_DELTA_PAGE: 0x02 = Field(...)\n\nclass WindowEventMap(GlobalEventHandlersEventMap):\n    DOMContentLoaded: Event = Field(...)\n    devicemotion: DeviceMotionEvent = Field(...)\n    deviceorientation: DeviceOrientationEvent = Field(...)\n    deviceorientationabsolute: DeviceOrientationEvent = Field(...)\n    gamepadconnected: GamepadEvent = Field(...)\n    gamepaddisconnected: GamepadEvent = Field(...)\n    orientationchange: Event = Field(...)\n\n# The **`Window`** interface represents a window containing a DOM document; the `document` property points to the DOM document loaded in that window.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window)\nclass Window(EventTarget):\n    # @deprecated This is a legacy alias of `navigator`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/navigator)\n    clientInformation: Navigator = Field(..., description='@deprecated This is a legacy alias of `navigator`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/navigator)')\n    # The **`Window.closed`** read-only property indicates whether the referenced window is closed or not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/closed)\n    closed: bool = Field(..., description='The **`Window.closed`** read-only property indicates whether the referenced window is closed or not.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/closed)')\n    # The **`cookieStore`** read-only property of the Window interface returns a reference to the CookieStore object for the current document context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/cookieStore)\n    cookieStore: CookieStore = Field(..., description='The **`cookieStore`** read-only property of the Window interface returns a reference to the CookieStore object for the current document context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/cookieStore)')\n    # The **`customElements`** read-only property of the Window interface returns a reference to the CustomElementRegistry object, which can be used to register new custom elements and get information about previously registered custom elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/customElements)\n    customElements: CustomElementRegistry = Field(..., description='The **`customElements`** read-only property of the Window interface returns a reference to the CustomElementRegistry object, which can be used to register new custom elements and get information about previously registered custom elements.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/customElements)')\n    # The **`devicePixelRatio`** of Window interface returns the ratio of the resolution in _physical pixels_ to the resolution in _CSS pixels_ for the current display device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/devicePixelRatio)\n    devicePixelRatio: float = Field(..., description='The **`devicePixelRatio`** of Window interface returns the ratio of the resolution in _physical pixels_ to the resolution in _CSS pixels_ for the current display device.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/devicePixelRatio)')\n    # **`window.document`** returns a reference to the document contained in the window.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/document)\n    document: Document = Field(..., description='**`window.document`** returns a reference to the document contained in the window.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/document)')\n    # The read-only Window property **`event`** returns the Event which is currently being handled by the site's code.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/event)\n    event: Union[Event, undefined] = Field(..., description='The read-only Window property **`event`** returns the Event which is currently being handled by the site\'s code.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/event)')\n    # The `external` property of the Window API returns an instance of the `External` interface, which was intended to contain functions related to adding external search providers to the browser.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/external)\n    external: External = Field(..., description='The `external` property of the Window API returns an instance of the `External` interface, which was intended to contain functions related to adding external search providers to the browser.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/external)')\n    # The **`Window.frameElement`** property returns the element (such as iframe or object) in which the window is embedded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/frameElement)\n    frameElement: Union[Element, null] = Field(..., description='The **`Window.frameElement`** property returns the element (such as iframe or object) in which the window is embedded.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/frameElement)')\n    # Returns the window itself, which is an array-like object, listing the direct sub-frames of the current window.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/frames)\n    frames: WindowProxy = Field(..., description='Returns the window itself, which is an array-like object, listing the direct sub-frames of the current window.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/frames)')\n    # The `Window.history` read-only property returns a reference to the History object, which provides an interface for manipulating the browser _session history_ (pages visited in the tab or frame that the current page is loaded in).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/history)\n    history: History = Field(..., description='The `Window.history` read-only property returns a reference to the History object, which provides an interface for manipulating the browser _session history_ (pages visited in the tab or frame that the current page is loaded in).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/history)')\n    # The read-only **`innerHeight`** property of the including the height of the horizontal scroll bar, if present.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/innerHeight)\n    innerHeight: float = Field(..., description='The read-only **`innerHeight`** property of the including the height of the horizontal scroll bar, if present.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/innerHeight)')\n    # The read-only Window property **`innerWidth`** returns the interior width of the window in pixels (that is, the width of the window's layout viewport).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/innerWidth)\n    innerWidth: float = Field(..., description='The read-only Window property **`innerWidth`** returns the interior width of the window in pixels (that is, the width of the window\'s layout viewport).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/innerWidth)')\n    # Returns the number of frames (either frame or A number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/length)\n    length: float = Field(..., description='Returns the number of frames (either frame or A number.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/length)')\n    # Returns the `locationbar` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/locationbar)\n    locationbar: BarProp = Field(..., description='Returns the `locationbar` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/locationbar)')\n    # Returns the `menubar` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/menubar)\n    menubar: BarProp = Field(..., description='Returns the `menubar` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/menubar)')\n    # The `Window.name` property gets/sets the name of the window's browsing context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/name)\n    name: str = Field(..., description='The `Window.name` property gets/sets the name of the window\'s browsing context.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/name)')\n    # The **`Window.navigator`** read-only property returns a reference to the Navigator object, which has methods and properties about the application running the script.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/navigator)\n    navigator: Navigator = Field(..., description='The **`Window.navigator`** read-only property returns a reference to the Navigator object, which has methods and properties about the application running the script.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/navigator)')\n    # Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/devicemotion_event)\n    ondevicemotion: Union[((this: Window, ev: DeviceMotionEvent) => any), null] = Field(..., description='Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/devicemotion_event)')\n    # Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/deviceorientation_event)\n    ondeviceorientation: Union[((this: Window, ev: DeviceOrientationEvent) => any), null] = Field(..., description='Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/deviceorientation_event)')\n    # Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/deviceorientationabsolute_event)\n    ondeviceorientationabsolute: Union[((this: Window, ev: DeviceOrientationEvent) => any), null] = Field(..., description='Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/deviceorientationabsolute_event)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/orientationchange_event)\n    onorientationchange: Union[((this: Window, ev: Event) => any), null] = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/orientationchange_event)')\n    # The Window interface's **`opener`** property returns a reference to the window that opened the window, either with Window.open, or by navigating a link with a `target` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/opener)\n    opener: any = Field(..., description='The Window interface\'s **`opener`** property returns a reference to the window that opened the window, either with Window.open, or by navigating a link with a `target` attribute.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/opener)')\n    # Returns the orientation in degrees (in 90-degree increments) of the viewport relative to the device's natural orientation.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/orientation)\n    orientation: float = Field(..., description='Returns the orientation in degrees (in 90-degree increments) of the viewport relative to the device\'s natural orientation.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/orientation)')\n    # The **`originAgentCluster`** read-only property of the Window interface returns `true` if this window belongs to an _origin-keyed agent cluster_: this means that the operating system has provided dedicated resources (for example an operating system process) to this window's origin that are not shared with windows from other origins.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/originAgentCluster)\n    originAgentCluster: bool = Field(..., description='The **`originAgentCluster`** read-only property of the Window interface returns `true` if this window belongs to an _origin-keyed agent cluster_: this means that the operating system has provided dedicated resources (for example an operating system process) to this window\'s origin that are not shared with windows from other origins.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/originAgentCluster)')\n    # The **`Window.outerHeight`** read-only property returns the height in pixels of the whole browser window, including any sidebar, window chrome, and window-resizing borders/handles.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/outerHeight)\n    outerHeight: float = Field(..., description='The **`Window.outerHeight`** read-only property returns the height in pixels of the whole browser window, including any sidebar, window chrome, and window-resizing borders/handles.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/outerHeight)')\n    # **`Window.outerWidth`** read-only property returns the width of the outside of the browser window.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/outerWidth)\n    outerWidth: float = Field(..., description='**`Window.outerWidth`** read-only property returns the width of the outside of the browser window.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/outerWidth)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollX)\n    pageXOffset: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollX)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollY)\n    pageYOffset: float = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollY)')\n    # The **`Window.parent`** property is a reference to the parent of the current window or subframe.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/parent)\n    parent: WindowProxy = Field(..., description='The **`Window.parent`** property is a reference to the parent of the current window or subframe.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/parent)')\n    # Returns the `personalbar` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/personalbar)\n    personalbar: BarProp = Field(..., description='Returns the `personalbar` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/personalbar)')\n    # The Window property **`screen`** returns a reference to the screen object associated with the window.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screen)\n    screen: Screen = Field(..., description='The Window property **`screen`** returns a reference to the screen object associated with the window.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screen)')\n    # The **`Window.screenLeft`** read-only property returns the horizontal distance, in CSS pixels, from the left border of the user's browser viewport to the left side of the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenLeft)\n    screenLeft: float = Field(..., description='The **`Window.screenLeft`** read-only property returns the horizontal distance, in CSS pixels, from the left border of the user\'s browser viewport to the left side of the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenLeft)')\n    # The **`Window.screenTop`** read-only property returns the vertical distance, in CSS pixels, from the top border of the user's browser viewport to the top side of the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenTop)\n    screenTop: float = Field(..., description='The **`Window.screenTop`** read-only property returns the vertical distance, in CSS pixels, from the top border of the user\'s browser viewport to the top side of the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenTop)')\n    # The **`Window.screenX`** read-only property returns the horizontal distance, in CSS pixels, of the left border of the user's browser viewport to the left side of the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenX)\n    screenX: float = Field(..., description='The **`Window.screenX`** read-only property returns the horizontal distance, in CSS pixels, of the left border of the user\'s browser viewport to the left side of the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenX)')\n    # The **`Window.screenY`** read-only property returns the vertical distance, in CSS pixels, of the top border of the user's browser viewport to the top edge of the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenY)\n    screenY: float = Field(..., description='The **`Window.screenY`** read-only property returns the vertical distance, in CSS pixels, of the top border of the user\'s browser viewport to the top edge of the screen.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenY)')\n    # The read-only **`scrollX`** property of the Window interface returns the number of pixels by which the document is currently scrolled horizontally.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollX)\n    scrollX: float = Field(..., description='The read-only **`scrollX`** property of the Window interface returns the number of pixels by which the document is currently scrolled horizontally.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollX)')\n    # The read-only **`scrollY`** property of the Window interface returns the number of pixels by which the document is currently scrolled vertically.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollY)\n    scrollY: float = Field(..., description='The read-only **`scrollY`** property of the Window interface returns the number of pixels by which the document is currently scrolled vertically.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollY)')\n    # Returns the `scrollbars` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollbars)\n    scrollbars: BarProp = Field(..., description='Returns the `scrollbars` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollbars)')\n    # The **`Window.self`** read-only property returns the window itself, as a WindowProxy.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/self)\n    self: Window & typeof globalThis = Field(..., description='The **`Window.self`** read-only property returns the window itself, as a WindowProxy.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/self)')\n    # The `speechSynthesis` read-only property of the Window object returns a SpeechSynthesis object, which is the entry point into using Web Speech API speech synthesis functionality.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/speechSynthesis)\n    speechSynthesis: SpeechSynthesis = Field(..., description='The `speechSynthesis` read-only property of the Window object returns a SpeechSynthesis object, which is the entry point into using Web Speech API speech synthesis functionality.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/speechSynthesis)')\n    # The **`status`** property of the bar at the bottom of the browser window.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/status)\n    status: str = Field(..., description='The **`status`** property of the bar at the bottom of the browser window.
@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/status)')\n    # Returns the `statusbar` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/statusbar)\n    statusbar: BarProp = Field(..., description='Returns the `statusbar` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/statusbar)')\n    # Returns the `toolbar` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/toolbar)\n    toolbar: BarProp = Field(..., description='Returns the `toolbar` object.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/toolbar)')\n    # Returns a reference to the topmost window in the window hierarchy.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/top)\n    top: Union[WindowProxy, null] = Field(..., description='Returns a reference to the topmost window in the window hierarchy.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/top)')\n    # The **`visualViewport`** read-only property of the Window interface returns a VisualViewport object representing the visual viewport for a given window, or `null` if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/visualViewport)\n    visualViewport: Union[VisualViewport, null] = Field(..., description='The **`visualViewport`** read-only property of the Window interface returns a VisualViewport object representing the visual viewport for a given window, or `null` if current document is not fully active.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/visualViewport)')\n    # The **`window`** property of a Window object points to the window object itself.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/window)\n    window: Window & typeof globalThis = Field(..., description='The **`window`** property of a Window object points to the window object itself.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/window)')\n\nclass WindowEventHandlersEventMap(BaseModel):\n    afterprint: Event = Field(...)\n    beforeprint: Event = Field(...)\n    beforeunload: BeforeUnloadEvent = Field(...)\n    gamepadconnected: GamepadEvent = Field(...)\n    gamepaddisconnected: GamepadEvent = Field(...)\n    hashchange: HashChangeEvent = Field(...)\n    languagechange: Event = Field(...)\n    message: MessageEvent = Field(...)\n    messageerror: MessageEvent = Field(...)\n    offline: Event = Field(...)\n    online: Event = Field(...)\n    pagehide: PageTransitionEvent = Field(...)\n    pagereveal: PageRevealEvent = Field(...)\n    pageshow: PageTransitionEvent = Field(...)\n    pageswap: PageSwapEvent = Field(...)\n    popstate: PopStateEvent = Field(...)\n    rejectionhandled: PromiseRejectionEvent = Field(...)\n    storage: StorageEvent = Field(...)\n    unhandledrejection: PromiseRejectionEvent = Field(...)\n    unload: Event = Field(...)\n\nclass WindowEventHandlers(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/afterprint_event)\n    onafterprint: Union[((this: WindowEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/afterprint_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeprint_event)\n    onbeforeprint: Union[((this: WindowEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeprint_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeunload_event)\n    onbeforeunload: Union[((this: WindowEventHandlers, ev: BeforeUnloadEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeunload_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepadconnected_event)\n    ongamepadconnected: Union[((this: WindowEventHandlers, ev: GamepadEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepadconnected_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepaddisconnected_event)\n    ongamepaddisconnected: Union[((this: WindowEventHandlers, ev: GamepadEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepaddisconnected_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/hashchange_event)\n    onhashchange: Union[((this: WindowEventHandlers, ev: HashChangeEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/hashchange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/languagechange_event)\n    onlanguagechange: Union[((this: WindowEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/languagechange_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/message_event)\n    onmessage: Union[((this: WindowEventHandlers, ev: MessageEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/message_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/messageerror_event)\n    onmessageerror: Union[((this: WindowEventHandlers, ev: MessageEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/messageerror_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/offline_event)\n    onoffline: Union[((this: WindowEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/offline_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/online_event)\n    ononline: Union[((this: WindowEventHandlers, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/online_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pagehide_event)\n    onpagehide: Union[((this: WindowEventHandlers, ev: PageTransitionEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pagehide_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pagereveal_event)\n    onpagereveal: Union[((this: WindowEventHandlers, ev: PageRevealEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pagereveal_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pageshow_event)\n    onpageshow: Union[((this: WindowEventHandlers, ev: PageTransitionEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pageshow_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pageswap_event)\n    onpageswap: Union[((this: WindowEventHandlers, ev: PageSwapEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pageswap_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/popstate_event)\n    onpopstate: Union[((this: WindowEventHandlers, ev: PopStateEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/popstate_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/rejectionhandled_event)\n    onrejectionhandled: Union[((this: WindowEventHandlers, ev: PromiseRejectionEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/rejectionhandled_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/storage_event)\n    onstorage: Union[((this: WindowEventHandlers, ev: StorageEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/storage_event)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/unhandledrejection_event)\n    onunhandledrejection: Union[((this: WindowEventHandlers, ev: PromiseRejectionEvent) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/unhandledrejection_event)')\n    # @deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/unload_event)\n    onunload: Union[((this: WindowEventHandlers, ev: Event) => any), null] = Field(..., description='@deprecated
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/unload_event)')\n\nclass WindowLocalStorage(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/localStorage)\n    localStorage: Storage = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/localStorage)')\n\nclass WindowOrWorkerGlobalScope(BaseModel):\n    # Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/caches)\n    caches: CacheStorage = Field(..., description='Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/caches)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/crossOriginIsolated)\n    crossOriginIsolated: bool = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/crossOriginIsolated)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/crypto)\n    crypto: Crypto = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/crypto)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/indexedDB)\n    indexedDB: IDBFactory = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/indexedDB)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/isSecureContext)\n    isSecureContext: bool = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/isSecureContext)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/origin)\n    origin: str = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/origin)')\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/performance)\n    performance: Performance = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/performance)')\n\nclass WindowSessionStorage(BaseModel):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/sessionStorage)\n    sessionStorage: Storage = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/sessionStorage)')\n\nclass WorkerEventMap(AbstractWorkerEventMap):\n    pass\n\n# The **`Worker`** interface of the Web Workers API represents a background task that can be created via script, which can send messages back to its creator.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker)\nclass Worker(EventTarget):\n    pass\n\n# The **`Worklet`** interface is a lightweight version of Web Workers and gives developers access to low-level parts of the rendering pipeline.
Available only in secure contexts.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/Worklet)\nclass Worklet(BaseModel):\n    pass\n\n# The **`WritableStream`** interface of the Streams API provides a standard abstraction for writing streaming data to a destination, known as a sink.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream)\nclass WritableStream(BaseModel):\n    # The **`locked`** read-only property of the WritableStream interface returns a boolean indicating whether the `WritableStream` is locked to a writer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream/locked)\n    locked: bool = Field(..., description='The **`locked`** read-only property of the WritableStream interface returns a boolean indicating whether the `WritableStream` is locked to a writer.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream/locked)')\n\n# The **`WritableStreamDefaultController`** interface of the Streams API represents a controller allowing control of a WritableStream's state.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController)\nclass WritableStreamDefaultController(BaseModel):\n    # The read-only **`signal`** property of the WritableStreamDefaultController interface returns the AbortSignal associated with the controller.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController/signal)\n    signal: AbortSignal = Field(..., description='The read-only **`signal`** property of the WritableStreamDefaultController interface returns the AbortSignal associated with the controller.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController/signal)')\n\n# The **`WritableStreamDefaultWriter`** interface of the Streams API is the object returned by WritableStream.getWriter() and once created locks the writer to the `WritableStream` ensuring that no other streams can write to the underlying sink.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter)\nclass WritableStreamDefaultWriter(BaseModel):\n    # The **`closed`** read-only property of the the stream errors or the writer's lock is released.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/closed)\n    closed: Promise<void> = Field(..., description='The **`closed`** read-only property of the the stream errors or the writer\'s lock is released.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/closed)')\n    # The **`desiredSize`** read-only property of the to fill the stream's internal queue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/desiredSize)\n    desiredSize: Union[float, null] = Field(..., description='The **`desiredSize`** read-only property of the to fill the stream\'s internal queue.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/desiredSize)')\n    # The **`ready`** read-only property of the that resolves when the desired size of the stream's internal queue transitions from non-positive to positive, signaling that it is no longer applying backpressure.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/ready)\n    ready: Promise<void> = Field(..., description='The **`ready`** read-only property of the that resolves when the desired size of the stream\'s internal queue transitions from non-positive to positive, signaling that it is no longer applying backpressure.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/ready)')\n\n# The **XMLDocument** interface represents an XML document.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLDocument)\nclass XMLDocument(Document):\n    pass\n\nclass XMLHttpRequestEventMap(XMLHttpRequestEventTargetEventMap):\n    readystatechange: Event = Field(...)\n\n# `XMLHttpRequest` (XHR) objects are used to interact with servers.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest)\nclass XMLHttpRequest(XMLHttpRequestEventTarget):\n    # [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readystatechange_event)\n    onreadystatechange: Union[((this: XMLHttpRequest, ev: Event) => any), null] = Field(..., description='[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readystatechange_event)')\n    # The **XMLHttpRequest.readyState** property returns the state an XMLHttpRequest client is in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readyState)\n    readyState: float = Field(..., description='The **XMLHttpRequest.readyState** property returns the state an XMLHttpRequest client is in.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readyState)')\n    # The XMLHttpRequest **`response`** property returns the response's body content as an ArrayBuffer, a Blob, a Document, a JavaScript Object, or a string, depending on the value of the request's XMLHttpRequest.responseType property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/response)\n    response: any = Field(..., description='The XMLHttpRequest **`response`** property returns the response\'s body content as an ArrayBuffer, a Blob, a Document, a JavaScript Object, or a string, depending on the value of the request\'s XMLHttpRequest.responseType property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/response)')\n    # The read-only XMLHttpRequest property **`responseText`** returns the text received from a server following a request being sent.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseText)\n    responseText: str = Field(..., description='The read-only XMLHttpRequest property **`responseText`** returns the text received from a server following a request being sent.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseText)')\n    # The XMLHttpRequest property **`responseType`** is an enumerated string value specifying the type of data contained in the response.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseType)\n    responseType: XMLHttpRequestResponseType = Field(..., description='The XMLHttpRequest property **`responseType`** is an enumerated string value specifying the type of data contained in the response.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseType)')\n    # The read-only **`XMLHttpRequest.responseURL`** property returns the serialized URL of the response or the empty string if the URL is `null`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseURL)\n    responseURL: str = Field(..., description='The read-only **`XMLHttpRequest.responseURL`** property returns the serialized URL of the response or the empty string if the URL is `null`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseURL)')\n    # The **`XMLHttpRequest.responseXML`** read-only property returns a Document containing the HTML or XML retrieved by the request; or `null` if the request was unsuccessful, has not yet been sent, or if the data can't be parsed as XML or HTML.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseXML)\n    responseXML: Union[Document, null] = Field(..., description='The **`XMLHttpRequest.responseXML`** read-only property returns a Document containing the HTML or XML retrieved by the request; or `null` if the request was unsuccessful, has not yet been sent, or if the data can\'t be parsed as XML or HTML.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseXML)')\n    # The read-only **`XMLHttpRequest.status`** property returns the numerical HTTP status code of the `XMLHttpRequest`'s response.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/status)\n    status: float = Field(..., description='The read-only **`XMLHttpRequest.status`** property returns the numerical HTTP status code of the `XMLHttpRequest`\'s response.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/status)')\n    # The read-only **`XMLHttpRequest.statusText`** property returns a string containing the response's status message as returned by the HTTP server.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/statusText)\n    statusText: str = Field(..., description='The read-only **`XMLHttpRequest.statusText`** property returns a string containing the response\'s status message as returned by the HTTP server.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/statusText)')\n    # The **`XMLHttpRequest.timeout`** property is an `unsigned long` representing the number of milliseconds a request can take before automatically being terminated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/timeout)\n    timeout: float = Field(..., description='The **`XMLHttpRequest.timeout`** property is an `unsigned long` representing the number of milliseconds a request can take before automatically being terminated.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/timeout)')\n    # The XMLHttpRequest `upload` property returns an XMLHttpRequestUpload object that can be observed to monitor an upload's progress.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/upload)\n    upload: XMLHttpRequestUpload = Field(..., description='The XMLHttpRequest `upload` property returns an XMLHttpRequestUpload object that can be observed to monitor an upload\'s progress.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/upload)')\n    # The **`XMLHttpRequest.withCredentials`** property is a boolean value that indicates whether or not cross-site `Access-Control` requests should be made using credentials such as cookies, authentication headers or TLS client certificates.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/withCredentials)\n    withCredentials: bool = Field(..., description='The **`XMLHttpRequest.withCredentials`** property is a boolean value that indicates whether or not cross-site `Access-Control` requests should be made using credentials such as cookies, authentication headers or TLS client certificates.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/withCredentials)')\n    UNSENT: 0 = Field(...)\n    OPENED: 1 = Field(...)\n    HEADERS_RECEIVED: 2 = Field(...)\n    LOADING: 3 = Field(...)\n    DONE: 4 = Field(...)\n\nclass XMLHttpRequestEventTargetEventMap(BaseModel):\n    abort: ProgressEvent<XMLHttpRequestEventTarget> = Field(...)\n    error: ProgressEvent<XMLHttpRequestEventTarget> = Field(...)\n    load: ProgressEvent<XMLHttpRequestEventTarget> = Field(...)\n    loadend: ProgressEvent<XMLHttpRequestEventTarget> = Field(...)\n    loadstart: ProgressEvent<XMLHttpRequestEventTarget> = Field(...)\n    progress: ProgressEvent<XMLHttpRequestEventTarget> = Field(...)\n    timeout: ProgressEvent<XMLHttpRequestEventTarget> = Field(...)\n\n# `XMLHttpRequestEventTarget` is the interface that describes the event handlers shared on XMLHttpRequest and XMLHttpRequestUpload.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestEventTarget)\nclass XMLHttpRequestEventTarget(EventTarget):\n    onabort: Union[((this: XMLHttpRequest, ev: ProgressEvent) => any), null] = Field(...)\n    onerror: Union[((this: XMLHttpRequest, ev: ProgressEvent) => any), null] = Field(...)\n    onload: Union[((this: XMLHttpRequest, ev: ProgressEvent) => any), null] = Field(...)\n    onloadend: Union[((this: XMLHttpRequest, ev: ProgressEvent) => any), null] = Field(...)\n    onloadstart: Union[((this: XMLHttpRequest, ev: ProgressEvent) => any), null] = Field(...)\n    onprogress: Union[((this: XMLHttpRequest, ev: ProgressEvent) => any), null] = Field(...)\n    ontimeout: Union[((this: XMLHttpRequest, ev: ProgressEvent) => any), null] = Field(...)\n\n# The **`XMLHttpRequestUpload`** interface represents the upload process for a specific XMLHttpRequest.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestUpload)\nclass XMLHttpRequestUpload(XMLHttpRequestEventTarget):\n    pass\n\n# The `XMLSerializer` interface provides the XMLSerializer.serializeToString method to construct an XML string representing a DOM tree.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLSerializer)\nclass XMLSerializer(BaseModel):\n    pass\n\n# The `XPathEvaluator` interface allows to compile and evaluate XPath expressions.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathEvaluator)\nclass XPathEvaluator(XPathEvaluatorBase):\n    pass\n\nclass XPathEvaluatorBase(BaseModel):\n    pass\n\n# This interface is a compiled XPath expression that can be evaluated on a document or specific node to return information from its DOM tree.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathExpression)\nclass XPathExpression(BaseModel):\n    pass\n\n# The **`XPathResult`** interface represents the results generated by evaluating an XPath expression within the context of a given node.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult)\nclass XPathResult(BaseModel):\n    # The read-only **`booleanValue`** property of the The return value is the boolean value of the `XPathResult` returned by In case XPathResult.resultType is not `BOOLEAN_TYPE`, a The following example shows the use of the `booleanValue` property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/booleanValue)\n    booleanValue: bool = Field(..., description='The read-only **`booleanValue`** property of the The return value is the boolean value of the `XPathResult` returned by In case XPathResult.resultType is not `BOOLEAN_TYPE`, a The following example shows the use of the `booleanValue` property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/booleanValue)')\n    # The read-only **`invalidIteratorState`** property of the is `true` if XPathResult.resultType is `UNORDERED_NODE_ITERATOR_TYPE` or `ORDERED_NODE_ITERATOR_TYPE` and the document has been modified since this result was returned.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/invalidIteratorState)\n    invalidIteratorState: bool = Field(..., description='The read-only **`invalidIteratorState`** property of the is `true` if XPathResult.resultType is `UNORDERED_NODE_ITERATOR_TYPE` or `ORDERED_NODE_ITERATOR_TYPE` and the document has been modified since this result was returned.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/invalidIteratorState)')\n    # The read-only **`numberValue`** property of the The return value is the numeric value of the `XPathResult` returned by In case XPathResult.resultType is not `NUMBER_TYPE`, a The following example shows the use of the `numberValue` property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/numberValue)\n    numberValue: float = Field(..., description='The read-only **`numberValue`** property of the The return value is the numeric value of the `XPathResult` returned by In case XPathResult.resultType is not `NUMBER_TYPE`, a The following example shows the use of the `numberValue` property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/numberValue)')\n    # The read-only **`resultType`** property of the the type constants.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/resultType)\n    resultType: float = Field(..., description='The read-only **`resultType`** property of the the type constants.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/resultType)')\n    # The read-only **`singleNodeValue`** property of the `null` in case no node was matched of a result with `FIRST_ORDERED_NODE_TYPE`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/singleNodeValue)\n    singleNodeValue: Union[Node, null] = Field(..., description='The read-only **`singleNodeValue`** property of the `null` in case no node was matched of a result with `FIRST_ORDERED_NODE_TYPE`.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/singleNodeValue)')\n    # The read-only **`snapshotLength`** property of the snapshot.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/snapshotLength)\n    snapshotLength: float = Field(..., description='The read-only **`snapshotLength`** property of the snapshot.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/snapshotLength)')\n    # The read-only **`stringValue`** property of the The return value is the string value of the `XPathResult` returned by In case XPathResult.resultType is not `STRING_TYPE`, a The following example shows the use of the `stringValue` property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/stringValue)\n    stringValue: str = Field(..., description='The read-only **`stringValue`** property of the The return value is the string value of the `XPathResult` returned by In case XPathResult.resultType is not `STRING_TYPE`, a The following example shows the use of the `stringValue` property.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/stringValue)')\n    ANY_TYPE: 0 = Field(...)\n    NUMBER_TYPE: 1 = Field(...)\n    STRING_TYPE: 2 = Field(...)\n    BOOLEAN_TYPE: 3 = Field(...)\n    UNORDERED_NODE_ITERATOR_TYPE: 4 = Field(...)\n    ORDERED_NODE_ITERATOR_TYPE: 5 = Field(...)\n    UNORDERED_NODE_SNAPSHOT_TYPE: 6 = Field(...)\n    ORDERED_NODE_SNAPSHOT_TYPE: 7 = Field(...)\n    ANY_UNORDERED_NODE_TYPE: 8 = Field(...)\n    FIRST_ORDERED_NODE_TYPE: 9 = Field(...)\n\n# An **`XSLTProcessor`** applies an XSLT stylesheet transformation to an XML document to produce a new XML document as output.
[MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor)\nclass XSLTProcessor(BaseModel):\n    pass\n\n# The **`console`** object provides access to the debugging console (e.g., the Web console in Firefox). The **`console`** object provides access to the debugging console (e.g., the Web console in Firefox).
[MDN Reference](https://developer.mozilla.org/docs/Web/API/console)\nclass Console(BaseModel):\n    pass\n\nclass AudioDataOutputCallback(BaseModel):\n    pass\n\nclass BlobCallback(BaseModel):\n    pass\n\nclass CustomElementConstructor(BaseModel):\n    pass\n\nclass DecodeErrorCallback(BaseModel):\n    pass\n\nclass DecodeSuccessCallback(BaseModel):\n    pass\n\nclass EncodedAudioChunkOutputCallback(BaseModel):\n    pass\n\nclass EncodedVideoChunkOutputCallback(BaseModel):\n    pass\n\nclass ErrorCallback(BaseModel):\n    pass\n\nclass FileCallback(BaseModel):\n    pass\n\nclass FileSystemEntriesCallback(BaseModel):\n    pass\n\nclass FileSystemEntryCallback(BaseModel):\n    pass\n\nclass FrameRequestCallback(BaseModel):\n    pass\n\nclass FunctionStringCallback(BaseModel):\n    pass\n\nclass IdleRequestCallback(BaseModel):\n    pass\n\nclass IntersectionObserverCallback(BaseModel):\n    pass\n\nclass LockGrantedCallback(BaseModel):\n    pass\n\nclass MediaSessionActionHandler(BaseModel):\n    pass\n\nclass MutationCallback(BaseModel):\n    pass\n\nclass NotificationPermissionCallback(BaseModel):\n    pass\n\nclass OnBeforeUnloadEventHandlerNonNull(BaseModel):\n    pass\n\nclass OnErrorEventHandlerNonNull(BaseModel):\n    pass\n\nclass PerformanceObserverCallback(BaseModel):\n    pass\n\nclass PositionCallback(BaseModel):\n    pass\n\nclass PositionErrorCallback(BaseModel):\n    pass\n\nclass QueuingStrategySize(BaseModel):\n    pass\n\nclass RTCPeerConnectionErrorCallback(BaseModel):\n    pass\n\nclass RTCSessionDescriptionCallback(BaseModel):\n    pass\n\nclass RemotePlaybackAvailabilityCallback(BaseModel):\n    pass\n\nclass ReportingObserverCallback(BaseModel):\n    pass\n\nclass ResizeObserverCallback(BaseModel):\n    pass\n\nclass TransformerFlushCallback(BaseModel):\n    pass\n\nclass TransformerStartCallback(BaseModel):\n    pass\n\nclass TransformerTransformCallback(BaseModel):\n    pass\n\nclass UnderlyingSinkAbortCallback(BaseModel):\n    pass\n\nclass UnderlyingSinkCloseCallback(BaseModel):\n    pass\n\nclass UnderlyingSinkStartCallback(BaseModel):\n    pass\n\nclass UnderlyingSinkWriteCallback(BaseModel):\n    pass\n\nclass UnderlyingSourceCancelCallback(BaseModel):\n    pass\n\nclass UnderlyingSourcePullCallback(BaseModel):\n    pass\n\nclass UnderlyingSourceStartCallback(BaseModel):\n    pass\n\nclass VideoFrameOutputCallback(BaseModel):\n    pass\n\nclass VideoFrameRequestCallback(BaseModel):\n    pass\n\nclass ViewTransitionUpdateCallback(BaseModel):\n    pass\n\nclass VoidFunction(BaseModel):\n    pass\n\nclass WebCodecsErrorCallback(BaseModel):\n    pass\n\nclass HTMLElementTagNameMap(BaseModel):\n    a: HTMLAnchorElement = Field(...)\n    abbr: HTMLElement = Field(...)\n    address: HTMLElement = Field(...)\n    area: HTMLAreaElement = Field(...)\n    article: HTMLElement = Field(...)\n    aside: HTMLElement = Field(...)\n    audio: HTMLAudioElement = Field(...)\n    b: HTMLElement = Field(...)\n    base: HTMLBaseElement = Field(...)\n    bdi: HTMLElement = Field(...)\n    bdo: HTMLElement = Field(...)\n    blockquote: HTMLQuoteElement = Field(...)\n    body: HTMLBodyElement = Field(...)\n    br: HTMLBRElement = Field(...)\n    button: HTMLButtonElement = Field(...)\n    canvas: HTMLCanvasElement = Field(...)\n    caption: HTMLTableCaptionElement = Field(...)\n    cite: HTMLElement = Field(...)\n    code: HTMLElement = Field(...)\n    col: HTMLTableColElement = Field(...)\n    colgroup: HTMLTableColElement = Field(...)\n    data: HTMLDataElement = Field(...)\n    datalist: HTMLDataListElement = Field(...)\n    dd: HTMLElement = Field(...)\n    del: HTMLModElement = Field(...)\n    details: HTMLDetailsElement = Field(...)\n    dfn: HTMLElement = Field(...)\n    dialog: HTMLDialogElement = Field(...)\n    div: HTMLDivElement = Field(...)\n    dl: HTMLDListElement = Field(...)\n    dt: HTMLElement = Field(...)\n    em: HTMLElement = Field(...)\n    embed: HTMLEmbedElement = Field(...)\n    fieldset: HTMLFieldSetElement = Field(...)\n    figcaption: HTMLElement = Field(...)\n    figure: HTMLElement = Field(...)\n    footer: HTMLElement = Field(...)\n    form: HTMLFormElement = Field(...)\n    h1: HTMLHeadingElement = Field(...)\n    h2: HTMLHeadingElement = Field(...)\n    h3: HTMLHeadingElement = Field(...)\n    h4: HTMLHeadingElement = Field(...)\n    h5: HTMLHeadingElement = Field(...)\n    h6: HTMLHeadingElement = Field(...)\n    head: HTMLHeadElement = Field(...)\n    header: HTMLElement = Field(...)\n    hgroup: HTMLElement = Field(...)\n    hr: HTMLHRElement = Field(...)\n    html: HTMLHtmlElement = Field(...)\n    i: HTMLElement = Field(...)\n    iframe: HTMLIFrameElement = Field(...)\n    img: HTMLImageElement = Field(...)\n    input: HTMLInputElement = Field(...)\n    ins: HTMLModElement = Field(...)\n    kbd: HTMLElement = Field(...)\n    label: HTMLLabelElement = Field(...)\n    legend: HTMLLegendElement = Field(...)\n    li: HTMLLIElement = Field(...)\n    link: HTMLLinkElement = Field(...)\n    main: HTMLElement = Field(...)\n    map: HTMLMapElement = Field(...)\n    mark: HTMLElement = Field(...)\n    menu: HTMLMenuElement = Field(...)\n    meta: HTMLMetaElement = Field(...)\n    meter: HTMLMeterElement = Field(...)\n    nav: HTMLElement = Field(...)\n    noscript: HTMLElement = Field(...)\n    object: HTMLObjectElement = Field(...)\n    ol: HTMLOListElement = Field(...)\n    optgroup: HTMLOptGroupElement = Field(...)\n    option: HTMLOptionElement = Field(...)\n    output: HTMLOutputElement = Field(...)\n    p: HTMLParagraphElement = Field(...)\n    picture: HTMLPictureElement = Field(...)\n    pre: HTMLPreElement = Field(...)\n    progress: HTMLProgressElement = Field(...)\n    q: HTMLQuoteElement = Field(...)\n    rp: HTMLElement = Field(...)\n    rt: HTMLElement = Field(...)\n    ruby: HTMLElement = Field(...)\n    s: HTMLElement = Field(...)\n    samp: HTMLElement = Field(...)\n    script: HTMLScriptElement = Field(...)\n    search: HTMLElement = Field(...)\n    section: HTMLElement = Field(...)\n    select: HTMLSelectElement = Field(...)\n    slot: HTMLSlotElement = Field(...)\n    small: HTMLElement = Field(...)\n    source: HTMLSourceElement = Field(...)\n    span: HTMLSpanElement = Field(...)\n    strong: HTMLElement = Field(...)\n    style: HTMLStyleElement = Field(...)\n    sub: HTMLElement = Field(...)\n    summary: HTMLElement = Field(...)\n    sup: HTMLElement = Field(...)\n    table: HTMLTableElement = Field(...)\n    tbody: HTMLTableSectionElement = Field(...)\n    td: HTMLTableCellElement = Field(...)\n    template: HTMLTemplateElement = Field(...)\n    textarea: HTMLTextAreaElement = Field(...)\n    tfoot: HTMLTableSectionElement = Field(...)\n    th: HTMLTableCellElement = Field(...)\n    thead: HTMLTableSectionElement = Field(...)\n    time: HTMLTimeElement = Field(...)\n    title: HTMLTitleElement = Field(...)\n    tr: HTMLTableRowElement = Field(...)\n    track: HTMLTrackElement = Field(...)\n    u: HTMLElement = Field(...)\n    ul: HTMLUListElement = Field(...)\n    var: HTMLElement = Field(...)\n    video: HTMLVideoElement = Field(...)\n    wbr: HTMLElement = Field(...)\n\nclass HTMLElementDeprecatedTagNameMap(BaseModel):\n    acronym: HTMLElement = Field(...)\n    applet: HTMLUnknownElement = Field(...)\n    basefont: HTMLElement = Field(...)\n    bgsound: HTMLUnknownElement = Field(...)\n    big: HTMLElement = Field(...)\n    blink: HTMLUnknownElement = Field(...)\n    center: HTMLElement = Field(...)\n    dir: HTMLDirectoryElement = Field(...)\n    font: HTMLFontElement = Field(...)\n    frame: HTMLFrameElement = Field(...)\n    frameset: HTMLFrameSetElement = Field(...)\n    isindex: HTMLUnknownElement = Field(...)\n    keygen: HTMLUnknownElement = Field(...)\n    listing: HTMLPreElement = Field(...)\n    marquee: HTMLMarqueeElement = Field(...)\n    menuitem: HTMLElement = Field(...)\n    multicol: HTMLUnknownElement = Field(...)\n    nextid: HTMLUnknownElement = Field(...)\n    nobr: HTMLElement = Field(...)\n    noembed: HTMLElement = Field(...)\n    noframes: HTMLElement = Field(...)\n    param: HTMLParamElement = Field(...)\n    plaintext: HTMLElement = Field(...)\n    rb: HTMLElement = Field(...)\n    rtc: HTMLElement = Field(...)\n    spacer: HTMLUnknownElement = Field(...)\n    strike: HTMLElement = Field(...)\n    tt: HTMLElement = Field(...)\n    xmp: HTMLPreElement = Field(...)\n\nclass SVGElementTagNameMap(BaseModel):\n    a: SVGAElement = Field(...)\n    animate: SVGAnimateElement = Field(...)\n    animateMotion: SVGAnimateMotionElement = Field(...)\n    animateTransform: SVGAnimateTransformElement = Field(...)\n    circle: SVGCircleElement = Field(...)\n    clipPath: SVGClipPathElement = Field(...)\n    defs: SVGDefsElement = Field(...)\n    desc: SVGDescElement = Field(...)\n    ellipse: SVGEllipseElement = Field(...)\n    feBlend: SVGFEBlendElement = Field(...)\n    feColorMatrix: SVGFEColorMatrixElement = Field(...)\n    feComponentTransfer: SVGFEComponentTransferElement = Field(...)\n    feComposite: SVGFECompositeElement = Field(...)\n    feConvolveMatrix: SVGFEConvolveMatrixElement = Field(...)\n    feDiffuseLighting: SVGFEDiffuseLightingElement = Field(...)\n    feDisplacementMap: SVGFEDisplacementMapElement = Field(...)\n    feDistantLight: SVGFEDistantLightElement = Field(...)\n    feDropShadow: SVGFEDropShadowElement = Field(...)\n    feFlood: SVGFEFloodElement = Field(...)\n    feFuncA: SVGFEFuncAElement = Field(...)\n    feFuncB: SVGFEFuncBElement = Field(...)\n    feFuncG: SVGFEFuncGElement = Field(...)\n    feFuncR: SVGFEFuncRElement = Field(...)\n    feGaussianBlur: SVGFEGaussianBlurElement = Field(...)\n    feImage: SVGFEImageElement = Field(...)\n    feMerge: SVGFEMergeElement = Field(...)\n    feMergeNode: SVGFEMergeNodeElement = Field(...)\n    feMorphology: SVGFEMorphologyElement = Field(...)\n    feOffset: SVGFEOffsetElement = Field(...)\n    fePointLight: SVGFEPointLightElement = Field(...)\n    feSpecularLighting: SVGFESpecularLightingElement = Field(...)\n    feSpotLight: SVGFESpotLightElement = Field(...)\n    feTile: SVGFETileElement = Field(...)\n    feTurbulence: SVGFETurbulenceElement = Field(...)\n    filter: SVGFilterElement = Field(...)\n    foreignObject: SVGForeignObjectElement = Field(...)\n    g: SVGGElement = Field(...)\n    image: SVGImageElement = Field(...)\n    line: SVGLineElement = Field(...)\n    linearGradient: SVGLinearGradientElement = Field(...)\n    marker: SVGMarkerElement = Field(...)\n    mask: SVGMaskElement = Field(...)\n    metadata: SVGMetadataElement = Field(...)\n    mpath: SVGMPathElement = Field(...)\n    path: SVGPathElement = Field(...)\n    pattern: SVGPatternElement = Field(...)\n    polygon: SVGPolygonElement = Field(...)\n    polyline: SVGPolylineElement = Field(...)\n    radialGradient: SVGRadialGradientElement = Field(...)\n    rect: SVGRectElement = Field(...)\n    script: SVGScriptElement = Field(...)\n    set: SVGSetElement = Field(...)\n    stop: SVGStopElement = Field(...)\n    style: SVGStyleElement = Field(...)\n    svg: SVGSVGElement = Field(...)\n    switch: SVGSwitchElement = Field(...)\n    symbol: SVGSymbolElement = Field(...)\n    text: SVGTextElement = Field(...)\n    textPath: SVGTextPathElement = Field(...)\n    title: SVGTitleElement = Field(...)\n    tspan: SVGTSpanElement = Field(...)\n    use: SVGUseElement = Field(...)\n    view: SVGViewElement = Field(...)\n\nclass MathMLElementTagNameMap(BaseModel):\n    annotation: MathMLElement = Field(...)\n    annotation-xml: MathMLElement = Field(...)\n    maction: MathMLElement = Field(...)\n    math: MathMLElement = Field(...)\n    merror: MathMLElement = Field(...)\n    mfrac: MathMLElement = Field(...)\n    mi: MathMLElement = Field(...)\n    mmultiscripts: MathMLElement = Field(...)\n    mn: MathMLElement = Field(...)\n    mo: MathMLElement = Field(...)\n    mover: MathMLElement = Field(...)\n    mpadded: MathMLElement = Field(...)\n    mphantom: MathMLElement = Field(...)\n    mprescripts: MathMLElement = Field(...)\n    mroot: MathMLElement = Field(...)\n    mrow: MathMLElement = Field(...)\n    ms: MathMLElement = Field(...)\n    mspace: MathMLElement = Field(...)\n    msqrt: MathMLElement = Field(...)\n    mstyle: MathMLElement = Field(...)\n    msub: MathMLElement = Field(...)\n    msubsup: MathMLElement = Field(...)\n    msup: MathMLElement = Field(...)\n    mtable: MathMLElement = Field(...)\n    mtd: MathMLElement = Field(...)\n    mtext: MathMLElement = Field(...)\n    mtr: MathMLElement = Field(...)\n    munder: MathMLElement = Field(...)\n    munderover: MathMLElement = Field(...)\n    semantics: MathMLElement = Field(...)\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> /////////////////////////// / Window Iterable APIs ///////////////////////////\nclass AudioParam(BaseModel):\n    pass\n\nclass AudioParamMap(ReadonlyMap):\n    pass\n\nclass BaseAudioContext(BaseModel):\n    pass\n\nclass CSSKeyframesRule(BaseModel):\n    pass\n\nclass CSSNumericArray(BaseModel):\n    pass\n\nclass CSSRuleList(BaseModel):\n    pass\n\nclass CSSStyleDeclaration(BaseModel):\n    pass\n\nclass CSSTransformValue(BaseModel):\n    pass\n\nclass CSSUnparsedValue(BaseModel):\n    pass\n\nclass Cache(BaseModel):\n    pass\n\nclass CanvasPath(BaseModel):\n    pass\n\nclass CanvasPathDrawingStyles(BaseModel):\n    pass\n\nclass CookieStoreManager(BaseModel):\n    pass\n\nclass CustomStateSet(Set):\n    pass\n\nclass DOMRectList(BaseModel):\n    pass\n\nclass DOMStringList(BaseModel):\n    pass\n\nclass DOMTokenList(BaseModel):\n    pass\n\nclass DataTransferItemList(BaseModel):\n    pass\n\nclass EventCounts(ReadonlyMap):\n    pass\n\nclass FileList(BaseModel):\n    pass\n\nclass FontFaceSet(Set):\n    pass\n\nclass FormDataIterator(IteratorObject):\n    pass\n\nclass FormData(BaseModel):\n    pass\n\nclass HTMLAllCollection(BaseModel):\n    pass\n\nclass HTMLCollectionBase(BaseModel):\n    pass\n\nclass HTMLCollectionOf(BaseModel):\n    pass\n\nclass HTMLFormElement(BaseModel):\n    pass\n\nclass HTMLSelectElement(BaseModel):\n    pass\n\nclass HeadersIterator(IteratorObject):\n    pass\n\nclass Headers(BaseModel):\n    pass\n\nclass Highlight(Set):\n    pass\n\nclass HighlightRegistry(Map):\n    pass\n\nclass IDBDatabase(BaseModel):\n    pass\n\nclass IDBObjectStore(BaseModel):\n    pass\n\nclass ImageTrackList(BaseModel):\n    pass\n\nclass MIDIInputMap(ReadonlyMap):\n    pass\n\nclass MIDIOutput(BaseModel):\n    pass\n\nclass MIDIOutputMap(ReadonlyMap):\n    pass\n\nclass MediaKeyStatusMapIterator(IteratorObject):\n    pass\n\nclass MediaKeyStatusMap(BaseModel):\n    pass\n\nclass MediaList(BaseModel):\n    pass\n\nclass MessageEvent(BaseModel):\n    pass\n\nclass MimeTypeArray(BaseModel):\n    pass\n\nclass NamedNodeMap(BaseModel):\n    pass\n\nclass Navigator(BaseModel):\n    pass\n\nclass NodeList(BaseModel):\n    pass\n\nclass NodeListOf(BaseModel):\n    pass\n\nclass Plugin(BaseModel):\n    pass\n\nclass PluginArray(BaseModel):\n    pass\n\nclass RTCRtpTransceiver(BaseModel):\n    pass\n\nclass RTCStatsReport(ReadonlyMap):\n    pass\n\nclass SVGLengthList(BaseModel):\n    pass\n\nclass SVGNumberList(BaseModel):\n    pass\n\nclass SVGPointList(BaseModel):\n    pass\n\nclass SVGStringList(BaseModel):\n    pass\n\nclass SVGTransformList(BaseModel):\n    pass\n\nclass SourceBufferList(BaseModel):\n    pass\n\nclass SpeechRecognitionResult(BaseModel):\n    pass\n\nclass SpeechRecognitionResultList(BaseModel):\n    pass\n\nclass StylePropertyMapReadOnlyIterator(IteratorObject):\n    pass\n\nclass StylePropertyMapReadOnly(BaseModel):\n    pass\n\nclass StyleSheetList(BaseModel):\n    pass\n\nclass SubtleCrypto(BaseModel):\n    pass\n\nclass TextTrackCueList(BaseModel):\n    pass\n\nclass TextTrackList(BaseModel):\n    pass\n\nclass TouchList(BaseModel):\n    pass\n\nclass URLSearchParamsIterator(IteratorObject):\n    pass\n\nclass URLSearchParams(BaseModel):\n    pass\n\nclass ViewTransitionTypeSet(Set):\n    pass\n\nclass WEBGL_draw_buffers(BaseModel):\n    pass\n\nclass WEBGL_multi_draw(BaseModel):\n    pass\n\nclass WebGL2RenderingContextBase(BaseModel):\n    pass\n\nclass WebGL2RenderingContextOverloads(BaseModel):\n    pass\n\nclass WebGLRenderingContextBase(BaseModel):\n    pass\n\nclass WebGLRenderingContextOverloads(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> /////////////////////////// / Window Async Iterable APIs ///////////////////////////\nclass FileSystemDirectoryHandleAsyncIterator(AsyncIteratorObject):\n    pass\n\nclass FileSystemDirectoryHandle(BaseModel):\n    pass\n\nclass ReadableStreamAsyncIterator(AsyncIteratorObject):\n    pass\n\nclass ReadableStream(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> /////////////////////////// / Windows Script Host APIS ///////////////////////////\nclass ActiveXObject(BaseModel):\n    pass\n\nclass ITextWriter(BaseModel):\n    pass\n\nclass TextStreamBase(BaseModel):\n    # The column number of the current character position in an input stream.\n    Column: float = Field(..., description='The column number of the current character position in an input stream.')\n    # The current line number in an input stream.\n    Line: float = Field(..., description='The current line number in an input stream.')\n\nclass TextStreamWriter(TextStreamBase):\n    pass\n\nclass TextStreamReader(TextStreamBase):\n    # Indicates whether the stream pointer position is at the end of a line.\n    AtEndOfLine: bool = Field(..., description='Indicates whether the stream pointer position is at the end of a line.')\n    # Indicates whether the stream pointer position is at the end of a stream.\n    AtEndOfStream: bool = Field(..., description='Indicates whether the stream pointer position is at the end of a stream.')\n\n# Allows enumerating over a COM collection, which may not have indexed item access.\nclass Enumerator(BaseModel):\n    pass\n\nclass EnumeratorConstructor(BaseModel):\n    pass\n\n# Enables reading from a COM safe array, which might have an alternate lower bound, or multiple dimensions.\nclass VBArray(BaseModel):\n    pass\n\nclass VBArrayConstructor(BaseModel):\n    pass\n\nclass DateConstructor(BaseModel):\n    pass\n\nclass Date(BaseModel):\n    getVarDate: () => VarDate = Field(...)\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/>\nclass Array(BaseModel):\n    pass\n\nclass ArrayConstructor(BaseModel):\n    pass\n\nclass DateConstructor(BaseModel):\n    pass\n\nclass Function(BaseModel):\n    # Returns the name of the function. Function names are read-only and can not be changed.\n    name: str = Field(..., description='Returns the name of the function. Function names are read-only and can not be changed.')\n\nclass Math(BaseModel):\n    pass\n\nclass NumberConstructor(BaseModel):\n    # The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1
that is representable as a Number value, which is approximately:
2.2204460492503130808472633361816 x 10‍−‍16.\n    EPSILON: float = Field(..., description='The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1
that is representable as a Number value, which is approximately:
2.2204460492503130808472633361816 x 10‍−‍16.')\n    # The value of the largest integer n such that n and n + 1 are both exactly representable as
a Number value.
The value of Number.MAX_SAFE_INTEGER is 9007199254740991 2^53 − 1.\n    MAX_SAFE_INTEGER: float = Field(..., description='The value of the largest integer n such that n and n + 1 are both exactly representable as
a Number value.
The value of Number.MAX_SAFE_INTEGER is 9007199254740991 2^53 − 1.')\n    # The value of the smallest integer n such that n and n − 1 are both exactly representable as
a Number value.
The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).\n    MIN_SAFE_INTEGER: float = Field(..., description='The value of the smallest integer n such that n and n − 1 are both exactly representable as
a Number value.
The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).')\n\nclass ObjectConstructor(BaseModel):\n    pass\n\nclass ReadonlyArray(BaseModel):\n    pass\n\nclass RegExp(BaseModel):\n    # Returns a string indicating the flags of the regular expression in question. This field is read-only.
The characters in this string are sequenced and concatenated in the following order:
   - "g" for global
   - "i" for ignoreCase
   - "m" for multiline
   - "u" for unicode
   - "y" for sticky
If no flags are set, the value is the empty string.\n    flags: str = Field(..., description='Returns a string indicating the flags of the regular expression in question. This field is read-only.
The characters in this string are sequenced and concatenated in the following order:
   - "g" for global
   - "i" for ignoreCase
   - "m" for multiline
   - "u" for unicode
   - "y" for sticky
If no flags are set, the value is the empty string.')\n    # Returns a Boolean value indicating the state of the sticky flag (y) used with a regular
expression. Default is false. Read-only.\n    sticky: bool = Field(..., description='Returns a Boolean value indicating the state of the sticky flag (y) used with a regular
expression. Default is false. Read-only.')\n    # Returns a Boolean value indicating the state of the Unicode flag (u) used with a regular
expression. Default is false. Read-only.\n    unicode: bool = Field(..., description='Returns a Boolean value indicating the state of the Unicode flag (u) used with a regular
expression. Default is false. Read-only.')\n\nclass RegExpConstructor(BaseModel):\n    pass\n\nclass String(BaseModel):\n    pass\n\nclass StringConstructor(BaseModel):\n    pass\n\nclass Int8Array(BaseModel):\n    pass\n\nclass Uint8Array(BaseModel):\n    pass\n\nclass Uint8ClampedArray(BaseModel):\n    pass\n\nclass Int16Array(BaseModel):\n    pass\n\nclass Uint16Array(BaseModel):\n    pass\n\nclass Int32Array(BaseModel):\n    pass\n\nclass Uint32Array(BaseModel):\n    pass\n\nclass Float32Array(BaseModel):\n    pass\n\nclass Float64Array(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/>\nclass Map(BaseModel):\n    # @returns the number of elements in the Map.\n    size: float = Field(..., description='@returns the number of elements in the Map.')\n\nclass MapConstructor(BaseModel):\n    prototype: Map<any, any> = Field(...)\n\nclass ReadonlyMap(BaseModel):\n    size: float = Field(...)\n\nclass WeakMap(BaseModel):\n    pass\n\nclass WeakMapConstructor(BaseModel):\n    prototype: WeakMap<WeakKey, any> = Field(...)\n\nclass Set(BaseModel):\n    # @returns the number of (unique) elements in Set.\n    size: float = Field(..., description='@returns the number of (unique) elements in Set.')\n\nclass SetConstructor(BaseModel):\n    prototype: Set<any> = Field(...)\n\nclass ReadonlySet(BaseModel):\n    size: float = Field(...)\n\nclass WeakSet(BaseModel):\n    pass\n\nclass WeakSetConstructor(BaseModel):\n    prototype: WeakSet<WeakKey> = Field(...)\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> / <reference lib="es2015.iterable" />\nclass Generator(IteratorObject):\n    pass\n\nclass GeneratorFunction(BaseModel):\n    # The length of the arguments.\n    length: float = Field(..., description='The length of the arguments.')\n    # Returns the name of the function.\n    name: str = Field(..., description='Returns the name of the function.')\n    # A reference to the prototype.\n    prototype: Generator = Field(..., description='A reference to the prototype.')\n\nclass GeneratorFunctionConstructor(BaseModel):\n    # The length of the arguments.\n    length: float = Field(..., description='The length of the arguments.')\n    # Returns the name of the function.\n    name: str = Field(..., description='Returns the name of the function.')\n    # A reference to the prototype.\n    prototype: GeneratorFunction = Field(..., description='A reference to the prototype.')\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> / <reference lib="es2015.symbol" />\nclass SymbolConstructor(BaseModel):\n    # A method that returns the default iterator for an object. Called by the semantics of the
for-of statement.\n    iterator: unique symbol = Field(..., description='A method that returns the default iterator for an object. Called by the semantics of the
for-of statement.')\n\nclass IteratorYieldResult(BaseModel):\n    done: Optional[false] = None\n    value: TYield = Field(...)\n\nclass IteratorReturnResult(BaseModel):\n    done: true = Field(...)\n    value: TReturn = Field(...)\n\nclass Iterator(BaseModel):\n    pass\n\nclass Iterable(BaseModel):\n    pass\n\n# Describes a user-defined {@link Iterator} that is also iterable.\nclass IterableIterator(Iterator):\n    pass\n\n# Describes an {@link Iterator} produced by the runtime that inherits from the intrinsic `Iterator.prototype`.\nclass IteratorObject(Iterator):\n    pass\n\nclass ArrayIterator(IteratorObject):\n    pass\n\nclass Array(BaseModel):\n    pass\n\nclass ArrayConstructor(BaseModel):\n    pass\n\nclass ReadonlyArray(BaseModel):\n    pass\n\nclass IArguments(BaseModel):\n    pass\n\nclass MapIterator(IteratorObject):\n    pass\n\nclass Map(BaseModel):\n    pass\n\nclass ReadonlyMap(BaseModel):\n    pass\n\nclass MapConstructor(BaseModel):\n    pass\n\nclass WeakMap(BaseModel):\n    pass\n\nclass WeakMapConstructor(BaseModel):\n    pass\n\nclass SetIterator(IteratorObject):\n    pass\n\nclass Set(BaseModel):\n    pass\n\nclass ReadonlySet(BaseModel):\n    pass\n\nclass SetConstructor(BaseModel):\n    pass\n\nclass WeakSet(BaseModel):\n    pass\n\nclass WeakSetConstructor(BaseModel):\n    pass\n\nclass Promise(BaseModel):\n    pass\n\nclass PromiseConstructor(BaseModel):\n    pass\n\nclass StringIterator(IteratorObject):\n    pass\n\nclass String(BaseModel):\n    pass\n\nclass Int8Array(BaseModel):\n    pass\n\nclass Int8ArrayConstructor(BaseModel):\n    pass\n\nclass Uint8Array(BaseModel):\n    pass\n\nclass Uint8ArrayConstructor(BaseModel):\n    pass\n\nclass Uint8ClampedArray(BaseModel):\n    pass\n\nclass Uint8ClampedArrayConstructor(BaseModel):\n    pass\n\nclass Int16Array(BaseModel):\n    pass\n\nclass Int16ArrayConstructor(BaseModel):\n    pass\n\nclass Uint16Array(BaseModel):\n    pass\n\nclass Uint16ArrayConstructor(BaseModel):\n    pass\n\nclass Int32Array(BaseModel):\n    pass\n\nclass Int32ArrayConstructor(BaseModel):\n    pass\n\nclass Uint32Array(BaseModel):\n    pass\n\nclass Uint32ArrayConstructor(BaseModel):\n    pass\n\nclass Float32Array(BaseModel):\n    pass\n\nclass Float32ArrayConstructor(BaseModel):\n    pass\n\nclass Float64Array(BaseModel):\n    pass\n\nclass Float64ArrayConstructor(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/>\nclass PromiseConstructor(BaseModel):\n    # A reference to the prototype.\n    prototype: Promise<any> = Field(..., description='A reference to the prototype.')\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/>\nclass ProxyHandler(BaseModel):\n    pass\n\nclass ProxyConstructor(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/>\nclass SymbolConstructor(BaseModel):\n    # A reference to the prototype.\n    prototype: Symbol = Field(..., description='A reference to the prototype.')\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> / <reference lib="es2015.symbol" />\nclass SymbolConstructor(BaseModel):\n    # A method that determines if a constructor object recognizes an object as one of the
constructor’s instances. Called by the semantics of the instanceof operator.\n    hasInstance: unique symbol = Field(..., description='A method that determines if a constructor object recognizes an object as one of the
constructor’s instances. Called by the semantics of the instanceof operator.')\n    # A Boolean value that if true indicates that an object should flatten to its array elements
by Array.prototype.concat.\n    isConcatSpreadable: unique symbol = Field(..., description='A Boolean value that if true indicates that an object should flatten to its array elements
by Array.prototype.concat.')\n    # A regular expression method that matches the regular expression against a string. Called
by the String.prototype.match method.\n    match: unique symbol = Field(..., description='A regular expression method that matches the regular expression against a string. Called
by the String.prototype.match method.')\n    # A regular expression method that replaces matched substrings of a string. Called by the
String.prototype.replace method.\n    replace: unique symbol = Field(..., description='A regular expression method that replaces matched substrings of a string. Called by the
String.prototype.replace method.')\n    # A regular expression method that returns the index within a string that matches the
regular expression. Called by the String.prototype.search method.\n    search: unique symbol = Field(..., description='A regular expression method that returns the index within a string that matches the
regular expression. Called by the String.prototype.search method.')\n    # A function valued property that is the constructor function that is used to create
derived objects.\n    species: unique symbol = Field(..., description='A function valued property that is the constructor function that is used to create
derived objects.')\n    # A regular expression method that splits a string at the indices that match the regular
expression. Called by the String.prototype.split method.\n    split: unique symbol = Field(..., description='A regular expression method that splits a string at the indices that match the regular
expression. Called by the String.prototype.split method.')\n    # A method that converts an object to a corresponding primitive value.
Called by the ToPrimitive abstract operation.\n    toPrimitive: unique symbol = Field(..., description='A method that converts an object to a corresponding primitive value.
Called by the ToPrimitive abstract operation.')\n    # A String value that is used in the creation of the default string description of an object.
Called by the built-in method Object.prototype.toString.\n    toStringTag: unique symbol = Field(..., description='A String value that is used in the creation of the default string description of an object.
Called by the built-in method Object.prototype.toString.')\n    # An Object whose truthy properties are properties that are excluded from the 'with'
environment bindings of the associated objects.\n    unscopables: unique symbol = Field(..., description='An Object whose truthy properties are properties that are excluded from the \'with\'
environment bindings of the associated objects.')\n\nclass Symbol(BaseModel):\n    [Symbol.toStringTag]: str = Field(...)\n\nclass Array(BaseModel):\n    # Is an object whose properties have the value 'true'
when they will be absent when used in a 'with' statement.\n    [Symbol.unscopables]: Dict[str, Any] = Field(..., description='Is an object whose properties have the value \'true\'
when they will be absent when used in a \'with\' statement.')\n\nclass ReadonlyArray(BaseModel):\n    # Is an object whose properties have the value 'true'
when they will be absent when used in a 'with' statement.\n    [Symbol.unscopables]: Dict[str, Any] = Field(..., description='Is an object whose properties have the value \'true\'
when they will be absent when used in a \'with\' statement.')\n\nclass Date(BaseModel):\n    pass\n\nclass Map(BaseModel):\n    [Symbol.toStringTag]: str = Field(...)\n\nclass WeakMap(BaseModel):\n    [Symbol.toStringTag]: str = Field(...)\n\nclass Set(BaseModel):\n    [Symbol.toStringTag]: str = Field(...)\n\nclass WeakSet(BaseModel):\n    [Symbol.toStringTag]: str = Field(...)\n\nclass JSON(BaseModel):\n    [Symbol.toStringTag]: str = Field(...)\n\nclass Function(BaseModel):\n    pass\n\nclass GeneratorFunction(BaseModel):\n    [Symbol.toStringTag]: str = Field(...)\n\nclass Math(BaseModel):\n    [Symbol.toStringTag]: str = Field(...)\n\nclass Promise(BaseModel):\n    [Symbol.toStringTag]: str = Field(...)\n\nclass PromiseConstructor(BaseModel):\n    [Symbol.species]: PromiseConstructor = Field(...)\n\nclass RegExp(BaseModel):\n    pass\n\nclass RegExpConstructor(BaseModel):\n    [Symbol.species]: RegExpConstructor = Field(...)\n\nclass String(BaseModel):\n    pass\n\nclass ArrayBuffer(BaseModel):\n    [Symbol.toStringTag]: "ArrayBuffer" = Field(...)\n\nclass DataView(BaseModel):\n    [Symbol.toStringTag]: str = Field(...)\n\nclass Int8Array(BaseModel):\n    [Symbol.toStringTag]: "Int8Array" = Field(...)\n\nclass Uint8Array(BaseModel):\n    [Symbol.toStringTag]: "Uint8Array" = Field(...)\n\nclass Uint8ClampedArray(BaseModel):\n    [Symbol.toStringTag]: "Uint8ClampedArray" = Field(...)\n\nclass Int16Array(BaseModel):\n    [Symbol.toStringTag]: "Int16Array" = Field(...)\n\nclass Uint16Array(BaseModel):\n    [Symbol.toStringTag]: "Uint16Array" = Field(...)\n\nclass Int32Array(BaseModel):\n    [Symbol.toStringTag]: "Int32Array" = Field(...)\n\nclass Uint32Array(BaseModel):\n    [Symbol.toStringTag]: "Uint32Array" = Field(...)\n\nclass Float32Array(BaseModel):\n    [Symbol.toStringTag]: "Float32Array" = Field(...)\n\nclass Float64Array(BaseModel):\n    [Symbol.toStringTag]: "Float64Array" = Field(...)\n\nclass ArrayConstructor(BaseModel):\n    [Symbol.species]: ArrayConstructor = Field(...)\n\nclass MapConstructor(BaseModel):\n    [Symbol.species]: MapConstructor = Field(...)\n\nclass SetConstructor(BaseModel):\n    [Symbol.species]: SetConstructor = Field(...)\n\nclass ArrayBufferConstructor(BaseModel):\n    [Symbol.species]: ArrayBufferConstructor = Field(...)\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/>\nclass Array(BaseModel):\n    pass\n\nclass ReadonlyArray(BaseModel):\n    pass\n\nclass Int8Array(BaseModel):\n    pass\n\nclass Uint8Array(BaseModel):\n    pass\n\nclass Uint8ClampedArray(BaseModel):\n    pass\n\nclass Int16Array(BaseModel):\n    pass\n\nclass Uint16Array(BaseModel):\n    pass\n\nclass Int32Array(BaseModel):\n    pass\n\nclass Uint32Array(BaseModel):\n    pass\n\nclass Float32Array(BaseModel):\n    pass\n\nclass Float64Array(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/>\nclass ArrayBufferConstructor(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/>\nclass DateConstructor(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/>\nclass ObjectConstructor(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> / <reference lib="es2015.symbol" /> / <reference lib="es2015.symbol.wellknown" />\nclass SharedArrayBuffer(BaseModel):\n    # Read-only. The length of the ArrayBuffer (in bytes).\n    byteLength: float = Field(..., description='Read-only. The length of the ArrayBuffer (in bytes).')\n    [Symbol.toStringTag]: "SharedArrayBuffer" = Field(...)\n\nclass SharedArrayBufferConstructor(BaseModel):\n    prototype: SharedArrayBuffer = Field(...)\n    [Symbol.species]: SharedArrayBufferConstructor = Field(...)\n\nclass ArrayBufferTypes(BaseModel):\n    SharedArrayBuffer: SharedArrayBuffer = Field(...)\n\nclass Atomics(BaseModel):\n    [Symbol.toStringTag]: "Atomics" = Field(...)\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/>\nclass String(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/>\nclass Int8ArrayConstructor(BaseModel):\n    pass\n\nclass Uint8ArrayConstructor(BaseModel):\n    pass\n\nclass Uint8ClampedArrayConstructor(BaseModel):\n    pass\n\nclass Int16ArrayConstructor(BaseModel):\n    pass\n\nclass Uint16ArrayConstructor(BaseModel):\n    pass\n\nclass Int32ArrayConstructor(BaseModel):\n    pass\n\nclass Uint32ArrayConstructor(BaseModel):\n    pass\n\nclass Float32ArrayConstructor(BaseModel):\n    pass\n\nclass Float64ArrayConstructor(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> / <reference lib="es2018.asynciterable" />\nclass AsyncGenerator(AsyncIteratorObject):\n    pass\n\nclass AsyncGeneratorFunction(BaseModel):\n    # The length of the arguments.\n    length: float = Field(..., description='The length of the arguments.')\n    # Returns the name of the function.\n    name: str = Field(..., description='Returns the name of the function.')\n    # A reference to the prototype.\n    prototype: AsyncGenerator = Field(..., description='A reference to the prototype.')\n\nclass AsyncGeneratorFunctionConstructor(BaseModel):\n    # The length of the arguments.\n    length: float = Field(..., description='The length of the arguments.')\n    # Returns the name of the function.\n    name: str = Field(..., description='Returns the name of the function.')\n    # A reference to the prototype.\n    prototype: AsyncGeneratorFunction = Field(..., description='A reference to the prototype.')\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> / <reference lib="es2015.symbol" /> / <reference lib="es2015.iterable" />\nclass SymbolConstructor(BaseModel):\n    # A method that returns the default async iterator for an object. Called by the semantics of
the for-await-of statement.\n    asyncIterator: unique symbol = Field(..., description='A method that returns the default async iterator for an object. Called by the semantics of
the for-await-of statement.')\n\nclass AsyncIterator(BaseModel):\n    pass\n\nclass AsyncIterable(BaseModel):\n    pass\n\n# Describes a user-defined {@link AsyncIterator} that is also async iterable.\nclass AsyncIterableIterator(AsyncIterator):\n    pass\n\n# Describes an {@link AsyncIterator} produced by the runtime that inherits from the intrinsic `AsyncIterator.prototype`.\nclass AsyncIteratorObject(AsyncIterator):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> Represents the completion of an asynchronous operation\nclass Promise(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/>\nclass RegExpMatchArray(BaseModel):\n    groups: Optional[Dict[str, Any]] = None\n\nclass RegExpExecArray(BaseModel):\n    groups: Optional[Dict[str, Any]] = None\n\nclass RegExp(BaseModel):\n    # Returns a Boolean value indicating the state of the dotAll flag (s) used with a regular expression.
Default is false. Read-only.\n    dotAll: bool = Field(..., description='Returns a Boolean value indicating the state of the dotAll flag (s) used with a regular expression.
Default is false. Read-only.')\n\nclass ReadonlyArray(BaseModel):\n    pass\n\nclass Array(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> / <reference lib="es2015.iterable" />\nclass ObjectConstructor(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/>\nclass String(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/>\nclass Symbol(BaseModel):\n    # Expose the [[Description]] internal slot of a symbol directly.\n    description: Union[str, undefined] = Field(..., description='Expose the [[Description]] internal slot of a symbol directly.')\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> / <reference lib="es2020.intl" />\nclass BigIntToLocaleStringOptions(BaseModel):\n    # The locale matching algorithm to use.The default is "best fit". For information about this option, see the {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation Intl page}.\n    localeMatcher: Optional[str] = None = Field(..., description='The locale matching algorithm to use.The default is "best fit". For information about this option, see the {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation Intl page}.')\n    # The formatting style to use , the default is "decimal".\n    style: Optional[str] = None = Field(..., description='The formatting style to use , the default is "decimal".')\n    numberingSystem: Optional[str] = None\n    # The unit to use in unit formatting, Possible values are core unit identifiers, defined in UTS #35, Part 2, Section 6. A subset of units from the full list was selected for use in ECMAScript. Pairs of simple units can be concatenated with "-per-" to make a compound unit. There is no default value; if the style is "unit", the unit property must be provided.\n    unit: Optional[str] = None = Field(..., description='The unit to use in unit formatting, Possible values are core unit identifiers, defined in UTS #35, Part 2, Section 6. A subset of units from the full list was selected for use in ECMAScript. Pairs of simple units can be concatenated with "-per-" to make a compound unit. There is no default value; if the style is "unit", the unit property must be provided.')\n    # The unit formatting style to use in unit formatting, the defaults is "short".\n    unitDisplay: Optional[str] = None = Field(..., description='The unit formatting style to use in unit formatting, the defaults is "short".')\n    # The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB — see the Current currency & funds code list. There is no default value; if the style is "currency", the currency property must be provided. It is only used when [[Style]] has the value "currency".\n    currency: Optional[str] = None = Field(..., description='The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB — see the Current currency & funds code list. There is no default value; if the style is "currency", the currency property must be provided. It is only used when [[Style]] has the value "currency".')\n    # How to display the currency in currency formatting. It is only used when [[Style]] has the value "currency". The default is "symbol".
"symbol" to use a localized currency symbol such as €,
"code" to use the ISO currency code,
"name" to use a localized currency name such as "dollar"\n    currencyDisplay: Optional[str] = None = Field(..., description='How to display the currency in currency formatting. It is only used when [[Style]] has the value "currency". The default is "symbol".
"symbol" to use a localized currency symbol such as €,
"code" to use the ISO currency code,
"name" to use a localized currency name such as "dollar"')\n    # Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. The default is true.\n    useGrouping: Optional[bool] = None = Field(..., description='Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. The default is true.')\n    # The minimum number of integer digits to use. Possible values are from 1 to 21; the default is 1.\n    minimumIntegerDigits: Optional[Union[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]] = None = Field(..., description='The minimum number of integer digits to use. Possible values are from 1 to 21; the default is 1.')\n    # The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the {@link http://www.currency-iso.org/en/home/tables/table-a1.html ISO 4217 currency codes list} (2 if the list doesn't provide that information).\n    minimumFractionDigits: Optional[Union[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]] = None = Field(..., description='The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the {@link http://www.currency-iso.org/en/home/tables/table-a1.html ISO 4217 currency codes list} (2 if the list doesn\'t provide that information).')\n    # The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the {@link http://www.currency-iso.org/en/home/tables/table-a1.html ISO 4217 currency codes list} (2 if the list doesn't provide that information); the default for percent formatting is the larger of minimumFractionDigits and 0.\n    maximumFractionDigits: Optional[Union[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]] = None = Field(..., description='The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the {@link http://www.currency-iso.org/en/home/tables/table-a1.html ISO 4217 currency codes list} (2 if the list doesn\'t provide that information); the default for percent formatting is the larger of minimumFractionDigits and 0.')\n    # The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.\n    minimumSignificantDigits: Optional[Union[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]] = None = Field(..., description='The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.')\n    # The maximum number of significant digits to use. Possible values are from 1 to 21; the default is 21.\n    maximumSignificantDigits: Optional[Union[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]] = None = Field(..., description='The maximum number of significant digits to use. Possible values are from 1 to 21; the default is 21.')\n    # The formatting that should be displayed for the number, the defaults is "standard"
    "standard" plain number formatting
    "scientific" return the order-of-magnitude for formatted number.
    "engineering" return the exponent of ten when divisible by three
    "compact" string representing exponent, defaults is using the "short" form\n    notation: Optional[str] = None = Field(..., description='The formatting that should be displayed for the number, the defaults is "standard"
    "standard" plain number formatting
    "scientific" return the order-of-magnitude for formatted number.
    "engineering" return the exponent of ten when divisible by three
    "compact" string representing exponent, defaults is using the "short" form')\n    # used only when notation is "compact"\n    compactDisplay: Optional[str] = None = Field(..., description='used only when notation is "compact"')\n\nclass BigInt(BaseModel):\n    [Symbol.toStringTag]: "BigInt" = Field(...)\n\nclass BigIntConstructor(BaseModel):\n    prototype: BigInt = Field(...)\n\n# A typed array of 64-bit signed integer values. The contents are initialized to 0. If the
requested number of bytes could not be allocated, an exception is raised.\nclass BigInt64Array(BaseModel):\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n    # The ArrayBuffer instance referenced by the array.\n    buffer: TArrayBuffer = Field(..., description='The ArrayBuffer instance referenced by the array.')\n    # The length in bytes of the array.\n    byteLength: float = Field(..., description='The length in bytes of the array.')\n    # The offset in bytes of the array.\n    byteOffset: float = Field(..., description='The offset in bytes of the array.')\n    # The length of the array.\n    length: float = Field(..., description='The length of the array.')\n    [Symbol.toStringTag]: "BigInt64Array" = Field(...)\n\nclass BigInt64ArrayConstructor(BaseModel):\n    prototype: BigInt64Array<ArrayBufferLike> = Field(...)\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n\n# A typed array of 64-bit unsigned integer values. The contents are initialized to 0. If the
requested number of bytes could not be allocated, an exception is raised.\nclass BigUint64Array(BaseModel):\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n    # The ArrayBuffer instance referenced by the array.\n    buffer: TArrayBuffer = Field(..., description='The ArrayBuffer instance referenced by the array.')\n    # The length in bytes of the array.\n    byteLength: float = Field(..., description='The length in bytes of the array.')\n    # The offset in bytes of the array.\n    byteOffset: float = Field(..., description='The offset in bytes of the array.')\n    # The length of the array.\n    length: float = Field(..., description='The length of the array.')\n    [Symbol.toStringTag]: "BigUint64Array" = Field(...)\n\nclass BigUint64ArrayConstructor(BaseModel):\n    prototype: BigUint64Array<ArrayBufferLike> = Field(...)\n    # The size in bytes of each element in the array.\n    BYTES_PER_ELEMENT: float = Field(..., description='The size in bytes of each element in the array.')\n\nclass DataView(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> / <reference lib="es2020.intl" />\nclass Date(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/>\nclass PromiseFulfilledResult(BaseModel):\n    status: "fulfilled" = Field(...)\n    value: T = Field(...)\n\nclass PromiseRejectedResult(BaseModel):\n    status: "rejected" = Field(...)\n    reason: any = Field(...)\n\nclass PromiseConstructor(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> / <reference lib="es2020.bigint" />\nclass Atomics(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> / <reference lib="es2015.iterable" /> / <reference lib="es2020.intl" /> / <reference lib="es2020.symbol.wellknown" />\nclass String(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> / <reference lib="es2015.iterable" /> / <reference lib="es2015.symbol" />\nclass SymbolConstructor(BaseModel):\n    # A regular expression method that matches the regular expression against a string. Called
by the String.prototype.matchAll method.\n    matchAll: unique symbol = Field(..., description='A regular expression method that matches the regular expression against a string. Called
by the String.prototype.matchAll method.')\n\nclass RegExpStringIterator(IteratorObject):\n    pass\n\nclass RegExp(BaseModel):\n    pass\n\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> / <reference lib="es2020.intl" />\nclass Number(BaseModel):\n    pass\n\n# Context provided to a class decorator.
@template Class The type of the decorated class associated with this context.\nclass ClassDecoratorContext(BaseModel):\n    # The kind of element that was decorated.\n    kind: "class" = Field(..., description='The kind of element that was decorated.')\n    # The name of the decorated class.\n    name: Union[str, undefined] = Field(..., description='The name of the decorated class.')\n    metadata: DecoratorMetadata = Field(...)\n\n# Context provided to a class method decorator.
@template This The type on which the class element will be defined. For a static class element, this will be
the type of the constructor. For a non-static class element, this will be the type of the instance.
@template Value The type of the decorated class method.\nclass ClassMethodDecoratorContext(BaseModel):\n    # The kind of class element that was decorated.\n    kind: "method" = Field(..., description='The kind of class element that was decorated.')\n    # The name of the decorated class element.\n    name: Union[str, symbol] = Field(..., description='The name of the decorated class element.')\n    # A value indicating whether the class element is a static (`true`) or instance (`false`) element.\n    static: bool = Field(..., description='A value indicating whether the class element is a static (`true`) or instance (`false`) element.')\n    # A value indicating whether the class element has a private name.\n    private: bool = Field(..., description='A value indicating whether the class element has a private name.')\n    # An object that can be used to access the current value of the class element at runtime.\n    access: Dict[str, Any] = Field(..., description='An object that can be used to access the current value of the class element at runtime.')\n    metadata: DecoratorMetadata = Field(...)\n\n# Context provided to a class getter decorator.
@template This The type on which the class element will be defined. For a static class element, this will be
the type of the constructor. For a non-static class element, this will be the type of the instance.
@template Value The property type of the decorated class getter.\nclass ClassGetterDecoratorContext(BaseModel):\n    # The kind of class element that was decorated.\n    kind: "getter" = Field(..., description='The kind of class element that was decorated.')\n    # The name of the decorated class element.\n    name: Union[str, symbol] = Field(..., description='The name of the decorated class element.')\n    # A value indicating whether the class element is a static (`true`) or instance (`false`) element.\n    static: bool = Field(..., description='A value indicating whether the class element is a static (`true`) or instance (`false`) element.')\n    # A value indicating whether the class element has a private name.\n    private: bool = Field(..., description='A value indicating whether the class element has a private name.')\n    # An object that can be used to access the current value of the class element at runtime.\n    access: Dict[str, Any] = Field(..., description='An object that can be used to access the current value of the class element at runtime.')\n    metadata: DecoratorMetadata = Field(...)\n\n# Context provided to a class setter decorator.
@template This The type on which the class element will be defined. For a static class element, this will be
the type of the constructor. For a non-static class element, this will be the type of the instance.
@template Value The type of the decorated class setter.\nclass ClassSetterDecoratorContext(BaseModel):\n    # The kind of class element that was decorated.\n    kind: "setter" = Field(..., description='The kind of class element that was decorated.')\n    # The name of the decorated class element.\n    name: Union[str, symbol] = Field(..., description='The name of the decorated class element.')\n    # A value indicating whether the class element is a static (`true`) or instance (`false`) element.\n    static: bool = Field(..., description='A value indicating whether the class element is a static (`true`) or instance (`false`) element.')\n    # A value indicating whether the class element has a private name.\n    private: bool = Field(..., description='A value indicating whether the class element has a private name.')\n    # An object that can be used to access the current value of the class element at runtime.\n    access: Dict[str, Any] = Field(..., description='An object that can be used to access the current value of the class element at runtime.')\n    metadata: DecoratorMetadata = Field(...)\n\n# Context provided to a class `accessor` field decorator.
@template This The type on which the class element will be defined. For a static class element, this will be
the type of the constructor. For a non-static class element, this will be the type of the instance.
@template Value The type of decorated class field.\nclass ClassAccessorDecoratorContext(BaseModel):\n    # The kind of class element that was decorated.\n    kind: "accessor" = Field(..., description='The kind of class element that was decorated.')\n    # The name of the decorated class element.\n    name: Union[str, symbol] = Field(..., description='The name of the decorated class element.')\n    # A value indicating whether the class element is a static (`true`) or instance (`false`) element.\n    static: bool = Field(..., description='A value indicating whether the class element is a static (`true`) or instance (`false`) element.')\n    # A value indicating whether the class element has a private name.\n    private: bool = Field(..., description='A value indicating whether the class element has a private name.')\n    # An object that can be used to access the current value of the class element at runtime.\n    access: Dict[str, Any] = Field(..., description='An object that can be used to access the current value of the class element at runtime.')\n    metadata: DecoratorMetadata = Field(...)\n\n# Describes the target provided to class `accessor` field decorators.
@template This The `this` type to which the target applies.
@template Value The property type for the class `accessor` field.\nclass ClassAccessorDecoratorTarget(BaseModel):\n    pass\n\n# Describes the allowed return value from a class `accessor` field decorator.
@template This The `this` type to which the target applies.
@template Value The property type for the class `accessor` field.\nclass ClassAccessorDecoratorResult(BaseModel):\n    pass\n\n# Context provided to a class field decorator.
@template This The type on which the class element will be defined. For a static class element, this will be
the type of the constructor. For a non-static class element, this will be the type of the instance.
@template Value The type of the decorated class field.\nclass ClassFieldDecoratorContext(BaseModel):\n    # The kind of class element that was decorated.\n    kind: "field" = Field(..., description='The kind of class element that was decorated.')\n    # The name of the decorated class element.\n    name: Union[str, symbol] = Field(..., description='The name of the decorated class element.')\n    # A value indicating whether the class element is a static (`true`) or instance (`false`) element.\n    static: bool = Field(..., description='A value indicating whether the class element is a static (`true`) or instance (`false`) element.')\n    # A value indicating whether the class element has a private name.\n    private: bool = Field(..., description='A value indicating whether the class element has a private name.')\n    # An object that can be used to access the current value of the class element at runtime.\n    access: Dict[str, Any] = Field(..., description='An object that can be used to access the current value of the class element at runtime.')\n    metadata: DecoratorMetadata = Field(...)\n\nclass Reactive(BaseModel):\n    [SIGNAL]: ReactiveNode = Field(...)\n\nclass ReactiveLink(BaseModel):\n    producer: ReactiveNode = Field(...)\n    consumer: ReactiveNode = Field(...)\n    lastReadVersion: float = Field(...)\n    prevConsumer: Union[ReactiveLink, undefined] = Field(...)\n    nextConsumer: Union[ReactiveLink, undefined] = Field(...)\n    nextProducer: Union[ReactiveLink, undefined] = Field(...)\n\n# A producer and/or consumer which participates in the reactive graph.
Producer `ReactiveNode`s which are accessed when a consumer `ReactiveNode` is the
`activeConsumer` are tracked as dependencies of that consumer.
Certain consumers are also tracked as "live" consumers and create edges in the other direction,
from producer to consumer. These edges are used to propagate change notifications when a
producer's value is updated.
A `ReactiveNode` may be both a producer and consumer.\nclass ReactiveNode(BaseModel):\n    # Version of the value that this node produces.
This is incremented whenever a new value is produced by this node which is not equal to the
previous value (by whatever definition of equality is in use).\n    version: Version = Field(..., description='Version of the value that this node produces.
This is incremented whenever a new value is produced by this node which is not equal to the
previous value (by whatever definition of equality is in use).')\n    # Epoch at which this node is verified to be clean.
This allows skipping of some polling operations in the case where no signals have been set
since this node was last read.\n    lastCleanEpoch: Version = Field(..., description='Epoch at which this node is verified to be clean.
This allows skipping of some polling operations in the case where no signals have been set
since this node was last read.')\n    # Whether this node (in its consumer capacity) is dirty.
Only live consumers become dirty, when receiving a change notification from a dependency
producer.\n    dirty: bool = Field(..., description='Whether this node (in its consumer capacity) is dirty.
Only live consumers become dirty, when receiving a change notification from a dependency
producer.')\n    # Whether this node is currently rebuilding its producer list.\n    recomputing: bool = Field(..., description='Whether this node is currently rebuilding its producer list.')\n    # Producers which are dependencies of this consumer.\n    producers: Union[ReactiveLink, undefined] = Field(..., description='Producers which are dependencies of this consumer.')\n    # Points to the last linked list node in the `producers` linked list.
When this node is recomputing, this is used to track the producers that we have accessed so far.\n    producersTail: Union[ReactiveLink, undefined] = Field(..., description='Points to the last linked list node in the `producers` linked list.
When this node is recomputing, this is used to track the producers that we have accessed so far.')\n    # Linked list of consumers of this producer that are "live" (they require push notifications).
The length of this list is effectively our reference count for this node.\n    consumers: Union[ReactiveLink, undefined] = Field(..., description='Linked list of consumers of this producer that are "live" (they require push notifications).
The length of this list is effectively our reference count for this node.')\n    consumersTail: Union[ReactiveLink, undefined] = Field(...)\n    # Whether writes to signals are allowed when this consumer is the `activeConsumer`.
This is used to enforce guardrails such as preventing writes to writable signals in the
computation function of computed signals, which is supposed to be pure.\n    consumerAllowSignalWrites: bool = Field(..., description='Whether writes to signals are allowed when this consumer is the `activeConsumer`.
This is used to enforce guardrails such as preventing writes to writable signals in the
computation function of computed signals, which is supposed to be pure.')\n    consumerIsAlwaysLive: bool = Field(...)\n    # A debug name for the reactive node. Used in Angular DevTools to identify the node.\n    debugName: Optional[str] = None = Field(..., description='A debug name for the reactive node. Used in Angular DevTools to identify the node.')\n    # Kind of node. Example: 'signal', 'computed', 'input', 'effect'.
ReactiveNode has this as 'unknown' by default, but derived node types should override this to
make available the kind of signal that particular instance of a ReactiveNode represents.
Used in Angular DevTools to identify the kind of signal.\n    kind: str = Field(..., description='Kind of node. Example: \'signal\', \'computed\', \'input\', \'effect\'.
ReactiveNode has this as \'unknown\' by default, but derived node types should override this to
make available the kind of signal that particular instance of a ReactiveNode represents.
Used in Angular DevTools to identify the kind of signal.')\n\n# Records information about the action that should handle a given `Event`.\nclass ActionInfo(BaseModel):\n    name: str = Field(...)\n    element: Element = Field(...)\n\n# Records information for later handling of events. This type is
shared, and instances of it are passed, between the eventcontract
and the dispatcher jsbinary. Therefore, the fields of this type are
referenced by string literals rather than property literals
throughout the code.
'targetElement' is the element the action occurred on, 'actionElement'
is the element that has the jsaction handler.
A null 'actionElement' identifies an EventInfo instance that didn't match a
jsaction attribute.  This allows us to execute global event handlers with the
appropriate event type (including a11y clicks and custom events).
The declare portion of this interface creates a set of externs that make sure
renaming doesn't happen for EventInfo. This is important since EventInfo
is shared across multiple binaries.\nclass EventInfo(BaseModel):\n    eventType: str = Field(...)\n    event: Event = Field(...)\n    targetElement: Element = Field(...)\n    # The element that is the container for this Event.\n    eic: Element = Field(..., description='The element that is the container for this Event.')\n    timeStamp: float = Field(...)\n    # The action parsed from the JSAction element.\n    eia: Optional[ActionInfoInternal] = None = Field(..., description='The action parsed from the JSAction element.')\n    # Whether this `Event` is a replay event, meaning no dispatcher was
installed when this `Event` was originally dispatched.\n    eirp: Optional[bool] = None = Field(..., description='Whether this `Event` is a replay event, meaning no dispatcher was
installed when this `Event` was originally dispatched.')\n    # Whether this `Event` represents a `keydown` event that should be processed
as a `click`. Only used when a11y click events is on.\n    eiack: Optional[bool] = None = Field(..., description='Whether this `Event` represents a `keydown` event that should be processed
as a `click`. Only used when a11y click events is on.')\n    # Whether action resolution has already run on this `EventInfo`.\n    eir: Optional[bool] = None = Field(..., description='Whether action resolution has already run on this `EventInfo`.')\n\nclass EarlyJsactionDataContainer(BaseModel):\n    _ejsa: Optional[EarlyJsactionData] = None\n    _ejsas: Optional[Union[{
        [appId: string]: EarlyJsactionData, undefined;
    }]] = None\n\n# Defines the early jsaction data types.\nclass EarlyJsactionData(BaseModel):\n    # List used to keep track of the early JSAction event types.\n    et: List[List[str]] = Field(..., description='List used to keep track of the early JSAction event types.')\n    # List used to keep track of the early JSAction capture event types.\n    etc: List[List[str]] = Field(..., description='List used to keep track of the early JSAction capture event types.')\n    # Early JSAction handler for all events.\n    h: (event: Event) => void = Field(..., description='Early JSAction handler for all events.')\n    # Dispatcher handler. Initializes to populating `q`.\n    d: (eventInfo: EventInfo) => void = Field(..., description='Dispatcher handler. Initializes to populating `q`.')\n    # List used to push `EventInfo` objects if the dispatcher is not registered.\n    q: List[List[EventInfo]] = Field(..., description='List used to push `EventInfo` objects if the dispatcher is not registered.')\n    # Container for listening to events.\n    c: HTMLElement = Field(..., description='Container for listening to events.')\n\n# An `EventContractContainerManager` provides the common interface for managing
containers.\nclass EventContractContainerManager(BaseModel):\n    pass\n\n# @fileoverview Implements the local event handling contract. This
allows DOM objects in a container that enters into this contract to
define event handlers which are executed in a local context.
One EventContract instance can manage the contract for multiple
containers, which are added using the addContainer() method.
Events can be registered using the addEvent() method.
A Dispatcher is added using the registerDispatcher() method. Until there is
a dispatcher, events are queued. The idea is that the EventContract
class is inlined in the HTML of the top level page and instantiated
right after the start of <body>. The Dispatcher class is contained
in the external deferred js, and instantiated and registered with
EventContract when the external javascript in the page loads. The
external javascript will also register the jsaction handlers, which
then pick up the queued events at the time of registration.
Since this class is meant to be inlined in the main page HTML, the
size of the binary compiled from this file MUST be kept as small as
possible and thus its dependencies to a minimum. The API of an EventContract that is safe to call from any compilation unit.\nclass UnrenamedEventContract(BaseModel):\n    pass\n\n# A `Signal` with a value that can be mutated via a setter interface.
@publicApi 17.0\nclass WritableSignal(Signal):\n    [ɵWRITABLE_SIGNAL]: T = Field(...)\n\n# Options passed to the `signal` creation function.\nclass CreateSignalOptions(BaseModel):\n    # A comparison function which defines equality for signal values.\n    equal: Optional[ValueEqualityFn<T>] = None = Field(..., description='A comparison function which defines equality for signal values.')\n    # A debug name for the signal. Used in Angular DevTools to identify the signal.\n    debugName: Optional[str] = None = Field(..., description='A debug name for the signal. Used in Angular DevTools to identify the signal.')\n\n# Function that can be used to manually clean up a
programmatic {@link OutputRef#subscribe} subscription.
Note: Angular will automatically clean up subscriptions
when the directive/component of the output is destroyed.
@publicAPI\nclass OutputRefSubscription(BaseModel):\n    pass\n\n# A reference to an Angular output.
@publicAPI\nclass OutputRef(BaseModel):\n    pass\n\n# @description
Represents an abstract class `T`, if applied to a concrete class it would stop being
instantiable.
@publicApi\nclass AbstractType(Function):\n    prototype: T = Field(...)\n\nclass Type(Function):\n    pass\n\n# Configures the `Injector` to return a value for a token.
Base for `ValueProvider` decorator.
@publicApi\nclass ValueSansProvider(BaseModel):\n    # The value to inject.\n    useValue: any = Field(..., description='The value to inject.')\n\n# Configures the `Injector` to return a value for a token.
@see [Dependency Injection Guide](guide/di/dependency-injection.
@usageNotes
### Example
{@example core/di/ts/provider_spec.ts region='ValueProvider'}
### Multi-value example
{@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}
@publicApi\nclass ValueProvider(ValueSansProvider):\n    # An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.\n    provide: any = Field(..., description='An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.')\n    # When true, injector returns an array of instances. This is useful to allow multiple
providers spread across many files to provide configuration information to a common token.\n    multi: Optional[bool] = None = Field(..., description='When true, injector returns an array of instances. This is useful to allow multiple
providers spread across many files to provide configuration information to a common token.')\n\n# Configures the `Injector` to return an instance of `useClass` for a token.
Base for `StaticClassProvider` decorator.
@publicApi\nclass StaticClassSansProvider(BaseModel):\n    # An optional class to instantiate for the `token`. By default, the `provide`
class is instantiated.\n    useClass: Type<any> = Field(..., description='An optional class to instantiate for the `token`. By default, the `provide`
class is instantiated.')\n    # A list of `token`s to be resolved by the injector. The list of values is then
used as arguments to the `useClass` constructor.\n    deps: List[List[any]] = Field(..., description='A list of `token`s to be resolved by the injector. The list of values is then
used as arguments to the `useClass` constructor.')\n\n# Configures the `Injector` to return an instance of `useClass` for a token.
@see [Dependency Injection Guide](guide/di/dependency-injection.
@usageNotes
{@example core/di/ts/provider_spec.ts region='StaticClassProvider'}
Note that following two providers are not equal:
{@example core/di/ts/provider_spec.ts region='StaticClassProviderDifference'}
### Multi-value example
{@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}
@publicApi\nclass StaticClassProvider(StaticClassSansProvider):\n    # An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.\n    provide: any = Field(..., description='An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.')\n    # When true, injector returns an array of instances. This is useful to allow multiple
providers spread across many files to provide configuration information to a common token.\n    multi: Optional[bool] = None = Field(..., description='When true, injector returns an array of instances. This is useful to allow multiple
providers spread across many files to provide configuration information to a common token.')\n\n# Configures the `Injector` to return an instance of a token.
@see [Dependency Injection Guide](guide/di/dependency-injection.
@usageNotes
```ts
@Injectable(SomeModule, {deps: []})
class MyService {}
```
@publicApi\nclass ConstructorSansProvider(BaseModel):\n    # A list of `token`s to be resolved by the injector.\n    deps: Optional[List[List[any]]] = None = Field(..., description='A list of `token`s to be resolved by the injector.')\n\n# Configures the `Injector` to return an instance of a token.
@see [Dependency Injection Guide](guide/di/dependency-injection.
@usageNotes
{@example core/di/ts/provider_spec.ts region='ConstructorProvider'}
### Multi-value example
{@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}
@publicApi\nclass ConstructorProvider(ConstructorSansProvider):\n    # An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.\n    provide: Type<any> = Field(..., description='An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.')\n    # When true, injector returns an array of instances. This is useful to allow multiple
providers spread across many files to provide configuration information to a common token.\n    multi: Optional[bool] = None = Field(..., description='When true, injector returns an array of instances. This is useful to allow multiple
providers spread across many files to provide configuration information to a common token.')\n\n# Configures the `Injector` to return a value of another `useExisting` token.
@see {@link ExistingProvider}
@see [Dependency Injection Guide](guide/di/dependency-injection.
@publicApi\nclass ExistingSansProvider(BaseModel):\n    # Existing `token` to return. (Equivalent to `injector.get(useExisting)`)\n    useExisting: any = Field(..., description='Existing `token` to return. (Equivalent to `injector.get(useExisting)`)')\n\n# Configures the `Injector` to return a value of another `useExisting` token.
@see [Dependency Injection Guide](guide/di/dependency-injection.
@usageNotes
{@example core/di/ts/provider_spec.ts region='ExistingProvider'}
### Multi-value example
{@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}
@publicApi\nclass ExistingProvider(ExistingSansProvider):\n    # An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.\n    provide: any = Field(..., description='An injection token. Typically an instance of `Type` or `InjectionToken`, but can be `any`.')\n    # When true, injector returns an array of instances. This is useful to allow multiple
providers spread across many files to provide configuration information to a common token.\n    multi: Optional[bool] = None = Field(..., description='When true, injector returns an array of instances. This is useful to allow multiple
providers spread across many files to provide configuration information to a common token.')\n\n# Configures the `Injector` to return a value by invoking a `useFactory` function.
@see {@link FactoryProvider}
@see [Dependency Injection Guide](guide/di/dependency-injection.
@publicApi\nclass FactorySansProvider(BaseModel):\n    # A function to invoke to create a value for this `token`. The function is invoked with
resolved values of `token`s in the `deps` field.\n    useFactory: Function = Field(..., description='A function to invoke to create a value for this `token`. The function is invoked with
resolved values of `token`s in the `deps` field.')\n    # A list of `token`s to be resolved by the injector. The list of values is then
used as arguments to the `useFactory` function.\n    deps: Optional[List[List[any]]] = None = Field(..., description='A list of `token`s to be resolved by the injector. The list of values is then
used as arguments to the `useFactory` function.')\n\n# Configures the `Injector` to return a value by invoking a `useFactory` function.
@see [Dependency Injection Guide](guide/di/dependency-injection.
@usageNotes
{@example core/di/ts/provider_spec.ts region='FactoryProvider'}
Dependencies can also be marked as optional:
{@example core/di/ts/provider_spec.ts region='FactoryProviderOptionalDeps'}
### Multi-value example
{@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}
@publicApi\nclass FactoryProvider(FactorySansProvider):\n    # An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n    provide: any = Field(..., description='An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).')\n    # When true, injector returns an array of instances. This is useful to allow multiple
providers spread across many files to provide configuration information to a common token.\n    multi: Optional[bool] = None = Field(..., description='When true, injector returns an array of instances. This is useful to allow multiple
providers spread across many files to provide configuration information to a common token.')\n\n# Configures the `Injector` to return an instance of `Type` when `Type' is used as the token.
Create an instance by invoking the `new` operator and supplying additional arguments.
This form is a short form of `TypeProvider`;
For more details, see the ["Dependency Injection Guide"](guide/di/dependency-injection.
@usageNotes
{@example core/di/ts/provider_spec.ts region='TypeProvider'}
@publicApi\nclass TypeProvider(Type):\n    pass\n\n# Configures the `Injector` to return a value by invoking a `useClass` function.
Base for `ClassProvider` decorator.
@see [Dependency Injection Guide](guide/di/dependency-injection.
@publicApi\nclass ClassSansProvider(BaseModel):\n    # Class to instantiate for the `token`.\n    useClass: Type<any> = Field(..., description='Class to instantiate for the `token`.')\n\n# Configures the `Injector` to return an instance of `useClass` for a token.
@see [Dependency Injection Guide](guide/di/dependency-injection.
@usageNotes
{@example core/di/ts/provider_spec.ts region='ClassProvider'}
Note that following two providers are not equal:
{@example core/di/ts/provider_spec.ts region='ClassProviderDifference'}
### Multi-value example
{@example core/di/ts/provider_spec.ts region='MultiProviderAspect'}
@publicApi\nclass ClassProvider(ClassSansProvider):\n    # An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).\n    provide: any = Field(..., description='An injection token. (Typically an instance of `Type` or `InjectionToken`, but can be `any`).')\n    # When true, injector returns an array of instances. This is useful to allow multiple
providers spread across many files to provide configuration information to a common token.\n    multi: Optional[bool] = None = Field(..., description='When true, injector returns an array of instances. This is useful to allow multiple
providers spread across many files to provide configuration information to a common token.')\n\n# Encapsulated `Provider`s that are only accepted during creation of an `EnvironmentInjector` (e.g.
in an `NgModule`).
Using this wrapper type prevents providers which are only designed to work in
application/environment injectors from being accidentally included in
`@Component.providers` and ending up in a component injector.
This wrapper type prevents access to the `Provider`s inside.
@see {@link makeEnvironmentProviders}
@see {@link importProvidersFrom}
@publicApi\nclass EnvironmentProviders(BaseModel):\n    ɵbrand: 'EnvironmentProviders' = Field(...)\n\nclass InternalEnvironmentProviders(EnvironmentProviders):\n    ɵproviders: List[List[Union[(Provider, EnvironmentProviders)]]] = Field(...)\n    # If present, indicates that the `EnvironmentProviders` were derived from NgModule providers.
This is used to produce clearer error messages.\n    ɵfromNgModule: Optional[true] = None = Field(..., description='If present, indicates that the `EnvironmentProviders` were derived from NgModule providers.
This is used to produce clearer error messages.')\n\n# A wrapper around an NgModule that associates it with providers
Usage without a generic type is deprecated.
@publicApi\nclass ModuleWithProviders(BaseModel):\n    ngModule: Type<T> = Field(...)\n    providers: Optional[List[List[Union[Provider, EnvironmentProviders]]]] = None\n\n# Type of the options argument to [`inject`](api/core/inject).
@publicApi\nclass InjectOptions(BaseModel):\n    # Use optional injection, and return `null` if the requested token is not found.\n    optional: Optional[bool] = None = Field(..., description='Use optional injection, and return `null` if the requested token is not found.')\n    # Start injection at the parent of the current injector.\n    skipSelf: Optional[bool] = None = Field(..., description='Start injection at the parent of the current injector.')\n    # Only query the current injector for the token, and don't fall back to the parent injector if
it's not found.\n    self: Optional[bool] = None = Field(..., description='Only query the current injector for the token, and don\'t fall back to the parent injector if
it\'s not found.')\n    # Stop injection at the host component's injector. Only relevant when injecting from an element
injector, and a no-op for environment injectors.\n    host: Optional[bool] = None = Field(..., description='Stop injection at the host component\'s injector. Only relevant when injecting from an element
injector, and a no-op for environment injectors.')\n\n# An Injector that the owner can destroy and trigger the DestroyRef.destroy hooks.
@publicApi\nclass DestroyableInjector(Injector):\n    pass\n\nclass EventContractDetails(BaseModel):\n    instance: Optional[EventContract] = None\n\n# @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\nclass Operator(BaseModel):\n    pass\n\n# A function type interface that describes a function that accepts one parameter `T`
and returns another parameter `R`.
Usually used to describe {@link OperatorFunction} - it always takes a single
parameter (the source Observable) and returns another Observable.\nclass UnaryFunction(BaseModel):\n    pass\n\nclass OperatorFunction(UnaryFunction):\n    pass\n\n# A function type interface that describes a function that accepts and returns a parameter of the same type.
Used to describe {@link OperatorFunction} with the only one type: `OperatorFunction<T, T>`.\nclass MonoTypeOperatorFunction(OperatorFunction):\n    pass\n\n# A value and the time at which it was emitted.
Emitted by the `timestamp` operator
@see {@link timestamp}\nclass Timestamp(BaseModel):\n    value: T = Field(...)\n    # The timestamp. By default, this is in epoch milliseconds.
Could vary based on the timestamp provider passed to the operator.\n    timestamp: float = Field(..., description='The timestamp. By default, this is in epoch milliseconds.
Could vary based on the timestamp provider passed to the operator.')\n\n# A value emitted and the amount of time since the last value was emitted.
Emitted by the `timeInterval` operator.
@see {@link timeInterval}\nclass TimeInterval(BaseModel):\n    value: T = Field(...)\n    # The amount of time between this value's emission and the previous value's emission.
If this is the first emitted value, then it will be the amount of time since subscription
started.\n    interval: float = Field(..., description='The amount of time between this value\'s emission and the previous value\'s emission.
If this is the first emitted value, then it will be the amount of time since subscription
started.')\n\nclass Unsubscribable(BaseModel):\n    pass\n\nclass SubscriptionLike(Unsubscribable):\n    closed: bool = Field(...)\n\n# OBSERVABLE INTERFACES\nclass Subscribable(BaseModel):\n    pass\n\n# An object that implements the `Symbol.observable` interface.\nclass InteropObservable(BaseModel):\n    [Symbol.observable]: () => Subscribable<T> = Field(...)\n\n# A notification representing a "next" from an observable.
Can be used with {@link dematerialize}.\nclass NextNotification(BaseModel):\n    # The kind of notification. Always "N"\n    kind: 'N' = Field(..., description='The kind of notification. Always "N"')\n    # The value of the notification.\n    value: T = Field(..., description='The value of the notification.')\n\n# A notification representing an "error" from an observable.
Can be used with {@link dematerialize}.\nclass ErrorNotification(BaseModel):\n    # The kind of notification. Always "E"\n    kind: 'E' = Field(..., description='The kind of notification. Always "E"')\n    error: any = Field(...)\n\n# A notification representing a "completion" from an observable.
Can be used with {@link dematerialize}.\nclass CompleteNotification(BaseModel):\n    kind: 'C' = Field(...)\n\nclass NextObserver(BaseModel):\n    closed: Optional[bool] = None\n    next: (value: T) => void = Field(...)\n    error: Optional[(err: any) => void] = None\n    complete: Optional[() => void] = None\n\nclass ErrorObserver(BaseModel):\n    closed: Optional[bool] = None\n    next: Optional[(value: T) => void] = None\n    error: (err: any) => void = Field(...)\n    complete: Optional[() => void] = None\n\nclass CompletionObserver(BaseModel):\n    closed: Optional[bool] = None\n    next: Optional[(value: T) => void] = None\n    error: Optional[(err: any) => void] = None\n    complete: () => void = Field(...)\n\n# An object interface that defines a set of callback functions a user can use to get
notified of any set of {@link Observable}
{@link guide/glossary-and-semantics#notification notification} events.
For more info, please refer to {@link guide/observer this guide}.\nclass Observer(BaseModel):\n    # A callback function that gets called by the producer during the subscription when
the producer "has" the `value`. It won't be called if `error` or `complete` callback
functions have been called, nor after the consumer has unsubscribed.
For more info, please refer to {@link guide/glossary-and-semantics#next this guide}.\n    next: (value: T) => void = Field(..., description='A callback function that gets called by the producer during the subscription when
the producer "has" the `value`. It won\'t be called if `error` or `complete` callback
functions have been called, nor after the consumer has unsubscribed.
For more info, please refer to {@link guide/glossary-and-semantics#next this guide}.')\n    # A callback function that gets called by the producer if and when it encountered a
problem of any kind. The errored value will be provided through the `err` parameter.
This callback can't be called more than one time, it can't be called if the
`complete` callback function have been called previously, nor it can't be called if
the consumer has unsubscribed.
For more info, please refer to {@link guide/glossary-and-semantics#error this guide}.\n    error: (err: any) => void = Field(..., description='A callback function that gets called by the producer if and when it encountered a
problem of any kind. The errored value will be provided through the `err` parameter.
This callback can\'t be called more than one time, it can\'t be called if the
`complete` callback function have been called previously, nor it can\'t be called if
the consumer has unsubscribed.
For more info, please refer to {@link guide/glossary-and-semantics#error this guide}.')\n    # A callback function that gets called by the producer if and when it has no more
values to provide (by calling `next` callback function). This means that no error
has happened. This callback can't be called more than one time, it can't be called
if the `error` callback function have been called previously, nor it can't be called
if the consumer has unsubscribed.
For more info, please refer to {@link guide/glossary-and-semantics#complete this guide}.\n    complete: () => void = Field(..., description='A callback function that gets called by the producer if and when it has no more
values to provide (by calling `next` callback function). This means that no error
has happened. This callback can\'t be called more than one time, it can\'t be called
if the `error` callback function have been called previously, nor it can\'t be called
if the consumer has unsubscribed.
For more info, please refer to {@link guide/glossary-and-semantics#complete this guide}.')\n\nclass SubjectLike(Observer):\n    pass\n\nclass SchedulerLike(TimestampProvider):\n    pass\n\nclass SchedulerAction(Subscription):\n    pass\n\n# This is a type that provides a method to allow RxJS to create a numeric timestamp\nclass TimestampProvider(BaseModel):\n    pass\n\nclass ReadableStreamDefaultReaderLike(BaseModel):\n    pass\n\n# The base signature RxJS will look for to identify and use
a [ReadableStream](https://streams.spec.whatwg.org/#rs-class)
as an {@link ObservableInput} source.\nclass ReadableStreamLike(BaseModel):\n    pass\n\n# An observable with a `connect` method that is used to create a subscription
to an underlying source, connecting it with all consumers via a multicast.\nclass Connectable(Observable):\n    pass\n\n# An object used to configure {@link connect} operator.\nclass ConnectConfig(BaseModel):\n    # A factory function used to create the Subject through which the source
is multicast. By default, this creates a {@link Subject}.\n    connector: () => SubjectLike<T> = Field(..., description='A factory function used to create the Subject through which the source
is multicast. By default, this creates a {@link Subject}.')\n\nclass BasicGroupByOptions(BaseModel):\n    element: Optional[undefined] = None\n    duration: Optional[(grouped: GroupedObservable<K, T>) => ObservableInput<any>] = None\n    connector: Optional[() => SubjectLike<T>] = None\n\nclass GroupByOptionsWithElement(BaseModel):\n    element: (value: T) => E = Field(...)\n    duration: Optional[(grouped: GroupedObservable<K, E>) => ObservableInput<any>] = None\n    connector: Optional[() => SubjectLike<E>] = None\n\n# An observable of values that is the emitted by the result of a {@link groupBy} operator,
contains a `key` property for the grouping.\nclass GroupedObservable(Observable):\n    # The key value for the grouped notifications.\n    key: K = Field(..., description='The key value for the grouped notifications.')\n\nclass RepeatConfig(BaseModel):\n    # The number of times to repeat the source. Defaults to `Infinity`.\n    count: Optional[float] = None = Field(..., description='The number of times to repeat the source. Defaults to `Infinity`.')\n    # If a `number`, will delay the repeat of the source by that number of milliseconds.
If a function, it will provide the number of times the source has been subscribed to,
and the return value should be a valid observable input that will notify when the source
should be repeated. If the notifier observable is empty, the result will complete.\n    delay: Optional[Union[float, ((count: number) => ObservableInput<any>)]] = None = Field(..., description='If a `number`, will delay the repeat of the source by that number of milliseconds.
If a function, it will provide the number of times the source has been subscribed to,
and the return value should be a valid observable input that will notify when the source
should be repeated. If the notifier observable is empty, the result will complete.')\n\n# The {@link retry} operator configuration object. `retry` either accepts a `number`
or an object described by this interface.\nclass RetryConfig(BaseModel):\n    # The maximum number of times to retry. If `count` is omitted, `retry` will try to
resubscribe on errors infinite number of times.\n    count: Optional[float] = None = Field(..., description='The maximum number of times to retry. If `count` is omitted, `retry` will try to
resubscribe on errors infinite number of times.')\n    # The number of milliseconds to delay before retrying, OR a function to
return a notifier for delaying. If a function is given, that function should
return a notifier that, when it emits will retry the source. If the notifier
completes _without_ emitting, the resulting observable will complete without error,
if the notifier errors, the error will be pushed to the result.\n    delay: Optional[Union[float, ((error: any, retryCount: number) => ObservableInput<any>)]] = None = Field(..., description='The number of milliseconds to delay before retrying, OR a function to
return a notifier for delaying. If a function is given, that function should
return a notifier that, when it emits will retry the source. If the notifier
completes _without_ emitting, the resulting observable will complete without error,
if the notifier errors, the error will be pushed to the result.')\n    # Whether or not to reset the retry counter when the retried subscription
emits its first value.\n    resetOnSuccess: Optional[bool] = None = Field(..., description='Whether or not to reset the retry counter when the retried subscription
emits its first value.')\n\nclass ShareConfig(BaseModel):\n    # The factory used to create the subject that will connect the source observable to
multicast consumers.\n    connector: Optional[() => SubjectLike<T>] = None = Field(..., description='The factory used to create the subject that will connect the source observable to
multicast consumers.')\n    # If `true`, the resulting observable will reset internal state on error from source and return to a "cold" state. This
allows the resulting observable to be "retried" in the event of an error.
If `false`, when an error comes from the source it will push the error into the connecting subject, and the subject
will remain the connecting subject, meaning the resulting observable will not go "cold" again, and subsequent retries
or resubscriptions will resubscribe to that same subject. In all cases, RxJS subjects will emit the same error again, however
{@link ReplaySubject} will also push its buffered values before pushing the error.
It is also possible to pass a notifier factory returning an `ObservableInput` instead which grants more fine-grained
control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n    resetOnError: Optional[Union[bool, ((error: any) => ObservableInput<any>)]] = None = Field(..., description='If `true`, the resulting observable will reset internal state on error from source and return to a "cold" state. This
allows the resulting observable to be "retried" in the event of an error.
If `false`, when an error comes from the source it will push the error into the connecting subject, and the subject
will remain the connecting subject, meaning the resulting observable will not go "cold" again, and subsequent retries
or resubscriptions will resubscribe to that same subject. In all cases, RxJS subjects will emit the same error again, however
{@link ReplaySubject} will also push its buffered values before pushing the error.
It is also possible to pass a notifier factory returning an `ObservableInput` instead which grants more fine-grained
control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.')\n    # If `true`, the resulting observable will reset internal state on completion from source and return to a "cold" state. This
allows the resulting observable to be "repeated" after it is done.
If `false`, when the source completes, it will push the completion through the connecting subject, and the subject
will remain the connecting subject, meaning the resulting observable will not go "cold" again, and subsequent repeats
or resubscriptions will resubscribe to that same subject.
It is also possible to pass a notifier factory returning an `ObservableInput` instead which grants more fine-grained
control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n    resetOnComplete: Optional[Union[bool, (() => ObservableInput<any>)]] = None = Field(..., description='If `true`, the resulting observable will reset internal state on completion from source and return to a "cold" state. This
allows the resulting observable to be "repeated" after it is done.
If `false`, when the source completes, it will push the completion through the connecting subject, and the subject
will remain the connecting subject, meaning the resulting observable will not go "cold" again, and subsequent repeats
or resubscriptions will resubscribe to that same subject.
It is also possible to pass a notifier factory returning an `ObservableInput` instead which grants more fine-grained
control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.')\n    # If `true`, when the number of subscribers to the resulting observable reaches zero due to those subscribers unsubscribing, the
internal state will be reset and the resulting observable will return to a "cold" state. This means that the next
time the resulting observable is subscribed to, a new subject will be created and the source will be subscribed to
again.
If `false`, when the number of subscribers to the resulting observable reaches zero due to unsubscription, the subject
will remain connected to the source, and new subscriptions to the result will be connected through that same subject.
It is also possible to pass a notifier factory returning an `ObservableInput` instead which grants more fine-grained
control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n    resetOnRefCountZero: Optional[Union[bool, (() => ObservableInput<any>)]] = None = Field(..., description='If `true`, when the number of subscribers to the resulting observable reaches zero due to those subscribers unsubscribing, the
internal state will be reset and the resulting observable will return to a "cold" state. This means that the next
time the resulting observable is subscribed to, a new subject will be created and the source will be subscribed to
again.
If `false`, when the number of subscribers to the resulting observable reaches zero due to unsubscription, the subject
will remain connected to the source, and new subscriptions to the result will be connected through that same subject.
It is also possible to pass a notifier factory returning an `ObservableInput` instead which grants more fine-grained
control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.')\n\nclass ShareReplayConfig(BaseModel):\n    bufferSize: Optional[float] = None\n    windowTime: Optional[float] = None\n    refCount: bool = Field(...)\n    scheduler: Optional[SchedulerLike] = None\n\n# An extension to the {@link Observer} interface used only by the {@link tap} operator.
It provides a useful set of callbacks a user can register to do side-effects in
cases other than what the usual {@link Observer} callbacks are
({@link guide/glossary-and-semantics#next next},
{@link guide/glossary-and-semantics#error error} and/or
{@link guide/glossary-and-semantics#complete complete}).
## Example
```ts
import { fromEvent, switchMap, tap, interval, take } from 'rxjs';
const source$ = fromEvent(document, 'click');
const result$ = source$.pipe(
  switchMap((_, i) => i % 2 === 0
    ? fromEvent(document, 'mousemove').pipe(
        tap({
          subscribe: () => console.log('Subscribed to the mouse move events after click #' + i),
          unsubscribe: () => console.log('Mouse move events #' + i + ' unsubscribed'),
          finalize: () => console.log('Mouse move events #' + i + ' finalized')
        })
      )
    : interval(1_000).pipe(
        take(5),
        tap({
          subscribe: () => console.log('Subscribed to the 1-second interval events after click #' + i),
          unsubscribe: () => console.log('1-second interval events #' + i + ' unsubscribed'),
          finalize: () => console.log('1-second interval events #' + i + ' finalized')
        })
      )
  )
);
const subscription = result$.subscribe({
  next: console.log
});
setTimeout(() => {
  console.log('Unsubscribe after 60 seconds');
  subscription.unsubscribe();
}, 60_000);
```\nclass TapObserver(Observer):\n    # The callback that `tap` operator invokes at the moment when the source Observable
gets subscribed to.\n    subscribe: () => void = Field(..., description='The callback that `tap` operator invokes at the moment when the source Observable
gets subscribed to.')\n    # The callback that `tap` operator invokes when an explicit
{@link guide/glossary-and-semantics#unsubscription unsubscribe} happens. It won't get invoked on
`error` or `complete` events.\n    unsubscribe: () => void = Field(..., description='The callback that `tap` operator invokes when an explicit
{@link guide/glossary-and-semantics#unsubscription unsubscribe} happens. It won\'t get invoked on
`error` or `complete` events.')\n    # The callback that `tap` operator invokes when any kind of
{@link guide/glossary-and-semantics#finalization finalization} happens - either when
the source Observable `error`s or `complete`s or when it gets explicitly unsubscribed
by the user. There is no difference in using this callback or the {@link finalize}
operator, but if you're already using `tap` operator, you can use this callback
instead. You'd get the same result in either case.\n    finalize: () => void = Field(..., description='The callback that `tap` operator invokes when any kind of
{@link guide/glossary-and-semantics#finalization finalization} happens - either when
the source Observable `error`s or `complete`s or when it gets explicitly unsubscribed
by the user. There is no difference in using this callback or the {@link finalize}
operator, but if you\'re already using `tap` operator, you can use this callback
instead. You\'d get the same result in either case.')\n\n# An object interface used by {@link throttle} or {@link throttleTime} that ensure
configuration options of these operators.
@see {@link throttle}
@see {@link throttleTime}\nclass ThrottleConfig(BaseModel):\n    # If `true`, the resulting Observable will emit the first value from the source
Observable at the **start** of the "throttling" process (when starting an
internal timer that prevents other emissions from the source to pass through).
If `false`, it will not emit the first value from the source Observable at the
start of the "throttling" process.
If not provided, defaults to: `true`.\n    leading: Optional[bool] = None = Field(..., description='If `true`, the resulting Observable will emit the first value from the source
Observable at the **start** of the "throttling" process (when starting an
internal timer that prevents other emissions from the source to pass through).
If `false`, it will not emit the first value from the source Observable at the
start of the "throttling" process.
If not provided, defaults to: `true`.')\n    # If `true`, the resulting Observable will emit the last value from the source
Observable at the **end** of the "throttling" process (when ending an internal
timer that prevents other emissions from the source to pass through).
If `false`, it will not emit the last value from the source Observable at the
end of the "throttling" process.
If not provided, defaults to: `false`.\n    trailing: Optional[bool] = None = Field(..., description='If `true`, the resulting Observable will emit the last value from the source
Observable at the **end** of the "throttling" process (when ending an internal
timer that prevents other emissions from the source to pass through).
If `false`, it will not emit the last value from the source Observable at the
end of the "throttling" process.
If not provided, defaults to: `false`.')\n\nclass TimeoutConfig(BaseModel):\n    # The time allowed between values from the source before timeout is triggered.\n    each: Optional[float] = None = Field(..., description='The time allowed between values from the source before timeout is triggered.')\n    # The relative time as a `number` in milliseconds, or a specific time as a `Date` object,
by which the first value must arrive from the source before timeout is triggered.\n    first: Optional[Union[float, datetime]] = None = Field(..., description='The relative time as a `number` in milliseconds, or a specific time as a `Date` object,
by which the first value must arrive from the source before timeout is triggered.')\n    # The scheduler to use with time-related operations within this operator. Defaults to {@link asyncScheduler}\n    scheduler: Optional[SchedulerLike] = None = Field(..., description='The scheduler to use with time-related operations within this operator. Defaults to {@link asyncScheduler}')\n    # A factory used to create observable to switch to when timeout occurs. Provides
a {@link TimeoutInfo} about the source observable's emissions and what delay or
exact time triggered the timeout.\n    with: Optional[(info: TimeoutInfo<T, M>) => O] = None = Field(..., description='A factory used to create observable to switch to when timeout occurs. Provides
a {@link TimeoutInfo} about the source observable\'s emissions and what delay or
exact time triggered the timeout.')\n    # Optional additional metadata you can provide to code that handles
the timeout, will be provided through the {@link TimeoutError}.
This can be used to help identify the source of a timeout or pass along
other information related to the timeout.\n    meta: Optional[M] = None = Field(..., description='Optional additional metadata you can provide to code that handles
the timeout, will be provided through the {@link TimeoutError}.
This can be used to help identify the source of a timeout or pass along
other information related to the timeout.')\n\nclass TimeoutInfo(BaseModel):\n    # Optional metadata that was provided to the timeout configuration.\n    meta: M = Field(..., description='Optional metadata that was provided to the timeout configuration.')\n    # The number of messages seen before the timeout\n    seen: float = Field(..., description='The number of messages seen before the timeout')\n    # The last message seen\n    lastValue: Union[T, null] = Field(..., description='The last message seen')\n\n# An error emitted when a timeout occurs.\nclass TimeoutError(Error):\n    # The information provided to the error by the timeout
operation that created the error. Will be `null` if
used directly in non-RxJS code with an empty constructor.
(Note that using this constructor directly is not recommended,
you should create your own errors)\n    info: Union[TimeoutInfo<T, M>, null] = Field(..., description='The information provided to the error by the timeout
operation that created the error. Will be `null` if
used directly in non-RxJS code with an empty constructor.
(Note that using this constructor directly is not recommended,
you should create your own errors)')\n\nclass TimeoutErrorCtor(BaseModel):\n    pass\n\nclass TestMessage(BaseModel):\n    frame: float = Field(...)\n    notification: ObservableNotification<any> = Field(...)\n    isGhost: Optional[bool] = None\n\nclass RunHelpers(BaseModel):\n    cold: typeof TestScheduler.prototype.createColdObservable = Field(...)\n    hot: typeof TestScheduler.prototype.createHotObservable = Field(...)\n    flush: typeof TestScheduler.prototype.flush = Field(...)\n    time: typeof TestScheduler.prototype.createTime = Field(...)\n    expectObservable: typeof TestScheduler.prototype.expectObservable = Field(...)\n    expectSubscriptions: typeof TestScheduler.prototype.expectSubscriptions = Field(...)\n    animate: (marbles: string) => void = Field(...)\n\nclass LastValueFromConfig(BaseModel):\n    defaultValue: T = Field(...)\n\nclass FirstValueFromConfig(BaseModel):\n    defaultValue: T = Field(...)\n\nclass ArgumentOutOfRangeError(Error):\n    pass\n\nclass ArgumentOutOfRangeErrorCtor(BaseModel):\n    pass\n\nclass EmptyError(Error):\n    pass\n\nclass EmptyErrorCtor(BaseModel):\n    pass\n\nclass NotFoundError(Error):\n    pass\n\nclass NotFoundErrorCtor(BaseModel):\n    pass\n\nclass ObjectUnsubscribedError(Error):\n    pass\n\nclass ObjectUnsubscribedErrorCtor(BaseModel):\n    pass\n\nclass SequenceError(Error):\n    pass\n\nclass SequenceErrorCtor(BaseModel):\n    pass\n\nclass UnsubscriptionError(Error):\n    errors: List[List[any]] = Field(...)\n\nclass UnsubscriptionErrorCtor(BaseModel):\n    pass\n\nclass ConnectableConfig(BaseModel):\n    # A factory function used to create the Subject through which the source
is multicast. By default this creates a {@link Subject}.\n    connector: () => SubjectLike<T> = Field(..., description='A factory function used to create the Subject through which the source
is multicast. By default this creates a {@link Subject}.')\n    # If true, the resulting observable will reset internal state upon disconnection
and return to a "cold" state. This allows the resulting observable to be
reconnected.
If false, upon disconnection, the connecting subject will remain the
connecting subject, meaning the resulting observable will not go "cold" again,
and subsequent repeats or resubscriptions will resubscribe to that same subject.\n    resetOnDisconnect: Optional[bool] = None = Field(..., description='If true, the resulting observable will reset internal state upon disconnection
and return to a "cold" state. This allows the resulting observable to be
reconnected.
If false, upon disconnection, the connecting subject will remain the
connecting subject, meaning the resulting observable will not go "cold" again,
and subsequent repeats or resubscriptions will resubscribe to that same subject.')\n\nclass NodeStyleEventEmitter(BaseModel):\n    pass\n\nclass NodeCompatibleEventEmitter(BaseModel):\n    pass\n\nclass JQueryStyleEventEmitter(BaseModel):\n    pass\n\nclass EventListenerObject(BaseModel):\n    pass\n\nclass HasEventTargetAddRemove(BaseModel):\n    pass\n\nclass EventListenerOptions(BaseModel):\n    capture: Optional[bool] = None\n    passive: Optional[bool] = None\n    once: Optional[bool] = None\n\nclass AddEventListenerOptions(EventListenerOptions):\n    once: Optional[bool] = None\n    passive: Optional[bool] = None\n\nclass GenerateBaseOptions(BaseModel):\n    # Initial state.\n    initialState: S = Field(..., description='Initial state.')\n    # Condition function that accepts state and returns boolean.
When it returns false, the generator stops.
If not specified, a generator never stops.\n    condition: Optional[ConditionFunc<S>] = None = Field(..., description='Condition function that accepts state and returns boolean.
When it returns false, the generator stops.
If not specified, a generator never stops.')\n    # Iterate function that accepts state and returns new state.\n    iterate: IterateFunc<S> = Field(..., description='Iterate function that accepts state and returns new state.')\n    # SchedulerLike to use for generation process.
By default, a generator starts immediately.\n    scheduler: Optional[SchedulerLike] = None = Field(..., description='SchedulerLike to use for generation process.
By default, a generator starts immediately.')\n\nclass GenerateOptions(GenerateBaseOptions):\n    # Result selection function that accepts state and returns a value to emit.\n    resultSelector: ResultFunc<S, T> = Field(..., description='Result selection function that accepts state and returns a value to emit.')\n\n# The global configuration object for RxJS, used to configure things
like how to react on unhandled errors. Accessible via {@link config}
object.\nclass GlobalConfig(BaseModel):\n    # A registration point for unhandled errors from RxJS. These are errors that
cannot were not handled by consuming code in the usual subscription path. For
example, if you have this configured, and you subscribe to an observable without
providing an error handler, errors from that subscription will end up here. This
will _always_ be called asynchronously on another job in the runtime. This is because
we do not want errors thrown in this user-configured handler to interfere with the
behavior of the library.\n    onUnhandledError: Union[((err: any) => void), null] = Field(..., description='A registration point for unhandled errors from RxJS. These are errors that
cannot were not handled by consuming code in the usual subscription path. For
example, if you have this configured, and you subscribe to an observable without
providing an error handler, errors from that subscription will end up here. This
will _always_ be called asynchronously on another job in the runtime. This is because
we do not want errors thrown in this user-configured handler to interfere with the
behavior of the library.')\n    # A registration point for notifications that cannot be sent to subscribers because they
have completed, errored or have been explicitly unsubscribed. By default, next, complete
and error notifications sent to stopped subscribers are noops. However, sometimes callers
might want a different behavior. For example, with sources that attempt to report errors
to stopped subscribers, a caller can configure RxJS to throw an unhandled error instead.
This will _always_ be called asynchronously on another job in the runtime. This is because
we do not want errors thrown in this user-configured handler to interfere with the
behavior of the library.\n    onStoppedNotification: Union[((notification: ObservableNotification<any>, subscriber: Subscriber<any>) => void), null] = Field(..., description='A registration point for notifications that cannot be sent to subscribers because they
have completed, errored or have been explicitly unsubscribed. By default, next, complete
and error notifications sent to stopped subscribers are noops. However, sometimes callers
might want a different behavior. For example, with sources that attempt to report errors
to stopped subscribers, a caller can configure RxJS to throw an unhandled error instead.
This will _always_ be called asynchronously on another job in the runtime. This is because
we do not want errors thrown in this user-configured handler to interfere with the
behavior of the library.')\n    # The promise constructor used by default for {@link Observable#toPromise toPromise} and {@link Observable#forEach forEach}
methods.
@deprecated As of version 8, RxJS will no longer support this sort of injection of a
Promise constructor. If you need a Promise implementation other than native promises,
please polyfill/patch Promise as you see appropriate. Will be removed in v8.\n    Promise: Optional[PromiseConstructorLike] = None = Field(..., description='The promise constructor used by default for {@link Observable#toPromise toPromise} and {@link Observable#forEach forEach}
methods.
@deprecated As of version 8, RxJS will no longer support this sort of injection of a
Promise constructor. If you need a Promise implementation other than native promises,
please polyfill/patch Promise as you see appropriate. Will be removed in v8.')\n    # If true, turns on synchronous error rethrowing, which is a deprecated behavior
in v6 and higher. This behavior enables bad patterns like wrapping a subscribe
call in a try/catch block. It also enables producer interference, a nasty bug
where a multicast can be broken for all observers by a downstream consumer with
an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BUY TIME
FOR MIGRATION REASONS.
@deprecated As of version 8, RxJS will no longer support synchronous throwing
of unhandled errors. All errors will be thrown on a separate call stack to prevent bad
behaviors described above. Will be removed in v8.\n    useDeprecatedSynchronousErrorHandling: bool = Field(..., description='If true, turns on synchronous error rethrowing, which is a deprecated behavior
in v6 and higher. This behavior enables bad patterns like wrapping a subscribe
call in a try/catch block. It also enables producer interference, a nasty bug
where a multicast can be broken for all observers by a downstream consumer with
an unhandled error. DO NOT USE THIS FLAG UNLESS IT\'S NEEDED TO BUY TIME
FOR MIGRATION REASONS.
@deprecated As of version 8, RxJS will no longer support synchronous throwing
of unhandled errors. All errors will be thrown on a separate call stack to prevent bad
behaviors described above. Will be removed in v8.')\n    # If true, enables an as-of-yet undocumented feature from v5: The ability to access
`unsubscribe()` via `this` context in `next` functions created in observers passed
to `subscribe`.
This is being removed because the performance was severely problematic, and it could also cause
issues when types other than POJOs are passed to subscribe as subscribers, as they will likely have
their `this` context overwritten.
@deprecated As of version 8, RxJS will no longer support altering the
context of next functions provided as part of an observer to Subscribe. Instead,
you will have access to a subscription or a signal or token that will allow you to do things like
unsubscribe and test closed status. Will be removed in v8.\n    useDeprecatedNextContext: bool = Field(..., description='If true, enables an as-of-yet undocumented feature from v5: The ability to access
`unsubscribe()` via `this` context in `next` functions created in observers passed
to `subscribe`.
This is being removed because the performance was severely problematic, and it could also cause
issues when types other than POJOs are passed to subscribe as subscribers, as they will likely have
their `this` context overwritten.
@deprecated As of version 8, RxJS will no longer support altering the
context of next functions provided as part of an observer to Subscribe. Instead,
you will have access to a subscription or a signal or token that will allow you to do things like
unsubscribe and test closed status. Will be removed in v8.')\n\nclass SignalNode(ReactiveNode):\n    value: T = Field(...)\n    equal: ValueEqualityFn<T> = Field(...)\n\nclass SignalGetter(SignalBaseGetter):\n    [SIGNAL]: SignalNode<T> = Field(...)\n\nclass Type(Function):\n    pass\n\n# Information about how a type or `InjectionToken` interfaces with the DI
system. This describes:
1. *How* the type is provided
   The declaration must specify only one of the following:
   - A `value` which is a predefined instance of the type.
   - A `factory` which defines how to create the given type `T`, possibly
     requesting injection of other types if necessary.
   - Neither, in which case the type is expected to already be present in the
     injector hierarchy. This is used for internal use cases.
2. *Where* the type is stored (if it is stored)
   - The `providedIn` parameter specifies which injector the type belongs to.
   - The `token` is used as the key to store the type in the injector.\nclass ɵɵInjectableDeclaration(BaseModel):\n    # Specifies that the given type belongs to a particular `Injector`,
`NgModule`, or a special scope (e.g. `'root'`).
`any` is deprecated and will be removed soon.
A value of `null` indicates that the injectable does not belong to any
scope, and won't be stored in any injector. For declarations with a
factory, this will create a new instance of the type each time it is
requested.\n    providedIn: Union[Type<any>, 'root', 'platform', 'any', null] = Field(..., description='Specifies that the given type belongs to a particular `Injector`,
`NgModule`, or a special scope (e.g. `\'root\'`).
`any` is deprecated and will be removed soon.
A value of `null` indicates that the injectable does not belong to any
scope, and won\'t be stored in any injector. For declarations with a
factory, this will create a new instance of the type each time it is
requested.')\n    # The token to which this definition belongs.
Note that this may not be the same as the type that the `factory` will create.\n    token: unknown = Field(..., description='The token to which this definition belongs.
Note that this may not be the same as the type that the `factory` will create.')\n    # Factory method to execute to create an instance of the injectable.\n    factory: Optional[(t?: Type<any>) => T] = None = Field(..., description='Factory method to execute to create an instance of the injectable.')\n    # In a case of no explicit injector, a location where the instance of the injectable is stored.\n    value: Optional[T] = None = Field(..., description='In a case of no explicit injector, a location where the instance of the injectable is stored.')\n\n# A `Type` which has a `ɵprov: ɵɵInjectableDeclaration` static field.
`InjectableType`s contain their own Dependency Injection metadata and are usable in an
`InjectorDef`-based `StaticInjector`.
@publicApi\nclass InjectionToken(BaseModel):\n    ɵprov: ɵɵInjectableDeclaration<T> = Field(...)\n\nclass Injector(BaseModel):\n    pass\n\n# Reactive node type for an input signal. An input signal extends a signal.
There are special properties to enable transforms and required inputs.\nclass InputSignalNode(SignalNode):\n    # User-configured transform that will run whenever a new value is applied
to the input signal node.\n    transformFn: Union[((value: TransformT) => T), undefined] = Field(..., description='User-configured transform that will run whenever a new value is applied
to the input signal node.')\n    # A debug name for the input signal. Used in Angular DevTools to identify the signal.\n    debugName: Optional[str] = None = Field(..., description='A debug name for the input signal. Used in Angular DevTools to identify the signal.')\n\n# Stores a list of nodes which need to be removed.
Numbers are indexes into the `LView`
- index > 0: `removeRNode(lView[0])`
- index < 0: `removeICU(~lView[0])`\nclass I18nRemoveOpCodes(Array):\n    __brand__: 'I18nRemoveOpCodes' = Field(...)\n\n# Array storing OpCode for dynamically creating `i18n` blocks.
Example:
```ts
<I18nCreateOpCode>[
  // For adding text nodes
  // ---------------------
  // Equivalent to:
  //   lView[1].appendChild(lView[0] = document.createTextNode('xyz'));
  'xyz', 0, 1 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,
  // For adding element nodes
  // ---------------------
  // Equivalent to:
  //   lView[1].appendChild(lView[0] = document.createElement('div'));
  ELEMENT_MARKER, 'div', 0, 1 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,
  // For adding comment nodes
  // ---------------------
  // Equivalent to:
  //   lView[1].appendChild(lView[0] = document.createComment(''));
  ICU_MARKER, '', 0, 1 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,
  // For moving existing nodes to a different location
  // --------------------------------------------------
  // Equivalent to:
  //   const node = lView[1];
  //   lView[2].appendChild(node);
  1 << SHIFT_REF | Select, 2 << SHIFT_PARENT | 0 << SHIFT_REF | AppendChild,
  // For removing existing nodes
  // --------------------------------------------------
  //   const node = lView[1];
  //   removeChild(tView.data(1), node, lView);
  1 << SHIFT_REF | Remove,
  // For writing attributes
  // --------------------------------------------------
  //   const node = lView[1];
  //   node.setAttribute('attr', 'value');
  1 << SHIFT_REF | Attr, 'attr', 'value'
];
```\nclass IcuCreateOpCodes(Array):\n    __brand__: 'I18nCreateOpCodes' = Field(...)\n\nclass ELEMENT_MARKER(BaseModel):\n    marker: 'element' = Field(...)\n\nclass ICU_MARKER(BaseModel):\n    marker: 'ICU' = Field(...)\n\nclass I18nDebug(BaseModel):\n    # Human readable representation of the OpCode arrays.
NOTE: This property only exists if `ngDevMode` is set to `true` and it is not present in
production. Its presence is purely to help debug issue in development, and should not be relied
on in production application.\n    debug: Optional[List[List[str]]] = None = Field(..., description='Human readable representation of the OpCode arrays.
NOTE: This property only exists if `ngDevMode` is set to `true` and it is not present in
production. Its presence is purely to help debug issue in development, and should not be relied
on in production application.')\n\n# Array storing OpCode for dynamically creating `i18n` translation DOM elements.
This array creates a sequence of `Text` and `Comment` (as ICU anchor) DOM elements. It consists
of a pair of `number` and `string` pairs which encode the operations for the creation of the
translated block.
The number is shifted and encoded according to `I18nCreateOpCode`
Pseudocode:
```ts
const i18nCreateOpCodes = [
  10 << I18nCreateOpCode.SHIFT, "Text Node add to DOM",
  11 << I18nCreateOpCode.SHIFT | I18nCreateOpCode.COMMENT, "Comment Node add to DOM",
  12 << I18nCreateOpCode.SHIFT | I18nCreateOpCode.APPEND_LATER, "Text Node added later"
];
for(var i=0; i<i18nCreateOpCodes.length; i++) {
  const opcode = i18NCreateOpCodes[i++];
  const index = opcode >> I18nCreateOpCode.SHIFT;
  const text = i18NCreateOpCodes[i];
  let node: Text|Comment;
  if (opcode & I18nCreateOpCode.COMMENT === I18nCreateOpCode.COMMENT) {
    node = lView[~index] = document.createComment(text);
  } else {
    node = lView[index] = document.createText(text);
  }
  if (opcode & I18nCreateOpCode.APPEND_EAGERLY !== I18nCreateOpCode.APPEND_EAGERLY) {
    parentNode.appendChild(node);
  }
}
```\nclass I18nCreateOpCodes(Array):\n    __brand__: 'I18nCreateOpCodes' = Field(...)\n\n# Stores DOM operations which need to be applied to update DOM render tree due to changes in
expressions.
The basic idea is that `i18nExp` OpCodes capture expression changes and update a change
mask bit. (Bit 1 for expression 1, bit 2 for expression 2 etc..., bit 32 for expression 32 and
higher.) The OpCodes then compare its own change mask against the expression change mask to
determine if the OpCodes should execute.
NOTE: 32nd bit is special as it says 32nd or higher. This way if we have more than 32 bindings
the code still works, but with lower efficiency. (it is unlikely that a translation would have
more than 32 bindings.)
These OpCodes can be used by both the i18n block as well as ICU sub-block.
## Example
Assume
```ts
  if (rf & RenderFlags.Update) {
   i18nExp(ctx.exp1); // If changed set mask bit 1
   i18nExp(ctx.exp2); // If changed set mask bit 2
   i18nExp(ctx.exp3); // If changed set mask bit 3
   i18nExp(ctx.exp4); // If changed set mask bit 4
   i18nApply(0);            // Apply all changes by executing the OpCodes.
 }
```
We can assume that each call to `i18nExp` sets an internal `changeMask` bit depending on the
index of `i18nExp`.
### OpCodes
```ts
<I18nUpdateOpCodes>[
  // The following OpCodes represent: `<div i18n-title="pre{{exp1}}in{{exp2}}post">`
  // If `changeMask & 0b11`
  //        has changed then execute update OpCodes.
  //        has NOT changed then skip `8` values and start processing next OpCodes.
  0b11, 8,
  // Concatenate `newValue = 'pre'+lView[bindIndex-4]+'in'+lView[bindIndex-3]+'post';`.
  'pre', -4, 'in', -3, 'post',
  // Update attribute: `elementAttribute(1, 'title', sanitizerFn(newValue));`
  1 << SHIFT_REF | Attr, 'title', sanitizerFn,
  // The following OpCodes represent: `<div i18n>Hello {{exp3}}!">`
  // If `changeMask & 0b100`
  //        has changed then execute update OpCodes.
  //        has NOT changed then skip `4` values and start processing next OpCodes.
  0b100, 4,
  // Concatenate `newValue = 'Hello ' + lView[bindIndex -2] + '!';`.
  'Hello ', -2, '!',
  // Update text: `lView[1].textContent = newValue;`
  1 << SHIFT_REF | Text,
  // The following OpCodes represent: `<div i18n>{exp4, plural, ... }">`
  // If `changeMask & 0b1000`
  //        has changed then execute update OpCodes.
  //        has NOT changed then skip `2` values and start processing next OpCodes.
  0b1000, 2,
  // Concatenate `newValue = lView[bindIndex -1];`.
  -1,
  // Switch ICU: `icuSwitchCase(lView[1], 0, newValue);`
  0 << SHIFT_ICU | 1 << SHIFT_REF | IcuSwitch,
  // Note `changeMask & -1` is always true, so the IcuUpdate will always execute.
  -1, 1,
  // Update ICU: `icuUpdateCase(lView[1], 0);`
  0 << SHIFT_ICU | 1 << SHIFT_REF | IcuUpdate,
];
```\nclass I18nUpdateOpCodes(Array):\n    __brand__: 'I18nUpdateOpCodes' = Field(...)\n\n# Store information for the i18n translation block.\nclass TI18n(BaseModel):\n    # A set of OpCodes which will create the Text Nodes and ICU anchors for the translation blocks.
NOTE: The ICU anchors are filled in with ICU Update OpCode.\n    create: I18nCreateOpCodes = Field(..., description='A set of OpCodes which will create the Text Nodes and ICU anchors for the translation blocks.
NOTE: The ICU anchors are filled in with ICU Update OpCode.')\n    # A set of OpCodes which will be executed on each change detection to determine if any changes to
DOM are required.\n    update: I18nUpdateOpCodes = Field(..., description='A set of OpCodes which will be executed on each change detection to determine if any changes to
DOM are required.')\n    # An AST representing the translated message. This is used for hydration (and serialization),
while the Update and Create OpCodes are used at runtime.\n    ast: List[List[I18nNode]] = Field(..., description='An AST representing the translated message. This is used for hydration (and serialization),
while the Update and Create OpCodes are used at runtime.')\n    # Index of a parent TNode, which represents a host node for this i18n block.\n    parentTNodeIndex: float = Field(..., description='Index of a parent TNode, which represents a host node for this i18n block.')\n\nclass TIcu(BaseModel):\n    # Defines the ICU type of `select` or `plural`\n    type: IcuType = Field(..., description='Defines the ICU type of `select` or `plural`')\n    # Index in `LView` where the anchor node is stored. `<!-- ICU 0:0 -->`\n    anchorIdx: float = Field(..., description='Index in `LView` where the anchor node is stored. `<!-- ICU 0:0 -->`')\n    # Currently selected ICU case pointer.
`lView[currentCaseLViewIndex]` stores the currently selected case. This is needed to know how
to clean up the current case when transitioning no the new case.
If the value stored is:
`null`: No current case selected.
  `<0`: A flag which means that the ICU just switched and that `icuUpdate` must be executed
        regardless of the `mask`. (After the execution the flag is cleared)
  `>=0` A currently selected case index.\n    currentCaseLViewIndex: float = Field(..., description='Currently selected ICU case pointer.
`lView[currentCaseLViewIndex]` stores the currently selected case. This is needed to know how
to clean up the current case when transitioning no the new case.
If the value stored is:
`null`: No current case selected.
  `<0`: A flag which means that the ICU just switched and that `icuUpdate` must be executed
        regardless of the `mask`. (After the execution the flag is cleared)
  `>=0` A currently selected case index.')\n    # A list of case values which the current ICU will try to match.
The last value is `other`\n    cases: List[List[any]] = Field(..., description='A list of case values which the current ICU will try to match.
The last value is `other`')\n    # A set of OpCodes to apply in order to build up the DOM render tree for the ICU\n    create: List[List[IcuCreateOpCodes]] = Field(..., description='A set of OpCodes to apply in order to build up the DOM render tree for the ICU')\n    # A set of OpCodes to apply in order to destroy the DOM render tree for the ICU.\n    remove: List[List[I18nRemoveOpCodes]] = Field(..., description='A set of OpCodes to apply in order to destroy the DOM render tree for the ICU.')\n    # A set of OpCodes to apply in order to update the DOM render tree for the ICU bindings.\n    update: List[List[I18nUpdateOpCodes]] = Field(..., description='A set of OpCodes to apply in order to update the DOM render tree for the ICU bindings.')\n\n# Represents a block of text in a translation, such as `Hello, {{ name }}!`.\nclass I18nTextNode(BaseModel):\n    # The AST node kind\n    kind: I18nNodeKind.TEXT = Field(..., description='The AST node kind')\n    # The LView index\n    index: float = Field(..., description='The LView index')\n\n# Represents a simple DOM element in a translation, such as `<div>...</div>`\nclass I18nElementNode(BaseModel):\n    # The AST node kind\n    kind: I18nNodeKind.ELEMENT = Field(..., description='The AST node kind')\n    # The LView index\n    index: float = Field(..., description='The LView index')\n    # The child nodes\n    children: List[List[I18nNode]] = Field(..., description='The child nodes')\n\n# Represents an ICU in a translation.\nclass I18nICUNode(BaseModel):\n    # The AST node kind\n    kind: I18nNodeKind.ICU = Field(..., description='The AST node kind')\n    # The LView index\n    index: float = Field(..., description='The LView index')\n    # The branching cases\n    cases: List[List[List[I18nNode]]] = Field(..., description='The branching cases')\n    # The LView index that stores the active case\n    currentCaseLViewIndex: float = Field(..., description='The LView index that stores the active case')\n\n# Represents special content that is embedded into the translation. This can
either be a special built-in element, such as <ng-container> and <ng-content>,
or it can be a sub-template, for example, from a structural directive.\nclass I18nPlaceholderNode(BaseModel):\n    # The AST node kind\n    kind: I18nNodeKind.PLACEHOLDER = Field(..., description='The AST node kind')\n    # The LView index\n    index: float = Field(..., description='The LView index')\n    # The child nodes\n    children: List[List[I18nNode]] = Field(..., description='The child nodes')\n    # The placeholder type\n    type: I18nPlaceholderType = Field(..., description='The placeholder type')\n\n# The goal here is to make sure that the browser DOM API is the Renderer.
We do this by defining a subset of DOM API to be the renderer and then
use that at runtime for rendering.
At runtime we can then use the DOM api directly, in server or web-worker
it will be easy to implement such API. Subset of API needed for appending elements and text nodes.\nclass RNode(BaseModel):\n    # Returns the parent Element, Document, or DocumentFragment\n    parentNode: Union[RNode, null] = Field(..., description='Returns the parent Element, Document, or DocumentFragment')\n    # Returns the parent Element if there is one\n    parentElement: Union[RElement, null] = Field(..., description='Returns the parent Element if there is one')\n    # Gets the Node immediately following this one in the parent's childNodes\n    nextSibling: Union[RNode, null] = Field(..., description='Gets the Node immediately following this one in the parent\'s childNodes')\n\n# Subset of API needed for writing attributes, properties, and setting up
listeners on Element.\nclass RElement(RNode):\n    firstChild: Union[RNode, null] = Field(...)\n    style: RCssStyleDeclaration = Field(...)\n    classList: RDomTokenList = Field(...)\n    className: str = Field(...)\n    tagName: str = Field(...)\n    textContent: Union[str, null] = Field(...)\n\nclass RCssStyleDeclaration(BaseModel):\n    pass\n\nclass RDomTokenList(BaseModel):\n    pass\n\nclass RText(RNode):\n    textContent: Union[str, null] = Field(...)\n\nclass RComment(RNode):\n    textContent: Union[str, null] = Field(...)\n\n# Represents element containers within this view, stored as key-value pairs
where key is an index of a container in an LView (also used in the
`elementContainerStart` instruction), the value is the number of root nodes
in this container. This information is needed to locate an anchor comment
node that goes after all container nodes.\nclass SerializedElementContainers(BaseModel):\n    pass\n\n# Serialized data structure that contains relevant hydration
annotation information that describes a given hydration boundary
(e.g. a component).\nclass SerializedView(BaseModel):\n    # Serialized information about <ng-container>s.\n    [ELEMENT_CONTAINERS]: Optional[SerializedElementContainers] = None = Field(..., description='Serialized information about <ng-container>s.')\n    # Serialized information about templates.
Key-value pairs where a key is an index of the corresponding
`template` instruction and the value is a unique id that can
be used during hydration to identify that template.\n    [TEMPLATES]: Optional[Record<number, string>] = None = Field(..., description='Serialized information about templates.
Key-value pairs where a key is an index of the corresponding
`template` instruction and the value is a unique id that can
be used during hydration to identify that template.')\n    # Serialized information about view containers.
Key-value pairs where a key is an index of the corresponding
LContainer entry within an LView, and the value is a list
of serialized information about views within this container.\n    [CONTAINERS]: Optional[Record<number, SerializedContainerView[]>] = None = Field(..., description='Serialized information about view containers.
Key-value pairs where a key is an index of the corresponding
LContainer entry within an LView, and the value is a list
of serialized information about views within this container.')\n    # Serialized information about nodes in a template.
Key-value pairs where a key is an index of the corresponding
DOM node in an LView and the value is a path that describes
the location of this node (as a set of navigation instructions).\n    [NODES]: Optional[Record<number, string>] = None = Field(..., description='Serialized information about nodes in a template.
Key-value pairs where a key is an index of the corresponding
DOM node in an LView and the value is a path that describes
the location of this node (as a set of navigation instructions).')\n    # A list of ids which represents a set of nodes disconnected
from the DOM tree at the serialization time, but otherwise
present in the internal data structures.
This information is used to avoid triggering the hydration
logic for such nodes and instead use a regular "creation mode".\n    [DISCONNECTED_NODES]: Optional[List[List[float]]] = None = Field(..., description='A list of ids which represents a set of nodes disconnected
from the DOM tree at the serialization time, but otherwise
present in the internal data structures.
This information is used to avoid triggering the hydration
logic for such nodes and instead use a regular "creation mode".')\n    # Serialized information about i18n blocks in a template.
Key-value pairs where a key is an index of the corresponding
i18n entry within an LView, and the value is a list of
active ICU cases.\n    [I18N_DATA]: Optional[Record<number, number[]>] = None = Field(..., description='Serialized information about i18n blocks in a template.
Key-value pairs where a key is an index of the corresponding
i18n entry within an LView, and the value is a list of
active ICU cases.')\n    # If this view represents a `@defer` block, this field contains
unique id of the block.\n    [DEFER_BLOCK_ID]: Optional[str] = None = Field(..., description='If this view represents a `@defer` block, this field contains
unique id of the block.')\n    # This field represents a status, based on the `DeferBlockState` enum.\n    [DEFER_BLOCK_STATE]: Optional[float] = None = Field(..., description='This field represents a status, based on the `DeferBlockState` enum.')\n\n# Serialized data structure that contains relevant hydration
annotation information about a view that is a part of a
ViewContainer collection.\nclass SerializedContainerView(SerializedView):\n    # Unique id that represents a TView that was used to create
a given instance of a view:
 - TViewType.Embedded: a unique id generated during serialization on the server
 - TViewType.Component: an id generated based on component properties
                       (see `getComponentId` function for details)\n    [TEMPLATE_ID]: str = Field(..., description='Unique id that represents a TView that was used to create
a given instance of a view:
 - TViewType.Embedded: a unique id generated during serialization on the server
 - TViewType.Component: an id generated based on component properties
                       (see `getComponentId` function for details)')\n    # Number of root nodes that belong to this view.
This information is needed to effectively traverse the DOM tree
and identify segments that belong to different views.\n    [NUM_ROOT_NODES]: float = Field(..., description='Number of root nodes that belong to this view.
This information is needed to effectively traverse the DOM tree
and identify segments that belong to different views.')\n    # Number of times this view is repeated.
This is used to avoid serializing and sending the same hydration
information about similar views (for example, produced by *ngFor).\n    [MULTIPLIER]: Optional[float] = None = Field(..., description='Number of times this view is repeated.
This is used to avoid serializing and sending the same hydration
information about similar views (for example, produced by *ngFor).')\n\n# An object that contains hydration-related information serialized
on the server, as well as the necessary references to segments of
the DOM, to facilitate the hydration process for a given hydration
boundary on the client.\nclass DehydratedView(BaseModel):\n    # The readonly hydration annotation data.\n    data: Readonly<SerializedView> = Field(..., description='The readonly hydration annotation data.')\n    # A reference to the first child in a DOM segment associated
with a given hydration boundary.
Once a view becomes hydrated, the value is set to `null`, which
indicates that further detaching/attaching view actions should result
in invoking corresponding DOM actions (attaching DOM nodes action is
skipped when we hydrate, since nodes are already in the DOM).\n    firstChild: Union[RNode, null] = Field(..., description='A reference to the first child in a DOM segment associated
with a given hydration boundary.
Once a view becomes hydrated, the value is set to `null`, which
indicates that further detaching/attaching view actions should result
in invoking corresponding DOM actions (attaching DOM nodes action is
skipped when we hydrate, since nodes are already in the DOM).')\n    # Stores references to first nodes in DOM segments that
represent either an <ng-container> or a view container.\n    segmentHeads: Optional[Union[{
        [index: number]: RNode, null;
    }]] = None = Field(..., description='Stores references to first nodes in DOM segments that
represent either an <ng-container> or a view container.')\n    # An instance of a Set that represents nodes disconnected from
the DOM tree at the serialization time, but otherwise present
in the internal data structures.
The Set is based on the `SerializedView[DISCONNECTED_NODES]` data
and is needed to have constant-time lookups.
If the value is `null`, it means that there were no disconnected
nodes detected in this view at serialization time.\n    disconnectedNodes: Optional[Union[Set<number>, null]] = None = Field(..., description='An instance of a Set that represents nodes disconnected from
the DOM tree at the serialization time, but otherwise present
in the internal data structures.
The Set is based on the `SerializedView[DISCONNECTED_NODES]` data
and is needed to have constant-time lookups.
If the value is `null`, it means that there were no disconnected
nodes detected in this view at serialization time.')\n    # A mapping from a view to the first child to begin claiming nodes.
This mapping is generated by an i18n block, and is the source of
truth for the nodes inside of it.\n    i18nNodes: Optional[Union[Map<number, RNode, null>]] = None = Field(..., description='A mapping from a view to the first child to begin claiming nodes.
This mapping is generated by an i18n block, and is the source of
truth for the nodes inside of it.')\n    # A mapping from the index of an ICU node to dehydrated data for it.
This information is used during the hydration process on the client.
ICU cases that were active during server-side rendering will be added
to the map. The hydration logic will "claim" matching cases, removing
them from the map. The remaining entries are "unclaimed", and will be
removed from the DOM during hydration cleanup.\n    dehydratedIcuData: Optional[Map<number, DehydratedIcuData>] = None = Field(..., description='A mapping from the index of an ICU node to dehydrated data for it.
This information is used during the hydration process on the client.
ICU cases that were active during server-side rendering will be added
to the map. The hydration logic will "claim" matching cases, removing
them from the map. The remaining entries are "unclaimed", and will be
removed from the DOM during hydration cleanup.')\n\n# An object that contains hydration-related information serialized
on the server, as well as the necessary references to segments of
the DOM, to facilitate the hydration process for a given view
inside a view container (either an embedded view or a view created
for a component).\nclass DehydratedContainerView(DehydratedView):\n    data: Readonly<SerializedContainerView> = Field(...)\n\n# An object that contains information about a dehydrated ICU case,
to facilitate cleaning up ICU cases that were active during
server-side rendering, but not during hydration.\nclass DehydratedIcuData(BaseModel):\n    # The case index that this data represents.\n    case: float = Field(..., description='The case index that this data represents.')\n    # A reference back to the AST for the ICU node. This allows the
AST to be used to clean up dehydrated nodes.\n    node: I18nICUNode = Field(..., description='A reference back to the AST for the ICU node. This allows the
AST to be used to clean up dehydrated nodes.')\n\n# `KeyValueArray` is an array where even positions contain keys and odd positions contain values.
`KeyValueArray` provides a very efficient way of iterating over its contents. For small
sets (~10) the cost of binary searching an `KeyValueArray` has about the same performance
characteristics that of a `Map` with significantly better memory footprint.
If used as a `Map` the keys are stored in alphabetical order so that they can be binary searched
for retrieval.
See: `keyValueArraySet`, `keyValueArrayGet`, `keyValueArrayIndexOf`, `keyValueArrayDelete`.\nclass KeyValueArray(Array):\n    __brand__: 'array-map' = Field(...)\n\n# Store the static values for the styling binding.
The `TStylingStatic` is just `KeyValueArray` where key `""` (stored at location 0) contains the
`TStylingKey` (stored at location 1). In other words this wraps the `TStylingKey` such that the
`""` contains the wrapped value.
When instructions are resolving styling they may need to look forward or backwards in the linked
list to resolve the value. For this reason we have to make sure that he linked list also contains
the static values. However the list only has space for one item per styling instruction. For this
reason we store the static values here as part of the `TStylingKey`. This means that the
resolution function when looking for a value needs to first look at the binding value, and than
at `TStylingKey` (if it exists).
Imagine we have:
```angular-ts
<div class="TEMPLATE" my-dir>
@Directive({
  host: {
    class: 'DIR',
    '[class.dynamic]': 'exp' // ɵɵclassProp('dynamic', ctx.exp);
  }
})
```
In the above case the linked list will contain one item:
```ts
  // assume binding location: 10 for `ɵɵclassProp('dynamic', ctx.exp);`
  tData[10] = <TStylingStatic>[
    '': 'dynamic', // This is the wrapped value of `TStylingKey`
    'DIR': true,   // This is the default static value of directive binding.
  ];
  tData[10 + 1] = 0; // We don't have prev/next.
  lView[10] = undefined;     // assume `ctx.exp` is `undefined`
  lView[10 + 1] = undefined; // Just normalized `lView[10]`
```
So when the function is resolving styling value, it first needs to look into the linked list
(there is none) and than into the static `TStylingStatic` too see if there is a default value for
`dynamic` (there is not). Therefore it is safe to remove it.
If setting `true` case:
```ts
  lView[10] = true;     // assume `ctx.exp` is `true`
  lView[10 + 1] = true; // Just normalized `lView[10]`
```
So when the function is resolving styling value, it first needs to look into the linked list
(there is none) and than into `TNode.residualClass` (TNode.residualStyle) which contains
```ts
  tNode.residualClass = [
    'TEMPLATE': true,
  ];
```
This means that it is safe to add class.\nclass TStylingStatic(KeyValueArray):\n    pass\n\n# Binding data (flyweight) for a particular node that is shared between all templates
of a specific type.
If a property is:
   - PropertyAliases: that property's data was generated and this is it
   - Null: that property's data was already generated and nothing was found.
   - Undefined: that property's data has not yet been generated
see: https://en.wikipedia.org/wiki/Flyweight_pattern for more on the Flyweight pattern\nclass TNode(BaseModel):\n    # The type of the TNode. See TNodeType.\n    type: TNodeType = Field(..., description='The type of the TNode. See TNodeType.')\n    # Index of the TNode in TView.data and corresponding native element in LView.
This is necessary to get from any TNode to its corresponding native element when
traversing the node tree.
If index is -1, this is a dynamically created container node or embedded view node.\n    index: float = Field(..., description='Index of the TNode in TView.data and corresponding native element in LView.
This is necessary to get from any TNode to its corresponding native element when
traversing the node tree.
If index is -1, this is a dynamically created container node or embedded view node.')\n    # Insert before existing DOM node index.
When DOM nodes are being inserted, normally they are being appended as they are created.
Under i18n case, the translated text nodes are created ahead of time as part of the
`ɵɵi18nStart` instruction which means that this `TNode` can't just be appended and instead
needs to be inserted using `insertBeforeIndex` semantics.
Additionally sometimes it is necessary to insert new text nodes as a child of this `TNode`. In
such a case the value stores an array of text nodes to insert.
Example:
```html
<div i18n>
  Hello <span>World</span>!
</div>
```
In the above example the `ɵɵi18nStart` instruction can create `Hello `, `World` and `!` text
nodes. It can also insert `Hello ` and `!` text node as a child of `<div>`, but it can't
insert `World` because the `<span>` node has not yet been created. In such a case the
`<span>` `TNode` will have an array which will direct the `<span>` to not only insert
itself in front of `!` but also to insert the `World` (created by `ɵɵi18nStart`) into
`<span>` itself.
Pseudo code:
```ts
  if (insertBeforeIndex === null) {
    // append as normal
  } else if (Array.isArray(insertBeforeIndex)) {
    // First insert current `TNode` at correct location
    const currentNode = lView[this.index];
    parentNode.insertBefore(currentNode, lView[this.insertBeforeIndex[0]]);
    // Now append all of the children
    for(let i=1; i<this.insertBeforeIndex; i++) {
      currentNode.appendChild(lView[this.insertBeforeIndex[i]]);
    }
  } else {
    parentNode.insertBefore(lView[this.index], lView[this.insertBeforeIndex])
  }
```
- null: Append as normal using `parentNode.appendChild`
- `number`: Append using
     `parentNode.insertBefore(lView[this.index], lView[this.insertBeforeIndex])`
*Initialization*
Because `ɵɵi18nStart` executes before nodes are created, on `TView.firstCreatePass` it is not
possible for `ɵɵi18nStart` to set the `insertBeforeIndex` value as the corresponding `TNode`
has not yet been created. For this reason the `ɵɵi18nStart` creates a `TNodeType.Placeholder`
`TNode` at that location. See `TNodeType.Placeholder` for more information.\n    insertBeforeIndex: InsertBeforeIndex = Field(..., description='Insert before existing DOM node index.
When DOM nodes are being inserted, normally they are being appended as they are created.
Under i18n case, the translated text nodes are created ahead of time as part of the
`ɵɵi18nStart` instruction which means that this `TNode` can\'t just be appended and instead
needs to be inserted using `insertBeforeIndex` semantics.
Additionally sometimes it is necessary to insert new text nodes as a child of this `TNode`. In
such a case the value stores an array of text nodes to insert.
Example:
```html
<div i18n>
  Hello <span>World</span>!
</div>
```
In the above example the `ɵɵi18nStart` instruction can create `Hello `, `World` and `!` text
nodes. It can also insert `Hello ` and `!` text node as a child of `<div>`, but it can\'t
insert `World` because the `<span>` node has not yet been created. In such a case the
`<span>` `TNode` will have an array which will direct the `<span>` to not only insert
itself in front of `!` but also to insert the `World` (created by `ɵɵi18nStart`) into
`<span>` itself.
Pseudo code:
```ts
  if (insertBeforeIndex === null) {
    // append as normal
  } else if (Array.isArray(insertBeforeIndex)) {
    // First insert current `TNode` at correct location
    const currentNode = lView[this.index];
    parentNode.insertBefore(currentNode, lView[this.insertBeforeIndex[0]]);
    // Now append all of the children
    for(let i=1; i<this.insertBeforeIndex; i++) {
      currentNode.appendChild(lView[this.insertBeforeIndex[i]]);
    }
  } else {
    parentNode.insertBefore(lView[this.index], lView[this.insertBeforeIndex])
  }
```
- null: Append as normal using `parentNode.appendChild`
- `number`: Append using
     `parentNode.insertBefore(lView[this.index], lView[this.insertBeforeIndex])`
*Initialization*
Because `ɵɵi18nStart` executes before nodes are created, on `TView.firstCreatePass` it is not
possible for `ɵɵi18nStart` to set the `insertBeforeIndex` value as the corresponding `TNode`
has not yet been created. For this reason the `ɵɵi18nStart` creates a `TNodeType.Placeholder`
`TNode` at that location. See `TNodeType.Placeholder` for more information.')\n    # The index of the closest injector in this node's LView.
If the index === -1, there is no injector on this node or any ancestor node in this view.
If the index !== -1, it is the index of this node's injector OR the index of a parent
injector in the same view. We pass the parent injector index down the node tree of a view so
it's possible to find the parent injector without walking a potentially deep node tree.
Injector indices are not set across view boundaries because there could be multiple component
hosts.
If tNode.injectorIndex === tNode.parent.injectorIndex, then the index belongs to a parent
injector.\n    injectorIndex: float = Field(..., description='The index of the closest injector in this node\'s LView.
If the index === -1, there is no injector on this node or any ancestor node in this view.
If the index !== -1, it is the index of this node\'s injector OR the index of a parent
injector in the same view. We pass the parent injector index down the node tree of a view so
it\'s possible to find the parent injector without walking a potentially deep node tree.
Injector indices are not set across view boundaries because there could be multiple component
hosts.
If tNode.injectorIndex === tNode.parent.injectorIndex, then the index belongs to a parent
injector.')\n    # Stores starting index of the directives.\n    directiveStart: float = Field(..., description='Stores starting index of the directives.')\n    # Stores final exclusive index of the directives.
The area right behind the `directiveStart-directiveEnd` range is used to allocate the
`HostBindingFunction` `vars` (or null if no bindings.) Therefore `directiveEnd` is used to set
`LFrame.bindingRootIndex` before `HostBindingFunction` is executed.\n    directiveEnd: float = Field(..., description='Stores final exclusive index of the directives.
The area right behind the `directiveStart-directiveEnd` range is used to allocate the
`HostBindingFunction` `vars` (or null if no bindings.) Therefore `directiveEnd` is used to set
`LFrame.bindingRootIndex` before `HostBindingFunction` is executed.')\n    # Offset from the `directiveStart` at which the component (one at most) of the node is stored.
Set to -1 if no components have been applied to the node. Component index can be found using
`directiveStart + componentOffset`.\n    componentOffset: float = Field(..., description='Offset from the `directiveStart` at which the component (one at most) of the node is stored.
Set to -1 if no components have been applied to the node. Component index can be found using
`directiveStart + componentOffset`.')\n    # Stores the last directive which had a styling instruction.
Initial value of this is `-1` which means that no `hostBindings` styling instruction has
executed. As `hostBindings` instructions execute they set the value to the index of the
`DirectiveDef` which contained the last `hostBindings` styling instruction.
Valid values are:
- `-1` No `hostBindings` instruction has executed.
- `directiveStart <= directiveStylingLast < directiveEnd`: Points to the `DirectiveDef` of
the last styling instruction which executed in the `hostBindings`.
This data is needed so that styling instructions know which static styling data needs to be
collected from the `DirectiveDef.hostAttrs`. A styling instruction needs to collect all data
since last styling instruction.\n    directiveStylingLast: float = Field(..., description='Stores the last directive which had a styling instruction.
Initial value of this is `-1` which means that no `hostBindings` styling instruction has
executed. As `hostBindings` instructions execute they set the value to the index of the
`DirectiveDef` which contained the last `hostBindings` styling instruction.
Valid values are:
- `-1` No `hostBindings` instruction has executed.
- `directiveStart <= directiveStylingLast < directiveEnd`: Points to the `DirectiveDef` of
the last styling instruction which executed in the `hostBindings`.
This data is needed so that styling instructions know which static styling data needs to be
collected from the `DirectiveDef.hostAttrs`. A styling instruction needs to collect all data
since last styling instruction.')\n    # Stores indexes of property bindings. This field is only set in the ngDevMode and holds
indexes of property bindings so TestBed can get bound property metadata for a given node.\n    propertyBindings: Union[List[float], null] = Field(..., description='Stores indexes of property bindings. This field is only set in the ngDevMode and holds
indexes of property bindings so TestBed can get bound property metadata for a given node.')\n    # Stores if Node isComponent, isProjected, hasContentQuery, hasClassInput and hasStyleInput
etc.\n    flags: TNodeFlags = Field(..., description='Stores if Node isComponent, isProjected, hasContentQuery, hasClassInput and hasStyleInput
etc.')\n    # This number stores two values using its bits:
- the index of the first provider on that node (first 16 bits)
- the count of view providers from the component on this node (last 16 bits)\n    providerIndexes: TNodeProviderIndexes = Field(..., description='This number stores two values using its bits:
- the index of the first provider on that node (first 16 bits)
- the count of view providers from the component on this node (last 16 bits)')\n    # The value name associated with this node.
if type:
  `TNodeType.Text`: text value
  `TNodeType.Element`: tag name
  `TNodeType.ICUContainer`: `TIcu`\n    value: any = Field(..., description='The value name associated with this node.
if type:
  `TNodeType.Text`: text value
  `TNodeType.Element`: tag name
  `TNodeType.ICUContainer`: `TIcu`')\n    # Attributes associated with an element. We need to store attributes to support various
use-cases (attribute injection, content projection with selectors, directives matching).
Attributes are stored statically because reading them from the DOM would be way too slow for
content projection and queries.
Since attrs will always be calculated first, they will never need to be marked undefined by
other instructions.
For regular attributes a name of an attribute and its value alternate in the array.
e.g. ['role', 'checkbox']
This array can contain flags that will indicate "special attributes" (attributes with
namespaces, attributes extracted from bindings and outputs).\n    attrs: Union[TAttributes, null] = Field(..., description='Attributes associated with an element. We need to store attributes to support various
use-cases (attribute injection, content projection with selectors, directives matching).
Attributes are stored statically because reading them from the DOM would be way too slow for
content projection and queries.
Since attrs will always be calculated first, they will never need to be marked undefined by
other instructions.
For regular attributes a name of an attribute and its value alternate in the array.
e.g. [\'role\', \'checkbox\']
This array can contain flags that will indicate "special attributes" (attributes with
namespaces, attributes extracted from bindings and outputs).')\n    # Same as `TNode.attrs` but contains merged data across all directive host bindings.
We need to keep `attrs` as unmerged so that it can be used for attribute selectors.
We merge attrs here so that it can be used in a performant way for initial rendering.
The `attrs` are merged in first pass in following order:
- Component's `hostAttrs`
- Directives' `hostAttrs`
- Template `TNode.attrs` associated with the current `TNode`.\n    mergedAttrs: Union[TAttributes, null] = Field(..., description='Same as `TNode.attrs` but contains merged data across all directive host bindings.
We need to keep `attrs` as unmerged so that it can be used for attribute selectors.
We merge attrs here so that it can be used in a performant way for initial rendering.
The `attrs` are merged in first pass in following order:
- Component\'s `hostAttrs`
- Directives\' `hostAttrs`
- Template `TNode.attrs` associated with the current `TNode`.')\n    # A set of local names under which a given element is exported in a template and
visible to queries. An entry in this array can be created for different reasons:
- an element itself is referenced, ex.: `<div #foo>`
- a component is referenced, ex.: `<my-cmpt #foo>`
- a directive is referenced, ex.: `<my-cmpt #foo="directiveExportAs">`.
A given element might have different local names and those names can be associated
with a directive. We store local names at even indexes while odd indexes are reserved
for directive index in a view (or `-1` if there is no associated directive).
Some examples:
- `<div #foo>` => `["foo", -1]`
- `<my-cmpt #foo>` => `["foo", myCmptIdx]`
- `<my-cmpt #foo #bar="directiveExportAs">` => `["foo", myCmptIdx, "bar", directiveIdx]`
- `<div #foo #bar="directiveExportAs">` => `["foo", -1, "bar", directiveIdx]`\n    localNames: Union[List[Union[(string, number)]], null] = Field(..., description='A set of local names under which a given element is exported in a template and
visible to queries. An entry in this array can be created for different reasons:
- an element itself is referenced, ex.: `<div #foo>`
- a component is referenced, ex.: `<my-cmpt #foo>`
- a directive is referenced, ex.: `<my-cmpt #foo="directiveExportAs">`.
A given element might have different local names and those names can be associated
with a directive. We store local names at even indexes while odd indexes are reserved
for directive index in a view (or `-1` if there is no associated directive).
Some examples:
- `<div #foo>` => `["foo", -1]`
- `<my-cmpt #foo>` => `["foo", myCmptIdx]`
- `<my-cmpt #foo #bar="directiveExportAs">` => `["foo", myCmptIdx, "bar", directiveIdx]`
- `<div #foo #bar="directiveExportAs">` => `["foo", -1, "bar", directiveIdx]`')\n    # Information about input properties that need to be set once from attribute data.\n    initialInputs: Union[InitialInputData, null] = Field(..., description='Information about input properties that need to be set once from attribute data.')\n    # Input data for all directives on this node. `null` means that there are no directives with
inputs on this node.\n    inputs: Union[NodeInputBindings, null] = Field(..., description='Input data for all directives on this node. `null` means that there are no directives with
inputs on this node.')\n    # Input data for host directives applied to the node.\n    hostDirectiveInputs: Union[HostDirectiveInputs, null] = Field(..., description='Input data for host directives applied to the node.')\n    # Output data for all directives on this node. `null` means that there are no directives with
outputs on this node.\n    outputs: Union[NodeOutputBindings, null] = Field(..., description='Output data for all directives on this node. `null` means that there are no directives with
outputs on this node.')\n    # Input data for host directives applied to the node.\n    hostDirectiveOutputs: Union[HostDirectiveOutputs, null] = Field(..., description='Input data for host directives applied to the node.')\n    # Mapping between directive classes applied to the node and their indexes.\n    directiveToIndex: Union[DirectiveIndexMap, null] = Field(..., description='Mapping between directive classes applied to the node and their indexes.')\n    # The TView attached to this node.
If this TNode corresponds to an LContainer with a template (e.g. structural
directive), the template's TView will be stored here.
If this TNode corresponds to an element, tView will be `null`.\n    tView: Union[TView, null] = Field(..., description='The TView attached to this node.
If this TNode corresponds to an LContainer with a template (e.g. structural
directive), the template\'s TView will be stored here.
If this TNode corresponds to an element, tView will be `null`.')\n    # The next sibling node. Necessary so we can propagate through the root nodes of a view
to insert them or remove them from the DOM.\n    next: Union[TNode, null] = Field(..., description='The next sibling node. Necessary so we can propagate through the root nodes of a view
to insert them or remove them from the DOM.')\n    # The previous sibling node.
This simplifies operations when we need a pointer to the previous node.\n    prev: Union[TNode, null] = Field(..., description='The previous sibling node.
This simplifies operations when we need a pointer to the previous node.')\n    # The next projected sibling. Since in Angular content projection works on the node-by-node
basis the act of projecting nodes might change nodes relationship at the insertion point
(target view). At the same time we need to keep initial relationship between nodes as
expressed in content view.\n    projectionNext: Union[TNode, null] = Field(..., description='The next projected sibling. Since in Angular content projection works on the node-by-node
basis the act of projecting nodes might change nodes relationship at the insertion point
(target view). At the same time we need to keep initial relationship between nodes as
expressed in content view.')\n    # First child of the current node.
For component nodes, the child will always be a ContentChild (in same view).
For embedded view nodes, the child will be in their child view.\n    child: Union[TNode, null] = Field(..., description='First child of the current node.
For component nodes, the child will always be a ContentChild (in same view).
For embedded view nodes, the child will be in their child view.')\n    # Parent node (in the same view only).
We need a reference to a node's parent so we can append the node to its parent's native
element at the appropriate time.
If the parent would be in a different view (e.g. component host), this property will be null.
It's important that we don't try to cross component boundaries when retrieving the parent
because the parent will change (e.g. index, attrs) depending on where the component was
used (and thus shouldn't be stored on TNode). In these cases, we retrieve the parent through
LView.node instead (which will be instance-specific).
If this is an inline view node (V), the parent will be its container.\n    parent: Union[TElementNode, TContainerNode, null] = Field(..., description='Parent node (in the same view only).
We need a reference to a node\'s parent so we can append the node to its parent\'s native
element at the appropriate time.
If the parent would be in a different view (e.g. component host), this property will be null.
It\'s important that we don\'t try to cross component boundaries when retrieving the parent
because the parent will change (e.g. index, attrs) depending on where the component was
used (and thus shouldn\'t be stored on TNode). In these cases, we retrieve the parent through
LView.node instead (which will be instance-specific).
If this is an inline view node (V), the parent will be its container.')\n    # List of projected TNodes for a given component host element OR index into the said nodes.
For easier discussion assume this example:
`<parent>`'s view definition:
```html
<child id="c1">content1</child>
<child id="c2"><span>content2</span></child>
```
`<child>`'s view definition:
```html
<ng-content id="cont1"></ng-content>
```
If `Array.isArray(projection)` then `TNode` is a host element:
- `projection` stores the content nodes which are to be projected.
   - The nodes represent categories defined by the selector: For example:
     `<ng-content/><ng-content select="abc"/>` would represent the heads for `<ng-content/>`
     and `<ng-content select="abc"/>` respectively.
   - The nodes we store in `projection` are heads only, we used `.next` to get their
     siblings.
   - The nodes `.next` is sorted/rewritten as part of the projection setup.
   - `projection` size is equal to the number of projections `<ng-content>`. The size of
     `c1` will be `1` because `<child>` has only one `<ng-content>`.
- we store `projection` with the host (`c1`, `c2`) rather than the `<ng-content>` (`cont1`)
  because the same component (`<child>`) can be used in multiple locations (`c1`, `c2`) and
as a result have different set of nodes to project.
- without `projection` it would be difficult to efficiently traverse nodes to be projected.
If `typeof projection == 'number'` then `TNode` is a `<ng-content>` element:
- `projection` is an index of the host's `projection`Nodes.
  - This would return the first head node to project:
    `getHost(currentTNode).projection[currentTNode.projection]`.
- When projecting nodes the parent node retrieved may be a `<ng-content>` node, in which case
  the process is recursive in nature.
If `projection` is of type `RNode[][]` than we have a collection of native nodes passed as
projectable nodes during dynamic component creation.\n    projection: Union[List[Union[(TNode, RNode[])]], float, null] = Field(..., description='List of projected TNodes for a given component host element OR index into the said nodes.
For easier discussion assume this example:
`<parent>`\'s view definition:
```html
<child id="c1">content1</child>
<child id="c2"><span>content2</span></child>
```
`<child>`\'s view definition:
```html
<ng-content id="cont1"></ng-content>
```
If `Array.isArray(projection)` then `TNode` is a host element:
- `projection` stores the content nodes which are to be projected.
   - The nodes represent categories defined by the selector: For example:
     `<ng-content/><ng-content select="abc"/>` would represent the heads for `<ng-content/>`
     and `<ng-content select="abc"/>` respectively.
   - The nodes we store in `projection` are heads only, we used `.next` to get their
     siblings.
   - The nodes `.next` is sorted/rewritten as part of the projection setup.
   - `projection` size is equal to the number of projections `<ng-content>`. The size of
     `c1` will be `1` because `<child>` has only one `<ng-content>`.
- we store `projection` with the host (`c1`, `c2`) rather than the `<ng-content>` (`cont1`)
  because the same component (`<child>`) can be used in multiple locations (`c1`, `c2`) and
as a result have different set of nodes to project.
- without `projection` it would be difficult to efficiently traverse nodes to be projected.
If `typeof projection == \'number\'` then `TNode` is a `<ng-content>` element:
- `projection` is an index of the host\'s `projection`Nodes.
  - This would return the first head node to project:
    `getHost(currentTNode).projection[currentTNode.projection]`.
- When projecting nodes the parent node retrieved may be a `<ng-content>` node, in which case
  the process is recursive in nature.
If `projection` is of type `RNode[][]` than we have a collection of native nodes passed as
projectable nodes during dynamic component creation.')\n    # A collection of all `style` static values for an element (including from host).
This field will be populated if and when:
- There are one or more initial `style`s on an element (e.g. `<div style="width:200px;">`)
- There are one or more initial `style`s on a directive/component host
  (e.g. `@Directive({host: {style: "width:200px;" } }`)\n    styles: Union[str, null] = Field(..., description='A collection of all `style` static values for an element (including from host).
This field will be populated if and when:
- There are one or more initial `style`s on an element (e.g. `<div style="width:200px;">`)
- There are one or more initial `style`s on a directive/component host
  (e.g. `@Directive({host: {style: "width:200px;" } }`)')\n    # A collection of all `style` static values for an element excluding host sources.
Populated when there are one or more initial `style`s on an element
(e.g. `<div style="width:200px;">`)
Must be stored separately from `tNode.styles` to facilitate setting directive
inputs that shadow the `style` property. If we used `tNode.styles` as is for shadowed inputs,
we would feed host styles back into directives as "inputs". If we used `tNode.attrs`, we
would have to concatenate the attributes on every template pass. Instead, we process once on
first create pass and store here.\n    stylesWithoutHost: Union[str, null] = Field(..., description='A collection of all `style` static values for an element excluding host sources.
Populated when there are one or more initial `style`s on an element
(e.g. `<div style="width:200px;">`)
Must be stored separately from `tNode.styles` to facilitate setting directive
inputs that shadow the `style` property. If we used `tNode.styles` as is for shadowed inputs,
we would feed host styles back into directives as "inputs". If we used `tNode.attrs`, we
would have to concatenate the attributes on every template pass. Instead, we process once on
first create pass and store here.')\n    # A `KeyValueArray` version of residual `styles`.
When there are styling instructions than each instruction stores the static styling
which is of lower priority than itself. This means that there may be a higher priority
styling than the instruction.
Imagine:
```angular-ts
<div style="color: highest;" my-dir>
@Directive({
  host: {
    style: 'color: lowest; ',
    '[styles.color]': 'exp' // ɵɵstyleProp('color', ctx.exp);
  }
})
```
In the above case:
- `color: lowest` is stored with `ɵɵstyleProp('color', ctx.exp);` instruction
-  `color: highest` is the residual and is stored here.
- `undefined': not initialized.
- `null`: initialized but `styles` is `null`
- `KeyValueArray`: parsed version of `styles`.\n    residualStyles: Union[KeyValueArray<any>, undefined, null] = Field(..., description='A `KeyValueArray` version of residual `styles`.
When there are styling instructions than each instruction stores the static styling
which is of lower priority than itself. This means that there may be a higher priority
styling than the instruction.
Imagine:
```angular-ts
<div style="color: highest;" my-dir>
@Directive({
  host: {
    style: \'color: lowest; \',
    \'[styles.color]\': \'exp\' // ɵɵstyleProp(\'color\', ctx.exp);
  }
})
```
In the above case:
- `color: lowest` is stored with `ɵɵstyleProp(\'color\', ctx.exp);` instruction
-  `color: highest` is the residual and is stored here.
- `undefined\': not initialized.
- `null`: initialized but `styles` is `null`
- `KeyValueArray`: parsed version of `styles`.')\n    # A collection of all class static values for an element (including from host).
This field will be populated if and when:
- There are one or more initial classes on an element (e.g. `<div class="one two three">`)
- There are one or more initial classes on an directive/component host
  (e.g. `@Directive({host: {class: "SOME_CLASS" } }`)\n    classes: Union[str, null] = Field(..., description='A collection of all class static values for an element (including from host).
This field will be populated if and when:
- There are one or more initial classes on an element (e.g. `<div class="one two three">`)
- There are one or more initial classes on an directive/component host
  (e.g. `@Directive({host: {class: "SOME_CLASS" } }`)')\n    # A collection of all class static values for an element excluding host sources.
Populated when there are one or more initial classes on an element
(e.g. `<div class="SOME_CLASS">`)
Must be stored separately from `tNode.classes` to facilitate setting directive
inputs that shadow the `class` property. If we used `tNode.classes` as is for shadowed
inputs, we would feed host classes back into directives as "inputs". If we used
`tNode.attrs`, we would have to concatenate the attributes on every template pass. Instead,
we process once on first create pass and store here.\n    classesWithoutHost: Union[str, null] = Field(..., description='A collection of all class static values for an element excluding host sources.
Populated when there are one or more initial classes on an element
(e.g. `<div class="SOME_CLASS">`)
Must be stored separately from `tNode.classes` to facilitate setting directive
inputs that shadow the `class` property. If we used `tNode.classes` as is for shadowed
inputs, we would feed host classes back into directives as "inputs". If we used
`tNode.attrs`, we would have to concatenate the attributes on every template pass. Instead,
we process once on first create pass and store here.')\n    # A `KeyValueArray` version of residual `classes`.
Same as `TNode.residualStyles` but for classes.
- `undefined': not initialized.
- `null`: initialized but `classes` is `null`
- `KeyValueArray`: parsed version of `classes`.\n    residualClasses: Union[KeyValueArray<any>, undefined, null] = Field(..., description='A `KeyValueArray` version of residual `classes`.
Same as `TNode.residualStyles` but for classes.
- `undefined\': not initialized.
- `null`: initialized but `classes` is `null`
- `KeyValueArray`: parsed version of `classes`.')\n    # Stores the head/tail index of the class bindings.
- If no bindings, the head and tail will both be 0.
- If there are template bindings, stores the head/tail of the class bindings in the template.
- If no template bindings but there are host bindings, the head value will point to the last
  host binding for "class" (not the head of the linked list), tail will be 0.
See: `style_binding_list.ts` for details.
This is used by `insertTStylingBinding` to know where the next styling binding should be
inserted so that they can be sorted in priority order.\n    classBindings: TStylingRange = Field(..., description='Stores the head/tail index of the class bindings.
- If no bindings, the head and tail will both be 0.
- If there are template bindings, stores the head/tail of the class bindings in the template.
- If no template bindings but there are host bindings, the head value will point to the last
  host binding for "class" (not the head of the linked list), tail will be 0.
See: `style_binding_list.ts` for details.
This is used by `insertTStylingBinding` to know where the next styling binding should be
inserted so that they can be sorted in priority order.')\n    # Stores the head/tail index of the class bindings.
- If no bindings, the head and tail will both be 0.
- If there are template bindings, stores the head/tail of the style bindings in the template.
- If no template bindings but there are host bindings, the head value will point to the last
  host binding for "style" (not the head of the linked list), tail will be 0.
See: `style_binding_list.ts` for details.
This is used by `insertTStylingBinding` to know where the next styling binding should be
inserted so that they can be sorted in priority order.\n    styleBindings: TStylingRange = Field(..., description='Stores the head/tail index of the class bindings.
- If no bindings, the head and tail will both be 0.
- If there are template bindings, stores the head/tail of the style bindings in the template.
- If no template bindings but there are host bindings, the head value will point to the last
  host binding for "style" (not the head of the linked list), tail will be 0.
See: `style_binding_list.ts` for details.
This is used by `insertTStylingBinding` to know where the next styling binding should be
inserted so that they can be sorted in priority order.')\n\n# Static data for an element\nclass TElementNode(TNode):\n    # Index in the data[] array\n    index: float = Field(..., description='Index in the data[] array')\n    child: Union[TElementNode, TTextNode, TElementContainerNode, TContainerNode, TProjectionNode, null] = Field(...)\n    # Element nodes will have parents unless they are the first node of a component or
embedded view (which means their parent is in a different view and must be
retrieved using viewData[HOST_NODE]).\n    parent: Union[TElementNode, TElementContainerNode, null] = Field(..., description='Element nodes will have parents unless they are the first node of a component or
embedded view (which means their parent is in a different view and must be
retrieved using viewData[HOST_NODE]).')\n    tView: null = Field(...)\n    # If this is a component TNode with projection, this will be an array of projected
TNodes or native nodes (see TNode.projection for more info). If it's a regular element node
or a component without projection, it will be null.\n    projection: Union[List[Union[(TNode, RNode[])]], null] = Field(..., description='If this is a component TNode with projection, this will be an array of projected
TNodes or native nodes (see TNode.projection for more info). If it\'s a regular element node
or a component without projection, it will be null.')\n    # Stores TagName\n    value: str = Field(..., description='Stores TagName')\n\n# Static data for a text node\nclass TTextNode(TNode):\n    # Index in the data[] array\n    index: float = Field(..., description='Index in the data[] array')\n    child: null = Field(...)\n    # Text nodes will have parents unless they are the first node of a component or
embedded view (which means their parent is in a different view and must be
retrieved using LView.node).\n    parent: Union[TElementNode, TElementContainerNode, null] = Field(..., description='Text nodes will have parents unless they are the first node of a component or
embedded view (which means their parent is in a different view and must be
retrieved using LView.node).')\n    tView: null = Field(...)\n    projection: null = Field(...)\n\n# Static data for an LContainer\nclass TContainerNode(TNode):\n    # Index in the data[] array.
If it's -1, this is a dynamically created container node that isn't stored in
data[] (e.g. when you inject ViewContainerRef) .\n    index: float = Field(..., description='Index in the data[] array.
If it\'s -1, this is a dynamically created container node that isn\'t stored in
data[] (e.g. when you inject ViewContainerRef) .')\n    child: null = Field(...)\n    # Container nodes will have parents unless:
- They are the first node of a component or embedded view
- They are dynamically created\n    parent: Union[TElementNode, TElementContainerNode, null] = Field(..., description='Container nodes will have parents unless:
- They are the first node of a component or embedded view
- They are dynamically created')\n    tView: Union[TView, null] = Field(...)\n    projection: null = Field(...)\n    value: null = Field(...)\n\n# Static data for an <ng-container>\nclass TElementContainerNode(TNode):\n    # Index in the LView[] array.\n    index: float = Field(..., description='Index in the LView[] array.')\n    child: Union[TElementNode, TTextNode, TContainerNode, TElementContainerNode, TProjectionNode, null] = Field(...)\n    parent: Union[TElementNode, TElementContainerNode, null] = Field(...)\n    tView: null = Field(...)\n    projection: null = Field(...)\n\n# Static data for an LProjectionNode\nclass TProjectionNode(TNode):\n    # Index in the data[] array\n    child: null = Field(..., description='Index in the data[] array')\n    # Projection nodes will have parents unless they are the first node of a component
or embedded view (which means their parent is in a different view and must be
retrieved using LView.node).\n    parent: Union[TElementNode, TElementContainerNode, null] = Field(..., description='Projection nodes will have parents unless they are the first node of a component
or embedded view (which means their parent is in a different view and must be
retrieved using LView.node).')\n    tView: null = Field(...)\n    # Index of the projection node. (See TNode.projection for more info.)\n    projection: float = Field(..., description='Index of the projection node. (See TNode.projection for more info.)')\n    value: null = Field(...)\n\n# The state associated with a container.
This is an array so that its structure is closer to LView. This helps
when traversing the view tree (which is a mix of containers and component
views), so we can jump to viewOrContainer[NEXT] in the same way regardless
of type.\nclass LContainer(Array):\n    # The host element of this LContainer.
The host could be an LView if this container is on a component node.
In that case, the component LView is its HOST.\n    [HOST]: Union[RElement, RComment, LView] = Field(..., description='The host element of this LContainer.
The host could be an LView if this container is on a component node.
In that case, the component LView is its HOST.')\n    # This is a type field which allows us to differentiate `LContainer` from `StylingContext` in an
efficient way. The value is always set to `true`\n    [TYPE]: true = Field(..., description='This is a type field which allows us to differentiate `LContainer` from `StylingContext` in an
efficient way. The value is always set to `true`')\n    # Flags for this container. See LContainerFlags for more info.\n    [FLAGS]: LContainerFlags = Field(..., description='Flags for this container. See LContainerFlags for more info.')\n    # Access to the parent view is necessary so we can propagate back
up from inside a container to parent[NEXT].\n    [PARENT]: LView = Field(..., description='Access to the parent view is necessary so we can propagate back
up from inside a container to parent[NEXT].')\n    # This allows us to jump from a container to a sibling container or component
view with the same parent, so we can remove listeners efficiently.\n    [NEXT]: Union[LView, LContainer, null] = Field(..., description='This allows us to jump from a container to a sibling container or component
view with the same parent, so we can remove listeners efficiently.')\n    # A collection of views created based on the underlying `<ng-template>` element but inserted into
a different `LContainer`. We need to track views created from a given declaration point since
queries collect matches from the embedded view declaration point and _not_ the insertion point.\n    [MOVED_VIEWS]: Union[List[LView], null] = Field(..., description='A collection of views created based on the underlying `<ng-template>` element but inserted into
a different `LContainer`. We need to track views created from a given declaration point since
queries collect matches from the embedded view declaration point and _not_ the insertion point.')\n    # Pointer to the `TNode` which represents the host of the container.\n    [T_HOST]: TNode = Field(..., description='Pointer to the `TNode` which represents the host of the container.')\n    # The comment element that serves as an anchor for this LContainer.\n    [NATIVE]: RComment = Field(..., description='The comment element that serves as an anchor for this LContainer.')\n    # Array of `ViewRef`s used by any `ViewContainerRef`s that point to this container.
This is lazily initialized by `ViewContainerRef` when the first view is inserted.
NOTE: This is stored as `any[]` because render3 should really not be aware of `ViewRef` and
doing so creates circular dependency.\n    [VIEW_REFS]: Union[List[unknown], null] = Field(..., description='Array of `ViewRef`s used by any `ViewContainerRef`s that point to this container.
This is lazily initialized by `ViewContainerRef` when the first view is inserted.
NOTE: This is stored as `any[]` because render3 should really not be aware of `ViewRef` and
doing so creates circular dependency.')\n    # Array of dehydrated views within this container.
This information is used during the hydration process on the client.
The hydration logic tries to find a matching dehydrated view, "claim" it
and use this information to do further matching. After that, this "claimed"
view is removed from the list. The remaining "unclaimed" views are
"garbage-collected" later on, i.e. removed from the DOM once the hydration
logic finishes.\n    [DEHYDRATED_VIEWS]: Union[List[DehydratedContainerView], null] = Field(..., description='Array of dehydrated views within this container.
This information is used during the hydration process on the client.
The hydration logic tries to find a matching dehydrated view, "claim" it
and use this information to do further matching. After that, this "claimed"
view is removed from the list. The remaining "unclaimed" views are
"garbage-collected" later on, i.e. removed from the DOM once the hydration
logic finishes.')\n\n# Information about how a type or `InjectionToken` interfaces with the DI system.
At a minimum, this includes a `factory` which defines how to create the given type `T`, possibly
requesting injection of other types if necessary.
Optionally, a `providedIn` parameter specifies that the given type belongs to a particular
`Injector`, `NgModule`, or a special scope (e.g. `'root'`). A value of `null` indicates
that the injectable does not belong to any scope.
@codeGenApi
@publicApi The ViewEngine compiler emits code with this type for injectables. This code is
  deployed to npm, and should be treated as public api.\nclass ɵɵInjectableDeclaration(BaseModel):\n    # Specifies that the given type belongs to a particular injector:
- `InjectorType` such as `NgModule`,
- `'root'` the root injector
- `'any'` all injectors.
- `null`, does not belong to any injector. Must be explicitly listed in the injector
  `providers`.\n    providedIn: Union[InjectorType<any>, 'root', 'platform', 'any', 'environment', null] = Field(..., description='Specifies that the given type belongs to a particular injector:
- `InjectorType` such as `NgModule`,
- `\'root\'` the root injector
- `\'any\'` all injectors.
- `null`, does not belong to any injector. Must be explicitly listed in the injector
  `providers`.')\n    # The token to which this definition belongs.
Note that this may not be the same as the type that the `factory` will create.\n    token: unknown = Field(..., description='The token to which this definition belongs.
Note that this may not be the same as the type that the `factory` will create.')\n    # Factory method to execute to create an instance of the injectable.\n    factory: (t?: Type<any>) => T = Field(..., description='Factory method to execute to create an instance of the injectable.')\n    # In a case of no explicit injector, a location where the instance of the injectable is stored.\n    value: Union[T, undefined] = Field(..., description='In a case of no explicit injector, a location where the instance of the injectable is stored.')\n\n# Information about the providers to be included in an `Injector` as well as how the given type
which carries the information should be created by the DI system.
An `InjectorDef` can import other types which have `InjectorDefs`, forming a deep nested
structure of providers with a defined priority (identically to how `NgModule`s also have
an import/dependency structure).
NOTE: This is a private type and should not be exported
@codeGenApi\nclass ɵɵInjectorDef(BaseModel):\n    providers: List[List[Union[(Type<any>, ValueProvider, ExistingProvider, FactoryProvider, ConstructorProvider, StaticClassProvider, ClassProvider, EnvironmentProviders, any[])]]] = Field(...)\n    imports: List[List[Union[(InjectorType<any>, InjectorTypeWithProviders<any>)]]] = Field(...)\n\n# A `Type` which has a `ɵprov: ɵɵInjectableDeclaration` static field.
`InjectableType`s contain their own Dependency Injection metadata and are usable in an
`InjectorDef`-based `StaticInjector`.
@publicApi\nclass InjectableType(Type):\n    # Opaque type whose structure is highly version dependent. Do not rely on any properties.\n    ɵprov: unknown = Field(..., description='Opaque type whose structure is highly version dependent. Do not rely on any properties.')\n\n# A type which has an `InjectorDef` static field.
`InjectorTypes` can be used to configure a `StaticInjector`.
This is an opaque type whose structure is highly version dependent. Do not rely on any
properties.
@publicApi\nclass InjectorType(Type):\n    ɵfac: Optional[unknown] = None\n    ɵinj: unknown = Field(...)\n\n# Describes the `InjectorDef` equivalent of a `ModuleWithProviders`, an `InjectorType` with an
associated array of providers.
Objects of this type can be listed in the imports section of an `InjectorDef`.
NOTE: This is a private type and should not be exported\nclass InjectorTypeWithProviders(BaseModel):\n    ngModule: InjectorType<T> = Field(...)\n    providers: Optional[List[List[Union[(Type<any>, ValueProvider, ExistingProvider, FactoryProvider, ConstructorProvider, StaticClassProvider, ClassProvider, EnvironmentProviders, any[])]]]] = None\n\n# A schema definition associated with a component or an NgModule.
@see {@link NgModule}
@see {@link CUSTOM_ELEMENTS_SCHEMA}
@see {@link NO_ERRORS_SCHEMA}
@param name The name of a defined schema.
@publicApi\nclass SchemaMetadata(BaseModel):\n    name: str = Field(...)\n\n# Definition of what a factory function should look like.\nclass FactoryFn(BaseModel):\n    pass\n\n# Definition of what a template rendering function should look like for a component.\nclass ComponentTemplate(BaseModel):\n    pass\n\nclass ClassDebugInfo(BaseModel):\n    className: str = Field(...)\n    filePath: Optional[str] = None\n    lineNumber: Optional[float] = None\n    forbidOrphanRendering: Optional[bool] = None\n\n# A subclass of `Type` which has a static `ɵcmp`:`ComponentDef` field making it
consumable for rendering.\nclass ComponentType(Type):\n    ɵcmp: unknown = Field(...)\n\n# A subclass of `Type` which has a static `ɵdir`:`DirectiveDef` field making it
consumable for rendering.\nclass DirectiveType(Type):\n    ɵdir: unknown = Field(...)\n    ɵfac: unknown = Field(...)\n\n# A subclass of `Type` which has a static `ɵpipe`:`PipeDef` field making it
consumable for rendering.\nclass PipeType(Type):\n    ɵpipe: unknown = Field(...)\n\n# Runtime link information for Directives.
This is an internal data structure used by the render to link
directives into templates.
NOTE: Always use `defineDirective` function to create this object,
never create the object directly since the shape of this object
can change between versions.
@param Selector type metadata specifying the selector of the directive or component
See: {@link defineDirective}\nclass DirectiveDef(BaseModel):\n    # A dictionary mapping the inputs' public name to their minified property names
(along with flags if there are any).\n    inputs: Union[Record<string, [
        minifiedName: string,
        flags: InputFlags,
        transform: InputTransformFunction, null
    ]>] = Field(..., description='A dictionary mapping the inputs\' public name to their minified property names
(along with flags if there are any).')\n    # Contains the raw input information produced by the compiler. Can be
used to do further processing after the `inputs` have been inverted.\n    inputConfig: Union[{
        [P in keyof T]?: string, [InputFlags, string, string?, InputTransformFunction?];
    }] = Field(..., description='Contains the raw input information produced by the compiler. Can be
used to do further processing after the `inputs` have been inverted.')\n    # @deprecated This is only here because `NgOnChanges` incorrectly uses declared name instead of
public or minified name.\n    declaredInputs: Record<string, string> = Field(..., description='@deprecated This is only here because `NgOnChanges` incorrectly uses declared name instead of
public or minified name.')\n    # A dictionary mapping the outputs' minified property names to their public API names, which
are their aliases if any, or their original unminified property names
(as in `@Output('alias') propertyName: any;`).\n    outputs: Record<string, string> = Field(..., description='A dictionary mapping the outputs\' minified property names to their public API names, which
are their aliases if any, or their original unminified property names
(as in `@Output(\'alias\') propertyName: any;`).')\n    # Function to create and refresh content queries associated with a given directive.\n    contentQueries: Union[ContentQueriesFunction<T>, null] = Field(..., description='Function to create and refresh content queries associated with a given directive.')\n    # Query-related instructions for a directive. Note that while directives don't have a
view and as such view queries won't necessarily do anything, there might be
components that extend the directive.\n    viewQuery: Union[ViewQueriesFunction<T>, null] = Field(..., description='Query-related instructions for a directive. Note that while directives don\'t have a
view and as such view queries won\'t necessarily do anything, there might be
components that extend the directive.')\n    # Refreshes host bindings on the associated directive.\n    hostBindings: Union[HostBindingsFunction<T>, null] = Field(..., description='Refreshes host bindings on the associated directive.')\n    # The number of bindings in this directive `hostBindings` (including pure fn bindings).
Used to calculate the length of the component's LView array, so we
can pre-fill the array and set the host binding start index.\n    hostVars: float = Field(..., description='The number of bindings in this directive `hostBindings` (including pure fn bindings).
Used to calculate the length of the component\'s LView array, so we
can pre-fill the array and set the host binding start index.')\n    # Assign static attribute values to a host element.
This property will assign static attribute values as well as class and style
values to a host element. Since attribute values can consist of different types of values, the
`hostAttrs` array must include the values in the following format:
attrs = [
  // static attributes (like `title`, `name`, `id`...)
  attr1, value1, attr2, value,
  // a single namespace value (like `x:id`)
  NAMESPACE_MARKER, namespaceUri1, name1, value1,
  // another single namespace value (like `x:name`)
  NAMESPACE_MARKER, namespaceUri2, name2, value2,
  // a series of CSS classes that will be applied to the element (no spaces)
  CLASSES_MARKER, class1, class2, class3,
  // a series of CSS styles (property + value) that will be applied to the element
  STYLES_MARKER, prop1, value1, prop2, value2
]
All non-class and non-style attributes must be defined at the start of the list
first before all class and style values are set. When there is a change in value
type (like when classes and styles are introduced) a marker must be used to separate
the entries. The marker values themselves are set via entries found in the
[AttributeMarker] enum.\n    hostAttrs: Union[TAttributes, null] = Field(..., description='Assign static attribute values to a host element.
This property will assign static attribute values as well as class and style
values to a host element. Since attribute values can consist of different types of values, the
`hostAttrs` array must include the values in the following format:
attrs = [
  // static attributes (like `title`, `name`, `id`...)
  attr1, value1, attr2, value,
  // a single namespace value (like `x:id`)
  NAMESPACE_MARKER, namespaceUri1, name1, value1,
  // another single namespace value (like `x:name`)
  NAMESPACE_MARKER, namespaceUri2, name2, value2,
  // a series of CSS classes that will be applied to the element (no spaces)
  CLASSES_MARKER, class1, class2, class3,
  // a series of CSS styles (property + value) that will be applied to the element
  STYLES_MARKER, prop1, value1, prop2, value2
]
All non-class and non-style attributes must be defined at the start of the list
first before all class and style values are set. When there is a change in value
type (like when classes and styles are introduced) a marker must be used to separate
the entries. The marker values themselves are set via entries found in the
[AttributeMarker] enum.')\n    # Token representing the directive. Used by DI.\n    type: Type<T> = Field(..., description='Token representing the directive. Used by DI.')\n    # Function that resolves providers and publishes them into the DI system.\n    providersResolver: Union[(<U extends T>(def: DirectiveDef<U>, processProvidersFn?: ProcessProvidersFunction) => void), null] = Field(..., description='Function that resolves providers and publishes them into the DI system.')\n    # The selectors that will be used to match nodes to this directive.\n    selectors: CssSelectorList = Field(..., description='The selectors that will be used to match nodes to this directive.')\n    # Name under which the directive is exported (for use with local references in template)\n    exportAs: Union[List[str], null] = Field(..., description='Name under which the directive is exported (for use with local references in template)')\n    # Whether this directive (or component) is standalone.\n    standalone: bool = Field(..., description='Whether this directive (or component) is standalone.')\n    # Whether this directive (or component) uses the signals authoring experience.\n    signals: bool = Field(..., description='Whether this directive (or component) uses the signals authoring experience.')\n    # Factory function used to create a new directive instance. Will be null initially.
Populated when the factory is first requested by directive instantiation logic.\n    factory: Union[FactoryFn<T>, null] = Field(..., description='Factory function used to create a new directive instance. Will be null initially.
Populated when the factory is first requested by directive instantiation logic.')\n    # The features applied to this directive\n    features: Union[List[DirectiveDefFeature], null] = Field(..., description='The features applied to this directive')\n    # Info related to debugging/troubleshooting for this component. This info is only available in
dev mode.\n    debugInfo: Union[ClassDebugInfo, null] = Field(..., description='Info related to debugging/troubleshooting for this component. This info is only available in
dev mode.')\n    # Function inteded to be called after template selector matching is done
in order to resolve information about their host directives. Patched
onto the definition by the `ɵɵHostDirectivesFeature`.\n    resolveHostDirectives: Union[((matches: DirectiveDef<unknown>[]) => HostDirectiveResolution), null] = Field(..., description='Function inteded to be called after template selector matching is done
in order to resolve information about their host directives. Patched
onto the definition by the `ɵɵHostDirectivesFeature`.')\n    # Additional directives to be applied whenever the directive has been matched.
`HostDirectiveConfig` objects represent a host directive that can be resolved eagerly and were
already pre-processed when the definition was created. A function needs to be resolved lazily
during directive matching, because it's a forward reference.
**Note:** we can't use `HostDirectiveConfig` in the array, because there's no way to
distinguish if a function in the array is a `Type` or a `() => HostDirectiveConfig[]`.\n    hostDirectives: Union[List[Union[(HostDirectiveDef, (() => HostDirectiveConfig[]))]], null] = Field(..., description='Additional directives to be applied whenever the directive has been matched.
`HostDirectiveConfig` objects represent a host directive that can be resolved eagerly and were
already pre-processed when the definition was created. A function needs to be resolved lazily
during directive matching, because it\'s a forward reference.
**Note:** we can\'t use `HostDirectiveConfig` in the array, because there\'s no way to
distinguish if a function in the array is a `Type` or a `() => HostDirectiveConfig[]`.')\n    setInput: Union[Union[(<U extends T>(this: DirectiveDef<U>, instance: U, inputSignalNode: null, InputSignalNode<unknown, unknown>, value: any, publicName: string, privateName: string) => void)], null] = Field(...)\n\n# Runtime link information for Components.
This is an internal data structure used by the render to link
components into templates.
NOTE: Always use `defineComponent` function to create this object,
never create the object directly since the shape of this object
can change between versions.
See: {@link defineComponent}\nclass ComponentDef(DirectiveDef):\n    # Unique ID for the component. Used in view encapsulation and
to keep track of the injector in standalone components.\n    id: str = Field(..., description='Unique ID for the component. Used in view encapsulation and
to keep track of the injector in standalone components.')\n    # The View template of the component.\n    template: ComponentTemplate<T> = Field(..., description='The View template of the component.')\n    # Constants associated with the component's view.\n    consts: Union[TConstantsOrFactory, null] = Field(..., description='Constants associated with the component\'s view.')\n    # An array of `ngContent[selector]` values that were found in the template.\n    ngContentSelectors: Optional[List[List[str]]] = None = Field(..., description='An array of `ngContent[selector]` values that were found in the template.')\n    # A set of styles that the component needs to be present for component to render correctly.\n    styles: List[List[str]] = Field(..., description='A set of styles that the component needs to be present for component to render correctly.')\n    # The number of nodes, local refs, and pipes in this component template.
Used to calculate the length of the component's LView array, so we
can pre-fill the array and set the binding start index.\n    decls: float = Field(..., description='The number of nodes, local refs, and pipes in this component template.
Used to calculate the length of the component\'s LView array, so we
can pre-fill the array and set the binding start index.')\n    # The number of bindings in this component template (including pure fn bindings).
Used to calculate the length of the component's LView array, so we
can pre-fill the array and set the host binding start index.\n    vars: float = Field(..., description='The number of bindings in this component template (including pure fn bindings).
Used to calculate the length of the component\'s LView array, so we
can pre-fill the array and set the host binding start index.')\n    # Query-related instructions for a component.\n    viewQuery: Union[ViewQueriesFunction<T>, null] = Field(..., description='Query-related instructions for a component.')\n    # The view encapsulation type, which determines how styles are applied to
DOM elements. One of
- `Emulated` (default): Emulate native scoping of styles.
- `Native`: Use the native encapsulation mechanism of the renderer.
- `ShadowDom`: Use modern [ShadowDOM](https://w3c.github.io/webcomponents/spec/shadow/) and
  create a ShadowRoot for component's host element.
- `None`: Do not provide any template or style encapsulation.\n    encapsulation: ViewEncapsulation = Field(..., description='The view encapsulation type, which determines how styles are applied to
DOM elements. One of
- `Emulated` (default): Emulate native scoping of styles.
- `Native`: Use the native encapsulation mechanism of the renderer.
- `ShadowDom`: Use modern [ShadowDOM](https://w3c.github.io/webcomponents/spec/shadow/) and
  create a ShadowRoot for component\'s host element.
- `None`: Do not provide any template or style encapsulation.')\n    # Defines arbitrary developer-defined data to be stored on a renderer instance.
This is useful for renderers that delegate to other renderers.\n    data: Dict[str, Any] = Field(..., description='Defines arbitrary developer-defined data to be stored on a renderer instance.
This is useful for renderers that delegate to other renderers.')\n    # Whether or not this component's ChangeDetectionStrategy is OnPush\n    onPush: bool = Field(..., description='Whether or not this component\'s ChangeDetectionStrategy is OnPush')\n    # Whether or not this component is signal-based.\n    signals: bool = Field(..., description='Whether or not this component is signal-based.')\n    # Registry of directives and components that may be found in this view.
The property is either an array of `DirectiveDef`s or a function which returns the array of
`DirectiveDef`s. The function is necessary to be able to support forward declarations.\n    directiveDefs: Union[DirectiveDefListOrFactory, null] = Field(..., description='Registry of directives and components that may be found in this view.
The property is either an array of `DirectiveDef`s or a function which returns the array of
`DirectiveDef`s. The function is necessary to be able to support forward declarations.')\n    # Registry of pipes that may be found in this view.
The property is either an array of `PipeDefs`s or a function which returns the array of
`PipeDefs`s. The function is necessary to be able to support forward declarations.\n    pipeDefs: Union[PipeDefListOrFactory, null] = Field(..., description='Registry of pipes that may be found in this view.
The property is either an array of `PipeDefs`s or a function which returns the array of
`PipeDefs`s. The function is necessary to be able to support forward declarations.')\n    # Unfiltered list of all dependencies of a component, or `null` if none.\n    dependencies: Union[TypeOrFactory<DependencyTypeList>, null] = Field(..., description='Unfiltered list of all dependencies of a component, or `null` if none.')\n    # The set of schemas that declare elements to be allowed in the component's template.\n    schemas: Union[List[SchemaMetadata], null] = Field(..., description='The set of schemas that declare elements to be allowed in the component\'s template.')\n    # Ivy runtime uses this place to store the computed tView for the component. This gets filled on
the first run of component.\n    tView: Union[TView, null] = Field(..., description='Ivy runtime uses this place to store the computed tView for the component. This gets filled on
the first run of component.')\n    # A function used by the framework to create standalone injectors.\n    getStandaloneInjector: Union[Union[((parentInjector: EnvironmentInjector) => EnvironmentInjector, null)], null] = Field(..., description='A function used by the framework to create standalone injectors.')\n    # A function used by the framework to create the list of external runtime style URLs.\n    getExternalStyles: Union[((encapsulationId?: string) => string[]), null] = Field(..., description='A function used by the framework to create the list of external runtime style URLs.')\n    # Used to store the result of `noSideEffects` function so that it is not removed by closure
compiler. The property should never be read.\n    _: Optional[unknown] = None = Field(..., description='Used to store the result of `noSideEffects` function so that it is not removed by closure
compiler. The property should never be read.')\n\n# Runtime link information for Pipes.
This is an internal data structure used by the renderer to link
pipes into templates.
NOTE: Always use `definePipe` function to create this object,
never create the object directly since the shape of this object
can change between versions.
See: {@link definePipe}\nclass PipeDef(BaseModel):\n    # Token representing the pipe.\n    type: Type<T> = Field(..., description='Token representing the pipe.')\n    # Pipe name.
Used to resolve pipe in templates.\n    name: str = Field(..., description='Pipe name.
Used to resolve pipe in templates.')\n    # Factory function used to create a new pipe instance. Will be null initially.
Populated when the factory is first requested by pipe instantiation logic.\n    factory: Union[FactoryFn<T>, null] = Field(..., description='Factory function used to create a new pipe instance. Will be null initially.
Populated when the factory is first requested by pipe instantiation logic.')\n    # Whether or not the pipe is pure.
Pure pipes result only depends on the pipe input and not on internal
state of the pipe.\n    pure: bool = Field(..., description='Whether or not the pipe is pure.
Pure pipes result only depends on the pipe input and not on internal
state of the pipe.')\n    # Whether this pipe is standalone.\n    standalone: bool = Field(..., description='Whether this pipe is standalone.')\n    onDestroy: Union[(() => void), null] = Field(...)\n\nclass DirectiveDefFeature(BaseModel):\n    # Marks a feature as something that {@link InheritDefinitionFeature} will execute
during inheritance.
NOTE: DO NOT SET IN ROOT OF MODULE! Doing so will result in tree-shakers/bundlers
identifying the change as a side effect, and the feature will be included in
every bundle.\n    ngInherit: Optional[true] = None = Field(..., description='Marks a feature as something that {@link InheritDefinitionFeature} will execute
during inheritance.
NOTE: DO NOT SET IN ROOT OF MODULE! Doing so will result in tree-shakers/bundlers
identifying the change as a side effect, and the feature will be included in
every bundle.')\n\n# Runtime information used to configure a host directive.\nclass HostDirectiveDef(BaseModel):\n    # Class representing the host directive.\n    directive: Type<T> = Field(..., description='Class representing the host directive.')\n    # Directive inputs that have been exposed.\n    inputs: HostDirectiveBindingMap = Field(..., description='Directive inputs that have been exposed.')\n    # Directive outputs that have been exposed.\n    outputs: HostDirectiveBindingMap = Field(..., description='Directive outputs that have been exposed.')\n\n# Mapping between the public aliases of directive bindings and the underlying inputs/outputs that
they represent. Also serves as an allowlist of the inputs/outputs from the host directive that
the author has decided to expose.\nclass HostDirectiveBindingMap(BaseModel):\n    pass\n\nclass ComponentDefFeature(BaseModel):\n    # Marks a feature as something that {@link InheritDefinitionFeature} will execute
during inheritance.
NOTE: DO NOT SET IN ROOT OF MODULE! Doing so will result in tree-shakers/bundlers
identifying the change as a side effect, and the feature will be included in
every bundle.\n    ngInherit: Optional[true] = None = Field(..., description='Marks a feature as something that {@link InheritDefinitionFeature} will execute
during inheritance.
NOTE: DO NOT SET IN ROOT OF MODULE! Doing so will result in tree-shakers/bundlers
identifying the change as a side effect, and the feature will be included in
every bundle.')\n\n# NgModule scope info as provided by AoT compiler
In full compilation Ivy resolved all the "module with providers" and forward refs the whole array
if at least one element is forward refed. So we end up with type `Type<any>[]|(() =>
Type<any>[])`.
In local mode the compiler passes the raw info as they are to the runtime functions as it is not
possible to resolve them any further due to limited info at compile time. So we end up with type
`RawScopeInfoFromDecorator[]`.\nclass NgModuleScopeInfoFromDecorator(BaseModel):\n    # List of components, directives, and pipes declared by this module.\n    declarations: Optional[Union[List[Type<any>], (() => Type<any>[]), List[RawScopeInfoFromDecorator]]] = None = Field(..., description='List of components, directives, and pipes declared by this module.')\n    # List of modules or `ModuleWithProviders` or standalone components imported by this module.\n    imports: Optional[Union[List[Type<any>], (() => Type<any>[]), List[RawScopeInfoFromDecorator]]] = None = Field(..., description='List of modules or `ModuleWithProviders` or standalone components imported by this module.')\n    # List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this
module.\n    exports: Optional[Union[List[Type<any>], (() => Type<any>[]), List[RawScopeInfoFromDecorator]]] = None = Field(..., description='List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this
module.')\n    # The set of components that are bootstrapped when this module is bootstrapped. This field is
only available in local compilation mode. In full compilation mode bootstrap info is passed
directly to the module def runtime after statically analyzed and resolved.\n    bootstrap: Optional[Union[List[Type<any>], (() => Type<any>[]), List[RawScopeInfoFromDecorator]]] = None = Field(..., description='The set of components that are bootstrapped when this module is bootstrapped. This field is
only available in local compilation mode. In full compilation mode bootstrap info is passed
directly to the module def runtime after statically analyzed and resolved.')\n\n# Basic set of data structures used for identifying a defer block
and triggering defer blocks\nclass DehydratedDeferBlock(BaseModel):\n    lView: LView = Field(...)\n    tNode: TNode = Field(...)\n    lContainer: LContainer = Field(...)\n\n# Describes the data shared across all instances of a defer block.\nclass TDeferBlockDetails(BaseModel):\n    # Index in an LView and TData arrays where a template for the primary content
can be found.\n    primaryTmplIndex: float = Field(..., description='Index in an LView and TData arrays where a template for the primary content
can be found.')\n    # Index in an LView and TData arrays where a template for the loading block can be found.\n    loadingTmplIndex: Union[float, null] = Field(..., description='Index in an LView and TData arrays where a template for the loading block can be found.')\n    # Extra configuration parameters (such as `after` and `minimum`) for the loading block.\n    loadingBlockConfig: Union[DeferredLoadingBlockConfig, null] = Field(..., description='Extra configuration parameters (such as `after` and `minimum`) for the loading block.')\n    # Index in an LView and TData arrays where a template for the placeholder block can be found.\n    placeholderTmplIndex: Union[float, null] = Field(..., description='Index in an LView and TData arrays where a template for the placeholder block can be found.')\n    # Extra configuration parameters (such as `after` and `minimum`) for the placeholder block.\n    placeholderBlockConfig: Union[DeferredPlaceholderBlockConfig, null] = Field(..., description='Extra configuration parameters (such as `after` and `minimum`) for the placeholder block.')\n    # Index in an LView and TData arrays where a template for the error block can be found.\n    errorTmplIndex: Union[float, null] = Field(..., description='Index in an LView and TData arrays where a template for the error block can be found.')\n    # Compiler-generated function that loads all dependencies for a defer block.\n    dependencyResolverFn: Union[DependencyResolverFn, null] = Field(..., description='Compiler-generated function that loads all dependencies for a defer block.')\n    # Keeps track of the current loading state of defer block dependencies.\n    loadingState: DeferDependenciesLoadingState = Field(..., description='Keeps track of the current loading state of defer block dependencies.')\n    # Dependency loading Promise. This Promise is helpful for cases when there
are multiple instances of a defer block (e.g. if it was used inside of an *ngFor),
which all await the same set of dependencies.\n    loadingPromise: Union[Promise<unknown>, null] = Field(..., description='Dependency loading Promise. This Promise is helpful for cases when there
are multiple instances of a defer block (e.g. if it was used inside of an *ngFor),
which all await the same set of dependencies.')\n    # List of providers collected from all NgModules that were imported by
standalone components used within this defer block.\n    providers: Union[List[Provider], null] = Field(..., description='List of providers collected from all NgModules that were imported by
standalone components used within this defer block.')\n    # List of hydrate triggers for a given block\n    hydrateTriggers: Union[Union[Map<DeferBlockTrigger, HydrateTriggerDetails, null>], null] = Field(..., description='List of hydrate triggers for a given block')\n    # Defer block flags, which should be used for all
instances of a given defer block (the flags that should be
placed into the `TDeferDetails` at runtime).\n    flags: TDeferDetailsFlags = Field(..., description='Defer block flags, which should be used for all
instances of a given defer block (the flags that should be
placed into the `TDeferDetails` at runtime).')\n    # Tracks debugging information about the deferred block.\n    debug: Union[Dict[str, Any], null] = Field(..., description='Tracks debugging information about the deferred block.')\n\n# Describes specified delay (in ms) in the `hydrate on timer()` trigger.\nclass HydrateTimerTriggerDetails(BaseModel):\n    delay: float = Field(...)\n\n# Internal structure used for configuration of defer block behavior.\nclass DeferBlockConfig(BaseModel):\n    behavior: DeferBlockBehavior = Field(...)\n\n# **INTERNAL**, avoid referencing it in application code.
Describes a helper class that allows to intercept a call to retrieve current
dependency loading function and replace it with a different implementation.
This interceptor class is needed to allow testing blocks in different states
by simulating loading response.\nclass DeferBlockDependencyInterceptor(BaseModel):\n    pass\n\n# A single tracing snapshot.\nclass TracingSnapshot(BaseModel):\n    pass\n\n# Tracing mechanism which can associate causes (snapshots) with runs of
subsequent operations.
Not defined by Angular directly, but defined in contexts where tracing is
desired.\nclass TracingService(BaseModel):\n    pass\n\n# A callback that runs after render.
@publicApi\nclass AfterRenderRef(BaseModel):\n    pass\n\nclass ReactiveLViewConsumer(ReactiveNode):\n    lView: Union[LView, null] = Field(...)\n\n# Abstraction that encompasses any kind of effect that can be scheduled.\nclass SchedulableEffect(BaseModel):\n    zone: Union[Dict[str, Any], null] = Field(...)\n    dirty: bool = Field(...)\n\n# A global reactive effect, which can be manually destroyed.
@publicApi 20.0\nclass EffectRef(BaseModel):\n    pass\n\n# Options passed to the `effect` function.
@publicApi 20.0\nclass CreateEffectOptions(BaseModel):\n    # The `Injector` in which to create the effect.
If this is not provided, the current [injection context](guide/di/dependency-injection-context)
will be used instead (via `inject`).\n    injector: Optional[Injector] = None = Field(..., description='The `Injector` in which to create the effect.
If this is not provided, the current [injection context](guide/di/dependency-injection-context)
will be used instead (via `inject`).')\n    # Whether the `effect` should require manual cleanup.
If this is `false` (the default) the effect will automatically register itself to be cleaned up
with the current `DestroyRef`.
If this is `true` and you want to use the effect outside an injection context, you still
need to provide an `Injector` to the effect.\n    manualCleanup: Optional[bool] = None = Field(..., description='Whether the `effect` should require manual cleanup.
If this is `false` (the default) the effect will automatically register itself to be cleaned up
with the current `DestroyRef`.
If this is `true` and you want to use the effect outside an injection context, you still
need to provide an `Injector` to the effect.')\n    # @deprecated no longer required, signal writes are allowed by default.\n    allowSignalWrites: Optional[bool] = None = Field(..., description='@deprecated no longer required, signal writes are allowed by default.')\n    # A debug name for the effect. Used in Angular DevTools to identify the effect.\n    debugName: Optional[str] = None = Field(..., description='A debug name for the effect. Used in Angular DevTools to identify the effect.')\n\nclass EffectNode(ReactiveNode):\n    hasRun: bool = Field(...)\n    cleanupFns: Union[List[EffectCleanupFn], undefined] = Field(...)\n    injector: Injector = Field(...)\n    notifier: ChangeDetectionScheduler = Field(...)\n    onDestroyFn: () => void = Field(...)\n    fn: (cleanupFn: EffectCleanupRegisterFn) => void = Field(...)\n\nclass ViewEffectNode(EffectNode):\n    view: LView = Field(...)\n\n# An object representing query metadata extracted from query annotations.\nclass TQueryMetadata(BaseModel):\n    predicate: Union[ProviderToken<unknown>, List[str]] = Field(...)\n    read: any = Field(...)\n    flags: QueryFlags = Field(...)\n\n# TQuery objects represent all the query-related data that remain the same from one view instance
to another and can be determined on the very first template pass. Most notably TQuery holds all
the matches for a given view.\nclass TQuery(BaseModel):\n    # Query metadata extracted from query annotations.\n    metadata: TQueryMetadata = Field(..., description='Query metadata extracted from query annotations.')\n    # Index of a query in a declaration view in case of queries propagated to en embedded view, -1
for queries declared in a given view. We are storing this index so we can find a parent query
to clone for an embedded view (when an embedded view is created).\n    indexInDeclarationView: float = Field(..., description='Index of a query in a declaration view in case of queries propagated to en embedded view, -1
for queries declared in a given view. We are storing this index so we can find a parent query
to clone for an embedded view (when an embedded view is created).')\n    # Matches collected on the first template pass. Each match is a pair of:
- TNode index;
- match index;
A TNode index can be either:
- a positive number (the most common case) to indicate a matching TNode;
- a negative number to indicate that a given query is crossing a <ng-template> element and
results from views created based on TemplateRef should be inserted at this place.
A match index is a number used to find an actual value (for a given node) when query results
are materialized. This index can have one of the following values:
- -2 - indicates that we need to read a special token (TemplateRef, ViewContainerRef etc.);
- -1 - indicates that we need to read a default value based on the node type (TemplateRef for
ng-template and ElementRef for other elements);
- a positive number - index of an injectable to be read from the element injector.\n    matches: Union[List[float], null] = Field(..., description='Matches collected on the first template pass. Each match is a pair of:
- TNode index;
- match index;
A TNode index can be either:
- a positive number (the most common case) to indicate a matching TNode;
- a negative number to indicate that a given query is crossing a <ng-template> element and
results from views created based on TemplateRef should be inserted at this place.
A match index is a number used to find an actual value (for a given node) when query results
are materialized. This index can have one of the following values:
- -2 - indicates that we need to read a special token (TemplateRef, ViewContainerRef etc.);
- -1 - indicates that we need to read a default value based on the node type (TemplateRef for
ng-template and ElementRef for other elements);
- a positive number - index of an injectable to be read from the element injector.')\n    # A flag indicating if a given query crosses an <ng-template> element. This flag exists for
performance reasons: we can notice that queries not crossing any <ng-template> elements will
have matches from a given view only (and adapt processing accordingly).\n    crossesNgTemplate: bool = Field(..., description='A flag indicating if a given query crosses an <ng-template> element. This flag exists for
performance reasons: we can notice that queries not crossing any <ng-template> elements will
have matches from a given view only (and adapt processing accordingly).')\n\n# TQueries represent a collection of individual TQuery objects tracked in a given view. Most of the
methods on this interface are simple proxy methods to the corresponding functionality on TQuery.\nclass TQueries(BaseModel):\n    # Returns the number of queries tracked in a given view.\n    length: float = Field(..., description='Returns the number of queries tracked in a given view.')\n\n# An interface that represents query-related information specific to a view instance. Most notably
it contains:
- materialized query matches;
- a pointer to a QueryList where materialized query results should be reported.\nclass LQuery(BaseModel):\n    # Materialized query matches for a given view only (!). Results are initialized lazily so the
array of matches is set to `null` initially.\n    matches: Union[List[Union[(T, null)]], null] = Field(..., description='Materialized query matches for a given view only (!). Results are initialized lazily so the
array of matches is set to `null` initially.')\n    # A QueryList where materialized query results should be reported.\n    queryList: QueryList<T> = Field(..., description='A QueryList where materialized query results should be reported.')\n\n# lQueries represent a collection of individual LQuery objects tracked in a given view.\nclass LQueries(BaseModel):\n    # A collection of queries tracked in a given view.\n    queries: List[List[LQuery<any>]] = Field(..., description='A collection of queries tracked in a given view.')\n\n# Used by `RendererFactory2` to associate custom rendering data and styles
with a rendering implementation.
 @publicApi\nclass RendererType2(BaseModel):\n    # A unique identifying string for the new renderer, used when creating
unique styles for encapsulation.\n    id: str = Field(..., description='A unique identifying string for the new renderer, used when creating
unique styles for encapsulation.')\n    # The view encapsulation type, which determines how styles are applied to
DOM elements. One of
- `Emulated` (default): Emulate native scoping of styles.
- `Native`: Use the native encapsulation mechanism of the renderer.
- `ShadowDom`: Use modern [Shadow
DOM](https://w3c.github.io/webcomponents/spec/shadow/) and
create a ShadowRoot for component's host element.
- `None`: Do not provide any template or style encapsulation.\n    encapsulation: ViewEncapsulation = Field(..., description='The view encapsulation type, which determines how styles are applied to
DOM elements. One of
- `Emulated` (default): Emulate native scoping of styles.
- `Native`: Use the native encapsulation mechanism of the renderer.
- `ShadowDom`: Use modern [Shadow
DOM](https://w3c.github.io/webcomponents/spec/shadow/) and
create a ShadowRoot for component\'s host element.
- `None`: Do not provide any template or style encapsulation.')\n    # Defines CSS styles to be stored on a renderer instance.\n    styles: List[List[str]] = Field(..., description='Defines CSS styles to be stored on a renderer instance.')\n    # Defines arbitrary developer-defined data to be stored on a renderer instance.
This is useful for renderers that delegate to other renderers.\n    data: Dict[str, Any] = Field(..., description='Defines arbitrary developer-defined data to be stored on a renderer instance.
This is useful for renderers that delegate to other renderers.')\n    # A function used by the framework to create the list of external runtime style URLs.\n    getExternalStyles: Optional[Union[((encapsulationId?: string) => string[]), null]] = None = Field(..., description='A function used by the framework to create the list of external runtime style URLs.')\n\n# Options that can be used to configure an event listener.
@publicApi\nclass ListenerOptions(BaseModel):\n    capture: Optional[bool] = None\n    once: Optional[bool] = None\n    passive: Optional[bool] = None\n\n# Procedural style of API needed to create elements and text nodes.
In non-native browser environments (e.g. platforms such as web-workers), this is the
facade that enables element manipulation. In practice, this is implemented by `Renderer2`.\nclass Renderer(BaseModel):\n    # This property is allowed to be null / undefined,
in which case the view engine won't call it.
This is used as a performance optimization for production mode.\n    destroyNode: Optional[Union[((node: RNode) => void), null]] = None = Field(..., description='This property is allowed to be null / undefined,
in which case the view engine won\'t call it.
This is used as a performance optimization for production mode.')\n\nclass RendererFactory(BaseModel):\n    pass\n\nclass OpaqueViewState(BaseModel):\n    __brand__: 'Brand for OpaqueViewState that nothing will match' = Field(...)\n\n# `LView` stores all of the information needed to process the instructions as
they are invoked from the template. Each embedded view and component view has its
own `LView`. When processing a particular view, we set the `viewData` to that
`LView`. When that view is done processing, the `viewData` is set back to
whatever the original `viewData` was before (the parent `LView`).
Keeping separate state for each view facilities view insertion / deletion, so we
don't have to edit the data array based on which views are present.\nclass LView(Array):\n    # The node into which this `LView` is inserted.\n    [HOST]: Union[RElement, null] = Field(..., description='The node into which this `LView` is inserted.')\n    # The static data for this view. We need a reference to this so we can easily walk up the
node tree in DI and get the TView.data array associated with a node (where the
directive defs are stored).\n    [TVIEW]: TView = Field(..., description='The static data for this view. We need a reference to this so we can easily walk up the
node tree in DI and get the TView.data array associated with a node (where the
directive defs are stored).')\n    # Flags for this view. See LViewFlags for more info.\n    [FLAGS]: LViewFlags = Field(..., description='Flags for this view. See LViewFlags for more info.')\n    # This may store an {@link LView} or {@link LContainer}.
`LView` - The parent view. This is needed when we exit the view and must restore the previous
LView. Without this, the render method would have to keep a stack of
views as it is recursively rendering templates.
`LContainer` - The current view is part of a container, and is an embedded view.\n    [PARENT]: Union[LView, LContainer, null] = Field(..., description='This may store an {@link LView} or {@link LContainer}.
`LView` - The parent view. This is needed when we exit the view and must restore the previous
LView. Without this, the render method would have to keep a stack of
views as it is recursively rendering templates.
`LContainer` - The current view is part of a container, and is an embedded view.')\n    # The next sibling LView or LContainer.
Allows us to propagate between sibling view states that aren't in the same
container. Embedded views already have a node.next, but it is only set for
views in the same container. We need a way to link component views and views
across containers as well.\n    [NEXT]: Union[LView, LContainer, null] = Field(..., description='The next sibling LView or LContainer.
Allows us to propagate between sibling view states that aren\'t in the same
container. Embedded views already have a node.next, but it is only set for
views in the same container. We need a way to link component views and views
across containers as well.')\n    # Queries active for this view - nodes from a view are reported to those queries.\n    [QUERIES]: Union[LQueries, null] = Field(..., description='Queries active for this view - nodes from a view are reported to those queries.')\n    # Store the `TNode` of the location where the current `LView` is inserted into.
Given:
```html
<div>
  <ng-template><span></span></ng-template>
</div>
```
We end up with two `TView`s.
- `parent` `TView` which contains `<div><!-- anchor --></div>`
- `child` `TView` which contains `<span></span>`
Typically the `child` is inserted into the declaration location of the `parent`, but it can be
inserted anywhere. Because it can be inserted anywhere it is not possible to store the
insertion information in the `TView` and instead we must store it in the `LView[T_HOST]`.
So to determine where is our insertion parent we would execute:
```ts
const parentLView = lView[PARENT];
const parentTNode = lView[T_HOST];
const insertionParent = parentLView[parentTNode.index];
```
If `null`, this is the root view of an application (root component is in this view) and it has
no parents.\n    [T_HOST]: Union[TNode, null] = Field(..., description='Store the `TNode` of the location where the current `LView` is inserted into.
Given:
```html
<div>
  <ng-template><span></span></ng-template>
</div>
```
We end up with two `TView`s.
- `parent` `TView` which contains `<div><!-- anchor --></div>`
- `child` `TView` which contains `<span></span>`
Typically the `child` is inserted into the declaration location of the `parent`, but it can be
inserted anywhere. Because it can be inserted anywhere it is not possible to store the
insertion information in the `TView` and instead we must store it in the `LView[T_HOST]`.
So to determine where is our insertion parent we would execute:
```ts
const parentLView = lView[PARENT];
const parentTNode = lView[T_HOST];
const insertionParent = parentLView[parentTNode.index];
```
If `null`, this is the root view of an application (root component is in this view) and it has
no parents.')\n    # When a view is destroyed, listeners need to be released and outputs need to be
unsubscribed. This context array stores both listener functions wrapped with
their context and output subscription instances for a particular view.
These change per LView instance, so they cannot be stored on TView. Instead,
TView.cleanup saves an index to the necessary context in this array.
After `LView` is created it is possible to attach additional instance specific functions at the
end of the `lView[CLEANUP]` because we know that no more `T` level cleanup functions will be
added here.\n    [CLEANUP]: Union[List[any], null] = Field(..., description='When a view is destroyed, listeners need to be released and outputs need to be
unsubscribed. This context array stores both listener functions wrapped with
their context and output subscription instances for a particular view.
These change per LView instance, so they cannot be stored on TView. Instead,
TView.cleanup saves an index to the necessary context in this array.
After `LView` is created it is possible to attach additional instance specific functions at the
end of the `lView[CLEANUP]` because we know that no more `T` level cleanup functions will be
added here.')\n    # - For dynamic views, this is the context with which to render the template (e.g.
  `NgForContext`), or `{}` if not defined explicitly.
- For root view of the root component it's a reference to the component instance itself.
- For components, the context is a reference to the component instance itself.
- For inline views, the context is null.\n    [CONTEXT]: T = Field(..., description='- For dynamic views, this is the context with which to render the template (e.g.
  `NgForContext`), or `{}` if not defined explicitly.
- For root view of the root component it\'s a reference to the component instance itself.
- For components, the context is a reference to the component instance itself.
- For inline views, the context is null.')\n    # A Module Injector to be used as fall back after Element Injectors are consulted.\n    [INJECTOR]: Injector = Field(..., description='A Module Injector to be used as fall back after Element Injectors are consulted.')\n    # Contextual data that is shared across multiple instances of `LView` in the same application.\n    [ENVIRONMENT]: LViewEnvironment = Field(..., description='Contextual data that is shared across multiple instances of `LView` in the same application.')\n    # Renderer to be used for this view.\n    [RENDERER]: Renderer = Field(..., description='Renderer to be used for this view.')\n    # Reference to the first LView or LContainer beneath this LView in
the hierarchy.
Necessary to store this so views can traverse through their nested views
to remove listeners and call onDestroy callbacks.\n    [CHILD_HEAD]: Union[LView, LContainer, null] = Field(..., description='Reference to the first LView or LContainer beneath this LView in
the hierarchy.
Necessary to store this so views can traverse through their nested views
to remove listeners and call onDestroy callbacks.')\n    # The last LView or LContainer beneath this LView in the hierarchy.
The tail allows us to quickly add a new state to the end of the view list
without having to propagate starting from the first child.\n    [CHILD_TAIL]: Union[LView, LContainer, null] = Field(..., description='The last LView or LContainer beneath this LView in the hierarchy.
The tail allows us to quickly add a new state to the end of the view list
without having to propagate starting from the first child.')\n    # View where this view's template was declared.
The template for a dynamically created view may be declared in a different view than
it is inserted. We already track the "insertion view" (view where the template was
inserted) in LView[PARENT], but we also need access to the "declaration view"
(view where the template was declared). Otherwise, we wouldn't be able to call the
view's template function with the proper contexts. Context should be inherited from
the declaration view tree, not the insertion view tree.
Example (AppComponent template):
<ng-template #foo></ng-template>       <-- declared here -->
<some-comp [tpl]="foo"></some-comp>    <-- inserted inside this component -->
The <ng-template> above is declared in the AppComponent template, but it will be passed into
SomeComp and inserted there. In this case, the declaration view would be the AppComponent,
but the insertion view would be SomeComp. When we are removing views, we would want to
traverse through the insertion view to clean up listeners. When we are calling the
template function during change detection, we need the declaration view to get inherited
context.\n    [DECLARATION_VIEW]: Union[LView, null] = Field(..., description='View where this view\'s template was declared.
The template for a dynamically created view may be declared in a different view than
it is inserted. We already track the "insertion view" (view where the template was
inserted) in LView[PARENT], but we also need access to the "declaration view"
(view where the template was declared). Otherwise, we wouldn\'t be able to call the
view\'s template function with the proper contexts. Context should be inherited from
the declaration view tree, not the insertion view tree.
Example (AppComponent template):
<ng-template #foo></ng-template>       <-- declared here -->
<some-comp [tpl]="foo"></some-comp>    <-- inserted inside this component -->
The <ng-template> above is declared in the AppComponent template, but it will be passed into
SomeComp and inserted there. In this case, the declaration view would be the AppComponent,
but the insertion view would be SomeComp. When we are removing views, we would want to
traverse through the insertion view to clean up listeners. When we are calling the
template function during change detection, we need the declaration view to get inherited
context.')\n    # Points to the declaration component view, used to track transplanted `LView`s.
See: `DECLARATION_VIEW` which points to the actual `LView` where it was declared, whereas
`DECLARATION_COMPONENT_VIEW` points to the component which may not be same as
`DECLARATION_VIEW`.
Example:
```html
<#VIEW #myComp>
 <div *ngIf="true">
  <ng-template #myTmpl>...</ng-template>
 </div>
</#VIEW>
```
In the above case `DECLARATION_VIEW` for `myTmpl` points to the `LView` of `ngIf` whereas
`DECLARATION_COMPONENT_VIEW` points to `LView` of the `myComp` which owns the template.
The reason for this is that all embedded views are always check-always whereas the component
view can be check-always or on-push. When we have a transplanted view it is important to
determine if we have transplanted a view from check-always declaration to on-push insertion
point. In such a case the transplanted view needs to be added to the `LContainer` in the
declared `LView` and CD during the declared view CD (in addition to the CD at the insertion
point.) (Any transplanted views which are intra Component are of no interest because the CD
strategy of declaration and insertion will always be the same, because it is the same
component.)
Queries already track moved views in `LView[DECLARATION_LCONTAINER]` and
`LContainer[MOVED_VIEWS]`. However the queries also track `LView`s which moved within the same
component `LView`. Transplanted views are a subset of moved views, and we use
`DECLARATION_COMPONENT_VIEW` to differentiate them. As in this example.
Example showing intra component `LView` movement.
```html
<#VIEW #myComp>
  <div *ngIf="condition; then thenBlock else elseBlock"></div>
  <ng-template #thenBlock>Content to render when condition is true.</ng-template>
  <ng-template #elseBlock>Content to render when condition is false.</ng-template>
</#VIEW>
```
The `thenBlock` and `elseBlock` is moved but not transplanted.
Example showing inter component `LView` movement (transplanted view).
```html
<#VIEW #myComp>
  <ng-template #myTmpl>...</ng-template>
  <insertion-component [template]="myTmpl"></insertion-component>
</#VIEW>
```
In the above example `myTmpl` is passed into a different component. If `insertion-component`
instantiates `myTmpl` and `insertion-component` is on-push then the `LContainer` needs to be
marked as containing transplanted views and those views need to be CD as part of the
declaration CD.
When change detection runs, it iterates over `[MOVED_VIEWS]` and CDs any child `LView`s where
the `DECLARATION_COMPONENT_VIEW` of the current component and the child `LView` does not match
(it has been transplanted across components.)
Note: `[DECLARATION_COMPONENT_VIEW]` points to itself if the LView is a component view (the
      simplest / most common case).
see also:
  - https://hackmd.io/@mhevery/rJUJsvv9H write up of the problem
  - `LContainer[HAS_TRANSPLANTED_VIEWS]` which marks which `LContainer` has transplanted views.
  - `LContainer[TRANSPLANT_HEAD]` and `LContainer[TRANSPLANT_TAIL]` storage for transplanted
  - `LView[DECLARATION_LCONTAINER]` similar problem for queries
  - `LContainer[MOVED_VIEWS]` similar problem for queries\n    [DECLARATION_COMPONENT_VIEW]: LView = Field(..., description='Points to the declaration component view, used to track transplanted `LView`s.
See: `DECLARATION_VIEW` which points to the actual `LView` where it was declared, whereas
`DECLARATION_COMPONENT_VIEW` points to the component which may not be same as
`DECLARATION_VIEW`.
Example:
```html
<#VIEW #myComp>
 <div *ngIf="true">
  <ng-template #myTmpl>...</ng-template>
 </div>
</#VIEW>
```
In the above case `DECLARATION_VIEW` for `myTmpl` points to the `LView` of `ngIf` whereas
`DECLARATION_COMPONENT_VIEW` points to `LView` of the `myComp` which owns the template.
The reason for this is that all embedded views are always check-always whereas the component
view can be check-always or on-push. When we have a transplanted view it is important to
determine if we have transplanted a view from check-always declaration to on-push insertion
point. In such a case the transplanted view needs to be added to the `LContainer` in the
declared `LView` and CD during the declared view CD (in addition to the CD at the insertion
point.) (Any transplanted views which are intra Component are of no interest because the CD
strategy of declaration and insertion will always be the same, because it is the same
component.)
Queries already track moved views in `LView[DECLARATION_LCONTAINER]` and
`LContainer[MOVED_VIEWS]`. However the queries also track `LView`s which moved within the same
component `LView`. Transplanted views are a subset of moved views, and we use
`DECLARATION_COMPONENT_VIEW` to differentiate them. As in this example.
Example showing intra component `LView` movement.
```html
<#VIEW #myComp>
  <div *ngIf="condition; then thenBlock else elseBlock"></div>
  <ng-template #thenBlock>Content to render when condition is true.</ng-template>
  <ng-template #elseBlock>Content to render when condition is false.</ng-template>
</#VIEW>
```
The `thenBlock` and `elseBlock` is moved but not transplanted.
Example showing inter component `LView` movement (transplanted view).
```html
<#VIEW #myComp>
  <ng-template #myTmpl>...</ng-template>
  <insertion-component [template]="myTmpl"></insertion-component>
</#VIEW>
```
In the above example `myTmpl` is passed into a different component. If `insertion-component`
instantiates `myTmpl` and `insertion-component` is on-push then the `LContainer` needs to be
marked as containing transplanted views and those views need to be CD as part of the
declaration CD.
When change detection runs, it iterates over `[MOVED_VIEWS]` and CDs any child `LView`s where
the `DECLARATION_COMPONENT_VIEW` of the current component and the child `LView` does not match
(it has been transplanted across components.)
Note: `[DECLARATION_COMPONENT_VIEW]` points to itself if the LView is a component view (the
      simplest / most common case).
see also:
  - https://hackmd.io/@mhevery/rJUJsvv9H write up of the problem
  - `LContainer[HAS_TRANSPLANTED_VIEWS]` which marks which `LContainer` has transplanted views.
  - `LContainer[TRANSPLANT_HEAD]` and `LContainer[TRANSPLANT_TAIL]` storage for transplanted
  - `LView[DECLARATION_LCONTAINER]` similar problem for queries
  - `LContainer[MOVED_VIEWS]` similar problem for queries')\n    # A declaration point of embedded views (ones instantiated based on the content of a
<ng-template>), null for other types of views.
We need to track all embedded views created from a given declaration point so we can prepare
query matches in a proper order (query matches are ordered based on their declaration point and
_not_ the insertion point).\n    [DECLARATION_LCONTAINER]: Union[LContainer, null] = Field(..., description='A declaration point of embedded views (ones instantiated based on the content of a
<ng-template>), null for other types of views.
We need to track all embedded views created from a given declaration point so we can prepare
query matches in a proper order (query matches are ordered based on their declaration point and
_not_ the insertion point).')\n    # More flags for this view. See PreOrderHookFlags for more info.\n    [PREORDER_HOOK_FLAGS]: PreOrderHookFlags = Field(..., description='More flags for this view. See PreOrderHookFlags for more info.')\n    # Unique ID of the view. Used for `__ngContext__` lookups in the `LView` registry.\n    [ID]: float = Field(..., description='Unique ID of the view. Used for `__ngContext__` lookups in the `LView` registry.')\n    # A container related to hydration annotation information that's associated with this LView.\n    [HYDRATION]: Union[DehydratedView, null] = Field(..., description='A container related to hydration annotation information that\'s associated with this LView.')\n    # Optional injector assigned to embedded views that takes
precedence over the element and module injectors.\n    [EMBEDDED_VIEW_INJECTOR]: Union[Injector, null] = Field(..., description='Optional injector assigned to embedded views that takes
precedence over the element and module injectors.')\n    # Effect scheduling operations that need to run during this views's update pass.\n    [EFFECTS_TO_SCHEDULE]: Union[List[() => void], null] = Field(..., description='Effect scheduling operations that need to run during this views\'s update pass.')\n    [EFFECTS]: Union[Set<ViewEffectNode>, null] = Field(...)\n    # A collection of callbacks functions that are executed when a given LView is destroyed. Those
are user defined, LView-specific destroy callbacks that don't have any corresponding TView
entries.\n    [ON_DESTROY_HOOKS]: Union[List[() => void], null] = Field(..., description='A collection of callbacks functions that are executed when a given LView is destroyed. Those
are user defined, LView-specific destroy callbacks that don\'t have any corresponding TView
entries.')\n    # The `Consumer` for this `LView`'s template so that signal reads can be tracked.
This is initially `null` and gets assigned a consumer after template execution
if any signals were read.\n    [REACTIVE_TEMPLATE_CONSUMER]: Union[ReactiveLViewConsumer, null] = Field(..., description='The `Consumer` for this `LView`\'s template so that signal reads can be tracked.
This is initially `null` and gets assigned a consumer after template execution
if any signals were read.')\n    [AFTER_RENDER_SEQUENCES_TO_ADD]: Union[List[AfterRenderSequence], null] = Field(...)\n\n# Contextual data that is shared across multiple instances of `LView` in the same application.\nclass LViewEnvironment(BaseModel):\n    # Factory to be used for creating Renderer.\n    rendererFactory: RendererFactory = Field(..., description='Factory to be used for creating Renderer.')\n    # An optional custom sanitizer.\n    sanitizer: Union[Sanitizer, null] = Field(..., description='An optional custom sanitizer.')\n    # Scheduler for change detection to notify when application state changes.\n    changeDetectionScheduler: Union[ChangeDetectionScheduler, null] = Field(..., description='Scheduler for change detection to notify when application state changes.')\n    # Whether `ng-reflect-*` attributes should be produced in dev mode
(always disabled in prod mode).\n    ngReflect: bool = Field(..., description='Whether `ng-reflect-*` attributes should be produced in dev mode
(always disabled in prod mode).')\n\n# Stores a set of OpCodes to process `HostBindingsFunction` associated with a current view.
In order to invoke `HostBindingsFunction` we need:
1. 'elementIdx`: Index to the element associated with the `HostBindingsFunction`.
2. 'directiveIdx`: Index to the directive associated with the `HostBindingsFunction`. (This will
   become the context for the `HostBindingsFunction` invocation.)
3. `bindingRootIdx`: Location where the bindings for the `HostBindingsFunction` start. Internally
   `HostBindingsFunction` binding indexes start from `0` so we need to add `bindingRootIdx` to
   it.
4. `HostBindingsFunction`: A host binding function to execute.
The above information needs to be encoded into the `HostBindingOpCodes` in an efficient manner.
1. `elementIdx` is encoded into the `HostBindingOpCodes` as `~elementIdx` (so a negative number);
2. `directiveIdx`
3. `bindingRootIdx`
4. `HostBindingsFunction` is passed in as is.
The `HostBindingOpCodes` array contains:
- negative number to select the element index.
- followed by 1 or more of:
   - a number to select the directive index
   - a number to select the bindingRoot index
   - and a function to invoke.
## Example
```ts
const hostBindingOpCodes = [
  ~30,                               // Select element 30
  40, 45, MyDir.ɵdir.hostBindings    // Invoke host bindings on MyDir on element 30;
                                     // directiveIdx = 40; bindingRootIdx = 45;
  50, 55, OtherDir.ɵdir.hostBindings // Invoke host bindings on OtherDire on element 30
                                     // directiveIdx = 50; bindingRootIdx = 55;
]
```
## Pseudocode
```ts
const hostBindingOpCodes = tView.hostBindingOpCodes;
if (hostBindingOpCodes === null) return;
for (let i = 0; i < hostBindingOpCodes.length; i++) {
  const opCode = hostBindingOpCodes[i] as number;
  if (opCode < 0) {
    // Negative numbers are element indexes.
    setSelectedIndex(~opCode);
  } else {
    // Positive numbers are NumberTuple which store bindingRootIndex and directiveIndex.
    const directiveIdx = opCode;
    const bindingRootIndx = hostBindingOpCodes[++i] as number;
    const hostBindingFn = hostBindingOpCodes[++i] as HostBindingsFunction<any>;
    setBindingRootForHostBindings(bindingRootIndx, directiveIdx);
    const context = lView[directiveIdx];
    hostBindingFn(RenderFlags.Update, context);
  }
}
```\nclass HostBindingOpCodes(Array):\n    __brand__: 'HostBindingOpCodes' = Field(...)\n    debug: Optional[List[List[str]]] = None\n\n# The static data for an LView (shared between all templates of a
given type).
Stored on the `ComponentDef.tView`.\nclass TView(BaseModel):\n    # Type of `TView` (`Root`|`Component`|`Embedded`).\n    type: TViewType = Field(..., description='Type of `TView` (`Root`|`Component`|`Embedded`).')\n    # This is a blueprint used to generate LView instances for this TView. Copying this
blueprint is faster than creating a new LView from scratch.\n    blueprint: LView = Field(..., description='This is a blueprint used to generate LView instances for this TView. Copying this
blueprint is faster than creating a new LView from scratch.')\n    # The template function used to refresh the view of dynamically created views
and components. Will be null for inline views.\n    template: Union[ComponentTemplate<{}>, null] = Field(..., description='The template function used to refresh the view of dynamically created views
and components. Will be null for inline views.')\n    # A function containing query-related instructions.\n    viewQuery: Union[ViewQueriesFunction<{}>, null] = Field(..., description='A function containing query-related instructions.')\n    # A `TNode` representing the declaration location of this `TView` (not part of this TView).\n    declTNode: Union[TNode, null] = Field(..., description='A `TNode` representing the declaration location of this `TView` (not part of this TView).')\n    # Whether or not this template has been processed in creation mode.\n    firstCreatePass: bool = Field(..., description='Whether or not this template has been processed in creation mode.')\n    # Whether or not this template has been processed in update mode (e.g. change detected)
`firstUpdatePass` is used by styling to set up `TData` to contain metadata about the styling
instructions. (Mainly to build up a linked list of styling priority order.)
Typically this function gets cleared after first execution. If exception is thrown then this
flag can remain turned un until there is first successful (no exception) pass. This means that
individual styling instructions keep track of if they have already been added to the linked
list to prevent double adding.\n    firstUpdatePass: bool = Field(..., description='Whether or not this template has been processed in update mode (e.g. change detected)
`firstUpdatePass` is used by styling to set up `TData` to contain metadata about the styling
instructions. (Mainly to build up a linked list of styling priority order.)
Typically this function gets cleared after first execution. If exception is thrown then this
flag can remain turned un until there is first successful (no exception) pass. This means that
individual styling instructions keep track of if they have already been added to the linked
list to prevent double adding.')\n    # Static data equivalent of LView.data[]. Contains TNodes, PipeDefInternal or TI18n.\n    data: TData = Field(..., description='Static data equivalent of LView.data[]. Contains TNodes, PipeDefInternal or TI18n.')\n    # The binding start index is the index at which the data array
starts to store bindings only. Saving this value ensures that we
will begin reading bindings at the correct point in the array when
we are in update mode.
-1 means that it has not been initialized.\n    bindingStartIndex: float = Field(..., description='The binding start index is the index at which the data array
starts to store bindings only. Saving this value ensures that we
will begin reading bindings at the correct point in the array when
we are in update mode.
-1 means that it has not been initialized.')\n    # The index where the "expando" section of `LView` begins. The expando
section contains injectors, directive instances, and host binding values.
Unlike the "decls" and "vars" sections of `LView`, the length of this
section cannot be calculated at compile-time because directives are matched
at runtime to preserve locality.
We store this start index so we know where to start checking host bindings
in `setHostBindings`.\n    expandoStartIndex: float = Field(..., description='The index where the "expando" section of `LView` begins. The expando
section contains injectors, directive instances, and host binding values.
Unlike the "decls" and "vars" sections of `LView`, the length of this
section cannot be calculated at compile-time because directives are matched
at runtime to preserve locality.
We store this start index so we know where to start checking host bindings
in `setHostBindings`.')\n    # Whether or not there are any static view queries tracked on this view.
We store this so we know whether or not we should do a view query
refresh after creation mode to collect static query results.\n    staticViewQueries: bool = Field(..., description='Whether or not there are any static view queries tracked on this view.
We store this so we know whether or not we should do a view query
refresh after creation mode to collect static query results.')\n    # Whether or not there are any static content queries tracked on this view.
We store this so we know whether or not we should do a content query
refresh after creation mode to collect static query results.\n    staticContentQueries: bool = Field(..., description='Whether or not there are any static content queries tracked on this view.
We store this so we know whether or not we should do a content query
refresh after creation mode to collect static query results.')\n    # A reference to the first child node located in the view.\n    firstChild: Union[TNode, null] = Field(..., description='A reference to the first child node located in the view.')\n    # Stores the OpCodes to be replayed during change-detection to process the `HostBindings`
See `HostBindingOpCodes` for encoding details.\n    hostBindingOpCodes: Union[HostBindingOpCodes, null] = Field(..., description='Stores the OpCodes to be replayed during change-detection to process the `HostBindings`
See `HostBindingOpCodes` for encoding details.')\n    # Full registry of directives and components that may be found in this view.
It's necessary to keep a copy of the full def list on the TView so it's possible
to render template functions without a host component.\n    directiveRegistry: Union[DirectiveDefList, null] = Field(..., description='Full registry of directives and components that may be found in this view.
It\'s necessary to keep a copy of the full def list on the TView so it\'s possible
to render template functions without a host component.')\n    # Full registry of pipes that may be found in this view.
The property is either an array of `PipeDefs`s or a function which returns the array of
`PipeDefs`s. The function is necessary to be able to support forward declarations.
It's necessary to keep a copy of the full def list on the TView so it's possible
to render template functions without a host component.\n    pipeRegistry: Union[PipeDefList, null] = Field(..., description='Full registry of pipes that may be found in this view.
The property is either an array of `PipeDefs`s or a function which returns the array of
`PipeDefs`s. The function is necessary to be able to support forward declarations.
It\'s necessary to keep a copy of the full def list on the TView so it\'s possible
to render template functions without a host component.')\n    # Array of ngOnInit, ngOnChanges and ngDoCheck hooks that should be executed for this view in
creation mode.
This array has a flat structure and contains TNode indices, directive indices (where an
instance can be found in `LView`) and hook functions. TNode index is followed by the directive
index and a hook function. If there are multiple hooks for a given TNode, the TNode index is
not repeated and the next lifecycle hook information is stored right after the previous hook
function. This is done so that at runtime the system can efficiently iterate over all of the
functions to invoke without having to make any decisions/lookups.\n    preOrderHooks: Union[HookData, null] = Field(..., description='Array of ngOnInit, ngOnChanges and ngDoCheck hooks that should be executed for this view in
creation mode.
This array has a flat structure and contains TNode indices, directive indices (where an
instance can be found in `LView`) and hook functions. TNode index is followed by the directive
index and a hook function. If there are multiple hooks for a given TNode, the TNode index is
not repeated and the next lifecycle hook information is stored right after the previous hook
function. This is done so that at runtime the system can efficiently iterate over all of the
functions to invoke without having to make any decisions/lookups.')\n    # Array of ngOnChanges and ngDoCheck hooks that should be executed for this view in update mode.
This array has the same structure as the `preOrderHooks` one.\n    preOrderCheckHooks: Union[HookData, null] = Field(..., description='Array of ngOnChanges and ngDoCheck hooks that should be executed for this view in update mode.
This array has the same structure as the `preOrderHooks` one.')\n    # Array of ngAfterContentInit and ngAfterContentChecked hooks that should be executed
for this view in creation mode.
Even indices: Directive index
Odd indices: Hook function\n    contentHooks: Union[HookData, null] = Field(..., description='Array of ngAfterContentInit and ngAfterContentChecked hooks that should be executed
for this view in creation mode.
Even indices: Directive index
Odd indices: Hook function')\n    # Array of ngAfterContentChecked hooks that should be executed for this view in update
mode.
Even indices: Directive index
Odd indices: Hook function\n    contentCheckHooks: Union[HookData, null] = Field(..., description='Array of ngAfterContentChecked hooks that should be executed for this view in update
mode.
Even indices: Directive index
Odd indices: Hook function')\n    # Array of ngAfterViewInit and ngAfterViewChecked hooks that should be executed for
this view in creation mode.
Even indices: Directive index
Odd indices: Hook function\n    viewHooks: Union[HookData, null] = Field(..., description='Array of ngAfterViewInit and ngAfterViewChecked hooks that should be executed for
this view in creation mode.
Even indices: Directive index
Odd indices: Hook function')\n    # Array of ngAfterViewChecked hooks that should be executed for this view in
update mode.
Even indices: Directive index
Odd indices: Hook function\n    viewCheckHooks: Union[HookData, null] = Field(..., description='Array of ngAfterViewChecked hooks that should be executed for this view in
update mode.
Even indices: Directive index
Odd indices: Hook function')\n    # Array of ngOnDestroy hooks that should be executed when this view is destroyed.
Even indices: Directive index
Odd indices: Hook function\n    destroyHooks: Union[DestroyHookData, null] = Field(..., description='Array of ngOnDestroy hooks that should be executed when this view is destroyed.
Even indices: Directive index
Odd indices: Hook function')\n    # When a view is destroyed, listeners need to be released and outputs need to be
unsubscribed. This cleanup array stores both listener data (in chunks of 4)
and output data (in chunks of 2) for a particular view. Combining the arrays
saves on memory (70 bytes per array) and on a few bytes of code size (for two
separate for loops).
If it's a native DOM listener or output subscription being stored:
1st index is: event name  `name = tView.cleanup[i+0]`
2nd index is: index of native element or a function that retrieves global target (window,
              document or body) reference based on the native element:
   `typeof idxOrTargetGetter === 'function'`: global target getter function
   `typeof idxOrTargetGetter === 'number'`: index of native element
3rd index is: index of listener function `listener = lView[CLEANUP][tView.cleanup[i+2]]`
4th index is: `useCaptureOrIndx = tView.cleanup[i+3]`
   `typeof useCaptureOrIndx == 'boolean' : useCapture boolean
   `typeof useCaptureOrIndx == 'number':
        `useCaptureOrIndx >= 0` `removeListener = LView[CLEANUP][useCaptureOrIndx]`
        `useCaptureOrIndx <  0` `subscription = LView[CLEANUP][-useCaptureOrIndx]`
If it's an output subscription or query list destroy hook:
1st index is: output unsubscribe function / query list destroy function
2nd index is: index of function context in LView.cleanupInstances[]
              `tView.cleanup[i+0].call(lView[CLEANUP][tView.cleanup[i+1]])`\n    cleanup: Union[List[any], null] = Field(..., description='When a view is destroyed, listeners need to be released and outputs need to be
unsubscribed. This cleanup array stores both listener data (in chunks of 4)
and output data (in chunks of 2) for a particular view. Combining the arrays
saves on memory (70 bytes per array) and on a few bytes of code size (for two
separate for loops).
If it\'s a native DOM listener or output subscription being stored:
1st index is: event name  `name = tView.cleanup[i+0]`
2nd index is: index of native element or a function that retrieves global target (window,
              document or body) reference based on the native element:
   `typeof idxOrTargetGetter === \'function\'`: global target getter function
   `typeof idxOrTargetGetter === \'number\'`: index of native element
3rd index is: index of listener function `listener = lView[CLEANUP][tView.cleanup[i+2]]`
4th index is: `useCaptureOrIndx = tView.cleanup[i+3]`
   `typeof useCaptureOrIndx == \'boolean\' : useCapture boolean
   `typeof useCaptureOrIndx == \'number\':
        `useCaptureOrIndx >= 0` `removeListener = LView[CLEANUP][useCaptureOrIndx]`
        `useCaptureOrIndx <  0` `subscription = LView[CLEANUP][-useCaptureOrIndx]`
If it\'s an output subscription or query list destroy hook:
1st index is: output unsubscribe function / query list destroy function
2nd index is: index of function context in LView.cleanupInstances[]
              `tView.cleanup[i+0].call(lView[CLEANUP][tView.cleanup[i+1]])`')\n    # A list of element indices for child components that will need to be
refreshed when the current view has finished its check. These indices have
already been adjusted for the HEADER_OFFSET.\n    components: Union[List[float], null] = Field(..., description='A list of element indices for child components that will need to be
refreshed when the current view has finished its check. These indices have
already been adjusted for the HEADER_OFFSET.')\n    # A collection of queries tracked in a given view.\n    queries: Union[TQueries, null] = Field(..., description='A collection of queries tracked in a given view.')\n    # An array of indices pointing to directives with content queries alongside with the
corresponding query index. Each entry in this array is a tuple of:
- index of the first content query index declared by a given directive;
- index of a directive.
We are storing those indexes so we can refresh content queries as part of a view refresh
process.\n    contentQueries: Union[List[float], null] = Field(..., description='An array of indices pointing to directives with content queries alongside with the
corresponding query index. Each entry in this array is a tuple of:
- index of the first content query index declared by a given directive;
- index of a directive.
We are storing those indexes so we can refresh content queries as part of a view refresh
process.')\n    # Set of schemas that declare elements to be allowed inside the view.\n    schemas: Union[List[SchemaMetadata], null] = Field(..., description='Set of schemas that declare elements to be allowed inside the view.')\n    # Array of constants for the view. Includes attribute arrays, local definition arrays etc.
Used for directive matching, attribute bindings, local definitions and more.\n    consts: Union[TConstants, null] = Field(..., description='Array of constants for the view. Includes attribute arrays, local definition arrays etc.
Used for directive matching, attribute bindings, local definitions and more.')\n    # Indicates that there was an error before we managed to complete the first create pass of the
view. This means that the view is likely corrupted and we should try to recover it.\n    incompleteFirstPass: bool = Field(..., description='Indicates that there was an error before we managed to complete the first create pass of the
view. This means that the view is likely corrupted and we should try to recover it.')\n    # Unique id of this TView for hydration purposes:
- TViewType.Embedded: a unique id generated during serialization on the server
- TViewType.Component: an id generated based on component properties
                       (see `getComponentId` function for details)\n    ssrId: Union[str, null] = Field(..., description='Unique id of this TView for hydration purposes:
- TViewType.Embedded: a unique id generated during serialization on the server
- TViewType.Component: an id generated based on component properties
                       (see `getComponentId` function for details)')\n\n# An interface implemented by all Angular type decorators, which allows them to be used as
decorators as well as Angular syntax.
```ts
@ng.Component({...})
class MyClass {...}
```
@publicApi\nclass TypeDecorator(BaseModel):\n    pass\n\n# Type of the Directive decorator / constructor function.
@publicApi\nclass DirectiveDecorator(BaseModel):\n    pass\n\n# Directive decorator and metadata.
@Annotation
@publicApi\nclass Directive(BaseModel):\n    # The CSS selector that identifies this directive in a template
and triggers instantiation of the directive.
Declare as one of the following:
- `element-name`: Select by element name.
- `.class`: Select by class name.
- `[attribute]`: Select by attribute name.
- `[attribute=value]`: Select by attribute name and value.
- `:not(sub_selector)`: Select only if the element does not match the `sub_selector`.
- `selector1, selector2`: Select if either `selector1` or `selector2` matches.
Angular only allows directives to apply on CSS selectors that do not cross
element boundaries.
For the following template HTML, a directive with an `input[type=text]` selector,
would be instantiated only on the `<input type="text">` element.
```html
<form>
  <input type="text">
  <input type="radio">
<form>
```\n    selector: Optional[str] = None = Field(..., description='The CSS selector that identifies this directive in a template
and triggers instantiation of the directive.
Declare as one of the following:
- `element-name`: Select by element name.
- `.class`: Select by class name.
- `[attribute]`: Select by attribute name.
- `[attribute=value]`: Select by attribute name and value.
- `:not(sub_selector)`: Select only if the element does not match the `sub_selector`.
- `selector1, selector2`: Select if either `selector1` or `selector2` matches.
Angular only allows directives to apply on CSS selectors that do not cross
element boundaries.
For the following template HTML, a directive with an `input[type=text]` selector,
would be instantiated only on the `<input type="text">` element.
```html
<form>
  <input type="text">
  <input type="radio">
<form>
```')\n    # Enumerates the set of data-bound input properties for a directive
Angular automatically updates input properties during change detection.
The `inputs` property accepts either strings or object literals that configure the directive
properties that should be exposed as inputs.
When an object literal is passed in, the `name` property indicates which property on the
class the input should write to, while the `alias` determines the name under
which the input will be available in template bindings. The `required` property indicates that
the input is required which will trigger a compile-time error if it isn't passed in when the
directive is used.
When a string is passed into the `inputs` array, it can have a format of `'name'` or
`'name: alias'` where `name` is the property on the class that the directive should write
to, while the `alias` determines the name under which the input will be available in
template bindings. String-based input definitions are assumed to be optional.
@usageNotes
The following example creates a component with two data-bound properties.
```ts
@Component({
  selector: 'bank-account',
  inputs: ['bankName', {name: 'id', alias: 'account-id'}],
  template: `
    Bank Name: {{bankName}}
    Account Id: {{id}}
  `
})
class BankAccount {
  bankName: string;
  id: string;
}
```\n    inputs: Optional[List[List[Union[({
        name: string;
        alias?: string;
        required?: boolean;
        transform?: (value: any) => any;
    }, string)]]]] = None = Field(..., description='Enumerates the set of data-bound input properties for a directive
Angular automatically updates input properties during change detection.
The `inputs` property accepts either strings or object literals that configure the directive
properties that should be exposed as inputs.
When an object literal is passed in, the `name` property indicates which property on the
class the input should write to, while the `alias` determines the name under
which the input will be available in template bindings. The `required` property indicates that
the input is required which will trigger a compile-time error if it isn\'t passed in when the
directive is used.
When a string is passed into the `inputs` array, it can have a format of `\'name\'` or
`\'name: alias\'` where `name` is the property on the class that the directive should write
to, while the `alias` determines the name under which the input will be available in
template bindings. String-based input definitions are assumed to be optional.
@usageNotes
The following example creates a component with two data-bound properties.
```ts
@Component({
  selector: \'bank-account\',
  inputs: [\'bankName\', {name: \'id\', alias: \'account-id\'}],
  template: `
    Bank Name: {{bankName}}
    Account Id: {{id}}
  `
})
class BankAccount {
  bankName: string;
  id: string;
}
```')\n    # Enumerates the set of event-bound output properties.
When an output property emits an event, an event handler attached to that event
in the template is invoked.
The `outputs` property defines a set of `directiveProperty` to `alias`
configuration:
- `directiveProperty` specifies the component property that emits events.
- `alias` specifies the DOM property the event handler is attached to.
@usageNotes
```ts
@Component({
  selector: 'child-dir',
  outputs: [ 'bankNameChange' ],
  template: `<input (input)="bankNameChange.emit($event.target.value)" />`
})
class ChildDir {
 bankNameChange: EventEmitter<string> = new EventEmitter<string>();
}
@Component({
  selector: 'main',
  template: `
    {{ bankName }} <child-dir (bankNameChange)="onBankNameChange($event)"></child-dir>
  `
})
class MainComponent {
 bankName: string;
  onBankNameChange(bankName: string) {
    this.bankName = bankName;
  }
}
```\n    outputs: Optional[List[List[str]]] = None = Field(..., description='Enumerates the set of event-bound output properties.
When an output property emits an event, an event handler attached to that event
in the template is invoked.
The `outputs` property defines a set of `directiveProperty` to `alias`
configuration:
- `directiveProperty` specifies the component property that emits events.
- `alias` specifies the DOM property the event handler is attached to.
@usageNotes
```ts
@Component({
  selector: \'child-dir\',
  outputs: [ \'bankNameChange\' ],
  template: `<input (input)="bankNameChange.emit($event.target.value)" />`
})
class ChildDir {
 bankNameChange: EventEmitter<string> = new EventEmitter<string>();
}
@Component({
  selector: \'main\',
  template: `
    {{ bankName }} <child-dir (bankNameChange)="onBankNameChange($event)"></child-dir>
  `
})
class MainComponent {
 bankName: string;
  onBankNameChange(bankName: string) {
    this.bankName = bankName;
  }
}
```')\n    # Configures the injector of this
directive or component with a token
that maps to a provider of a dependency.\n    providers: Optional[List[List[Provider]]] = None = Field(..., description='Configures the injector of this
directive or component with a token
that maps to a provider of a dependency.')\n    # Defines the name that can be used in the template to assign this directive to a variable.
@usageNotes
```ts
@Directive({
  selector: 'child-dir',
  exportAs: 'child'
})
class ChildDir {
}
@Component({
  selector: 'main',
  template: `<child-dir #c="child"></child-dir>`
})
class MainComponent {
}
```\n    exportAs: Optional[str] = None = Field(..., description='Defines the name that can be used in the template to assign this directive to a variable.
@usageNotes
```ts
@Directive({
  selector: \'child-dir\',
  exportAs: \'child\'
})
class ChildDir {
}
@Component({
  selector: \'main\',
  template: `<child-dir #c="child"></child-dir>`
})
class MainComponent {
}
```')\n    # Configures the queries that will be injected into the directive.
Content queries are set before the `ngAfterContentInit` callback is called.
View queries are set before the `ngAfterViewInit` callback is called.
@usageNotes
The following example shows how queries are defined
and when their results are available in lifecycle hooks:
```ts
@Component({
  selector: 'someDir',
  queries: {
    contentChildren: new ContentChildren(ChildDirective),
    viewChildren: new ViewChildren(ChildDirective)
  },
  template: '<child-directive></child-directive>'
})
class SomeDir {
  contentChildren: QueryList<ChildDirective>,
  viewChildren: QueryList<ChildDirective>
  ngAfterContentInit() {
    // contentChildren is set
  }
  ngAfterViewInit() {
    // viewChildren is set
  }
}
```
@Annotation\n    queries: Optional[Dict[str, Any]] = None = Field(..., description='Configures the queries that will be injected into the directive.
Content queries are set before the `ngAfterContentInit` callback is called.
View queries are set before the `ngAfterViewInit` callback is called.
@usageNotes
The following example shows how queries are defined
and when their results are available in lifecycle hooks:
```ts
@Component({
  selector: \'someDir\',
  queries: {
    contentChildren: new ContentChildren(ChildDirective),
    viewChildren: new ViewChildren(ChildDirective)
  },
  template: \'<child-directive></child-directive>\'
})
class SomeDir {
  contentChildren: QueryList<ChildDirective>,
  viewChildren: QueryList<ChildDirective>
  ngAfterContentInit() {
    // contentChildren is set
  }
  ngAfterViewInit() {
    // viewChildren is set
  }
}
```
@Annotation')\n    # Maps class properties to host element bindings for properties,
attributes, and events, using a set of key-value pairs.
Angular automatically checks host property bindings during change detection.
If a binding changes, Angular updates the directive's host element.
When the key is a property of the host element, the property value is
propagated to the specified DOM property.
When the key is a static attribute in the DOM, the attribute value
is propagated to the specified property in the host element.
For event handling:
- The key is the DOM event that the directive listens to.
To listen to global events, add the target to the event name.
The target can be `window`, `document` or `body`.
- The value is the statement to execute when the event occurs. If the
statement evaluates to `false`, then `preventDefault` is applied on the DOM
event. A handler method can refer to the `$event` local variable.\n    host: Optional[Dict[str, Any]] = None = Field(..., description='Maps class properties to host element bindings for properties,
attributes, and events, using a set of key-value pairs.
Angular automatically checks host property bindings during change detection.
If a binding changes, Angular updates the directive\'s host element.
When the key is a property of the host element, the property value is
propagated to the specified DOM property.
When the key is a static attribute in the DOM, the attribute value
is propagated to the specified property in the host element.
For event handling:
- The key is the DOM event that the directive listens to.
To listen to global events, add the target to the event name.
The target can be `window`, `document` or `body`.
- The value is the statement to execute when the event occurs. If the
statement evaluates to `false`, then `preventDefault` is applied on the DOM
event. A handler method can refer to the `$event` local variable.')\n    # When present, this directive/component is ignored by the AOT compiler.
It remains in distributed code, and the JIT compiler attempts to compile it
at run time, in the browser.
To ensure the correct behavior, the app must import `@angular/compiler`.\n    jit: Optional[true] = None = Field(..., description='When present, this directive/component is ignored by the AOT compiler.
It remains in distributed code, and the JIT compiler attempts to compile it
at run time, in the browser.
To ensure the correct behavior, the app must import `@angular/compiler`.')\n    # Angular directives marked as `standalone` do not need to be declared in an NgModule. Such
directives don't depend on any "intermediate context" of an NgModule (ex. configured
providers).
More information about standalone components, directives, and pipes can be found in [this
guide](guide/components/importing).\n    standalone: Optional[bool] = None = Field(..., description='Angular directives marked as `standalone` do not need to be declared in an NgModule. Such
directives don\'t depend on any "intermediate context" of an NgModule (ex. configured
providers).
More information about standalone components, directives, and pipes can be found in [this
guide](guide/components/importing).')\n    # Standalone directives that should be applied to the host whenever the directive is matched.
By default, none of the inputs or outputs of the host directives will be available on the host,
unless they are specified in the `inputs` or `outputs` properties.
You can additionally alias inputs and outputs by putting a colon and the alias after the
original input or output name. For example, if a directive applied via `hostDirectives`
defines an input named `menuDisabled`, you can alias this to `disabled` by adding
`'menuDisabled: disabled'` as an entry to `inputs`.\n    hostDirectives: Optional[List[List[Union[(Type<unknown>, {
        directive: Type<unknown>;
        inputs?: string[];
        outputs?: string[];
    })]]]] = None = Field(..., description='Standalone directives that should be applied to the host whenever the directive is matched.
By default, none of the inputs or outputs of the host directives will be available on the host,
unless they are specified in the `inputs` or `outputs` properties.
You can additionally alias inputs and outputs by putting a colon and the alias after the
original input or output name. For example, if a directive applied via `hostDirectives`
defines an input named `menuDisabled`, you can alias this to `disabled` by adding
`\'menuDisabled: disabled\'` as an entry to `inputs`.')\n\n# Component decorator interface
@publicApi\nclass ComponentDecorator(BaseModel):\n    pass\n\n# Supplies configuration metadata for an Angular component.
@publicApi\nclass Component(Directive):\n    # The change-detection strategy to use for this component.
When a component is instantiated, Angular creates a change detector,
which is responsible for propagating the component's bindings.
The strategy is one of:
- `ChangeDetectionStrategy#OnPush` sets the strategy to `CheckOnce` (on demand).
- `ChangeDetectionStrategy#Default` sets the strategy to `CheckAlways`.\n    changeDetection: Optional[ChangeDetectionStrategy] = None = Field(..., description='The change-detection strategy to use for this component.
When a component is instantiated, Angular creates a change detector,
which is responsible for propagating the component\'s bindings.
The strategy is one of:
- `ChangeDetectionStrategy#OnPush` sets the strategy to `CheckOnce` (on demand).
- `ChangeDetectionStrategy#Default` sets the strategy to `CheckAlways`.')\n    # Defines the set of injectable objects that are visible to its view DOM children.
See [example](#injecting-a-class-with-a-view-provider).\n    viewProviders: Optional[List[List[Provider]]] = None = Field(..., description='Defines the set of injectable objects that are visible to its view DOM children.
See [example](#injecting-a-class-with-a-view-provider).')\n    # The module ID of the module that contains the component.
The component must be able to resolve relative URLs for templates and styles.
SystemJS exposes the `__moduleName` variable within each module.
In CommonJS, this can  be set to `module.id`.
@deprecated This option does not have any effect. Will be removed in Angular v17.\n    moduleId: Optional[str] = None = Field(..., description='The module ID of the module that contains the component.
The component must be able to resolve relative URLs for templates and styles.
SystemJS exposes the `__moduleName` variable within each module.
In CommonJS, this can  be set to `module.id`.
@deprecated This option does not have any effect. Will be removed in Angular v17.')\n    # The relative path or absolute URL of a template file for an Angular component.
If provided, do not supply an inline template using `template`.\n    templateUrl: Optional[str] = None = Field(..., description='The relative path or absolute URL of a template file for an Angular component.
If provided, do not supply an inline template using `template`.')\n    # An inline template for an Angular component. If provided,
do not supply a template file using `templateUrl`.\n    template: Optional[str] = None = Field(..., description='An inline template for an Angular component. If provided,
do not supply a template file using `templateUrl`.')\n    # One relative path or an absolute URL for file containing a CSS stylesheet to use
in this component.\n    styleUrl: Optional[str] = None = Field(..., description='One relative path or an absolute URL for file containing a CSS stylesheet to use
in this component.')\n    # Relative paths or absolute URLs for files containing CSS stylesheets to use in this component.\n    styleUrls: Optional[List[List[str]]] = None = Field(..., description='Relative paths or absolute URLs for files containing CSS stylesheets to use in this component.')\n    # One or more inline CSS stylesheets to use
in this component.\n    styles: Optional[Union[str, List[str]]] = None = Field(..., description='One or more inline CSS stylesheets to use
in this component.')\n    # One or more animation `trigger()` calls, containing
[`state()`](api/animations/state) and `transition()` definitions.
See the [Animations guide](guide/animations) and animations API documentation.\n    animations: Optional[List[List[any]]] = None = Field(..., description='One or more animation `trigger()` calls, containing
[`state()`](api/animations/state) and `transition()` definitions.
See the [Animations guide](guide/animations) and animations API documentation.')\n    # An encapsulation policy for the component's styling.
Possible values:
- `ViewEncapsulation.Emulated`: Apply modified component styles in order to emulate
                                a native Shadow DOM CSS encapsulation behavior.
- `ViewEncapsulation.None`: Apply component styles globally without any sort of encapsulation.
- `ViewEncapsulation.ShadowDom`: Use the browser's native Shadow DOM API to encapsulate styles.
If not supplied, the value is taken from the `CompilerOptions`
which defaults to `ViewEncapsulation.Emulated`.
If the policy is `ViewEncapsulation.Emulated` and the component has no
{@link Component#styles styles} nor {@link Component#styleUrls styleUrls},
the policy is automatically switched to `ViewEncapsulation.None`.\n    encapsulation: Optional[ViewEncapsulation] = None = Field(..., description='An encapsulation policy for the component\'s styling.
Possible values:
- `ViewEncapsulation.Emulated`: Apply modified component styles in order to emulate
                                a native Shadow DOM CSS encapsulation behavior.
- `ViewEncapsulation.None`: Apply component styles globally without any sort of encapsulation.
- `ViewEncapsulation.ShadowDom`: Use the browser\'s native Shadow DOM API to encapsulate styles.
If not supplied, the value is taken from the `CompilerOptions`
which defaults to `ViewEncapsulation.Emulated`.
If the policy is `ViewEncapsulation.Emulated` and the component has no
{@link Component#styles styles} nor {@link Component#styleUrls styleUrls},
the policy is automatically switched to `ViewEncapsulation.None`.')\n    # Overrides the default interpolation start and end delimiters (`{{` and `}}`).
@deprecated use Angular's default interpolation delimiters instead.\n    interpolation: Optional[[string, string]] = None = Field(..., description='Overrides the default interpolation start and end delimiters (`{{` and `}}`).
@deprecated use Angular\'s default interpolation delimiters instead.')\n    # True to preserve or false to remove potentially superfluous whitespace characters
from the compiled template. Whitespace characters are those matching the `\s`
character class in JavaScript regular expressions. Default is false, unless
overridden in compiler options.\n    preserveWhitespaces: Optional[bool] = None = Field(..., description='True to preserve or false to remove potentially superfluous whitespace characters
from the compiled template. Whitespace characters are those matching the `\s`
character class in JavaScript regular expressions. Default is false, unless
overridden in compiler options.')\n    # Angular components marked as `standalone` do not need to be declared in an NgModule. Such
components directly manage their own template dependencies (components, directives, and pipes
used in a template) via the imports property.
More information about standalone components, directives, and pipes can be found in [this
guide](guide/components/importing).\n    standalone: Optional[bool] = None = Field(..., description='Angular components marked as `standalone` do not need to be declared in an NgModule. Such
components directly manage their own template dependencies (components, directives, and pipes
used in a template) via the imports property.
More information about standalone components, directives, and pipes can be found in [this
guide](guide/components/importing).')\n    # The imports property specifies the standalone component's template dependencies — those
directives, components, and pipes that can be used within its template. Standalone components
can import other standalone components, directives, and pipes as well as existing NgModules.
This property is only available for standalone components - specifying it for components
declared in an NgModule generates a compilation error.
More information about standalone components, directives, and pipes can be found in [this
guide](guide/components/importing).\n    imports: Optional[List[List[Union[(Type<any>, ReadonlyArray<any>)]]]] = None = Field(..., description='The imports property specifies the standalone component\'s template dependencies — those
directives, components, and pipes that can be used within its template. Standalone components
can import other standalone components, directives, and pipes as well as existing NgModules.
This property is only available for standalone components - specifying it for components
declared in an NgModule generates a compilation error.
More information about standalone components, directives, and pipes can be found in [this
guide](guide/components/importing).')\n    # The set of schemas that declare elements to be allowed in a standalone component. Elements and
properties that are neither Angular components nor directives must be declared in a schema.
This property is only available for standalone components - specifying it for components
declared in an NgModule generates a compilation error.
More information about standalone components, directives, and pipes can be found in [this
guide](guide/components/importing).\n    schemas: Optional[List[List[SchemaMetadata]]] = None = Field(..., description='The set of schemas that declare elements to be allowed in a standalone component. Elements and
properties that are neither Angular components nor directives must be declared in a schema.
This property is only available for standalone components - specifying it for components
declared in an NgModule generates a compilation error.
More information about standalone components, directives, and pipes can be found in [this
guide](guide/components/importing).')\n\n# Type of the Pipe decorator / constructor function.
@publicApi\nclass PipeDecorator(BaseModel):\n    pass\n\n# Type of the Pipe metadata.
@publicApi\nclass Pipe(BaseModel):\n    # The pipe name to use in template bindings.
Typically uses lowerCamelCase
because the name cannot contain hyphens.\n    name: str = Field(..., description='The pipe name to use in template bindings.
Typically uses lowerCamelCase
because the name cannot contain hyphens.')\n    # When true, the pipe is pure, meaning that the
`transform()` method is invoked only when its input arguments
change. Pipes are pure by default.
If the pipe has internal state (that is, the result
depends on state other than its arguments), set `pure` to false.
In this case, the pipe is invoked on each change-detection cycle,
even if the arguments have not changed.\n    pure: Optional[bool] = None = Field(..., description='When true, the pipe is pure, meaning that the
`transform()` method is invoked only when its input arguments
change. Pipes are pure by default.
If the pipe has internal state (that is, the result
depends on state other than its arguments), set `pure` to false.
In this case, the pipe is invoked on each change-detection cycle,
even if the arguments have not changed.')\n    # Angular pipes marked as `standalone` do not need to be declared in an NgModule. Such
pipes don't depend on any "intermediate context" of an NgModule (ex. configured providers).
More information about standalone components, directives, and pipes can be found in [this
guide](guide/components/importing).\n    standalone: Optional[bool] = None = Field(..., description='Angular pipes marked as `standalone` do not need to be declared in an NgModule. Such
pipes don\'t depend on any "intermediate context" of an NgModule (ex. configured providers).
More information about standalone components, directives, and pipes can be found in [this
guide](guide/components/importing).')\n\n# @publicApi\nclass InputDecorator(BaseModel):\n    pass\n\n# Type of metadata for an `Input` property.
@publicApi\nclass Input(BaseModel):\n    # The name of the DOM property to which the input property is bound.\n    alias: Optional[str] = None = Field(..., description='The name of the DOM property to which the input property is bound.')\n    # Whether the input is required for the directive to function.\n    required: Optional[bool] = None = Field(..., description='Whether the input is required for the directive to function.')\n    # Function with which to transform the input value before assigning it to the directive instance.\n    transform: Optional[(value: any) => any] = None = Field(..., description='Function with which to transform the input value before assigning it to the directive instance.')\n\n# Type of the Output decorator / constructor function.
@publicApi\nclass OutputDecorator(BaseModel):\n    pass\n\n# Type of the Output metadata.
@publicApi\nclass Output(BaseModel):\n    # The name of the DOM property to which the output property is bound.\n    alias: Optional[str] = None = Field(..., description='The name of the DOM property to which the output property is bound.')\n\n# Type of the HostBinding decorator / constructor function.
@publicApi\nclass HostBindingDecorator(BaseModel):\n    pass\n\n# Type of the HostBinding metadata.
@publicApi\nclass HostBinding(BaseModel):\n    # The DOM property that is bound to a data property.
This field also accepts:
  * classes, prefixed by `class.`
  * styles, prefixed by `style.`
  * attributes, prefixed by `attr.`\n    hostPropertyName: Optional[str] = None = Field(..., description='The DOM property that is bound to a data property.
This field also accepts:
  * classes, prefixed by `class.`
  * styles, prefixed by `style.`
  * attributes, prefixed by `attr.`')\n\n# Type of the HostListener decorator / constructor function.
@publicApi\nclass HostListenerDecorator(BaseModel):\n    pass\n\n# Type of the HostListener metadata.
@publicApi\nclass HostListener(BaseModel):\n    # The DOM event to listen for.\n    eventName: Optional[str] = None = Field(..., description='The DOM event to listen for.')\n    # A set of arguments to pass to the handler method when the event occurs.\n    args: Optional[List[List[str]]] = None = Field(..., description='A set of arguments to pass to the handler method when the event occurs.')\n\n# A dynamically-defined binding targeting.
For example, `inputBinding('value', () => 123)` creates an input binding.\nclass Binding(BaseModel):\n    [BINDING]: unknown = Field(...)\n\n# Represents a dynamically-created directive with bindings targeting it specifically.\nclass DirectiveWithBindings(BaseModel):\n    # Directive type that should be created.\n    type: Type<T> = Field(..., description='Directive type that should be created.')\n    # Bindings that should be applied to the specific directive.\n    bindings: List[List[Binding]] = Field(..., description='Bindings that should be applied to the specific directive.')\n\nclass InternalNgModuleRef(NgModuleRef):\n    _bootstrapComponents: List[List[Type<any>]] = Field(...)\n\n# Use in components with the `@Output` directive to emit custom events
synchronously or asynchronously, and register handlers for those events
by subscribing to an instance.
@usageNotes
Extends
[RxJS `Subject`](https://rxjs.dev/api/index/class/Subject)
for Angular by adding the `emit()` method.
In the following example, a component defines two output properties
that create event emitters. When the title is clicked, the emitter
emits an open or close event to toggle the current visibility state.
```angular-ts
@Component({
  selector: 'zippy',
  template: `
  <div class="zippy">
    <div (click)="toggle()">Toggle</div>
    <div [hidden]="!visible">
      <ng-content></ng-content>
    </div>
 </div>`})
export class Zippy {
  visible: boolean = true;
  @Output() open: EventEmitter<any> = new EventEmitter();
  @Output() close: EventEmitter<any> = new EventEmitter();
  toggle() {
    this.visible = !this.visible;
    if (this.visible) {
      this.open.emit(null);
    } else {
      this.close.emit(null);
    }
  }
}
```
Access the event object with the `$event` argument passed to the output event
handler:
```html
<zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
```
@publicApi\nclass EventEmitter(Subject):\n    pass\n\n# Provides additional options to the bootstrapping process.
@publicApi\nclass BootstrapOptions(BaseModel):\n    # Optionally specify which `NgZone` should be used when not configured in the providers.
- Provide your own `NgZone` instance.
- `zone.js` - Use default `NgZone` which requires `Zone.js`.
- `noop` - Use `NoopNgZone` which does nothing.\n    ngZone: Optional[Union[NgZone, 'zone.js', 'noop']] = None = Field(..., description='Optionally specify which `NgZone` should be used when not configured in the providers.
- Provide your own `NgZone` instance.
- `zone.js` - Use default `NgZone` which requires `Zone.js`.
- `noop` - Use `NoopNgZone` which does nothing.')\n    # Optionally specify coalescing event change detections or not.
Consider the following case.
```html
<div (click)="doSomething()">
  <button (click)="doSomethingElse()"></button>
</div>
```
When button is clicked, because of the event bubbling, both
event handlers will be called and 2 change detections will be
triggered. We can coalesce such kind of events to only trigger
change detection only once.
By default, this option will be false. So the events will not be
coalesced and the change detection will be triggered multiple times.
And if this option be set to true, the change detection will be
triggered async by scheduling a animation frame. So in the case above,
the change detection will only be triggered once.\n    ngZoneEventCoalescing: Optional[bool] = None = Field(..., description='Optionally specify coalescing event change detections or not.
Consider the following case.
```html
<div (click)="doSomething()">
  <button (click)="doSomethingElse()"></button>
</div>
```
When button is clicked, because of the event bubbling, both
event handlers will be called and 2 change detections will be
triggered. We can coalesce such kind of events to only trigger
change detection only once.
By default, this option will be false. So the events will not be
coalesced and the change detection will be triggered multiple times.
And if this option be set to true, the change detection will be
triggered async by scheduling a animation frame. So in the case above,
the change detection will only be triggered once.')\n    # Optionally specify if `NgZone#run()` method invocations should be coalesced
into a single change detection.
Consider the following case.
```ts
for (let i = 0; i < 10; i ++) {
  ngZone.run(() => {
    // do something
  });
}
```
This case triggers the change detection multiple times.
With ngZoneRunCoalescing options, all change detections in an event loop trigger only once.
In addition, the change detection executes in requestAnimation.\n    ngZoneRunCoalescing: Optional[bool] = None = Field(..., description='Optionally specify if `NgZone#run()` method invocations should be coalesced
into a single change detection.
Consider the following case.
```ts
for (let i = 0; i < 10; i ++) {
  ngZone.run(() => {
    // do something
  });
}
```
This case triggers the change detection multiple times.
With ngZoneRunCoalescing options, all change detections in an event loop trigger only once.
In addition, the change detection executes in requestAnimation.')\n    # When false, change detection is scheduled when Angular receives
a clear indication that templates need to be refreshed. This includes:
- calling `ChangeDetectorRef.markForCheck`
- calling `ComponentRef.setInput`
- updating a signal that is read in a template
- attaching a view that is marked dirty
- removing a view
- registering a render hook (templates are only refreshed if render hooks do one of the above)
@deprecated This option was introduced out of caution as a way for developers to opt out of the
   new behavior in v18 which schedule change detection for the above events when they occur
   outside the Zone. After monitoring the results post-release, we have determined that this
   feature is working as desired and do not believe it should ever be disabled by setting
   this option to `true`.\n    ignoreChangesOutsideZone: Optional[bool] = None = Field(..., description='When false, change detection is scheduled when Angular receives
a clear indication that templates need to be refreshed. This includes:
- calling `ChangeDetectorRef.markForCheck`
- calling `ComponentRef.setInput`
- updating a signal that is read in a template
- attaching a view that is marked dirty
- removing a view
- registering a render hook (templates are only refreshed if render hooks do one of the above)
@deprecated This option was introduced out of caution as a way for developers to opt out of the
   new behavior in v18 which schedule change detection for the above events when they occur
   outside the Zone. After monitoring the results post-release, we have determined that this
   feature is working as desired and do not believe it should ever be disabled by setting
   this option to `true`.')\n\n# Type of the NgModule decorator / constructor function.
@publicApi\nclass NgModuleDecorator(BaseModel):\n    pass\n\n# Type of the NgModule metadata.
@publicApi\nclass NgModule(BaseModel):\n    # The set of injectable objects that are available in the injector
of this module.
@see [Dependency Injection guide](guide/di/dependency-injection
@see [NgModule guide](guide/ngmodules/providers)
@usageNotes
Dependencies whose providers are listed here become available for injection
into any component, directive, pipe or service that is a child of this injector.
The NgModule used for bootstrapping uses the root injector, and can provide dependencies
to any part of the app.
A lazy-loaded module has its own injector, typically a child of the app root injector.
Lazy-loaded services are scoped to the lazy-loaded module's injector.
If a lazy-loaded module also provides the `UserService`, any component created
within that module's context (such as by router navigation) gets the local instance
of the service, not the instance in the root injector.
Components in external modules continue to receive the instance provided by their injectors.
### Example
The following example defines a class that is injected in
the HelloWorld NgModule:
```ts
class Greeter {
   greet(name:string) {
     return 'Hello ' + name + '!';
   }
}
@NgModule({
  providers: [
    Greeter
  ]
})
class HelloWorld {
  greeter:Greeter;
  constructor(greeter:Greeter) {
    this.greeter = greeter;
  }
}
```\n    providers: Optional[List[List[Union[Provider, EnvironmentProviders]]]] = None = Field(..., description='The set of injectable objects that are available in the injector
of this module.
@see [Dependency Injection guide](guide/di/dependency-injection
@see [NgModule guide](guide/ngmodules/providers)
@usageNotes
Dependencies whose providers are listed here become available for injection
into any component, directive, pipe or service that is a child of this injector.
The NgModule used for bootstrapping uses the root injector, and can provide dependencies
to any part of the app.
A lazy-loaded module has its own injector, typically a child of the app root injector.
Lazy-loaded services are scoped to the lazy-loaded module\'s injector.
If a lazy-loaded module also provides the `UserService`, any component created
within that module\'s context (such as by router navigation) gets the local instance
of the service, not the instance in the root injector.
Components in external modules continue to receive the instance provided by their injectors.
### Example
The following example defines a class that is injected in
the HelloWorld NgModule:
```ts
class Greeter {
   greet(name:string) {
     return \'Hello \' + name + \'!\';
   }
}
@NgModule({
  providers: [
    Greeter
  ]
})
class HelloWorld {
  greeter:Greeter;
  constructor(greeter:Greeter) {
    this.greeter = greeter;
  }
}
```')\n    # The set of components, directives, and pipes (declarables
that belong to this module.
@usageNotes
The set of selectors that are available to a template include those declared here, and
those that are exported from imported NgModules.
Declarables must belong to exactly one module.
The compiler emits an error if you try to declare the same class in more than one module.
Be careful not to declare a class that is imported from another module.
### Example
The following example allows the CommonModule to use the `NgFor`
directive.
```javascript
@NgModule({
  declarations: [NgFor]
})
class CommonModule {
}
```\n    declarations: Optional[List[List[List[Union[Type<any>, any]]]]] = None = Field(..., description='The set of components, directives, and pipes (declarables
that belong to this module.
@usageNotes
The set of selectors that are available to a template include those declared here, and
those that are exported from imported NgModules.
Declarables must belong to exactly one module.
The compiler emits an error if you try to declare the same class in more than one module.
Be careful not to declare a class that is imported from another module.
### Example
The following example allows the CommonModule to use the `NgFor`
directive.
```javascript
@NgModule({
  declarations: [NgFor]
})
class CommonModule {
}
```')\n    # The set of NgModules whose exported declarables
are available to templates in this module.
@usageNotes
A template can use exported declarables from any
imported module, including those from modules that are imported indirectly
and re-exported.
For example, `ModuleA` imports `ModuleB`, and also exports
it, which makes the declarables from `ModuleB` available
wherever `ModuleA` is imported.
### Example
The following example allows MainModule to use anything exported by
`CommonModule`:
```javascript
@NgModule({
  imports: [CommonModule]
})
class MainModule {
}
```\n    imports: Optional[List[List[List[Union[Type<any>, ModuleWithProviders<{}>, any]]]]] = None = Field(..., description='The set of NgModules whose exported declarables
are available to templates in this module.
@usageNotes
A template can use exported declarables from any
imported module, including those from modules that are imported indirectly
and re-exported.
For example, `ModuleA` imports `ModuleB`, and also exports
it, which makes the declarables from `ModuleB` available
wherever `ModuleA` is imported.
### Example
The following example allows MainModule to use anything exported by
`CommonModule`:
```javascript
@NgModule({
  imports: [CommonModule]
})
class MainModule {
}
```')\n    # The set of components, directives, and pipes declared in this
NgModule that can be used in the template of any component that is part of an
NgModule that imports this NgModule. Exported declarations are the module's public API.
A declarable belongs to one and only one NgModule.
A module can list another module among its exports, in which case all of that module's
public declaration are exported.
@usageNotes
Declarations are private by default.
If this ModuleA does not export UserComponent, then only the components within this
ModuleA can use UserComponent.
ModuleA can import ModuleB and also export it, making exports from ModuleB
available to an NgModule that imports ModuleA.
### Example
The following example exports the `NgFor` directive from CommonModule.
```javascript
@NgModule({
  exports: [NgFor]
})
class CommonModule {
}
```\n    exports: Optional[List[List[List[Union[Type<any>, any]]]]] = None = Field(..., description='The set of components, directives, and pipes declared in this
NgModule that can be used in the template of any component that is part of an
NgModule that imports this NgModule. Exported declarations are the module\'s public API.
A declarable belongs to one and only one NgModule.
A module can list another module among its exports, in which case all of that module\'s
public declaration are exported.
@usageNotes
Declarations are private by default.
If this ModuleA does not export UserComponent, then only the components within this
ModuleA can use UserComponent.
ModuleA can import ModuleB and also export it, making exports from ModuleB
available to an NgModule that imports ModuleA.
### Example
The following example exports the `NgFor` directive from CommonModule.
```javascript
@NgModule({
  exports: [NgFor]
})
class CommonModule {
}
```')\n    # The set of components that are bootstrapped when this module is bootstrapped.\n    bootstrap: Optional[List[List[List[Union[Type<any>, any]]]]] = None = Field(..., description='The set of components that are bootstrapped when this module is bootstrapped.')\n    # The set of schemas that declare elements to be allowed in the NgModule.
Elements and properties that are neither Angular components nor directives
must be declared in a schema.
Allowed value are `NO_ERRORS_SCHEMA` and `CUSTOM_ELEMENTS_SCHEMA`.
@security When using one of `NO_ERRORS_SCHEMA` or `CUSTOM_ELEMENTS_SCHEMA`
you must ensure that allowed elements and properties securely escape inputs.\n    schemas: Optional[List[List[List[Union[SchemaMetadata, any]]]]] = None = Field(..., description='The set of schemas that declare elements to be allowed in the NgModule.
Elements and properties that are neither Angular components nor directives
must be declared in a schema.
Allowed value are `NO_ERRORS_SCHEMA` and `CUSTOM_ELEMENTS_SCHEMA`.
@security When using one of `NO_ERRORS_SCHEMA` or `CUSTOM_ELEMENTS_SCHEMA`
you must ensure that allowed elements and properties securely escape inputs.')\n    # A name or path that uniquely identifies this NgModule in `getNgModuleById`.
If left `undefined`, the NgModule is not registered with `getNgModuleById`.\n    id: Optional[str] = None = Field(..., description='A name or path that uniquely identifies this NgModule in `getNgModuleById`.
If left `undefined`, the NgModule is not registered with `getNgModuleById`.')\n    # When present, this module is ignored by the AOT compiler.
It remains in distributed code, and the JIT compiler attempts to compile it
at run time, in the browser.
To ensure the correct behavior, the app must import `@angular/compiler`.\n    jit: Optional[true] = None = Field(..., description='When present, this module is ignored by the AOT compiler.
It remains in distributed code, and the JIT compiler attempts to compile it
at run time, in the browser.
To ensure the correct behavior, the app must import `@angular/compiler`.')\n\n# Options for creating a compiler.
@publicApi\nclass CompilerOptions(BaseModel):\n    defaultEncapsulation: Optional[ViewEncapsulation] = None\n    providers: Optional[List[List[StaticProvider]]] = None\n    preserveWhitespaces: Optional[bool] = None\n\nclass NavigationEventMap(BaseModel):\n    navigate: NavigateEvent = Field(...)\n    navigatesuccess: Event = Field(...)\n    navigateerror: ErrorEvent = Field(...)\n    currententrychange: NavigationCurrentEntryChangeEvent = Field(...)\n\nclass NavigationResult(BaseModel):\n    committed: Promise<NavigationHistoryEntry> = Field(...)\n    finished: Promise<NavigationHistoryEntry> = Field(...)\n\nclass NavigationHistoryEntryEventMap(BaseModel):\n    dispose: Event = Field(...)\n\nclass NavigationUpdateCurrentEntryOptions(BaseModel):\n    state: unknown = Field(...)\n\nclass NavigationOptions(BaseModel):\n    info: Optional[unknown] = None\n\nclass NavigationNavigateOptions(NavigationOptions):\n    state: Optional[unknown] = None\n    history: Optional[Union['auto', 'push', 'replace']] = None\n\nclass NavigationReloadOptions(NavigationOptions):\n    state: Optional[unknown] = None\n\nclass NavigationCurrentEntryChangeEventInit(EventInit):\n    navigationType: Optional[Union[NavigationTypeString, null]] = None\n    from: NavigationHistoryEntry = Field(...)\n\nclass NavigateEventInit(EventInit):\n    navigationType: Optional[NavigationTypeString] = None\n    canIntercept: Optional[bool] = None\n    userInitiated: Optional[bool] = None\n    hashChange: Optional[bool] = None\n    destination: NavigationDestination = Field(...)\n    signal: AbortSignal = Field(...)\n    formData: Optional[Union[FormData, null]] = None\n    downloadRequest: Optional[Union[str, null]] = None\n    info: Optional[unknown] = None\n\nclass NavigationInterceptOptions(BaseModel):\n    handler: Optional[() => Promise<void>] = None\n    focusReset: Optional[Union['after-transition', 'manual']] = None\n    scroll: Optional[Union['after-transition', 'manual']] = None\n\n# Defer block instance for testing.\nclass DeferBlockDetails(DehydratedDeferBlock):\n    tDetails: TDeferBlockDetails = Field(...)\n\n# Options for declaring an output.
@publicApi 19.0\nclass OutputOptions(BaseModel):\n    alias: Optional[str] = None\n\n# A Resource is an asynchronous dependency (for example, the results of an API call) that is
managed and delivered through signals.
The usual way of creating a `Resource` is through the `resource` function, but various other APIs
may present `Resource` instances to describe their own concepts.
@experimental\nclass Resource(BaseModel):\n    # The current value of the `Resource`, or throws an error if the resource is in an error state.\n    value: Signal<T> = Field(..., description='The current value of the `Resource`, or throws an error if the resource is in an error state.')\n    # The current status of the `Resource`, which describes what the resource is currently doing and
what can be expected of its `value`.\n    status: Signal<ResourceStatus> = Field(..., description='The current status of the `Resource`, which describes what the resource is currently doing and
what can be expected of its `value`.')\n    # When in the `error` state, this returns the last known error from the `Resource`.\n    error: Union[Signal<Error, undefined>] = Field(..., description='When in the `error` state, this returns the last known error from the `Resource`.')\n    # Whether this resource is loading a new value (or reloading the existing one).\n    isLoading: Signal<boolean> = Field(..., description='Whether this resource is loading a new value (or reloading the existing one).')\n\n# A `Resource` with a mutable value.
Overwriting the value of a resource sets it to the 'local' state.
@experimental\nclass WritableResource(Resource):\n    value: WritableSignal<T> = Field(...)\n\n# A `WritableResource` created through the `resource` function.
@experimental\nclass ResourceRef(WritableResource):\n    pass\n\n# Parameter to a `ResourceLoader` which gives the request and other options for the current loading
operation.
@experimental\nclass ResourceLoaderParams(BaseModel):\n    params: NoInfer<Exclude<R, undefined>> = Field(...)\n    abortSignal: AbortSignal = Field(...)\n    previous: Dict[str, Any] = Field(...)\n\n# Options to the `resource` function, for creating a resource.
@experimental\nclass BaseResourceOptions(BaseModel):\n    # A reactive function which determines the request to be made. Whenever the request changes, the
loader will be triggered to fetch a new value for the resource.
If a params function isn't provided, the loader won't rerun unless the resource is reloaded.\n    params: Optional[() => R] = None = Field(..., description='A reactive function which determines the request to be made. Whenever the request changes, the
loader will be triggered to fetch a new value for the resource.
If a params function isn\'t provided, the loader won\'t rerun unless the resource is reloaded.')\n    # The value which will be returned from the resource when a server value is unavailable, such as
when the resource is still loading.\n    defaultValue: Optional[NoInfer<T>] = None = Field(..., description='The value which will be returned from the resource when a server value is unavailable, such as
when the resource is still loading.')\n    # Equality function used to compare the return value of the loader.\n    equal: Optional[ValueEqualityFn<T>] = None = Field(..., description='Equality function used to compare the return value of the loader.')\n    # Overrides the `Injector` used by `resource`.\n    injector: Optional[Injector] = None = Field(..., description='Overrides the `Injector` used by `resource`.')\n\n# Options to the `resource` function, for creating a resource.
@experimental\nclass PromiseResourceOptions(BaseResourceOptions):\n    # Loading function which returns a `Promise` of the resource's value for a given request.\n    loader: ResourceLoader<T, R> = Field(..., description='Loading function which returns a `Promise` of the resource\'s value for a given request.')\n    # Cannot specify `stream` and `loader` at the same time.\n    stream: Optional[never] = None = Field(..., description='Cannot specify `stream` and `loader` at the same time.')\n\n# Options to the `resource` function, for creating a resource.
@experimental\nclass StreamingResourceOptions(BaseResourceOptions):\n    # Loading function which returns a `Promise` of a signal of the resource's value for a given
request, which can change over time as new values are received from a stream.\n    stream: ResourceStreamingLoader<T, R> = Field(..., description='Loading function which returns a `Promise` of a signal of the resource\'s value for a given
request, which can change over time as new values are received from a stream.')\n    # Cannot specify `stream` and `loader` at the same time.\n    loader: Optional[never] = None = Field(..., description='Cannot specify `stream` and `loader` at the same time.')\n\n# @publicAPI
Options for signal inputs.\nclass InputOptions(BaseModel):\n    # Optional public name for the input. By default, the class field name is used.\n    alias: Optional[str] = None = Field(..., description='Optional public name for the input. By default, the class field name is used.')\n    # Optional transform that runs whenever a new value is bound. Can be used to
transform the input value before the input is updated.
The transform function can widen the type of the input. For example, consider
an input for `disabled`. In practice, as the component author, you want to only
deal with a boolean, but users may want to bind a string if they just use the
attribute form to bind to the input via `<my-dir input>`. A transform can then
handle such string values and convert them to `boolean`. See: {@link booleanAttribute}.\n    transform: Optional[(v: TransformT) => T] = None = Field(..., description='Optional transform that runs whenever a new value is bound. Can be used to
transform the input value before the input is updated.
The transform function can widen the type of the input. For example, consider
an input for `disabled`. In practice, as the component author, you want to only
deal with a boolean, but users may want to bind a string if they just use the
attribute form to bind to the input via `<my-dir input>`. A transform can then
handle such string values and convert them to `boolean`. See: {@link booleanAttribute}.')\n    # A debug name for the input signal. Used in Angular DevTools to identify the signal.\n    debugName: Optional[str] = None = Field(..., description='A debug name for the input signal. Used in Angular DevTools to identify the signal.')\n\n# `InputSignalWithTransform` represents a special `Signal` for a
directive/component input with a `transform` function.
Signal inputs with transforms capture an extra generic for their transform write
type. Transforms can expand the accepted bound values for an input while ensuring
value retrievals of the signal input are still matching the generic input type.
```ts
class MyDir {
  disabled = input(false, {
    transform: (v: string|boolean) => convertToBoolean(v),
  }); // InputSignalWithTransform<boolean, string|boolean>
  click() {
    this.disabled() // always returns a `boolean`.
  }
}
```
@see {@link InputSignal} for additional information.
@publicApi 19.0\nclass InputSignalWithTransform(Signal):\n    [SIGNAL]: InputSignalNode<T, TransformT> = Field(...)\n    [ɵINPUT_SIGNAL_BRAND_READ_TYPE]: T = Field(...)\n    [ɵINPUT_SIGNAL_BRAND_WRITE_TYPE]: TransformT = Field(...)\n\n# `InputSignal` represents a special `Signal` for a directive/component input.
An input signal is similar to a non-writable signal except that it also
carries additional type-information for transforms, and that Angular internally
updates the signal whenever a new value is bound.
@see {@link InputOptionsWithTransform} for inputs with transforms.
@publicApi 19.0\nclass InputSignal(InputSignalWithTransform):\n    pass\n\n# The `input` function allows declaration of inputs in directives and
components.
The function exposes an API for also declaring required inputs via the
`input.required` function.
@publicAPI
@docsPrivate Ignored because `input` is the canonical API entry.\nclass InputFunction(BaseModel):\n    # Initializes a required input.
Consumers of your directive/component need to bind to this
input. If unset, a compile time error will be reported.
@publicAPI\n    required: Dict[str, Any] = Field(..., description='Initializes a required input.
Consumers of your directive/component need to bind to this
input. If unset, a compile time error will be reported.
@publicAPI')\n\n# @publicAPI
Options for model signals.\nclass ModelOptions(BaseModel):\n    # Optional public name of the input side of the model. The output side will have the same
name as the input, but suffixed with `Change`. By default, the class field name is used.\n    alias: Optional[str] = None = Field(..., description='Optional public name of the input side of the model. The output side will have the same
name as the input, but suffixed with `Change`. By default, the class field name is used.')\n    # A debug name for the model signal. Used in Angular DevTools to identify the signal.\n    debugName: Optional[str] = None = Field(..., description='A debug name for the model signal. Used in Angular DevTools to identify the signal.')\n\n# `ModelSignal` represents a special `Signal` for a directive/component model field.
A model signal is a writeable signal that can be exposed as an output.
Whenever its value is updated, it emits to the output.
@publicAPI\nclass ModelSignal(WritableSignal):\n    [SIGNAL]: InputSignalNode<T, T> = Field(...)\n\n# `model` declares a writeable signal that is exposed as an input/output pair on the containing
directive. The input name is taken either from the class member or from the `alias` option.
The output name is generated by taking the input name and appending `Change`.
The function exposes an API for also declaring required models via the
`model.required` function.
@publicAPI
@docsPrivate Ignored because `model` is the canonical API entry.\nclass ModelFunction(BaseModel):\n    required: Dict[str, Any] = Field(...)\n\n# Type of the `viewChild` function. The viewChild function creates a singular view query.
It is a special function that also provides access to required query results via the `.required`
property.
@publicApi
@docsPrivate Ignored because `viewChild` is the canonical API entry.\nclass ViewChildFunction(BaseModel):\n    # Initializes a view child query that is expected to always match an element.
@publicAPI\n    required: Union[{
        <LocatorT>(locator: ProviderToken<LocatorT>, string, opts?: {
            debugName?: string;
        }): Signal<LocatorT>;
        <LocatorT, ReadT>(locator: ProviderToken<LocatorT>, string, opts: {
            read: ProviderToken<ReadT>;
            debugName?: string;
        }): Signal<ReadT>;
    }] = Field(..., description='Initializes a view child query that is expected to always match an element.
@publicAPI')\n\n# Type of the `contentChild` function.
The contentChild function creates a singular content query. It is a special function that also
provides access to required query results via the `.required` property.
@publicApi 19.0
@docsPrivate Ignored because `contentChild` is the canonical API entry.\nclass ContentChildFunction(BaseModel):\n    # Initializes a content child query that is always expected to match.\n    required: Union[{
        <LocatorT>(locator: ProviderToken<LocatorT>, string, opts?: {
            descendants?: boolean;
            read?: undefined;
            debugName?: string;
        }): Signal<LocatorT>;
        <LocatorT, ReadT>(locator: ProviderToken<LocatorT>, string, opts: {
            descendants?: boolean;
            read: ProviderToken<ReadT>;
            debugName?: string;
        }): Signal<ReadT>;
    }] = Field(..., description='Initializes a content child query that is always expected to match.')\n\n# Type of the Attribute decorator / constructor function.
@publicApi\nclass AttributeDecorator(BaseModel):\n    pass\n\n# Type of the Attribute metadata.
@publicApi\nclass Attribute(BaseModel):\n    # The name of the attribute whose value can be injected.\n    attributeName: str = Field(..., description='The name of the attribute whose value can be injected.')\n\n# A hashtable of changes represented by {@link SimpleChange} objects stored
at the declared property name they belong to on a Directive or Component. This is
the type passed to the `ngOnChanges` hook.
@see {@link OnChanges}
@publicApi\nclass SimpleChanges(BaseModel):\n    pass\n\n# @description
A lifecycle hook that is called when any data-bound property of a directive changes.
Define an `ngOnChanges()` method to handle the changes.
@see {@link DoCheck}
@see {@link OnInit}
@see [Lifecycle hooks guide](guide/components/lifecycle)
@usageNotes
The following snippet shows how a component can implement this interface to
define an on-changes handler for an input property.
{@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}
@publicApi\nclass OnChanges(BaseModel):\n    pass\n\n# @description
A lifecycle hook that is called after Angular has initialized
all data-bound properties of a directive.
Define an `ngOnInit()` method to handle any additional initialization tasks.
@see {@link AfterContentInit}
@see [Lifecycle hooks guide](guide/components/lifecycle)
@usageNotes
The following snippet shows how a component can implement this interface to
define its own initialization method.
{@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}
@publicApi\nclass OnInit(BaseModel):\n    pass\n\n# A lifecycle hook that invokes a custom change-detection function for a directive,
in addition to the check performed by the default change-detector.
The default change-detection algorithm looks for differences by comparing
bound-property values by reference across change detection runs. You can use this
hook to check for and respond to changes by some other means.
When the default change detector detects changes, it invokes `ngOnChanges()` if supplied,
regardless of whether you perform additional change detection.
Typically, you should not use both `DoCheck` and `OnChanges` to respond to
changes on the same input.
@see {@link OnChanges}
@see [Lifecycle hooks guide](guide/components/lifecycle)
@usageNotes
The following snippet shows how a component can implement this interface
to invoke it own change-detection cycle.
{@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}
For a more complete example and discussion, see
[Defining custom change detection](guide/components/lifecycle#defining-custom-change-detection).
@publicApi\nclass DoCheck(BaseModel):\n    pass\n\n# A lifecycle hook that is called when a directive, pipe, or service is destroyed.
Use for any custom cleanup that needs to occur when the
instance is destroyed.
@see [Lifecycle hooks guide](guide/components/lifecycle)
@usageNotes
The following snippet shows how a component can implement this interface
to define its own custom clean-up method.
{@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}
@publicApi\nclass OnDestroy(BaseModel):\n    pass\n\n# @description
A lifecycle hook that is called after Angular has fully initialized
all content of a directive. It will run only once when the projected content is initialized.
Define an `ngAfterContentInit()` method to handle any additional initialization tasks.
@see {@link OnInit}
@see {@link AfterViewInit}
@see [Lifecycle hooks guide](guide/components/lifecycle)
@usageNotes
The following snippet shows how a component can implement this interface to
define its own content initialization method.
{@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}
@publicApi\nclass AfterContentInit(BaseModel):\n    pass\n\n# @description
A lifecycle hook that is called after the default change detector has
completed checking all content of a directive. It will run after the content
has been checked and most of the time it's during a change detection cycle.
@see {@link AfterViewChecked}
@see [Lifecycle hooks guide](guide/components/lifecycle)
@usageNotes
The following snippet shows how a component can implement this interface to
define its own after-check functionality.
{@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}
@publicApi\nclass AfterContentChecked(BaseModel):\n    pass\n\n# @description
A lifecycle hook that is called after Angular has fully initialized
a component's view.
Define an `ngAfterViewInit()` method to handle any additional initialization tasks.
@see {@link OnInit}
@see {@link AfterContentInit}
@see [Lifecycle hooks guide](guide/components/lifecycle)
@usageNotes
The following snippet shows how a component can implement this interface to
define its own view initialization method.
{@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}
@publicApi\nclass AfterViewInit(BaseModel):\n    pass\n\n# @description
A lifecycle hook that is called after the default change detector has
completed checking a component's view for changes.
@see {@link AfterContentChecked}
@see [Lifecycle hooks guide](guide/components/lifecycle)
@usageNotes
The following snippet shows how a component can implement this interface to
define its own after-check functionality.
{@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}
@publicApi\nclass AfterViewChecked(BaseModel):\n    pass\n\n# Type of the Query metadata.
@publicApi\nclass Query(BaseModel):\n    descendants: bool = Field(...)\n    emitDistinctChangesOnly: bool = Field(...)\n    first: bool = Field(...)\n    read: any = Field(...)\n    isViewQuery: bool = Field(...)\n    selector: any = Field(...)\n    static: Optional[bool] = None\n\n# Type of the ContentChildren decorator / constructor function.
@see {@link ContentChildren}
@publicApi\nclass ContentChildrenDecorator(BaseModel):\n    pass\n\n# Type of the ContentChild decorator / constructor function.
@publicApi\nclass ContentChildDecorator(BaseModel):\n    pass\n\n# Type of the ViewChildren decorator / constructor function.
@see {@link ViewChildren}
@publicApi\nclass ViewChildrenDecorator(BaseModel):\n    pass\n\n# Type of the ViewChild decorator / constructor function.
@see {@link ViewChild}
@publicApi\nclass ViewChildDecorator(BaseModel):\n    pass\n\n# A strategy for tracking changes over time to an iterable. Used by {@link /api/common/NgForOf NgForOf} to
respond to changes in an iterable by effecting equivalent changes in the DOM.
@publicApi\nclass IterableDiffer(BaseModel):\n    pass\n\n# An object describing the changes in the `Iterable` collection since last time
`IterableDiffer#diff()` was invoked.
@publicApi\nclass IterableChanges(BaseModel):\n    pass\n\n# Record representing the item change information.
@publicApi\nclass IterableChangeRecord(BaseModel):\n    # Current index of the item in `Iterable` or null if removed.\n    currentIndex: Union[float, null] = Field(..., description='Current index of the item in `Iterable` or null if removed.')\n    # Previous index of the item in `Iterable` or null if added.\n    previousIndex: Union[float, null] = Field(..., description='Previous index of the item in `Iterable` or null if added.')\n    # The item.\n    item: V = Field(..., description='The item.')\n    # Track by identity as computed by the `TrackByFunction`.\n    trackById: any = Field(..., description='Track by identity as computed by the `TrackByFunction`.')\n\n# A function optionally passed into the `NgForOf` directive to customize how `NgForOf` uniquely
identifies items in an iterable.
`NgForOf` needs to uniquely identify items in the iterable to correctly perform DOM updates
when items in the iterable are reordered, new items are added, or existing items are removed.
In all of these scenarios it is usually desirable to only update the DOM elements associated
with the items affected by the change. This behavior is important to:
- preserve any DOM-specific UI state (like cursor position, focus, text selection) when the
  iterable is modified
- enable animation of item addition, removal, and iterable reordering
- preserve the value of the `<select>` element when nested `<option>` elements are dynamically
  populated using `NgForOf` and the bound iterable is updated
A common use for custom `trackBy` functions is when the model that `NgForOf` iterates over
contains a property with a unique identifier. For example, given a model:
```ts
class User {
  id: number;
  name: string;
  ...
}
```
a custom `trackBy` function could look like the following:
```ts
function userTrackBy(index, user) {
  return user.id;
}
```
A custom `trackBy` function must have several properties:
- be [idempotent](https://en.wikipedia.org/wiki/Idempotence) (be without side effects, and always
return the same value for a given input)
- return unique value for all unique inputs
- be fast
@see [`NgForOf#ngForTrackBy`](api/common/NgForOf#ngForTrackBy)
@publicApi\nclass TrackByFunction(BaseModel):\n    pass\n\n# Provides a factory for {@link IterableDiffer}.
@publicApi\nclass IterableDifferFactory(BaseModel):\n    pass\n\n# Type of the Inject decorator / constructor function.
@publicApi\nclass InjectDecorator(BaseModel):\n    pass\n\n# Type of the Inject metadata.
@publicApi\nclass Inject(BaseModel):\n    # A DI token that maps to the dependency to be injected.\n    token: any = Field(..., description='A DI token that maps to the dependency to be injected.')\n\n# Type of the Optional decorator / constructor function.
@publicApi\nclass OptionalDecorator(BaseModel):\n    pass\n\n# Type of the Optional metadata.
@publicApi\nclass Optional(BaseModel):\n    pass\n\n# Type of the Self decorator / constructor function.
@publicApi\nclass SelfDecorator(BaseModel):\n    pass\n\n# Type of the Self metadata.
@publicApi\nclass Self(BaseModel):\n    pass\n\n# Type of the `SkipSelf` decorator / constructor function.
@publicApi\nclass SkipSelfDecorator(BaseModel):\n    pass\n\n# Type of the `SkipSelf` metadata.
@publicApi\nclass SkipSelf(BaseModel):\n    pass\n\n# Type of the `Host` decorator / constructor function.
@publicApi\nclass HostDecorator(BaseModel):\n    pass\n\n# Type of the Host metadata.
@publicApi\nclass Host(BaseModel):\n    pass\n\n# An interface that a function passed into `forwardRef` has to implement.
@usageNotes
### Example
{@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}
@publicApi\nclass ForwardRefFn(BaseModel):\n    pass\n\n# Type of the Injectable decorator / constructor function.
@publicApi\nclass InjectableDecorator(BaseModel):\n    pass\n\n# Type of the Injectable metadata.
@publicApi\nclass Injectable(BaseModel):\n    # Determines which injectors will provide the injectable.
- `Type<any>` - associates the injectable with an `@NgModule` or other `InjectorType`. This
option is DEPRECATED.
- 'null' : Equivalent to `undefined`. The injectable is not provided in any scope automatically
and must be added to a `providers` array.
The following options specify that this injectable should be provided in one of the following
injectors:
- 'root' : The application-level injector in most apps.
- 'platform' : A special singleton platform injector shared by all
applications on the page.
- 'any' : Provides a unique instance in each lazy loaded module while all eagerly loaded
modules share one instance. This option is DEPRECATED.\n    providedIn: Optional[Union[Type$1<any>, 'root', 'platform', 'any', null]] = None = Field(..., description='Determines which injectors will provide the injectable.
- `Type<any>` - associates the injectable with an `@NgModule` or other `InjectorType`. This
option is DEPRECATED.
- \'null\' : Equivalent to `undefined`. The injectable is not provided in any scope automatically
and must be added to a `providers` array.
The following options specify that this injectable should be provided in one of the following
injectors:
- \'root\' : The application-level injector in most apps.
- \'platform\' : A special singleton platform injector shared by all
applications on the page.
- \'any\' : Provides a unique instance in each lazy loaded module while all eagerly loaded
modules share one instance. This option is DEPRECATED.')\n\n# A differ that tracks changes made to an object over time.
@publicApi\nclass KeyValueDiffer(BaseModel):\n    pass\n\n# An object describing the changes in the `Map` or `{[k:string]: string}` since last time
`KeyValueDiffer#diff()` was invoked.
@publicApi\nclass KeyValueChanges(BaseModel):\n    pass\n\n# Record representing the item change information.
@publicApi\nclass KeyValueChangeRecord(BaseModel):\n    # Current key in the Map.\n    key: K = Field(..., description='Current key in the Map.')\n    # Current value for the key or `null` if removed.\n    currentValue: Union[V, null] = Field(..., description='Current value for the key or `null` if removed.')\n    # Previous value for the key or `null` if added.\n    previousValue: Union[V, null] = Field(..., description='Previous value for the key or `null` if added.')\n\n# Provides a factory for {@link KeyValueDiffer}.
@publicApi\nclass KeyValueDifferFactory(BaseModel):\n    pass\n\n# An interface that is implemented by pipes in order to perform a transformation.
Angular invokes the `transform` method with the value of a binding
as the first argument, and any parameters as the second argument in list form.
@usageNotes
In the following example, `TruncatePipe` returns the shortened value with an added ellipses.
<code-example path="core/ts/pipes/simple_truncate.ts" header="simple_truncate.ts"></code-example>
Invoking `{{ 'It was the best of times' | truncate }}` in a template will produce `It was...`.
In the following example, `TruncatePipe` takes parameters that sets the truncated length and the
string to append with.
<code-example path="core/ts/pipes/truncate.ts" header="truncate.ts"></code-example>
Invoking `{{ 'It was the best of times' | truncate:4:'....' }}` in a template will produce `It
was the best....`.
@publicApi\nclass PipeTransform(BaseModel):\n    pass\n\n# Options passed to the `computed` creation function.\nclass CreateComputedOptions(BaseModel):\n    # A comparison function which defines equality for computed values.\n    equal: Optional[ValueEqualityFn<T>] = None = Field(..., description='A comparison function which defines equality for computed values.')\n    # A debug name for the computed signal. Used in Angular DevTools to identify the signal.\n    debugName: Optional[str] = None = Field(..., description='A debug name for the computed signal. Used in Angular DevTools to identify the signal.')\n\n# Options passed to `afterEveryRender` and `afterNextRender`.
@publicApi 20.0\nclass AfterRenderOptions(BaseModel):\n    # The `Injector` to use during creation.
If this is not provided, the current injection context will be used instead (via `inject`).\n    injector: Optional[Injector] = None = Field(..., description='The `Injector` to use during creation.
If this is not provided, the current injection context will be used instead (via `inject`).')\n    # Whether the hook should require manual cleanup.
If this is `false` (the default) the hook will automatically register itself to be cleaned up
with the current `DestroyRef`.\n    manualCleanup: Optional[bool] = None = Field(..., description='Whether the hook should require manual cleanup.
If this is `false` (the default) the hook will automatically register itself to be cleaned up
with the current `DestroyRef`.')\n\nclass NgModuleType(Type$1):\n    ɵmod: NgModuleDef<T> = Field(...)\n\n# Represents the expansion of an `NgModule` into its scopes.
A scope is a set of directives and pipes that are visible in a particular context. Each
`NgModule` has two scopes. The `compilation` scope is the set of directives and pipes that will
be recognized in the templates of components declared by the module. The `exported` scope is the
set of directives and pipes exported by a module (that is, module B's exported scope gets added
to module A's compilation scope when module A imports B).\nclass NgModuleTransitiveScopes(BaseModel):\n    compilation: Dict[str, Any] = Field(...)\n    exported: Dict[str, Any] = Field(...)\n    schemas: Union[List[SchemaMetadata], null] = Field(...)\n\n# Runtime link information for NgModules.
This is the internal data structure used by the runtime to assemble components, directives,
pipes, and injectors.
NOTE: Always use `ɵɵdefineNgModule` function to create this object,
never create the object directly since the shape of this object
can change between versions.\nclass NgModuleDef(BaseModel):\n    # Token representing the module. Used by DI.\n    type: T = Field(..., description='Token representing the module. Used by DI.')\n    # List of components to bootstrap.
@see {NgModuleScopeInfoFromDecorator} This field is only used in global compilation mode. In local compilation mode the bootstrap info is computed and added in runtime.\n    bootstrap: Union[List[Type$1<any>], (() => Type$1<any>[])] = Field(..., description='List of components to bootstrap.
@see {NgModuleScopeInfoFromDecorator} This field is only used in global compilation mode. In local compilation mode the bootstrap info is computed and added in runtime.')\n    # List of components, directives, and pipes declared by this module.\n    declarations: Union[List[Type$1<any>], (() => Type$1<any>[])] = Field(..., description='List of components, directives, and pipes declared by this module.')\n    # List of modules or `ModuleWithProviders` imported by this module.\n    imports: Union[List[Type$1<any>], (() => Type$1<any>[])] = Field(..., description='List of modules or `ModuleWithProviders` imported by this module.')\n    # List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this
module.\n    exports: Union[List[Type$1<any>], (() => Type$1<any>[])] = Field(..., description='List of modules, `ModuleWithProviders`, components, directives, or pipes exported by this
module.')\n    # Cached value of computed `transitiveCompileScopes` for this module.
This should never be read directly, but accessed via `transitiveScopesFor`.\n    transitiveCompileScopes: Union[NgModuleTransitiveScopes, null] = Field(..., description='Cached value of computed `transitiveCompileScopes` for this module.
This should never be read directly, but accessed via `transitiveScopesFor`.')\n    # The set of schemas that declare elements to be allowed in the NgModule.\n    schemas: Union[List[SchemaMetadata], null] = Field(..., description='The set of schemas that declare elements to be allowed in the NgModule.')\n    # Unique ID for the module with which it should be registered.\n    id: Union[str, null] = Field(..., description='Unique ID for the module with which it should be registered.')\n\nclass DirectiveDefinition(BaseModel):\n    # Directive type, needed to configure the injector.\n    type: Type$1<T> = Field(..., description='Directive type, needed to configure the injector.')\n    # The selectors that will be used to match nodes to this directive.\n    selectors: Optional[CssSelectorList] = None = Field(..., description='The selectors that will be used to match nodes to this directive.')\n    # A map of input names.\n    inputs: Optional[DirectiveInputs<T>] = None = Field(..., description='A map of input names.')\n    # A map of output names.
The format is in: `{[actualPropertyName: string]:string}`.
Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.
This allows the render to re-construct the minified and non-minified names
of properties.\n    outputs: Optional[Dict[str, Any]] = None = Field(..., description='A map of output names.
The format is in: `{[actualPropertyName: string]:string}`.
Which the minifier may translate to: `{[minifiedPropertyName: string]:string}`.
This allows the render to re-construct the minified and non-minified names
of properties.')\n    # A list of optional features to apply.
See: {@link NgOnChangesFeature}, {@link ProvidersFeature}, {@link InheritDefinitionFeature}\n    features: Optional[List[List[DirectiveDefFeature]]] = None = Field(..., description='A list of optional features to apply.
See: {@link NgOnChangesFeature}, {@link ProvidersFeature}, {@link InheritDefinitionFeature}')\n    # Function executed by the parent template to allow child directive to apply host bindings.\n    hostBindings: Optional[HostBindingsFunction<T>] = None = Field(..., description='Function executed by the parent template to allow child directive to apply host bindings.')\n    # The number of bindings in this directive `hostBindings` (including pure fn bindings).
Used to calculate the length of the component's LView array, so we
can pre-fill the array and set the host binding start index.\n    hostVars: Optional[float] = None = Field(..., description='The number of bindings in this directive `hostBindings` (including pure fn bindings).
Used to calculate the length of the component\'s LView array, so we
can pre-fill the array and set the host binding start index.')\n    # Assign static attribute values to a host element.
This property will assign static attribute values as well as class and style
values to a host element. Since attribute values can consist of different types of values,
the `hostAttrs` array must include the values in the following format:
attrs = [
  // static attributes (like `title`, `name`, `id`...)
  attr1, value1, attr2, value,
  // a single namespace value (like `x:id`)
  NAMESPACE_MARKER, namespaceUri1, name1, value1,
  // another single namespace value (like `x:name`)
  NAMESPACE_MARKER, namespaceUri2, name2, value2,
  // a series of CSS classes that will be applied to the element (no spaces)
  CLASSES_MARKER, class1, class2, class3,
  // a series of CSS styles (property + value) that will be applied to the element
  STYLES_MARKER, prop1, value1, prop2, value2
]
All non-class and non-style attributes must be defined at the start of the list
first before all class and style values are set. When there is a change in value
type (like when classes and styles are introduced) a marker must be used to separate
the entries. The marker values themselves are set via entries found in the
[AttributeMarker] enum.\n    hostAttrs: Optional[TAttributes] = None = Field(..., description='Assign static attribute values to a host element.
This property will assign static attribute values as well as class and style
values to a host element. Since attribute values can consist of different types of values,
the `hostAttrs` array must include the values in the following format:
attrs = [
  // static attributes (like `title`, `name`, `id`...)
  attr1, value1, attr2, value,
  // a single namespace value (like `x:id`)
  NAMESPACE_MARKER, namespaceUri1, name1, value1,
  // another single namespace value (like `x:name`)
  NAMESPACE_MARKER, namespaceUri2, name2, value2,
  // a series of CSS classes that will be applied to the element (no spaces)
  CLASSES_MARKER, class1, class2, class3,
  // a series of CSS styles (property + value) that will be applied to the element
  STYLES_MARKER, prop1, value1, prop2, value2
]
All non-class and non-style attributes must be defined at the start of the list
first before all class and style values are set. When there is a change in value
type (like when classes and styles are introduced) a marker must be used to separate
the entries. The marker values themselves are set via entries found in the
[AttributeMarker] enum.')\n    # Function to create instances of content queries associated with a given directive.\n    contentQueries: Optional[ContentQueriesFunction<T>] = None = Field(..., description='Function to create instances of content queries associated with a given directive.')\n    # Additional set of instructions specific to view query processing. This could be seen as a
set of instructions to be inserted into the template function.\n    viewQuery: Optional[Union[ViewQueriesFunction<T>, null]] = None = Field(..., description='Additional set of instructions specific to view query processing. This could be seen as a
set of instructions to be inserted into the template function.')\n    # Defines the name that can be used in the template to assign this directive to a variable.
See: {@link Directive.exportAs}\n    exportAs: Optional[List[List[str]]] = None = Field(..., description='Defines the name that can be used in the template to assign this directive to a variable.
See: {@link Directive.exportAs}')\n    # Whether this directive/component is standalone.\n    standalone: Optional[bool] = None = Field(..., description='Whether this directive/component is standalone.')\n    # Whether this directive/component is signal-based.\n    signals: Optional[bool] = None = Field(..., description='Whether this directive/component is signal-based.')\n\nclass ComponentDefinition(Omit):\n    # The number of nodes, local refs, and pipes in this component template.
Used to calculate the length of this component's LView array, so we
can pre-fill the array and set the binding start index.\n    decls: float = Field(..., description='The number of nodes, local refs, and pipes in this component template.
Used to calculate the length of this component\'s LView array, so we
can pre-fill the array and set the binding start index.')\n    # The number of bindings in this component template (including pure fn bindings).
Used to calculate the length of this component's LView array, so we
can pre-fill the array and set the host binding start index.\n    vars: float = Field(..., description='The number of bindings in this component template (including pure fn bindings).
Used to calculate the length of this component\'s LView array, so we
can pre-fill the array and set the host binding start index.')\n    # Template function use for rendering DOM.
This function has following structure.
```ts
function Template<T>(ctx:T, creationMode: boolean) {
  if (creationMode) {
    // Contains creation mode instructions.
  }
  // Contains binding update instructions
}
```
Common instructions are:
Creation mode instructions:
 - `elementStart`, `elementEnd`
 - `text`
 - `container`
 - `listener`
Binding update instructions:
- `bind`
- `elementAttribute`
- `elementProperty`
- `elementClass`
- `elementStyle`\n    template: ComponentTemplate<T> = Field(..., description='Template function use for rendering DOM.
This function has following structure.
```ts
function Template<T>(ctx:T, creationMode: boolean) {
  if (creationMode) {
    // Contains creation mode instructions.
  }
  // Contains binding update instructions
}
```
Common instructions are:
Creation mode instructions:
 - `elementStart`, `elementEnd`
 - `text`
 - `container`
 - `listener`
Binding update instructions:
- `bind`
- `elementAttribute`
- `elementProperty`
- `elementClass`
- `elementStyle`')\n    # Constants for the nodes in the component's view.
Includes attribute arrays, local definition arrays etc.\n    consts: Optional[TConstantsOrFactory] = None = Field(..., description='Constants for the nodes in the component\'s view.
Includes attribute arrays, local definition arrays etc.')\n    # An array of `ngContent[selector]` values that were found in the template.\n    ngContentSelectors: Optional[List[List[str]]] = None = Field(..., description='An array of `ngContent[selector]` values that were found in the template.')\n    # A list of optional features to apply.
See: {@link NgOnChangesFeature}, {@link ProvidersFeature}\n    features: Optional[List[List[ComponentDefFeature]]] = None = Field(..., description='A list of optional features to apply.
See: {@link NgOnChangesFeature}, {@link ProvidersFeature}')\n    # Defines template and style encapsulation options available for Component's {@link /api/core/Component Component}.\n    encapsulation: Optional[ViewEncapsulation$1] = None = Field(..., description='Defines template and style encapsulation options available for Component\'s {@link /api/core/Component Component}.')\n    # Defines arbitrary developer-defined data to be stored on a renderer instance.
This is useful for renderers that delegate to other renderers.
see: animation\n    data: Optional[Dict[str, Any]] = None = Field(..., description='Defines arbitrary developer-defined data to be stored on a renderer instance.
This is useful for renderers that delegate to other renderers.
see: animation')\n    # A set of styles that the component needs to be present for component to render correctly.\n    styles: Optional[List[List[str]]] = None = Field(..., description='A set of styles that the component needs to be present for component to render correctly.')\n    # The strategy that the default change detector uses to detect changes.
When set, takes effect the next time change detection is triggered.\n    changeDetection: Optional[ChangeDetectionStrategy$1] = None = Field(..., description='The strategy that the default change detector uses to detect changes.
When set, takes effect the next time change detection is triggered.')\n    # Registry of directives, components, and pipes that may be found in this component's view.
This property is either an array of types or a function that returns the array of types. This
function may be necessary to support forward declarations.\n    dependencies: Optional[TypeOrFactory<DependencyTypeList>] = None = Field(..., description='Registry of directives, components, and pipes that may be found in this component\'s view.
This property is either an array of types or a function that returns the array of types. This
function may be necessary to support forward declarations.')\n    # The set of schemas that declare elements to be allowed in the component's template.\n    schemas: Optional[Union[List[SchemaMetadata], null]] = None = Field(..., description='The set of schemas that declare elements to be allowed in the component\'s template.')\n\nclass ChangeDetectorRefInterface(ChangeDetectorRef):\n    pass\n\n# @description
Hook for manual bootstrapping of the application instead of using `bootstrap` array in @NgModule
annotation. This hook is invoked only when the `bootstrap` array is empty or not provided.
Reference to the current application is provided as a parameter.
See ["Bootstrapping"](guide/ngmodules/bootstrapping).
@usageNotes
The example below uses `ApplicationRef.bootstrap()` to render the
`AppComponent` on the page.
```ts
class AppModule implements DoBootstrap {
  ngDoBootstrap(appRef: ApplicationRef) {
    appRef.bootstrap(AppComponent); // Or some other component
  }
}
```
@publicApi\nclass DoBootstrap(BaseModel):\n    pass\n\n# Used to configure event and run coalescing with `provideZoneChangeDetection`.
@publicApi
@see {@link provideZoneChangeDetection}\nclass NgZoneOptions(BaseModel):\n    # Optionally specify coalescing event change detections or not.
Consider the following case.
```html
<div (click)="doSomething()">
  <button (click)="doSomethingElse()"></button>
</div>
```
When button is clicked, because of the event bubbling, both
event handlers will be called and 2 change detections will be
triggered. We can coalesce such kind of events to trigger
change detection only once.
By default, this option is set to false, meaning events will
not be coalesced, and change detection will be triggered multiple times.
If this option is set to true, change detection will be triggered
once in the scenario described above.\n    eventCoalescing: Optional[bool] = None = Field(..., description='Optionally specify coalescing event change detections or not.
Consider the following case.
```html
<div (click)="doSomething()">
  <button (click)="doSomethingElse()"></button>
</div>
```
When button is clicked, because of the event bubbling, both
event handlers will be called and 2 change detections will be
triggered. We can coalesce such kind of events to trigger
change detection only once.
By default, this option is set to false, meaning events will
not be coalesced, and change detection will be triggered multiple times.
If this option is set to true, change detection will be triggered
once in the scenario described above.')\n    # Optionally specify if `NgZone#run()` method invocations should be coalesced
into a single change detection.
Consider the following case.
```ts
for (let i = 0; i < 10; i ++) {
  ngZone.run(() => {
    // do something
  });
}
```
This case triggers the change detection multiple times.
With ngZoneRunCoalescing options, all change detections in an event loop trigger only once.
In addition, the change detection executes in requestAnimation.\n    runCoalescing: Optional[bool] = None = Field(..., description='Optionally specify if `NgZone#run()` method invocations should be coalesced
into a single change detection.
Consider the following case.
```ts
for (let i = 0; i < 10; i ++) {
  ngZone.run(() => {
    // do something
  });
}
```
This case triggers the change detection multiple times.
With ngZoneRunCoalescing options, all change detections in an event loop trigger only once.
In addition, the change detection executes in requestAnimation.')\n    # When false, change detection is scheduled when Angular receives
a clear indication that templates need to be refreshed. This includes:
- calling `ChangeDetectorRef.markForCheck`
- calling `ComponentRef.setInput`
- updating a signal that is read in a template
- attaching a view that is marked dirty
- removing a view
- registering a render hook (templates are only refreshed if render hooks do one of the above)
@deprecated This option was introduced out of caution as a way for developers to opt out of the
   new behavior in v18 which schedule change detection for the above events when they occur
   outside the Zone. After monitoring the results post-release, we have determined that this
   feature is working as desired and do not believe it should ever be disabled by setting
   this option to `true`.\n    ignoreChangesOutsideZone: Optional[bool] = None = Field(..., description='When false, change detection is scheduled when Angular receives
a clear indication that templates need to be refreshed. This includes:
- calling `ChangeDetectorRef.markForCheck`
- calling `ComponentRef.setInput`
- updating a signal that is read in a template
- attaching a view that is marked dirty
- removing a view
- registering a render hook (templates are only refreshed if render hooks do one of the above)
@deprecated This option was introduced out of caution as a way for developers to opt out of the
   new behavior in v18 which schedule change detection for the above events when they occur
   outside the Zone. After monitoring the results post-release, we have determined that this
   feature is working as desired and do not believe it should ever be disabled by setting
   this option to `true`.')\n\n# A configuration object for the image-related options. Contains:
- breakpoints: An array of integer breakpoints used to generate
     srcsets for responsive images.
- disableImageSizeWarning: A boolean value. Setting this to true will
     disable console warnings about oversized images.
- disableImageLazyLoadWarning: A boolean value. Setting this to true will
     disable console warnings about LCP images configured with `loading="lazy"`.
Learn more about the responsive image configuration in [the NgOptimizedImage
guide](guide/image-optimization).
Learn more about image warning options in [the related error page](errors/NG0913).
@publicApi\nclass ImageConfig(BaseModel):\n    breakpoints: Optional[List[List[float]]] = None\n    placeholderResolution: Optional[float] = None\n    disableImageSizeWarning: Optional[bool] = None\n    disableImageLazyLoadWarning: Optional[bool] = None\n\n# Testability API.
`declare` keyword causes tsickle to generate externs, so these methods are
not renamed by Closure Compiler.
@publicApi\nclass PublicTestability(BaseModel):\n    pass\n\n# Adapter interface for retrieving the `Testability` service associated for a
particular context.
@publicApi\nclass GetTestability(BaseModel):\n    pass\n\nclass PlatformReflectionCapabilities(BaseModel):\n    pass\n\n# An object that defines an injection context for the injector profiler.\nclass InjectorProfilerContext(BaseModel):\n    # The Injector that service is being injected into.
     - Example: if ModuleA --provides--> ServiceA --injects--> ServiceB
                then inject(ServiceB) in ServiceA has ModuleA as an injector context\n    injector: Injector = Field(..., description='The Injector that service is being injected into.
     - Example: if ModuleA --provides--> ServiceA --injects--> ServiceB
                then inject(ServiceB) in ServiceA has ModuleA as an injector context')\n    # The class where the constructor that is calling `inject` is located
     - Example: if ModuleA --provides--> ServiceA --injects--> ServiceB
                then inject(ServiceB) in ServiceA has ServiceA as a construction context\n    token: Union[Type$1<unknown>, null] = Field(..., description='The class where the constructor that is calling `inject` is located
     - Example: if ModuleA --provides--> ServiceA --injects--> ServiceB
                then inject(ServiceB) in ServiceA has ServiceA as a construction context')\n\n# An object that contains information about a provider that has been configured
TODO: rename to indicate that it is a debug structure eg. ProviderDebugInfo.\nclass ProviderRecord(BaseModel):\n    # DI token that this provider is configuring\n    token: Union[Type$1<unknown>, InjectionToken<unknown>] = Field(..., description='DI token that this provider is configuring')\n    # Determines if provider is configured as view provider.\n    isViewProvider: bool = Field(..., description='Determines if provider is configured as view provider.')\n    # The raw provider associated with this ProviderRecord.\n    provider: SingleProvider = Field(..., description='The raw provider associated with this ProviderRecord.')\n    # The path of DI containers that were followed to import this provider\n    importPath: Optional[List[List[Type$1<unknown>]]] = None = Field(..., description='The path of DI containers that were followed to import this provider')\n\n# An object that contains information a service that has been injected within an
InjectorProfilerContext\nclass InjectedService(BaseModel):\n    # DI token of the Service that is injected\n    token: Optional[Union[Type$1<unknown>, InjectionToken<unknown>]] = None = Field(..., description='DI token of the Service that is injected')\n    # Value of the injected service\n    value: unknown = Field(..., description='Value of the injected service')\n    # Flags that this service was injected with\n    flags: Optional[Union[InternalInjectFlags, InjectOptions]] = None = Field(..., description='Flags that this service was injected with')\n    # Injector that this service was provided in.\n    providedIn: Optional[Injector] = None = Field(..., description='Injector that this service was provided in.')\n    # In NodeInjectors, the LView and TNode that serviced this injection.\n    injectedIn: Optional[Dict[str, Any]] = None = Field(..., description='In NodeInjectors, the LView and TNode that serviced this injection.')\n\n# Marker interface for a value that's safe to use in a particular context.
@publicApi\nclass SafeValue(BaseModel):\n    pass\n\n# Marker interface for a value that's safe to use as HTML.
@publicApi\nclass SafeHtml(SafeValue):\n    pass\n\n# Marker interface for a value that's safe to use as style (CSS).
@publicApi\nclass SafeStyle(SafeValue):\n    pass\n\n# Marker interface for a value that's safe to use as JavaScript.
@publicApi\nclass SafeScript(SafeValue):\n    pass\n\n# Marker interface for a value that's safe to use as a URL linking to a document.
@publicApi\nclass SafeUrl(SafeValue):\n    pass\n\n# Marker interface for a value that's safe to use as a URL to load executable code from.
@publicApi\nclass SafeResourceUrl(SafeValue):\n    pass\n\nclass WrappedRequest(BaseModel):\n    request: unknown = Field(...)\n    reload: float = Field(...)\n\n# TODO(incremental-hydration): Remove this file entirely once PromiseWithResolvers lands in stable
node / TS.\nclass PromiseWithResolvers(BaseModel):\n    promise: Promise<T> = Field(...)\n    resolve: Union[(value: T, PromiseLike<T>) => void] = Field(...)\n    reject: (reason?: any) => void = Field(...)\n\n# Metadata common to directives from all frameworks.\nclass BaseDirectiveDebugMetadata(BaseModel):\n    name: Optional[str] = None\n    framework: Optional[Framework] = None\n\n# Partial metadata for a given Angular directive instance.
@publicApi\nclass AngularDirectiveDebugMetadata(BaseDirectiveDebugMetadata):\n    framework: Optional[Framework.Angular] = None\n    inputs: Record<string, string> = Field(...)\n    outputs: Record<string, string> = Field(...)\n\n# Partial metadata for a given Angular component instance.
@publicApi\nclass AngularComponentDebugMetadata(AngularDirectiveDebugMetadata):\n    encapsulation: ViewEncapsulation$1 = Field(...)\n    changeDetection: ChangeDetectionStrategy$1 = Field(...)\n\n# Partial metadata for a given ACX directive instance.\nclass AcxDirectiveDebugMetadata(BaseDirectiveDebugMetadata):\n    framework: Framework.ACX = Field(...)\n    inputs: Record<string, string> = Field(...)\n    outputs: Record<string, string> = Field(...)\n\n# Partial metadata for a given ACX component instance.\nclass AcxComponentDebugMetadata(AcxDirectiveDebugMetadata):\n    changeDetection: AcxChangeDetectionStrategy = Field(...)\n    encapsulation: AcxViewEncapsulation = Field(...)\n\n# Partial metadata for a given Wiz component instance.\nclass WizComponentDebugMetadata(BaseDirectiveDebugMetadata):\n    framework: Framework.Wiz = Field(...)\n    props: Record<string, string> = Field(...)\n\n# Event listener configuration returned from `getListeners`.
@publicApi\nclass Listener(BaseModel):\n    # Name of the event listener.\n    name: str = Field(..., description='Name of the event listener.')\n    # Element that the listener is bound to.\n    element: Element = Field(..., description='Element that the listener is bound to.')\n    # Callback that is invoked when the event is triggered.\n    callback: (value: any) => any = Field(..., description='Callback that is invoked when the event is triggered.')\n    # Whether the listener is using event capturing.\n    useCapture: bool = Field(..., description='Whether the listener is using event capturing.')\n    # Type of the listener (e.g. a native DOM event or a custom @Output).\n    type: Union['dom', 'output'] = Field(..., description='Type of the listener (e.g. a native DOM event or a custom @Output).')\n\nclass NO_CHANGE(BaseModel):\n    __brand__: 'NO_CHANGE' = Field(...)\n\nclass R3DeclareDependencyMetadataFacade(BaseModel):\n    token: OpaqueValue = Field(...)\n    attribute: Optional[bool] = None\n    host: Optional[bool] = None\n    optional: Optional[bool] = None\n    self: Optional[bool] = None\n    skipSelf: Optional[bool] = None\n\nclass R3HostDirectiveMetadataFacade(BaseModel):\n    directive: Type = Field(...)\n    inputs: Optional[List[List[str]]] = None\n    outputs: Optional[List[List[str]]] = None\n\nclass R3DeclareDirectiveFacade(BaseModel):\n    selector: Optional[str] = None\n    type: Type = Field(...)\n    version: str = Field(...)\n    inputs: Optional[Union[{
        [fieldName: string]: {
            classPropertyName: string;
            publicName: string;
            isSignal: boolean;
            isRequired: boolean;
            transformFunction: Function, null;
        }, LegacyInputPartialMapping;
    }]] = None\n    outputs: Optional[Dict[str, Any]] = None\n    host: Optional[Dict[str, Any]] = None\n    queries: Optional[List[List[R3DeclareQueryMetadataFacade]]] = None\n    viewQueries: Optional[List[List[R3DeclareQueryMetadataFacade]]] = None\n    providers: Optional[OpaqueValue] = None\n    exportAs: Optional[List[List[str]]] = None\n    usesInheritance: Optional[bool] = None\n    usesOnChanges: Optional[bool] = None\n    isStandalone: Optional[bool] = None\n    hostDirectives: Optional[Union[List[R3HostDirectiveMetadataFacade], null]] = None\n    isSignal: Optional[bool] = None\n\nclass R3DeclareComponentFacade(R3DeclareDirectiveFacade):\n    template: str = Field(...)\n    isInline: Optional[bool] = None\n    styles: Optional[List[List[str]]] = None\n    dependencies: Optional[List[List[R3DeclareTemplateDependencyFacade]]] = None\n    components: Optional[List[List[R3DeclareDirectiveDependencyFacade]]] = None\n    directives: Optional[List[List[R3DeclareDirectiveDependencyFacade]]] = None\n    pipes: Optional[Union[{
        [pipeName: string]: OpaqueValue, (() => OpaqueValue);
    }]] = None\n    deferBlockDependencies: Optional[List[List[Union[(() => Promise<Type>, null)]]]] = None\n    viewProviders: Optional[OpaqueValue] = None\n    animations: Optional[OpaqueValue] = None\n    changeDetection: Optional[ChangeDetectionStrategy] = None\n    encapsulation: Optional[ViewEncapsulation] = None\n    interpolation: Optional[[string, string]] = None\n    preserveWhitespaces: Optional[bool] = None\n\nclass R3DeclareDirectiveDependencyFacade(BaseModel):\n    kind: Optional[Union['directive', 'component']] = None\n    selector: str = Field(...)\n    type: Union[OpaqueValue, (() => OpaqueValue)] = Field(...)\n    inputs: Optional[List[List[str]]] = None\n    outputs: Optional[List[List[str]]] = None\n    exportAs: Optional[List[List[str]]] = None\n\nclass R3DeclarePipeDependencyFacade(BaseModel):\n    kind: Optional['pipe'] = None\n    name: str = Field(...)\n    type: Union[OpaqueValue, (() => OpaqueValue)] = Field(...)\n\nclass R3DeclareNgModuleDependencyFacade(BaseModel):\n    kind: 'ngmodule' = Field(...)\n    type: Union[OpaqueValue, (() => OpaqueValue)] = Field(...)\n\nclass R3DeclareFactoryFacade(BaseModel):\n    type: Type = Field(...)\n    deps: Union[List[R3DeclareDependencyMetadataFacade], 'invalid', null] = Field(...)\n    target: FactoryTarget = Field(...)\n\nclass R3DeclareInjectableFacade(BaseModel):\n    type: Type = Field(...)\n    providedIn: Optional[Union[Type, 'root', 'platform', 'any', null]] = None\n    useClass: Optional[OpaqueValue] = None\n    useFactory: Optional[OpaqueValue] = None\n    useExisting: Optional[OpaqueValue] = None\n    useValue: Optional[OpaqueValue] = None\n    deps: Optional[List[List[R3DeclareDependencyMetadataFacade]]] = None\n\nclass R3DeclareQueryMetadataFacade(BaseModel):\n    propertyName: str = Field(...)\n    first: Optional[bool] = None\n    predicate: Union[OpaqueValue, List[str]] = Field(...)\n    descendants: Optional[bool] = None\n    read: Optional[OpaqueValue] = None\n    static: Optional[bool] = None\n    emitDistinctChangesOnly: Optional[bool] = None\n    isSignal: Optional[bool] = None\n\nclass R3DeclareInjectorFacade(BaseModel):\n    type: Type = Field(...)\n    imports: Optional[List[List[OpaqueValue]]] = None\n    providers: Optional[List[List[OpaqueValue]]] = None\n\nclass R3DeclareNgModuleFacade(BaseModel):\n    type: Type = Field(...)\n    bootstrap: Optional[Union[List[OpaqueValue], (() => OpaqueValue[])]] = None\n    declarations: Optional[Union[List[OpaqueValue], (() => OpaqueValue[])]] = None\n    imports: Optional[Union[List[OpaqueValue], (() => OpaqueValue[])]] = None\n    exports: Optional[Union[List[OpaqueValue], (() => OpaqueValue[])]] = None\n    schemas: Optional[List[List[OpaqueValue]]] = None\n    id: Optional[OpaqueValue] = None\n\nclass R3DeclarePipeFacade(BaseModel):\n    type: Type = Field(...)\n    name: str = Field(...)\n    version: str = Field(...)\n    pure: Optional[bool] = None\n    isStandalone: Optional[bool] = None\n\n# Profiler function which the runtime will invoke before and after user code.\nclass Profiler(BaseModel):\n    pass\n\n# !
@license
Copyright Google LLC All Rights Reserved.
Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://angular.dev/license Retrieved information about a `@defer` block.\nclass DeferBlockData(BaseModel):\n    # Current state of the block.\n    state: Union['placeholder', 'loading', 'complete', 'error', 'initial'] = Field(..., description='Current state of the block.')\n    # Hydration state of the block.\n    incrementalHydrationState: Union['not-configured', 'hydrated', 'dehydrated'] = Field(..., description='Hydration state of the block.')\n    # Wherther the block has a connected `@error` block.\n    hasErrorBlock: bool = Field(..., description='Wherther the block has a connected `@error` block.')\n    # Information about the connected `@loading` block.\n    loadingBlock: Union[{
        /** Whether the block is defined. */
        exists: boolean;
        /** Minimum amount of milliseconds that the block should be shown. */
        minimumTime: number, null;
        /** Amount of time after which the block should be shown. */
        afterTime: number, null;
    }] = Field(..., description='Information about the connected `@loading` block.')\n    # Information about the connected `@placeholder` block.\n    placeholderBlock: Union[{
        /** Whether the block is defined. */
        exists: boolean;
        /** Minimum amount of time that block should be shown. */
        minimumTime: number, null;
    }] = Field(..., description='Information about the connected `@placeholder` block.')\n    # Stringified version of the block's triggers.\n    triggers: List[List[str]] = Field(..., description='Stringified version of the block\'s triggers.')\n    # Element root nodes that are currently being shown in the block.\n    rootNodes: List[List[Node]] = Field(..., description='Element root nodes that are currently being shown in the block.')\n\nclass DebugSignalGraphNode(BaseModel):\n    kind: str = Field(...)\n    id: str = Field(...)\n    epoch: float = Field(...)\n    label: Optional[str] = None\n    value: Optional[unknown] = None\n    debuggableFn: Optional[() => unknown] = None\n\nclass DebugSignalGraphEdge(BaseModel):\n    # Index of a signal node in the `nodes` array that is a consumer of the signal produced by the producer node.\n    consumer: float = Field(..., description='Index of a signal node in the `nodes` array that is a consumer of the signal produced by the producer node.')\n    # Index of a signal node in the `nodes` array that is a producer of the signal consumed by the consumer node.\n    producer: float = Field(..., description='Index of a signal node in the `nodes` array that is a producer of the signal consumed by the consumer node.')\n\n# A debug representation of the signal graph.\nclass DebugSignalGraph(BaseModel):\n    nodes: List[List[DebugSignalGraphNode]] = Field(...)\n    edges: List[List[DebugSignalGraphEdge]] = Field(...)\n\nclass NgGlobalPublishUtils(BaseModel):\n    pass\n\n# Default debug tools available under `window.ng`.\nclass GlobalDevModeUtils(BaseModel):\n    [GLOBAL_PUBLISH_EXPANDO_KEY]: typeof globalUtilsFunctions = Field(...)\n\n# Represents the set of dependencies of a type in a certain context.\nclass ScopeData(BaseModel):\n    pipes: Set<PipeType<any>> = Field(...)\n    directives: Union[Set<DirectiveType<any>, ComponentType<any>, Type$1<any>>] = Field(...)\n    # If true it indicates that calculating this scope somehow was not successful. The consumers
should interpret this as empty dependencies. The application of this flag is when calculating
scope recursively, the presence of this flag in a scope dependency implies that the scope is
also poisoned and thus we can return immediately without having to continue the recursion. The
reason for this error is displayed as an error message in the console as per JIT behavior
today. In addition to that, in local compilation the other build/compilations run in parallel
with local compilation may or may not reveal some details about the error as well.\n    isPoisoned: Optional[bool] = None = Field(..., description='If true it indicates that calculating this scope somehow was not successful. The consumers
should interpret this as empty dependencies. The application of this flag is when calculating
scope recursively, the presence of this flag in a scope dependency implies that the scope is
also poisoned and thus we can return immediately without having to continue the recursion. The
reason for this error is displayed as an error message in the console as per JIT behavior
today. In addition to that, in local compilation the other build/compilations run in parallel
with local compilation may or may not reveal some details about the error as well.')\n\n# Represents scope data for standalone components as calculated during runtime by the deps
tracker.\nclass StandaloneCompScopeData(ScopeData):\n    ngModules: Set<NgModuleType<any>> = Field(...)\n\n# Represents scope data for NgModule as calculated during runtime by the deps tracker.\nclass NgModuleScope(BaseModel):\n    compilation: ScopeData = Field(...)\n    exported: ScopeData = Field(...)\n\n# Represents scope data for standalone component as calculated during runtime by the deps tracker.\nclass StandaloneComponentScope(BaseModel):\n    compilation: StandaloneCompScopeData = Field(...)\n\n# Component dependencies info as calculated during runtime by the deps tracker.\nclass ComponentDependencies(BaseModel):\n    dependencies: DependencyTypeList = Field(...)\n\n# Public API for runtime deps tracker (RDT).
All downstream tools should only use these methods.\nclass DepsTrackerApi(BaseModel):\n    pass\n\n# An interface that describes the subset of component metadata
that can be retrieved using the `reflectComponentType` function.
@publicApi\nclass ComponentMirror(BaseModel):\n    pass\n\n# Set of config options available during the application bootstrap operation.
@publicApi\nclass ApplicationConfig(BaseModel):\n    # List of providers that should be available to the root component and all its children.\n    providers: List[List[Union[Provider, EnvironmentProviders]]] = Field(..., description='List of providers that should be available to the root component and all its children.')\n\n# Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\nclass IndexableObject(BaseModel):\n    pass\n\nclass NgClassInterface(BaseModel):\n    pass\n\nclass NgStyleInterface(BaseModel):\n    pass\n\n# Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\nclass InputObservable(BaseModel):\n    pass\n\n# @description
A serializable version of the event from `onPopState` or `onHashChange`
@publicApi\nclass LocationChangeEvent(BaseModel):\n    type: str = Field(...)\n    state: any = Field(...)\n\n# @publicApi\nclass LocationChangeListener(BaseModel):\n    pass\n\n# @publicApi\nclass PopStateEvent(BaseModel):\n    pop: Optional[bool] = None\n    state: Optional[any] = None\n    type: Optional[str] = None\n    url: Optional[str] = None\n\n# An interface that describes the date pipe configuration, which can be provided using the
`DATE_PIPE_DEFAULT_OPTIONS` token.
@see {@link DATE_PIPE_DEFAULT_OPTIONS}
@publicApi\nclass DatePipeConfig(BaseModel):\n    dateFormat: Optional[str] = None\n    timezone: Optional[str] = None\n\n# A key value pair.
Usually used to represent the key value pairs from a Map or Object.
@publicApi\nclass KeyValue(BaseModel):\n    key: K = Field(...)\n    value: V = Field(...)\n\n# Represents a time value with hours and minutes.
@publicApi
@deprecated Locale date getters are deprecated\nclass Time(BaseModel):\n    hours: float = Field(...)\n    minutes: float = Field(...)\n\n# Config options recognized by the image loader function.
@see {@link ImageLoader}
@see {@link NgOptimizedImage}
@publicApi\nclass ImageLoaderConfig(BaseModel):\n    # Image file name to be added to the image request URL.\n    src: str = Field(..., description='Image file name to be added to the image request URL.')\n    # Width of the requested image (to be used when generating srcset).\n    width: Optional[float] = None = Field(..., description='Width of the requested image (to be used when generating srcset).')\n    # Whether the loader should generate a URL for a small image placeholder instead of a full-sized
image.\n    isPlaceholder: Optional[bool] = None = Field(..., description='Whether the loader should generate a URL for a small image placeholder instead of a full-sized
image.')\n    # Additional user-provided parameters for use by the ImageLoader.\n    loaderParams: Optional[Dict[str, Any]] = None = Field(..., description='Additional user-provided parameters for use by the ImageLoader.')\n\n# Config options used in rendering placeholder images.
@see {@link NgOptimizedImage}
@publicApi\nclass ImagePlaceholderConfig(BaseModel):\n    blur: Optional[bool] = None\n\n# A collection of matrix and query URL parameters.
@see {@link convertToParamMap}
@see {@link ParamMap}
@publicApi\nclass Params(BaseModel):\n    pass\n\n# A map that provides access to the required and optional parameters
specific to a route.
The map supports retrieving a single value with `get()`
or multiple values with `getAll()`.
@see [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)
@publicApi\nclass ParamMap(BaseModel):\n    # Names of the parameters in the map.\n    keys: List[List[str]] = Field(..., description='Names of the parameters in the map.')\n\n# A set of options which specify how to determine if a `UrlTree` is active, given the `UrlTree`
for the current router state.
@publicApi
@see {@link Router#isActive}\nclass IsActiveMatchOptions(BaseModel):\n    # Defines the strategy for comparing the matrix parameters of two `UrlTree`s.
The matrix parameter matching is dependent on the strategy for matching the
segments. That is, if the `paths` option is set to `'subset'`, only
the matrix parameters of the matching segments will be compared.
- `'exact'`: Requires that matching segments also have exact matrix parameter
matches.
- `'subset'`: The matching segments in the router's active `UrlTree` may contain
extra matrix parameters, but those that exist in the `UrlTree` in question must match.
- `'ignored'`: When comparing `UrlTree`s, matrix params will be ignored.\n    matrixParams: Union['exact', 'subset', 'ignored'] = Field(..., description='Defines the strategy for comparing the matrix parameters of two `UrlTree`s.
The matrix parameter matching is dependent on the strategy for matching the
segments. That is, if the `paths` option is set to `\'subset\'`, only
the matrix parameters of the matching segments will be compared.
- `\'exact\'`: Requires that matching segments also have exact matrix parameter
matches.
- `\'subset\'`: The matching segments in the router\'s active `UrlTree` may contain
extra matrix parameters, but those that exist in the `UrlTree` in question must match.
- `\'ignored\'`: When comparing `UrlTree`s, matrix params will be ignored.')\n    # Defines the strategy for comparing the query parameters of two `UrlTree`s.
- `'exact'`: the query parameters must match exactly.
- `'subset'`: the active `UrlTree` may contain extra parameters,
but must match the key and value of any that exist in the `UrlTree` in question.
- `'ignored'`: When comparing `UrlTree`s, query params will be ignored.\n    queryParams: Union['exact', 'subset', 'ignored'] = Field(..., description='Defines the strategy for comparing the query parameters of two `UrlTree`s.
- `\'exact\'`: the query parameters must match exactly.
- `\'subset\'`: the active `UrlTree` may contain extra parameters,
but must match the key and value of any that exist in the `UrlTree` in question.
- `\'ignored\'`: When comparing `UrlTree`s, query params will be ignored.')\n    # Defines the strategy for comparing the `UrlSegment`s of the `UrlTree`s.
- `'exact'`: all segments in each `UrlTree` must match.
- `'subset'`: a `UrlTree` will be determined to be active if it
is a subtree of the active route. That is, the active route may contain extra
segments, but must at least have all the segments of the `UrlTree` in question.\n    paths: Union['exact', 'subset'] = Field(..., description='Defines the strategy for comparing the `UrlSegment`s of the `UrlTree`s.
- `\'exact\'`: all segments in each `UrlTree` must match.
- `\'subset\'`: a `UrlTree` will be determined to be active if it
is a subtree of the active route. That is, the active route may contain extra
segments, but must at least have all the segments of the `UrlTree` in question.')\n    # - `'exact'`: indicates that the `UrlTree` fragments must be equal.
- `'ignored'`: the fragments will not be compared when determining if a
`UrlTree` is active.\n    fragment: Union['exact', 'ignored'] = Field(..., description='- `\'exact\'`: indicates that the `UrlTree` fragments must be equal.
- `\'ignored\'`: the fragments will not be compared when determining if a
`UrlTree` is active.')\n\n# Represents the result of matching URLs with a custom matching function.
* `consumed` is an array of the consumed URL segments.
* `posParams` is a map of positional parameters.
@see {@link UrlMatcher}
@publicApi\nclass UrlMatchResult(BaseModel):\n    consumed: List[List[UrlSegment]] = Field(...)\n    posParams: Optional[Dict[str, Any]] = None\n\n# Represents static data associated with a particular route.
@see {@link Route#data}
@publicApi\nclass Data(BaseModel):\n    pass\n\n# Represents the resolved data associated with a particular route.
Returning a `RedirectCommand` directs the router to cancel the current navigation and redirect to
the location provided in the `RedirectCommand`. Note that there are no ordering guarantees when
resolvers execute. If multiple resolvers would return a `RedirectCommand`, only the first one
returned will be used.
@see {@link Route#resolve}
@publicApi\nclass ResolveData(BaseModel):\n    pass\n\n# An ES Module object with a default export of the given type.
@see {@link Route#loadComponent}
@see {@link LoadChildrenCallback}
@publicApi\nclass DefaultExport(BaseModel):\n    # Default exports are bound under the name `"default"`, per the ES Module spec:
https://tc39.es/ecma262/#table-export-forms-mapping-to-exportentry-records\n    default: T = Field(..., description='Default exports are bound under the name `"default"`, per the ES Module spec:
https://tc39.es/ecma262/#table-export-forms-mapping-to-exportentry-records')\n\n# A configuration object that defines a single route.
A set of routes are collected in a `Routes` array to define a `Router` configuration.
The router attempts to match segments of a given URL against each route,
using the configuration options defined in this object.
Supports static, parameterized, redirect, and wildcard routes, as well as
custom route data and resolve methods.
For detailed usage information, see the [Routing Guide](guide/routing/common-router-tasks).
@usageNotes
### Simple Configuration
The following route specifies that when navigating to, for example,
`/team/11/user/bob`, the router creates the 'Team' component
with the 'User' child component in it.
```ts
[{
  path: 'team/:id',
 component: Team,
  children: [{
    path: 'user/:name',
    component: User
  }]
}]
```
### Multiple Outlets
The following route creates sibling components with multiple outlets.
When navigating to `/team/11(aux:chat/jim)`, the router creates the 'Team' component next to
the 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.
```ts
[{
  path: 'team/:id',
  component: Team
}, {
  path: 'chat/:user',
  component: Chat
  outlet: 'aux'
}]
```
### Wild Cards
The following route uses wild-card notation to specify a component
that is always instantiated regardless of where you navigate to.
```ts
[{
  path: '**',
  component: WildcardComponent
}]
```
### Redirects
The following route uses the `redirectTo` property to ignore a segment of
a given URL when looking for a child path.
When navigating to '/team/11/legacy/user/jim', the router changes the URL segment
'/team/11/legacy/user/jim' to '/team/11/user/jim', and then instantiates
the Team component with the User child component in it.
```ts
[{
  path: 'team/:id',
  component: Team,
  children: [{
    path: 'legacy/user/:name',
    redirectTo: 'user/:name'
  }, {
    path: 'user/:name',
    component: User
  }]
}]
```
The redirect path can be relative, as shown in this example, or absolute.
If we change the `redirectTo` value in the example to the absolute URL segment '/user/:name',
the result URL is also absolute, '/user/jim'.
### Empty Path
Empty-path route configurations can be used to instantiate components that do not 'consume'
any URL segments.
In the following configuration, when navigating to
`/team/11`, the router instantiates the 'AllUsers' component.
```ts
[{
  path: 'team/:id',
  component: Team,
  children: [{
    path: '',
    component: AllUsers
  }, {
    path: 'user/:name',
    component: User
  }]
}]
```
Empty-path routes can have children. In the following example, when navigating
to `/team/11/user/jim`, the router instantiates the wrapper component with
the user component in it.
Note that an empty path route inherits its parent's parameters and data.
```ts
[{
  path: 'team/:id',
  component: Team,
  children: [{
    path: '',
    component: WrapperCmp,
    children: [{
      path: 'user/:name',
      component: User
    }]
  }]
}]
```
### Matching Strategy
The default path-match strategy is 'prefix', which means that the router
checks URL elements from the left to see if the URL matches a specified path.
For example, '/team/11/user' matches 'team/:id'.
```ts
[{
  path: '',
  pathMatch: 'prefix', //default
  redirectTo: 'main'
}, {
  path: 'main',
  component: Main
}]
```
You can specify the path-match strategy 'full' to make sure that the path
covers the whole unconsumed URL. It is important to do this when redirecting
empty-path routes. Otherwise, because an empty path is a prefix of any URL,
the router would apply the redirect even when navigating to the redirect destination,
creating an endless loop.
In the following example, supplying the 'full' `pathMatch` strategy ensures
that the router applies the redirect if and only if navigating to '/'.
```ts
[{
  path: '',
  pathMatch: 'full',
  redirectTo: 'main'
}, {
  path: 'main',
  component: Main
}]
```
### Componentless Routes
You can share parameters between sibling components.
For example, suppose that two sibling components should go next to each other,
and both of them require an ID parameter. You can accomplish this using a route
that does not specify a component at the top level.
In the following example, 'MainChild' and 'AuxChild' are siblings.
When navigating to 'parent/10/(a//aux:b)', the route instantiates
the main child and aux child components next to each other.
For this to work, the application component must have the primary and aux outlets defined.
```ts
[{
   path: 'parent/:id',
   children: [
     { path: 'a', component: MainChild },
     { path: 'b', component: AuxChild, outlet: 'aux' }
   ]
}]
```
The router merges the parameters, data, and resolve of the componentless
parent into the parameters, data, and resolve of the children.
This is especially useful when child components are defined
with an empty path string, as in the following example.
With this configuration, navigating to '/parent/10' creates
the main child and aux components.
```ts
[{
   path: 'parent/:id',
   children: [
     { path: '', component: MainChild },
     { path: '', component: AuxChild, outlet: 'aux' }
   ]
}]
```
### Lazy Loading
Lazy loading speeds up application load time by splitting the application
into multiple bundles and loading them on demand.
To use lazy loading, provide the `loadChildren` property in the `Route` object,
instead of the `children` property.
Given the following example route, the router will lazy load
the associated module on demand using the browser native import system.
```ts
[{
  path: 'lazy',
  loadChildren: () => import('./lazy-route/lazy.module').then(mod => mod.LazyModule),
}];
```
@publicApi\nclass Route(BaseModel):\n    # Used to define a page title for the route. This can be a static string or an `Injectable` that
implements `Resolve`.
@see {@link TitleStrategy}\n    title: Optional[Union[str, Type<Resolve<string>>, ResolveFn<string>]] = None = Field(..., description='Used to define a page title for the route. This can be a static string or an `Injectable` that
implements `Resolve`.
@see {@link TitleStrategy}')\n    # The path to match against. Cannot be used together with a custom `matcher` function.
A URL string that uses router matching notation.
Can be a wild card (`**`) that matches any URL (see Usage Notes below).
Default is "/" (the root path).\n    path: Optional[str] = None = Field(..., description='The path to match against. Cannot be used together with a custom `matcher` function.
A URL string that uses router matching notation.
Can be a wild card (`**`) that matches any URL (see Usage Notes below).
Default is "/" (the root path).')\n    # The path-matching strategy, one of 'prefix' or 'full'.
Default is 'prefix'.
By default, the router checks URL elements from the left to see if the URL
matches a given path and stops when there is a config match. Importantly there must still be a
config match for each segment of the URL. For example, '/team/11/user' matches the prefix
'team/:id' if one of the route's children matches the segment 'user'. That is, the URL
'/team/11/user' matches the config
`{path: 'team/:id', children: [{path: ':user', component: User}]}`
but does not match when there are no children as in `{path: 'team/:id', component: Team}`.
The path-match strategy 'full' matches against the entire URL.
It is important to do this when redirecting empty-path routes.
Otherwise, because an empty path is a prefix of any URL,
the router would apply the redirect even when navigating
to the redirect destination, creating an endless loop.\n    pathMatch: Optional[Union['prefix', 'full']] = None = Field(..., description='The path-matching strategy, one of \'prefix\' or \'full\'.
Default is \'prefix\'.
By default, the router checks URL elements from the left to see if the URL
matches a given path and stops when there is a config match. Importantly there must still be a
config match for each segment of the URL. For example, \'/team/11/user\' matches the prefix
\'team/:id\' if one of the route\'s children matches the segment \'user\'. That is, the URL
\'/team/11/user\' matches the config
`{path: \'team/:id\', children: [{path: \':user\', component: User}]}`
but does not match when there are no children as in `{path: \'team/:id\', component: Team}`.
The path-match strategy \'full\' matches against the entire URL.
It is important to do this when redirecting empty-path routes.
Otherwise, because an empty path is a prefix of any URL,
the router would apply the redirect even when navigating
to the redirect destination, creating an endless loop.')\n    # A custom URL-matching function. Cannot be used together with `path`.\n    matcher: Optional[UrlMatcher] = None = Field(..., description='A custom URL-matching function. Cannot be used together with `path`.')\n    # The component to instantiate when the path matches.
Can be empty if child routes specify components.\n    component: Optional[Type<any>] = None = Field(..., description='The component to instantiate when the path matches.
Can be empty if child routes specify components.')\n    # An object specifying a lazy-loaded component.\n    loadComponent: Optional[Union[() => Type<unknown>, Observable<Type<unknown>, DefaultExport<Type<unknown>>>, Promise<Type<unknown>, DefaultExport<Type<unknown>>>]] = None = Field(..., description='An object specifying a lazy-loaded component.')\n    # A URL or function that returns a URL to redirect to when the path matches.
Absolute if the URL begins with a slash (/) or the function returns a `UrlTree`, otherwise
relative to the path URL.
The `RedirectFunction` is run in an injection context so it can call `inject` to get any
required dependencies.
When not present, router does not redirect.\n    redirectTo: Optional[Union[str, RedirectFunction]] = None = Field(..., description='A URL or function that returns a URL to redirect to when the path matches.
Absolute if the URL begins with a slash (/) or the function returns a `UrlTree`, otherwise
relative to the path URL.
The `RedirectFunction` is run in an injection context so it can call `inject` to get any
required dependencies.
When not present, router does not redirect.')\n    # Name of a `RouterOutlet` object where the component can be placed
when the path matches.\n    outlet: Optional[str] = None = Field(..., description='Name of a `RouterOutlet` object where the component can be placed
when the path matches.')\n    # An array of `CanActivateFn` or DI tokens used to look up `CanActivate()`
handlers, in order to determine if the current user is allowed to
activate the component. By default, any user can activate.
When using a function rather than DI tokens, the function can call `inject` to get any required
dependencies. This `inject` call must be done in a synchronous context.\n    canActivate: Optional[List[List[Union[CanActivateFn, DeprecatedGuard]]]] = None = Field(..., description='An array of `CanActivateFn` or DI tokens used to look up `CanActivate()`
handlers, in order to determine if the current user is allowed to
activate the component. By default, any user can activate.
When using a function rather than DI tokens, the function can call `inject` to get any required
dependencies. This `inject` call must be done in a synchronous context.')\n    # An array of `CanMatchFn` or DI tokens used to look up `CanMatch()`
handlers, in order to determine if the current user is allowed to
match the `Route`. By default, any route can match.
When using a function rather than DI tokens, the function can call `inject` to get any required
dependencies. This `inject` call must be done in a synchronous context.\n    canMatch: Optional[List[List[Union[CanMatchFn, DeprecatedGuard]]]] = None = Field(..., description='An array of `CanMatchFn` or DI tokens used to look up `CanMatch()`
handlers, in order to determine if the current user is allowed to
match the `Route`. By default, any route can match.
When using a function rather than DI tokens, the function can call `inject` to get any required
dependencies. This `inject` call must be done in a synchronous context.')\n    # An array of `CanActivateChildFn` or DI tokens used to look up `CanActivateChild()` handlers,
in order to determine if the current user is allowed to activate
a child of the component. By default, any user can activate a child.
When using a function rather than DI tokens, the function can call `inject` to get any required
dependencies. This `inject` call must be done in a synchronous context.\n    canActivateChild: Optional[List[List[Union[CanActivateChildFn, DeprecatedGuard]]]] = None = Field(..., description='An array of `CanActivateChildFn` or DI tokens used to look up `CanActivateChild()` handlers,
in order to determine if the current user is allowed to activate
a child of the component. By default, any user can activate a child.
When using a function rather than DI tokens, the function can call `inject` to get any required
dependencies. This `inject` call must be done in a synchronous context.')\n    # An array of `CanDeactivateFn` or DI tokens used to look up `CanDeactivate()`
handlers, in order to determine if the current user is allowed to
deactivate the component. By default, any user can deactivate.
When using a function rather than DI tokens, the function can call `inject` to get any required
dependencies. This `inject` call must be done in a synchronous context.\n    canDeactivate: Optional[List[List[Union[CanDeactivateFn<any>, DeprecatedGuard]]]] = None = Field(..., description='An array of `CanDeactivateFn` or DI tokens used to look up `CanDeactivate()`
handlers, in order to determine if the current user is allowed to
deactivate the component. By default, any user can deactivate.
When using a function rather than DI tokens, the function can call `inject` to get any required
dependencies. This `inject` call must be done in a synchronous context.')\n    # An array of `CanLoadFn` or DI tokens used to look up `CanLoad()`
handlers, in order to determine if the current user is allowed to
load the component. By default, any user can load.
When using a function rather than DI tokens, the function can call `inject` to get any required
dependencies. This `inject` call must be done in a synchronous context.
@deprecated Use `canMatch` instead\n    canLoad: Optional[List[List[Union[CanLoadFn, DeprecatedGuard]]]] = None = Field(..., description='An array of `CanLoadFn` or DI tokens used to look up `CanLoad()`
handlers, in order to determine if the current user is allowed to
load the component. By default, any user can load.
When using a function rather than DI tokens, the function can call `inject` to get any required
dependencies. This `inject` call must be done in a synchronous context.
@deprecated Use `canMatch` instead')\n    # Additional developer-defined data provided to the component via
`ActivatedRoute`. By default, no additional data is passed.\n    data: Optional[Data] = None = Field(..., description='Additional developer-defined data provided to the component via
`ActivatedRoute`. By default, no additional data is passed.')\n    # A map of DI tokens used to look up data resolvers. See `Resolve`.\n    resolve: Optional[ResolveData] = None = Field(..., description='A map of DI tokens used to look up data resolvers. See `Resolve`.')\n    # An array of child `Route` objects that specifies a nested route
configuration.\n    children: Optional[Routes] = None = Field(..., description='An array of child `Route` objects that specifies a nested route
configuration.')\n    # An object specifying lazy-loaded child routes.\n    loadChildren: Optional[LoadChildren] = None = Field(..., description='An object specifying lazy-loaded child routes.')\n    # A policy for when to run guards and resolvers on a route.
Guards and/or resolvers will always run when a route is activated or deactivated. When a route
is unchanged, the default behavior is the same as `paramsChange`.
`paramsChange` : Rerun the guards and resolvers when path or
path param changes. This does not include query parameters. This option is the default.
- `always` : Run on every execution.
- `pathParamsChange` : Rerun guards and resolvers when the path params
change. This does not compare matrix or query parameters.
- `paramsOrQueryParamsChange` : Run when path, matrix, or query parameters change.
- `pathParamsOrQueryParamsChange` : Rerun guards and resolvers when the path params
change or query params have changed. This does not include matrix parameters.
@see {@link RunGuardsAndResolvers}\n    runGuardsAndResolvers: Optional[RunGuardsAndResolvers] = None = Field(..., description='A policy for when to run guards and resolvers on a route.
Guards and/or resolvers will always run when a route is activated or deactivated. When a route
is unchanged, the default behavior is the same as `paramsChange`.
`paramsChange` : Rerun the guards and resolvers when path or
path param changes. This does not include query parameters. This option is the default.
- `always` : Run on every execution.
- `pathParamsChange` : Rerun guards and resolvers when the path params
change. This does not compare matrix or query parameters.
- `paramsOrQueryParamsChange` : Run when path, matrix, or query parameters change.
- `pathParamsOrQueryParamsChange` : Rerun guards and resolvers when the path params
change or query params have changed. This does not include matrix parameters.
@see {@link RunGuardsAndResolvers}')\n    # A `Provider` array to use for this `Route` and its `children`.
The `Router` will create a new `EnvironmentInjector` for this
`Route` and use it for this `Route` and its `children`. If this
route also has a `loadChildren` function which returns an `NgModuleRef`, this injector will be
used as the parent of the lazy loaded module.\n    providers: Optional[List[List[Union[Provider, EnvironmentProviders]]]] = None = Field(..., description='A `Provider` array to use for this `Route` and its `children`.
The `Router` will create a new `EnvironmentInjector` for this
`Route` and use it for this `Route` and its `children`. If this
route also has a `loadChildren` function which returns an `NgModuleRef`, this injector will be
used as the parent of the lazy loaded module.')\n\nclass LoadedRouterConfig(BaseModel):\n    routes: List[List[Route]] = Field(...)\n    injector: Union[EnvironmentInjector, undefined] = Field(...)\n\n# @description
Interface that a class can implement to be a guard deciding if a route can be activated.
If all guards return `true`, navigation continues. If any guard returns `false`,
navigation is cancelled. If any guard returns a `UrlTree`, the current navigation
is cancelled and a new navigation begins to the `UrlTree` returned from the guard.
The following example implements a `CanActivate` function that checks whether the
current user has permission to activate the requested route.
```ts
class UserToken {}
class Permissions {
  canActivate(): boolean {
    return true;
  }
}
@Injectable()
class CanActivateTeam implements CanActivate {
  constructor(private permissions: Permissions, private currentUser: UserToken) {}
  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ): MaybeAsync<GuardResult> {
    return this.permissions.canActivate(this.currentUser, route.params.id);
  }
}
```
Here, the defined guard function is provided as part of the `Route` object
in the router configuration:
```ts
@NgModule({
  imports: [
    RouterModule.forRoot([
      {
        path: 'team/:id',
        component: TeamComponent,
        canActivate: [CanActivateTeam]
      }
    ])
  ],
  providers: [CanActivateTeam, UserToken, Permissions]
})
class AppModule {}
```
@publicApi\nclass CanActivate(BaseModel):\n    pass\n\n# @description
Interface that a class can implement to be a guard deciding if a child route can be activated.
If all guards return `true`, navigation continues. If any guard returns `false`,
navigation is cancelled. If any guard returns a `UrlTree`, current navigation
is cancelled and a new navigation begins to the `UrlTree` returned from the guard.
The following example implements a `CanActivateChild` function that checks whether the
current user has permission to activate the requested child route.
```ts
class UserToken {}
class Permissions {
  canActivate(user: UserToken, id: string): boolean {
    return true;
  }
}
@Injectable()
class CanActivateTeam implements CanActivateChild {
  constructor(private permissions: Permissions, private currentUser: UserToken) {}
  canActivateChild(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ): MaybeAsync<GuardResult> {
    return this.permissions.canActivate(this.currentUser, route.params.id);
  }
}
```
Here, the defined guard function is provided as part of the `Route` object
in the router configuration:
```ts
@NgModule({
  imports: [
    RouterModule.forRoot([
      {
        path: 'root',
        canActivateChild: [CanActivateTeam],
        children: [
          {
             path: 'team/:id',
             component: TeamComponent
          }
        ]
      }
    ])
  ],
  providers: [CanActivateTeam, UserToken, Permissions]
})
class AppModule {}
```
@publicApi\nclass CanActivateChild(BaseModel):\n    pass\n\n# @description
Interface that a class can implement to be a guard deciding if a route can be deactivated.
If all guards return `true`, navigation continues. If any guard returns `false`,
navigation is cancelled. If any guard returns a `UrlTree`, current navigation
is cancelled and a new navigation begins to the `UrlTree` returned from the guard.
The following example implements a `CanDeactivate` function that checks whether the
current user has permission to deactivate the requested route.
```ts
class UserToken {}
class Permissions {
  canDeactivate(user: UserToken, id: string): boolean {
    return true;
  }
}
```
Here, the defined guard function is provided as part of the `Route` object
in the router configuration:
```ts
@Injectable()
class CanDeactivateTeam implements CanDeactivate<TeamComponent> {
  constructor(private permissions: Permissions, private currentUser: UserToken) {}
  canDeactivate(
    component: TeamComponent,
    currentRoute: ActivatedRouteSnapshot,
    currentState: RouterStateSnapshot,
    nextState: RouterStateSnapshot
  ): MaybeAsync<GuardResult> {
    return this.permissions.canDeactivate(this.currentUser, route.params.id);
  }
}
@NgModule({
  imports: [
    RouterModule.forRoot([
      {
        path: 'team/:id',
        component: TeamComponent,
        canDeactivate: [CanDeactivateTeam]
      }
    ])
  ],
  providers: [CanDeactivateTeam, UserToken, Permissions]
})
class AppModule {}
```
@publicApi\nclass CanDeactivate(BaseModel):\n    pass\n\n# @description
Interface that a class can implement to be a guard deciding if a `Route` can be matched.
If all guards return `true`, navigation continues and the `Router` will use the `Route` during
activation. If any guard returns `false`, the `Route` is skipped for matching and other `Route`
configurations are processed instead.
The following example implements a `CanMatch` function that decides whether the
current user has permission to access the users page.
```ts
class UserToken {}
class Permissions {
  canAccess(user: UserToken, route: Route, segments: UrlSegment[]): boolean {
    return true;
  }
}
@Injectable()
class CanMatchTeamSection implements CanMatch {
  constructor(private permissions: Permissions, private currentUser: UserToken) {}
  canMatch(route: Route, segments: UrlSegment[]): Observable<boolean>|Promise<boolean>|boolean {
    return this.permissions.canAccess(this.currentUser, route, segments);
  }
}
```
Here, the defined guard function is provided as part of the `Route` object
in the router configuration:
```ts
@NgModule({
  imports: [
    RouterModule.forRoot([
      {
        path: 'team/:id',
        component: TeamComponent,
        loadChildren: () => import('./team').then(mod => mod.TeamModule),
        canMatch: [CanMatchTeamSection]
      },
      {
        path: '**',
        component: NotFoundComponent
      }
    ])
  ],
  providers: [CanMatchTeamSection, UserToken, Permissions]
})
class AppModule {}
```
If the `CanMatchTeamSection` were to return `false`, the router would continue navigating to the
`team/:id` URL, but would load the `NotFoundComponent` because the `Route` for `'team/:id'`
could not be used for a URL match but the catch-all `**` `Route` did instead.
@publicApi\nclass CanMatch(BaseModel):\n    pass\n\n# @description
Interface that classes can implement to be a data provider.
A data provider class can be used with the router to resolve data during navigation.
The interface defines a `resolve()` method that is invoked right after the `ResolveStart`
router event. The router waits for the data to be resolved before the route is finally activated.
The following example implements a `resolve()` method that retrieves the data
needed to activate the requested route.
```ts
@Injectable({ providedIn: 'root' })
export class HeroResolver implements Resolve<Hero> {
  constructor(private service: HeroService) {}
  resolve(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ): Observable<Hero>|Promise<Hero>|Hero {
    return this.service.getHero(route.paramMap.get('id'));
  }
}
```
Here, the defined `resolve()` function is provided as part of the `Route` object
in the router configuration:
```ts
@NgModule({
  imports: [
    RouterModule.forRoot([
      {
        path: 'detail/:id',
        component: HeroDetailComponent,
        resolve: {
          hero: HeroResolver
        }
      }
    ])
  ],
  exports: [RouterModule]
})
export class AppRoutingModule {}
```
And you can access to your resolved data from `HeroComponent`:
```ts
@Component({
 selector: "app-hero",
 templateUrl: "hero.component.html",
})
export class HeroComponent {
 constructor(private activatedRoute: ActivatedRoute) {}
 ngOnInit() {
   this.activatedRoute.data.subscribe(({ hero }) => {
     // do something with your resolved data ...
   })
 }
}
```
@usageNotes
When both guard and resolvers are specified, the resolvers are not executed until
all guards have run and succeeded.
For example, consider the following route configuration:
```ts
{
 path: 'base'
 canActivate: [BaseGuard],
 resolve: {data: BaseDataResolver}
 children: [
  {
    path: 'child',
    guards: [ChildGuard],
    component: ChildComponent,
    resolve: {childData: ChildDataResolver}
   }
 ]
}
```
The order of execution is: BaseGuard, ChildGuard, BaseDataResolver, ChildDataResolver.
@publicApi
@see {@link ResolveFn}\nclass Resolve(BaseModel):\n    pass\n\n# @description
Interface that a class can implement to be a guard deciding if children can be loaded.
If all guards return `true`, navigation continues. If any guard returns `false`,
navigation is cancelled. If any guard returns a `UrlTree`, current navigation
is cancelled and a new navigation starts to the `UrlTree` returned from the guard.
The following example implements a `CanLoad` function that decides whether the
current user has permission to load requested child routes.
```ts
class UserToken {}
class Permissions {
  canLoadChildren(user: UserToken, id: string, segments: UrlSegment[]): boolean {
    return true;
  }
}
@Injectable()
class CanLoadTeamSection implements CanLoad {
  constructor(private permissions: Permissions, private currentUser: UserToken) {}
  canLoad(route: Route, segments: UrlSegment[]): Observable<boolean>|Promise<boolean>|boolean {
    return this.permissions.canLoadChildren(this.currentUser, route, segments);
  }
}
```
Here, the defined guard function is provided as part of the `Route` object
in the router configuration:
```ts
@NgModule({
  imports: [
    RouterModule.forRoot([
      {
        path: 'team/:id',
        component: TeamComponent,
        loadChildren: () => import('./team').then(mod => mod.TeamModule),
        canLoad: [CanLoadTeamSection]
      }
    ])
  ],
  providers: [CanLoadTeamSection, UserToken, Permissions]
})
class AppModule {}
```
@publicApi
@deprecated Use {@link CanMatch} instead\nclass CanLoad(BaseModel):\n    pass\n\n# @description
Options that modify the `Router` navigation strategy.
Supply an object containing any of these properties to a `Router` navigation function to
control how the navigation should be handled.
@see {@link Router#navigate}
@see {@link Router#navigateByUrl}
@see [Routing and Navigation guide](guide/routing/common-router-tasks)
@publicApi\nclass NavigationBehaviorOptions(BaseModel):\n    # How to handle a navigation request to the current URL.
This value is a subset of the options available in `OnSameUrlNavigation` and
will take precedence over the default value set for the `Router`.
@see {@link OnSameUrlNavigation}
@see {@link RouterConfigOptions}\n    onSameUrlNavigation: Optional[OnSameUrlNavigation] = None = Field(..., description='How to handle a navigation request to the current URL.
This value is a subset of the options available in `OnSameUrlNavigation` and
will take precedence over the default value set for the `Router`.
@see {@link OnSameUrlNavigation}
@see {@link RouterConfigOptions}')\n    # When true, navigates without pushing a new state into history.
```
// Navigate silently to /view
this.router.navigate(['/view'], { skipLocationChange: true });
```\n    skipLocationChange: Optional[bool] = None = Field(..., description='When true, navigates without pushing a new state into history.
```
// Navigate silently to /view
this.router.navigate([\'/view\'], { skipLocationChange: true });
```')\n    # When true, navigates while replacing the current state in history.
```
// Navigate to /view
this.router.navigate(['/view'], { replaceUrl: true });
```\n    replaceUrl: Optional[bool] = None = Field(..., description='When true, navigates while replacing the current state in history.
```
// Navigate to /view
this.router.navigate([\'/view\'], { replaceUrl: true });
```')\n    # Developer-defined state that can be passed to any navigation.
Access this value through the `Navigation.extras` object
returned from the [Router.getCurrentNavigation()
method](api/router/Router#getcurrentnavigation) while a navigation is executing.
After a navigation completes, the router writes an object containing this
value together with a `navigationId` to `history.state`.
The value is written when `location.go()` or `location.replaceState()`
is called before activating this route.
Note that `history.state` does not pass an object equality test because
the router adds the `navigationId` on each navigation.\n    state: Optional[Dict[str, Any]] = None = Field(..., description='Developer-defined state that can be passed to any navigation.
Access this value through the `Navigation.extras` object
returned from the [Router.getCurrentNavigation()
method](api/router/Router#getcurrentnavigation) while a navigation is executing.
After a navigation completes, the router writes an object containing this
value together with a `navigationId` to `history.state`.
The value is written when `location.go()` or `location.replaceState()`
is called before activating this route.
Note that `history.state` does not pass an object equality test because
the router adds the `navigationId` on each navigation.')\n    # Use this to convey transient information about this particular navigation, such as how it
happened. In this way, it's different from the persisted value `state` that will be set to
`history.state`. This object is assigned directly to the Router's current `Navigation`
(it is not copied or cloned), so it should be mutated with caution.
One example of how this might be used is to trigger different single-page navigation animations
depending on how a certain route was reached. For example, consider a photo gallery app, where
you can reach the same photo URL and state via various routes:
- Clicking on it in a gallery view
- Clicking
- "next" or "previous" when viewing another photo in the album
- Etc.
Each of these wants a different animation at navigate time. This information doesn't make sense
to store in the persistent URL or history entry state, but it's still important to communicate
from the rest of the application, into the router.
This information could be used in coordination with the View Transitions feature and the
`onViewTransitionCreated` callback. The information might be used in the callback to set
classes on the document in order to control the transition animations and remove the classes
when the transition has finished animating.\n    info: Optional[unknown] = None = Field(..., description='Use this to convey transient information about this particular navigation, such as how it
happened. In this way, it\'s different from the persisted value `state` that will be set to
`history.state`. This object is assigned directly to the Router\'s current `Navigation`
(it is not copied or cloned), so it should be mutated with caution.
One example of how this might be used is to trigger different single-page navigation animations
depending on how a certain route was reached. For example, consider a photo gallery app, where
you can reach the same photo URL and state via various routes:
- Clicking on it in a gallery view
- Clicking
- "next" or "previous" when viewing another photo in the album
- Etc.
Each of these wants a different animation at navigate time. This information doesn\'t make sense
to store in the persistent URL or history entry state, but it\'s still important to communicate
from the rest of the application, into the router.
This information could be used in coordination with the View Transitions feature and the
`onViewTransitionCreated` callback. The information might be used in the callback to set
classes on the document in order to control the transition animations and remove the classes
when the transition has finished animating.')\n    # When set, the Router will update the browser's address bar to match the given `UrlTree` instead
of the one used for route matching.
@usageNotes
This feature is useful for redirects, such as redirecting to an error page, without changing
the value that will be displayed in the browser's address bar.
```ts
const canActivate: CanActivateFn = (route: ActivatedRouteSnapshot) => {
  const userService = inject(UserService);
  const router = inject(Router);
  if (!userService.isLoggedIn()) {
    const targetOfCurrentNavigation = router.getCurrentNavigation()?.finalUrl;
    const redirect = router.parseUrl('/404');
    return new RedirectCommand(redirect, {browserUrl: targetOfCurrentNavigation});
  }
  return true;
};
```
This value is used directly, without considering any `UrlHandingStrategy`. In this way,
`browserUrl` can also be used to use a different value for the browser URL than what would have
been produced by from the navigation due to `UrlHandlingStrategy.merge`.
This value only affects the path presented in the browser's address bar. It does not apply to
the internal `Router` state. Information such as `params` and `data` will match the internal
state used to match routes which will be different from the browser URL when using this feature
The same is true when using other APIs that cause the browser URL the differ from the Router
state, such as `skipLocationChange`.\n    browserUrl: Optional[Union[UrlTree, str]] = None = Field(..., description='When set, the Router will update the browser\'s address bar to match the given `UrlTree` instead
of the one used for route matching.
@usageNotes
This feature is useful for redirects, such as redirecting to an error page, without changing
the value that will be displayed in the browser\'s address bar.
```ts
const canActivate: CanActivateFn = (route: ActivatedRouteSnapshot) => {
  const userService = inject(UserService);
  const router = inject(Router);
  if (!userService.isLoggedIn()) {
    const targetOfCurrentNavigation = router.getCurrentNavigation()?.finalUrl;
    const redirect = router.parseUrl(\'/404\');
    return new RedirectCommand(redirect, {browserUrl: targetOfCurrentNavigation});
  }
  return true;
};
```
This value is used directly, without considering any `UrlHandingStrategy`. In this way,
`browserUrl` can also be used to use a different value for the browser URL than what would have
been produced by from the navigation due to `UrlHandlingStrategy.merge`.
This value only affects the path presented in the browser\'s address bar. It does not apply to
the internal `Router` state. Information such as `params` and `data` will match the internal
state used to match routes which will be different from the browser URL when using this feature
The same is true when using other APIs that cause the browser URL the differ from the Router
state, such as `skipLocationChange`.')\n\n# @description
Represents the detached route tree.
This is an opaque value the router will give to a custom route reuse strategy
to store and retrieve later on.
@publicApi\nclass DetachedRouteHandle(BaseModel):\n    pass\n\n# An interface that defines the contract for developing a component outlet for the `Router`.
An outlet acts as a placeholder that Angular dynamically fills based on the current router state.
A router outlet should register itself with the `Router` via
`ChildrenOutletContexts#onChildOutletCreated` and unregister with
`ChildrenOutletContexts#onChildOutletDestroyed`. When the `Router` identifies a matched `Route`,
it looks for a registered outlet in the `ChildrenOutletContexts` and activates it.
@see {@link ChildrenOutletContexts}
@publicApi\nclass RouterOutletContract(BaseModel):\n    # Whether the given outlet is activated.
An outlet is considered "activated" if it has an active component.\n    isActivated: bool = Field(..., description='Whether the given outlet is activated.
An outlet is considered "activated" if it has an active component.')\n    # The instance of the activated component or `null` if the outlet is not activated.\n    component: Union[Object, null] = Field(..., description='The instance of the activated component or `null` if the outlet is not activated.')\n    # The `Data` of the `ActivatedRoute` snapshot.\n    activatedRouteData: Data = Field(..., description='The `Data` of the `ActivatedRoute` snapshot.')\n    # The `ActivatedRoute` for the outlet or `null` if the outlet is not activated.\n    activatedRoute: Union[ActivatedRoute, null] = Field(..., description='The `ActivatedRoute` for the outlet or `null` if the outlet is not activated.')\n    # Emits an activate event when a new component is instantiated\n    activateEvents: Optional[EventEmitter<unknown>] = None = Field(..., description='Emits an activate event when a new component is instantiated')\n    # Emits a deactivate event when a component is destroyed.\n    deactivateEvents: Optional[EventEmitter<unknown>] = None = Field(..., description='Emits a deactivate event when a component is destroyed.')\n    # Emits an attached component instance when the `RouteReuseStrategy` instructs to re-attach a
previously detached subtree.\n    attachEvents: Optional[EventEmitter<unknown>] = None = Field(..., description='Emits an attached component instance when the `RouteReuseStrategy` instructs to re-attach a
previously detached subtree.')\n    # Emits a detached component instance when the `RouteReuseStrategy` instructs to detach the
subtree.\n    detachEvents: Optional[EventEmitter<unknown>] = None = Field(..., description='Emits a detached component instance when the `RouteReuseStrategy` instructs to detach the
subtree.')\n    # Used to indicate that the outlet is able to bind data from the `Router` to the outlet
component's inputs.
When this is `undefined` or `false` and the developer has opted in to the
feature using `withComponentInputBinding`, a warning will be logged in dev mode if this outlet
is used in the application.\n    supportsBindingToComponentInputs: Optional[true] = None = Field(..., description='Used to indicate that the outlet is able to bind data from the `Router` to the outlet
component\'s inputs.
When this is `undefined` or `false` and the developer has opted in to the
feature using `withComponentInputBinding`, a warning will be logged in dev mode if this outlet
is used in the application.')\n\n# @description
Options that modify the `Router` URL.
Supply an object containing any of these properties to a `Router` navigation function to
control how the target URL should be constructed.
@see {@link Router#navigate}
@see {@link Router#createUrlTree}
@see [Routing and Navigation guide](guide/routing/common-router-tasks)
@publicApi\nclass UrlCreationOptions(BaseModel):\n    # Specifies a root URI to use for relative navigation.
For example, consider the following route configuration where the parent route
has two children.
```
[{
  path: 'parent',
  component: ParentComponent,
  children: [{
    path: 'list',
    component: ListComponent
  },{
    path: 'child',
    component: ChildComponent
  }]
}]
```
The following `go()` function navigates to the `list` route by
interpreting the destination URI as relative to the activated `child`  route
```ts
 @Component({...})
 class ChildComponent {
   constructor(private router: Router, private route: ActivatedRoute) {}
   go() {
     router.navigate(['../list'], { relativeTo: this.route });
   }
 }
```
A value of `null` or `undefined` indicates that the navigation commands should be applied
relative to the root.\n    relativeTo: Optional[Union[ActivatedRoute, null]] = None = Field(..., description='Specifies a root URI to use for relative navigation.
For example, consider the following route configuration where the parent route
has two children.
```
[{
  path: \'parent\',
  component: ParentComponent,
  children: [{
    path: \'list\',
    component: ListComponent
  },{
    path: \'child\',
    component: ChildComponent
  }]
}]
```
The following `go()` function navigates to the `list` route by
interpreting the destination URI as relative to the activated `child`  route
```ts
 @Component({...})
 class ChildComponent {
   constructor(private router: Router, private route: ActivatedRoute) {}
   go() {
     router.navigate([\'../list\'], { relativeTo: this.route });
   }
 }
```
A value of `null` or `undefined` indicates that the navigation commands should be applied
relative to the root.')\n    # Sets query parameters to the URL.
```
// Navigate to /results?page=1
router.navigate(['/results'], { queryParams: { page: 1 } });
```\n    queryParams: Optional[Union[Params, null]] = None = Field(..., description='Sets query parameters to the URL.
```
// Navigate to /results?page=1
router.navigate([\'/results\'], { queryParams: { page: 1 } });
```')\n    # Sets the hash fragment for the URL.
```
// Navigate to /results#top
router.navigate(['/results'], { fragment: 'top' });
```\n    fragment: Optional[str] = None = Field(..., description='Sets the hash fragment for the URL.
```
// Navigate to /results#top
router.navigate([\'/results\'], { fragment: \'top\' });
```')\n    # How to handle query parameters in the router link for the next navigation.
One of:
* `preserve` : Preserve current parameters.
* `merge` : Merge new with current parameters.
The "preserve" option discards any new query params:
```
// from /view1?page=1 to/view2?page=1
router.navigate(['/view2'], { queryParams: { page: 2 },  queryParamsHandling: "preserve"
});
```
The "merge" option appends new query params to the params from the current URL:
```
// from /view1?page=1 to/view2?page=1&otherKey=2
router.navigate(['/view2'], { queryParams: { otherKey: 2 },  queryParamsHandling: "merge"
});
```
In case of a key collision between current parameters and those in the `queryParams` object,
the new value is used.\n    queryParamsHandling: Optional[Union[QueryParamsHandling, null]] = None = Field(..., description='How to handle query parameters in the router link for the next navigation.
One of:
* `preserve` : Preserve current parameters.
* `merge` : Merge new with current parameters.
The "preserve" option discards any new query params:
```
// from /view1?page=1 to/view2?page=1
router.navigate([\'/view2\'], { queryParams: { page: 2 },  queryParamsHandling: "preserve"
});
```
The "merge" option appends new query params to the params from the current URL:
```
// from /view1?page=1 to/view2?page=1&otherKey=2
router.navigate([\'/view2\'], { queryParams: { otherKey: 2 },  queryParamsHandling: "merge"
});
```
In case of a key collision between current parameters and those in the `queryParams` object,
the new value is used.')\n    # When true, preserves the URL fragment for the next navigation
```
// Preserve fragment from /results#top to /view#top
router.navigate(['/view'], { preserveFragment: true });
```\n    preserveFragment: Optional[bool] = None = Field(..., description='When true, preserves the URL fragment for the next navigation
```
// Preserve fragment from /results#top to /view#top
router.navigate([\'/view\'], { preserveFragment: true });
```')\n\n# @description
Options that modify the `Router` navigation strategy.
Supply an object containing any of these properties to a `Router` navigation function to
control how the target URL should be constructed or interpreted.
@see {@link Router#navigate}
@see {@link Router#navigateByUrl}
@see {@link Router#createurltree}
@see [Routing and Navigation guide](guide/routing/common-router-tasks)
@see {@link UrlCreationOptions}
@see {@link NavigationBehaviorOptions}
@publicApi\nclass NavigationExtras(UrlCreationOptions):\n    pass\n\nclass RestoredState(BaseModel):\n    navigationId: float = Field(...)\n    ɵrouterPageId: Optional[float] = None\n\n# Information about a navigation operation.
Retrieve the most recent navigation object with the
[Router.getCurrentNavigation() method](api/router/Router#getcurrentnavigation) .
* *id* : The unique identifier of the current navigation.
* *initialUrl* : The target URL passed into the `Router#navigateByUrl()` call before navigation.
This is the value before the router has parsed or applied redirects to it.
* *extractedUrl* : The initial target URL after being parsed with `UrlSerializer.extract()`.
* *finalUrl* : The extracted URL after redirects have been applied.
This URL may not be available immediately, therefore this property can be `undefined`.
It is guaranteed to be set after the `RoutesRecognized` event fires.
* *trigger* : Identifies how this navigation was triggered.
-- 'imperative'--Triggered by `router.navigateByUrl` or `router.navigate`.
-- 'popstate'--Triggered by a popstate event.
-- 'hashchange'--Triggered by a hashchange event.
* *extras* : A `NavigationExtras` options object that controlled the strategy used for this
navigation.
* *previousNavigation* : The previously successful `Navigation` object. Only one previous
navigation is available, therefore this previous `Navigation` object has a `null` value for its
own `previousNavigation`.
@publicApi\nclass Navigation(BaseModel):\n    # The unique identifier of the current navigation.\n    id: float = Field(..., description='The unique identifier of the current navigation.')\n    # The target URL passed into the `Router#navigateByUrl()` call before navigation. This is
the value before the router has parsed or applied redirects to it.\n    initialUrl: UrlTree = Field(..., description='The target URL passed into the `Router#navigateByUrl()` call before navigation. This is
the value before the router has parsed or applied redirects to it.')\n    # The initial target URL after being parsed with `UrlHandlingStrategy.extract()`.\n    extractedUrl: UrlTree = Field(..., description='The initial target URL after being parsed with `UrlHandlingStrategy.extract()`.')\n    # The extracted URL after redirects have been applied.
This URL may not be available immediately, therefore this property can be `undefined`.
It is guaranteed to be set after the `RoutesRecognized` event fires.\n    finalUrl: Optional[UrlTree] = None = Field(..., description='The extracted URL after redirects have been applied.
This URL may not be available immediately, therefore this property can be `undefined`.
It is guaranteed to be set after the `RoutesRecognized` event fires.')\n    # Identifies how this navigation was triggered.\n    trigger: NavigationTrigger = Field(..., description='Identifies how this navigation was triggered.')\n    # Options that controlled the strategy used for this navigation.
See `NavigationExtras`.\n    extras: NavigationExtras = Field(..., description='Options that controlled the strategy used for this navigation.
See `NavigationExtras`.')\n    # The previously successful `Navigation` object. Only one previous navigation
is available, therefore this previous `Navigation` object has a `null` value
for its own `previousNavigation`.\n    previousNavigation: Union[Navigation, null] = Field(..., description='The previously successful `Navigation` object. Only one previous navigation
is available, therefore this previous `Navigation` object has a `null` value
for its own `previousNavigation`.')\n    # Aborts the navigation if it has not yet been completed or reached the point where routes are being activated.
This function is a no-op if the navigation is beyond the point where it can be aborted.\n    abort: () => void = Field(..., description='Aborts the navigation if it has not yet been completed or reached the point where routes are being activated.
This function is a no-op if the navigation is beyond the point where it can be aborted.')\n\n# Extra configuration options that can be used with the `withRouterConfig` function.
@publicApi\nclass RouterConfigOptions(BaseModel):\n    # Configures how the Router attempts to restore state when a navigation is cancelled.
'replace' - Always uses `location.replaceState` to set the browser state to the state of the
router before the navigation started. This means that if the URL of the browser is updated
_before_ the navigation is canceled, the Router will simply replace the item in history rather
than trying to restore to the previous location in the session history. This happens most
frequently with `urlUpdateStrategy: 'eager'` and navigations with the browser back/forward
buttons.
'computed' - Will attempt to return to the same index in the session history that corresponds
to the Angular route when the navigation gets cancelled. For example, if the browser back
button is clicked and the navigation is cancelled, the Router will trigger a forward navigation
and vice versa.
Note: the 'computed' option is incompatible with any `UrlHandlingStrategy` which only
handles a portion of the URL because the history restoration navigates to the previous place in
the browser history rather than simply resetting a portion of the URL.
The default value is `replace` when not set.\n    canceledNavigationResolution: Optional[Union['replace', 'computed']] = None = Field(..., description='Configures how the Router attempts to restore state when a navigation is cancelled.
\'replace\' - Always uses `location.replaceState` to set the browser state to the state of the
router before the navigation started. This means that if the URL of the browser is updated
_before_ the navigation is canceled, the Router will simply replace the item in history rather
than trying to restore to the previous location in the session history. This happens most
frequently with `urlUpdateStrategy: \'eager\'` and navigations with the browser back/forward
buttons.
\'computed\' - Will attempt to return to the same index in the session history that corresponds
to the Angular route when the navigation gets cancelled. For example, if the browser back
button is clicked and the navigation is cancelled, the Router will trigger a forward navigation
and vice versa.
Note: the \'computed\' option is incompatible with any `UrlHandlingStrategy` which only
handles a portion of the URL because the history restoration navigates to the previous place in
the browser history rather than simply resetting a portion of the URL.
The default value is `replace` when not set.')\n    # Configures the default for handling a navigation request to the current URL.
If unset, the `Router` will use `'ignore'`.
@see {@link OnSameUrlNavigation}\n    onSameUrlNavigation: Optional[OnSameUrlNavigation] = None = Field(..., description='Configures the default for handling a navigation request to the current URL.
If unset, the `Router` will use `\'ignore\'`.
@see {@link OnSameUrlNavigation}')\n    # Defines how the router merges parameters, data, and resolved data from parent to child
routes.
By default ('emptyOnly'), a route inherits the parent route's parameters when the route itself
has an empty path (meaning its configured with path: '') or when the parent route doesn't have
any component set.
Set to 'always' to enable unconditional inheritance of parent parameters.
Note that when dealing with matrix parameters, "parent" refers to the parent `Route`
config which does not necessarily mean the "URL segment to the left". When the `Route` `path`
contains multiple segments, the matrix parameters must appear on the last segment. For example,
matrix parameters for `{path: 'a/b', component: MyComp}` should appear as `a/b;foo=bar` and not
`a;foo=bar/b`.\n    paramsInheritanceStrategy: Optional[Union['emptyOnly', 'always']] = None = Field(..., description='Defines how the router merges parameters, data, and resolved data from parent to child
routes.
By default (\'emptyOnly\'), a route inherits the parent route\'s parameters when the route itself
has an empty path (meaning its configured with path: \'\') or when the parent route doesn\'t have
any component set.
Set to \'always\' to enable unconditional inheritance of parent parameters.
Note that when dealing with matrix parameters, "parent" refers to the parent `Route`
config which does not necessarily mean the "URL segment to the left". When the `Route` `path`
contains multiple segments, the matrix parameters must appear on the last segment. For example,
matrix parameters for `{path: \'a/b\', component: MyComp}` should appear as `a/b;foo=bar` and not
`a;foo=bar/b`.')\n    # Defines when the router updates the browser URL. By default ('deferred'),
update after successful navigation.
Set to 'eager' if prefer to update the URL at the beginning of navigation.
Updating the URL early allows you to handle a failure of navigation by
showing an error message with the URL that failed.\n    urlUpdateStrategy: Optional[Union['deferred', 'eager']] = None = Field(..., description='Defines when the router updates the browser URL. By default (\'deferred\'),
update after successful navigation.
Set to \'eager\' if prefer to update the URL at the beginning of navigation.
Updating the URL early allows you to handle a failure of navigation by
showing an error message with the URL that failed.')\n    # The default strategy to use for handling query params in `Router.createUrlTree` when one is not provided.
The `createUrlTree` method is used internally by `Router.navigate` and `RouterLink`.
Note that `QueryParamsHandling` does not apply to `Router.navigateByUrl`.
When neither the default nor the queryParamsHandling option is specified in the call to `createUrlTree`,
the current parameters will be replaced by new parameters.
@see {@link Router#createUrlTree}
@see {@link QueryParamsHandling}\n    defaultQueryParamsHandling: Optional[QueryParamsHandling] = None = Field(..., description='The default strategy to use for handling query params in `Router.createUrlTree` when one is not provided.
The `createUrlTree` method is used internally by `Router.navigate` and `RouterLink`.
Note that `QueryParamsHandling` does not apply to `Router.navigateByUrl`.
When neither the default nor the queryParamsHandling option is specified in the call to `createUrlTree`,
the current parameters will be replaced by new parameters.
@see {@link Router#createUrlTree}
@see {@link QueryParamsHandling}')\n    # When `true`, the `Promise` will instead resolve with `false`, as it does with other failed
navigations (for example, when guards are rejected).
Otherwise the `Promise` returned by the Router's navigation with be rejected
if an error occurs.\n    resolveNavigationPromiseOnError: Optional[bool] = None = Field(..., description='When `true`, the `Promise` will instead resolve with `false`, as it does with other failed
navigations (for example, when guards are rejected).
Otherwise the `Promise` returned by the Router\'s navigation with be rejected
if an error occurs.')\n\n# Configuration options for the scrolling feature which can be used with `withInMemoryScrolling`
function.
@publicApi\nclass InMemoryScrollingOptions(BaseModel):\n    # When set to 'enabled', scrolls to the anchor element when the URL has a fragment.
Anchor scrolling is disabled by default.
Anchor scrolling does not happen on 'popstate'. Instead, we restore the position
that we stored or scroll to the top.\n    anchorScrolling: Optional[Union['disabled', 'enabled']] = None = Field(..., description='When set to \'enabled\', scrolls to the anchor element when the URL has a fragment.
Anchor scrolling is disabled by default.
Anchor scrolling does not happen on \'popstate\'. Instead, we restore the position
that we stored or scroll to the top.')\n    # Configures if the scroll position needs to be restored when navigating back.
* 'disabled'- (Default) Does nothing. Scroll position is maintained on navigation.
* 'top'- Sets the scroll position to x = 0, y = 0 on all navigation.
* 'enabled'- Restores the previous scroll position on backward navigation, else sets the
position to the anchor if one is provided, or sets the scroll position to [0, 0] (forward
navigation). This option will be the default in the future.
You can implement custom scroll restoration behavior by adapting the enabled behavior as
in the following example.
```ts
class AppComponent {
  movieData: any;
  constructor(private router: Router, private viewportScroller: ViewportScroller,
changeDetectorRef: ChangeDetectorRef) {
  router.events.pipe(filter((event: Event): event is Scroll => event instanceof Scroll)
    ).subscribe(e => {
      fetch('http://example.com/movies.json').then(response => {
        this.movieData = response.json();
        // update the template with the data before restoring scroll
        changeDetectorRef.detectChanges();
        if (e.position) {
          viewportScroller.scrollToPosition(e.position);
        }
      });
    });
  }
}
```\n    scrollPositionRestoration: Optional[Union['disabled', 'enabled', 'top']] = None = Field(..., description='Configures if the scroll position needs to be restored when navigating back.
* \'disabled\'- (Default) Does nothing. Scroll position is maintained on navigation.
* \'top\'- Sets the scroll position to x = 0, y = 0 on all navigation.
* \'enabled\'- Restores the previous scroll position on backward navigation, else sets the
position to the anchor if one is provided, or sets the scroll position to [0, 0] (forward
navigation). This option will be the default in the future.
You can implement custom scroll restoration behavior by adapting the enabled behavior as
in the following example.
```ts
class AppComponent {
  movieData: any;
  constructor(private router: Router, private viewportScroller: ViewportScroller,
changeDetectorRef: ChangeDetectorRef) {
  router.events.pipe(filter((event: Event): event is Scroll => event instanceof Scroll)
    ).subscribe(e => {
      fetch(\'http://example.com/movies.json\').then(response => {
        this.movieData = response.json();
        // update the template with the data before restoring scroll
        changeDetectorRef.detectChanges();
        if (e.position) {
          viewportScroller.scrollToPosition(e.position);
        }
      });
    });
  }
}
```')\n\n# A set of configuration options for a router module, provided in the
`forRoot()` method.
@see {@link /api/router/routerModule#forRoot forRoot}
@publicApi\nclass ExtraOptions(InMemoryScrollingOptions):\n    # When true, log all internal navigation events to the console.
Use for debugging.\n    enableTracing: Optional[bool] = None = Field(..., description='When true, log all internal navigation events to the console.
Use for debugging.')\n    # When true, enable the location strategy that uses the URL fragment
instead of the history API.\n    useHash: Optional[bool] = None = Field(..., description='When true, enable the location strategy that uses the URL fragment
instead of the history API.')\n    # One of `enabled`, `enabledBlocking`, `enabledNonBlocking` or `disabled`.
When set to `enabled` or `enabledBlocking`, the initial navigation starts before the root
component is created. The bootstrap is blocked until the initial navigation is complete. This
value should be set in case you use [server-side rendering](guide/ssr), but do not enable
[hydration](guide/hydration) for your application. When set to `enabledNonBlocking`,
the initial navigation starts after the root component has been created.
The bootstrap is not blocked on the completion of the initial navigation. When set to
`disabled`, the initial navigation is not performed. The location listener is set up before the
root component gets created. Use if there is a reason to have more control over when the router
starts its initial navigation due to some complex initialization logic.\n    initialNavigation: Optional[InitialNavigation] = None = Field(..., description='One of `enabled`, `enabledBlocking`, `enabledNonBlocking` or `disabled`.
When set to `enabled` or `enabledBlocking`, the initial navigation starts before the root
component is created. The bootstrap is blocked until the initial navigation is complete. This
value should be set in case you use [server-side rendering](guide/ssr), but do not enable
[hydration](guide/hydration) for your application. When set to `enabledNonBlocking`,
the initial navigation starts after the root component has been created.
The bootstrap is not blocked on the completion of the initial navigation. When set to
`disabled`, the initial navigation is not performed. The location listener is set up before the
root component gets created. Use if there is a reason to have more control over when the router
starts its initial navigation due to some complex initialization logic.')\n    # When true, enables binding information from the `Router` state directly to the inputs of the
component in `Route` configurations.\n    bindToComponentInputs: Optional[bool] = None = Field(..., description='When true, enables binding information from the `Router` state directly to the inputs of the
component in `Route` configurations.')\n    # When true, enables view transitions in the Router by running the route activation and
deactivation inside of `document.startViewTransition`.
@see https://developer.chrome.com/docs/web-platform/view-transitions/
@see https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API
@experimental 17.0\n    enableViewTransitions: Optional[bool] = None = Field(..., description='When true, enables view transitions in the Router by running the route activation and
deactivation inside of `document.startViewTransition`.
@see https://developer.chrome.com/docs/web-platform/view-transitions/
@see https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API
@experimental 17.0')\n    # A custom error handler for failed navigations.
If the handler returns a value, the navigation Promise is resolved with this value.
If the handler throws an exception, the navigation Promise is rejected with the exception.
@see RouterConfigOptions\n    errorHandler: Optional[Union[(error: any) => RedirectCommand, any]] = None = Field(..., description='A custom error handler for failed navigations.
If the handler returns a value, the navigation Promise is resolved with this value.
If the handler throws an exception, the navigation Promise is rejected with the exception.
@see RouterConfigOptions')\n    # Configures a preloading strategy.
One of `PreloadAllModules` or `NoPreloading` (the default).\n    preloadingStrategy: Optional[any] = None = Field(..., description='Configures a preloading strategy.
One of `PreloadAllModules` or `NoPreloading` (the default).')\n    # Configures the scroll offset the router will use when scrolling to an element.
When given a tuple with x and y position value,
the router uses that offset each time it scrolls.
When given a function, the router invokes the function every time
it restores scroll position.\n    scrollOffset: Optional[Union[[number, number], (() => [number, number])]] = None = Field(..., description='Configures the scroll offset the router will use when scrolling to an element.
When given a tuple with x and y position value,
the router uses that offset each time it scrolls.
When given a function, the router invokes the function every time
it restores scroll position.')\n\n# A codec for encoding and decoding parameters in URLs.
Used by `HttpParams`.
@publicApi\nclass HttpParameterCodec(BaseModel):\n    pass\n\n# Options used to construct an `HttpParams` instance.
@publicApi\nclass HttpParamsOptions(BaseModel):\n    # String representation of the HTTP parameters in URL-query-string format.
Mutually exclusive with `fromObject`.\n    fromString: Optional[str] = None = Field(..., description='String representation of the HTTP parameters in URL-query-string format.
Mutually exclusive with `fromObject`.')\n    # Object map of the HTTP parameters. Mutually exclusive with `fromString`.\n    fromObject: Optional[Union[{
        [param: string]: string, float, bool, ReadonlyArray<string, float, boolean>;
    }]] = None = Field(..., description='Object map of the HTTP parameters. Mutually exclusive with `fromString`.')\n    # Encoding codec used to parse and serialize the parameters.\n    encoder: Optional[HttpParameterCodec] = None = Field(..., description='Encoding codec used to parse and serialize the parameters.')\n\n# Base interface for progress events.
@publicApi\nclass HttpProgressEvent(BaseModel):\n    # Progress event type is either upload or download.\n    type: Union[HttpEventType.DownloadProgress, HttpEventType.UploadProgress] = Field(..., description='Progress event type is either upload or download.')\n    # Number of bytes uploaded or downloaded.\n    loaded: float = Field(..., description='Number of bytes uploaded or downloaded.')\n    # Total number of bytes to upload or download. Depending on the request or
response, this may not be computable and thus may not be present.\n    total: Optional[float] = None = Field(..., description='Total number of bytes to upload or download. Depending on the request or
response, this may not be computable and thus may not be present.')\n\n# A download progress event.
@publicApi\nclass HttpDownloadProgressEvent(HttpProgressEvent):\n    type: HttpEventType.DownloadProgress = Field(...)\n    # The partial response body as downloaded so far.
Only present if the responseType was `text`.\n    partialText: Optional[str] = None = Field(..., description='The partial response body as downloaded so far.
Only present if the responseType was `text`.')\n\n# An upload progress event.
Note: The `FetchBackend` doesn't support progress report on uploads.
@publicApi\nclass HttpUploadProgressEvent(HttpProgressEvent):\n    type: HttpEventType.UploadProgress = Field(...)\n\n# An event indicating that the request was sent to the server. Useful
when a request may be retried multiple times, to distinguish between
retries on the final event stream.
@publicApi\nclass HttpSentEvent(BaseModel):\n    type: HttpEventType.Sent = Field(...)\n\n# A user-defined event.
Grouping all custom events under this type ensures they will be handled
and forwarded by all implementations of interceptors.
@publicApi\nclass HttpUserEvent(BaseModel):\n    type: HttpEventType.User = Field(...)\n\n# Intercepts and handles an `HttpRequest` or `HttpResponse`.
Most interceptors transform the outgoing request before passing it to the
next interceptor in the chain, by calling `next.handle(transformedReq)`.
An interceptor may transform the
response event stream as well, by applying additional RxJS operators on the stream
returned by `next.handle()`.
More rarely, an interceptor may handle the request entirely,
and compose a new event stream instead of invoking `next.handle()`. This is an
acceptable behavior, but keep in mind that further interceptors will be skipped entirely.
It is also rare but valid for an interceptor to return multiple responses on the
event stream for a single request.
@publicApi
@see [HTTP Guide](guide/http/interceptors)
@see {@link HttpInterceptorFn}
@usageNotes
To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`
only in your `AppModule`, and add the interceptors to the root application injector.
If you import `HttpClientModule` multiple times across different modules (for example, in lazy
loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the
interceptors provided in the root module.\nclass HttpInterceptor(BaseModel):\n    pass\n\n# A feature for use when configuring `provideHttpClient`.
@publicApi\nclass HttpFeature(BaseModel):\n    ɵkind: KindT = Field(...)\n    ɵproviders: List[List[Provider]] = Field(...)\n\n# The structure of an `httpResource` request which will be sent to the backend.
@experimental 19.2\nclass HttpResourceRequest(BaseModel):\n    # URL of the request.
This URL should not include query parameters. Instead, specify query parameters through the
`params` field.\n    url: str = Field(..., description='URL of the request.
This URL should not include query parameters. Instead, specify query parameters through the
`params` field.')\n    # HTTP method of the request, which defaults to GET if not specified.\n    method: Optional[str] = None = Field(..., description='HTTP method of the request, which defaults to GET if not specified.')\n    # Body to send with the request, if there is one.
If no Content-Type header is specified by the user, Angular will attempt to set one based on
the type of `body`.\n    body: Optional[unknown] = None = Field(..., description='Body to send with the request, if there is one.
If no Content-Type header is specified by the user, Angular will attempt to set one based on
the type of `body`.')\n    # Dictionary of query parameters which will be appeneded to the request URL.\n    params: Optional[Union[HttpParams, Union[Record<string, string, float, bool, ReadonlyArray<string, float, boolean>>]]] = None = Field(..., description='Dictionary of query parameters which will be appeneded to the request URL.')\n    # Dictionary of headers to include with the outgoing request.\n    headers: Optional[Union[HttpHeaders, Union[Record<string, string, ReadonlyArray<string>>]]] = None = Field(..., description='Dictionary of headers to include with the outgoing request.')\n    # Context of the request stored in a dictionary of key-value pairs.\n    context: Optional[HttpContext] = None = Field(..., description='Context of the request stored in a dictionary of key-value pairs.')\n    # If `true`, progress events will be enabled for the request and delivered through the
`HttpResource.progress` signal.\n    reportProgress: Optional[bool] = None = Field(..., description='If `true`, progress events will be enabled for the request and delivered through the
`HttpResource.progress` signal.')\n    # Specifies whether the `withCredentials` flag should be set on the outgoing request.
This flag causes the browser to send cookies and other authentication information along with
the request.\n    withCredentials: Optional[bool] = None = Field(..., description='Specifies whether the `withCredentials` flag should be set on the outgoing request.
This flag causes the browser to send cookies and other authentication information along with
the request.')\n    # When using the fetch implementation and set to `true`, the browser will not abort the associated request if the page that initiated it is unloaded before the request is complete.\n    keepalive: Optional[bool] = None = Field(..., description='When using the fetch implementation and set to `true`, the browser will not abort the associated request if the page that initiated it is unloaded before the request is complete.')\n    # Controls how the request will interact with the browser's HTTP cache.
This affects whether a response is retrieved from the cache, how it is stored, or if it bypasses the cache altogether.\n    cache: Optional[Union[RequestCache, (string & {})]] = None = Field(..., description='Controls how the request will interact with the browser\'s HTTP cache.
This affects whether a response is retrieved from the cache, how it is stored, or if it bypasses the cache altogether.')\n    # The credentials mode of the request, which determines how cookies and other authentication information are handled.
This can affect whether credentials are sent with cross-origin requests or not.\n    credentials: Optional[Union[RequestCredentials, (string & {})]] = None = Field(..., description='The credentials mode of the request, which determines how cookies and other authentication information are handled.
This can affect whether credentials are sent with cross-origin requests or not.')\n    # Indicates the relative priority of the request. This may be used by the browser to decide the order in which requests are dispatched and resources fetched.\n    priority: Optional[Union[RequestPriority, (string & {})]] = None = Field(..., description='Indicates the relative priority of the request. This may be used by the browser to decide the order in which requests are dispatched and resources fetched.')\n    # The mode of the request, which determines how the request will interact with the browser's security model.
This can affect things like CORS (Cross-Origin Resource Sharing) and same-origin policies.\n    mode: Optional[Union[RequestMode, (string & {})]] = None = Field(..., description='The mode of the request, which determines how the request will interact with the browser\'s security model.
This can affect things like CORS (Cross-Origin Resource Sharing) and same-origin policies.')\n    # The redirect mode of the request, which determines how redirects are handled.
This can affect whether the request follows redirects automatically, or if it fails when a redirect occurs.\n    redirect: Optional[Union[RequestRedirect, (string & {})]] = None = Field(..., description='The redirect mode of the request, which determines how redirects are handled.
This can affect whether the request follows redirects automatically, or if it fails when a redirect occurs.')\n    # Configures the server-side rendering transfer cache for this request.
See the documentation on the transfer cache for more information.\n    transferCache: Optional[Union[Dict[str, Any], bool]] = None = Field(..., description='Configures the server-side rendering transfer cache for this request.
See the documentation on the transfer cache for more information.')\n    # The timeout for the backend HTTP request in ms.\n    timeout: Optional[float] = None = Field(..., description='The timeout for the backend HTTP request in ms.')\n\n# Options for creating an `httpResource`.
@experimental 19.2\nclass HttpResourceOptions(BaseModel):\n    # Transform the result of the HTTP request before it's delivered to the resource.
`parse` receives the value from the HTTP layer as its raw type (e.g. as `unknown` for JSON data).
It can be used to validate or transform the type of the resource, and return a more specific
type. This is also useful for validating backend responses using a runtime schema validation
library such as Zod.\n    parse: Optional[(value: TRaw) => TResult] = None = Field(..., description='Transform the result of the HTTP request before it\'s delivered to the resource.
`parse` receives the value from the HTTP layer as its raw type (e.g. as `unknown` for JSON data).
It can be used to validate or transform the type of the resource, and return a more specific
type. This is also useful for validating backend responses using a runtime schema validation
library such as Zod.')\n    # Value that the resource will take when in Idle or Loading states.
If not set, the resource will use `undefined` as its default value.\n    defaultValue: Optional[NoInfer<TResult>] = None = Field(..., description='Value that the resource will take when in Idle or Loading states.
If not set, the resource will use `undefined` as its default value.')\n    # The `Injector` in which to create the `httpResource`.
If this is not provided, the current [injection context](guide/di/dependency-injection-context)
will be used instead (via `inject`).\n    injector: Optional[Injector] = None = Field(..., description='The `Injector` in which to create the `httpResource`.
If this is not provided, the current [injection context](guide/di/dependency-injection-context)
will be used instead (via `inject`).')\n    # A comparison function which defines equality for the response value.\n    equal: Optional[ValueEqualityFn<NoInfer<TResult>>] = None = Field(..., description='A comparison function which defines equality for the response value.')\n\n# A `WritableResource` that represents the results of a reactive HTTP request.
`HttpResource`s are backed by `HttpClient`, including support for interceptors, testing, and the
other features of the `HttpClient` API.
@experimental 19.2\nclass HttpResourceRef(WritableResource):\n    # Signal of the response headers, when available.\n    headers: Union[Signal<HttpHeaders, undefined>] = Field(..., description='Signal of the response headers, when available.')\n    # Signal of the response status code, when available.\n    statusCode: Union[Signal<number, undefined>] = Field(..., description='Signal of the response status code, when available.')\n    # Signal of the latest progress update, if the request was made with `reportProgress: true`.\n    progress: Union[Signal<HttpProgressEvent, undefined>] = Field(..., description='Signal of the latest progress update, if the request was made with `reportProgress: true`.')\n\n# Type for the `httpRequest` top-level function, which includes the call signatures for the JSON-
based `httpRequest` as well as sub-functions for `ArrayBuffer`, `Blob`, and `string` type
requests.
@experimental 19.2\nclass HttpResourceFn(BaseModel):\n    # Create a `Resource` that fetches data with the configured HTTP request.
The resource will update when the URL or request changes via signals.
Uses `HttpClient` to make requests and supports interceptors, testing, and the other features
of the `HttpClient` API. Data is parsed into an `ArrayBuffer`.
@experimental 19.2\n    arrayBuffer: Union[{
        <TResult = ArrayBuffer>(url: () => string, undefined, options: HttpResourceOptions<TResult, ArrayBuffer> & {
            defaultValue: NoInfer<TResult>;
        }): HttpResourceRef<TResult>;
        <TResult = ArrayBuffer>(url: () => string, undefined, options?: HttpResourceOptions<TResult, ArrayBuffer>): HttpResourceRef<TResult, undefined>;
        <TResult = ArrayBuffer>(request: () => HttpResourceRequest, undefined, options: HttpResourceOptions<TResult, ArrayBuffer> & {
            defaultValue: NoInfer<TResult>;
        }): HttpResourceRef<TResult>;
        <TResult = ArrayBuffer>(request: () => HttpResourceRequest, undefined, options?: HttpResourceOptions<TResult, ArrayBuffer>): HttpResourceRef<TResult, undefined>;
    }] = Field(..., description='Create a `Resource` that fetches data with the configured HTTP request.
The resource will update when the URL or request changes via signals.
Uses `HttpClient` to make requests and supports interceptors, testing, and the other features
of the `HttpClient` API. Data is parsed into an `ArrayBuffer`.
@experimental 19.2')\n    # Create a `Resource` that fetches data with the configured HTTP request.
The resource will update when the URL or request changes via signals.
Uses `HttpClient` to make requests and supports interceptors, testing, and the other features
of the `HttpClient` API. Data is parsed into a `Blob`.
@experimental 19.2\n    blob: Union[{
        <TResult = Blob>(url: () => string, undefined, options: HttpResourceOptions<TResult, Blob> & {
            defaultValue: NoInfer<TResult>;
        }): HttpResourceRef<TResult>;
        <TResult = Blob>(url: () => string, undefined, options?: HttpResourceOptions<TResult, Blob>): HttpResourceRef<TResult, undefined>;
        <TResult = Blob>(request: () => HttpResourceRequest, undefined, options: HttpResourceOptions<TResult, Blob> & {
            defaultValue: NoInfer<TResult>;
        }): HttpResourceRef<TResult>;
        <TResult = Blob>(request: () => HttpResourceRequest, undefined, options?: HttpResourceOptions<TResult, Blob>): HttpResourceRef<TResult, undefined>;
    }] = Field(..., description='Create a `Resource` that fetches data with the configured HTTP request.
The resource will update when the URL or request changes via signals.
Uses `HttpClient` to make requests and supports interceptors, testing, and the other features
of the `HttpClient` API. Data is parsed into a `Blob`.
@experimental 19.2')\n    # Create a `Resource` that fetches data with the configured HTTP request.
The resource will update when the URL or request changes via signals.
Uses `HttpClient` to make requests and supports interceptors, testing, and the other features
of the `HttpClient` API. Data is parsed as a `string`.
@experimental 19.2\n    text: Union[{
        <TResult = string>(url: () => string, undefined, options: HttpResourceOptions<TResult, string> & {
            defaultValue: NoInfer<TResult>;
        }): HttpResourceRef<TResult>;
        <TResult = string>(url: () => string, undefined, options?: HttpResourceOptions<TResult, string>): HttpResourceRef<TResult, undefined>;
        <TResult = string>(request: () => HttpResourceRequest, undefined, options: HttpResourceOptions<TResult, string> & {
            defaultValue: NoInfer<TResult>;
        }): HttpResourceRef<TResult>;
        <TResult = string>(request: () => HttpResourceRequest, undefined, options?: HttpResourceOptions<TResult, string>): HttpResourceRef<TResult, undefined>;
    }] = Field(..., description='Create a `Resource` that fetches data with the configured HTTP request.
The resource will update when the URL or request changes via signals.
Uses `HttpClient` to make requests and supports interceptors, testing, and the other features
of the `HttpClient` API. Data is parsed as a `string`.
@experimental 19.2')\n\n# Options to configure how TransferCache should be used to cache requests made via HttpClient.
@param includeHeaders Specifies which headers should be included into cached responses. No
    headers are included by default.
@param filter A function that receives a request as an argument and returns a boolean to indicate
    whether a request should be included into the cache.
@param includePostRequests Enables caching for POST requests. By default, only GET and HEAD
    requests are cached. This option can be enabled if POST requests are used to retrieve data
    (for example using GraphQL).
@param includeRequestsWithAuthHeaders Enables caching of requests containing either `Authorization`
    or `Proxy-Authorization` headers. By default, these requests are excluded from caching.
@publicApi\nclass HttpTransferCacheOptions(BaseModel):\n    includeHeaders: Optional[List[List[str]]] = None\n    filter: Optional[(req: HttpRequest<unknown>) => boolean] = None\n    includePostRequests: Optional[bool] = None\n    includeRequestsWithAuthHeaders: Optional[bool] = None\n\n# A record of usage for a specific style including all elements added to the DOM
that contain a given style.\nclass UsageRecord(BaseModel):\n    elements: List[List[T]] = Field(...)\n    usage: float = Field(...)\n\nclass HammerInstance(BaseModel):\n    pass\n\n# Marker interface for a value that's safe to use in a particular context.
@publicApi\nclass SafeValue(BaseModel):\n    pass\n\n# Marker interface for a value that's safe to use as HTML.
@publicApi\nclass SafeHtml(SafeValue):\n    pass\n\n# Marker interface for a value that's safe to use as style (CSS).
@publicApi\nclass SafeStyle(SafeValue):\n    pass\n\n# Marker interface for a value that's safe to use as JavaScript.
@publicApi\nclass SafeScript(SafeValue):\n    pass\n\n# Marker interface for a value that's safe to use as a URL linking to a document.
@publicApi\nclass SafeUrl(SafeValue):\n    pass\n\n# Marker interface for a value that's safe to use as a URL to load executable code from.
@publicApi\nclass SafeResourceUrl(SafeValue):\n    pass\n\n# Helper type to represent a Hydration feature.
@publicApi\nclass HydrationFeature(BaseModel):\n    ɵkind: FeatureKind = Field(...)\n    ɵproviders: List[List[Provider]] = Field(...)\n\n# Options to configure the View Transitions integration in the Router.
@developerPreview 20.0
@see withViewTransitions\nclass ViewTransitionsFeatureOptions(BaseModel):\n    # Skips the very first call to `startViewTransition`. This can be useful for disabling the
animation during the application's initial loading phase.\n    skipInitialTransition: Optional[bool] = None = Field(..., description='Skips the very first call to `startViewTransition`. This can be useful for disabling the
animation during the application\'s initial loading phase.')\n    # A function to run after the `ViewTransition` is created.
This function is run in an injection context and can use `inject`.\n    onViewTransitionCreated: Optional[(transitionInfo: ViewTransitionInfo) => void] = None = Field(..., description='A function to run after the `ViewTransition` is created.
This function is run in an injection context and can use `inject`.')\n\n# The information passed to the `onViewTransitionCreated` function provided in the
`withViewTransitions` feature options.
@developerPreview 20.0\nclass ViewTransitionInfo(BaseModel):\n    # The `ViewTransition` returned by the call to `startViewTransition`.
@see https://developer.mozilla.org/en-US/docs/Web/API/ViewTransition\n    transition: ViewTransition = Field(..., description='The `ViewTransition` returned by the call to `startViewTransition`.
@see https://developer.mozilla.org/en-US/docs/Web/API/ViewTransition')\n    # The `ActivatedRouteSnapshot` that the navigation is transitioning from.\n    from: ActivatedRouteSnapshot = Field(..., description='The `ActivatedRouteSnapshot` that the navigation is transitioning from.')\n    # The `ActivatedRouteSnapshot` that the navigation is transitioning to.\n    to: ActivatedRouteSnapshot = Field(..., description='The `ActivatedRouteSnapshot` that the navigation is transitioning to.')\n\n# Helper type to represent a Router feature.
@publicApi\nclass RouterFeature(BaseModel):\n    ɵkind: FeatureKind = Field(...)\n    ɵproviders: List[List[Union[Provider, EnvironmentProviders]]] = Field(...)\n\n# This interface is for items that can be passed to a ListKeyManager.\nclass ListKeyManagerOption(BaseModel):\n    # Whether the option is disabled.\n    disabled: Optional[bool] = None = Field(..., description='Whether the option is disabled.')\n\n# This is the interface for highlightable items (used by the ActiveDescendantKeyManager).
Each item must know how to style itself as active or inactive and whether or not it is
currently disabled.\nclass Highlightable(ListKeyManagerOption):\n    pass\n\n# Corresponds to the options that can be passed to the native `focus` event.
via https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus\nclass FocusOptions(BaseModel):\n    # Whether the browser should scroll to the element when it is focused.\n    preventScroll: Optional[bool] = None = Field(..., description='Whether the browser should scroll to the element when it is focused.')\n\n# Injectable service-level options for FocusMonitor.\nclass FocusMonitorOptions(BaseModel):\n    detectionMode: Optional[FocusMonitorDetectionMode] = None\n\n# This is the interface for focusable items (used by the FocusKeyManager).
Each item must know how to focus itself, whether or not it is currently disabled
and be able to supply its label.\nclass FocusableOption(ListKeyManagerOption):\n    pass\n\n# Represents an item within a tree that can be passed to a TreeKeyManager.\nclass TreeKeyManagerItem(BaseModel):\n    # Whether the item is disabled.\n    isDisabled: Optional[Union[(() => boolean), bool]] = None = Field(..., description='Whether the item is disabled.')\n    # Determines if the item is currently expanded.\n    isExpanded: Union[(() => boolean), bool] = Field(..., description='Determines if the item is currently expanded.')\n\n# Configuration for the TreeKeyManager.\nclass TreeKeyManagerOptions(BaseModel):\n    # If true, then the key manager will call `activate` in addition to calling `focus` when a
particular item is focused.\n    shouldActivationFollowFocus: Optional[bool] = None = Field(..., description='If true, then the key manager will call `activate` in addition to calling `focus` when a
particular item is focused.')\n    # The direction in which the tree items are laid out horizontally. This influences which key
will be interpreted as expand or collapse.\n    horizontalOrientation: Optional[Union['rtl', 'ltr']] = None = Field(..., description='The direction in which the tree items are laid out horizontally. This influences which key
will be interpreted as expand or collapse.')\n    # If provided, navigation "skips" over items that pass the given predicate.
If the item is to be skipped, predicate function should return false.\n    skipPredicate: Optional[(item: T) => boolean] = None = Field(..., description='If provided, navigation "skips" over items that pass the given predicate.
If the item is to be skipped, predicate function should return false.')\n    # If provided, determines how the key manager determines if two items are equivalent.
It should provide a unique key for each unique tree item. If two tree items are equivalent,
then this function should return the same value.\n    trackBy: Optional[(treeItem: T) => unknown] = None = Field(..., description='If provided, determines how the key manager determines if two items are equivalent.
It should provide a unique key for each unique tree item. If two tree items are equivalent,
then this function should return the same value.')\n    # If a value is provided, enables typeahead mode, which allows users to set the active item
by typing the visible label of the item.
If a number is provided, this will be the time to wait after the last keystroke before
setting the active item. If `true` is provided, the default interval of 200ms will be used.\n    typeAheadDebounceInterval: Optional[Union[true, float]] = None = Field(..., description='If a value is provided, enables typeahead mode, which allows users to set the active item
by typing the visible label of the item.
If a number is provided, this will be the time to wait after the last keystroke before
setting the active item. If `true` is provided, the default interval of 200ms will be used.')\n\nclass TreeKeyManagerStrategy(BaseModel):\n    # Stream that emits any time the focused item changes.\n    change: Union[Subject<T, null>] = Field(..., description='Stream that emits any time the focused item changes.')\n\n# Object that can be used to configure the default options for the LiveAnnouncer.\nclass LiveAnnouncerDefaultOptions(BaseModel):\n    # Default politeness for the announcements.\n    politeness: Optional[AriaLivePoliteness] = None = Field(..., description='Default politeness for the announcements.')\n    # Default duration for the announcement messages.\n    duration: Optional[float] = None = Field(..., description='Default duration for the announcement messages.')\n\n# Interface used to register message elements and keep a count of how many registrations have
the same message and the reference to the message element used for the `aria-describedby`.\nclass RegisteredMessage(BaseModel):\n    # The element containing the message.\n    messageElement: Element = Field(..., description='The element containing the message.')\n    # The number of elements that reference this message element via `aria-describedby`.\n    referenceCount: float = Field(..., description='The number of elements that reference this message element via `aria-describedby`.')\n\n# Options for creating a ConfigurableFocusTrap.\nclass ConfigurableFocusTrapConfig(BaseModel):\n    # Whether to defer the creation of FocusTrap elements to be done manually by the user.\n    defer: bool = Field(..., description='Whether to defer the creation of FocusTrap elements to be done manually by the user.')\n\n# A strategy that dictates how FocusTrap should prevent elements
outside of the FocusTrap from being focused.\nclass FocusTrapInertStrategy(BaseModel):\n    pass\n\n# A FocusTrap managed by FocusTrapManager.
Implemented by ConfigurableFocusTrap to avoid circular dependency.\nclass ManagedFocusTrap(BaseModel):\n    pass\n\n# Options to configure the behavior of the InputModalityDetector.\nclass InputModalityDetectorOptions(BaseModel):\n    # Keys to ignore when detecting keyboard input modality.\n    ignoreKeys: Optional[List[List[float]]] = None = Field(..., description='Keys to ignore when detecting keyboard input modality.')\n\nclass IconDefinition(BaseModel):\n    name: str = Field(...)\n    theme: Optional[Union[ThemeType, undefined]] = None\n    icon: str = Field(...)\n\nclass Manifest(BaseModel):\n    fill: List[List[str]] = Field(...)\n    outline: List[List[str]] = Field(...)\n    twotone: List[List[str]] = Field(...)\n\nclass CachedIconDefinition(BaseModel):\n    name: str = Field(...)\n    theme: str = Field(...)\n    icon: SVGElement = Field(...)\n\nclass TwoToneColorPaletteSetter(BaseModel):\n    primaryColor: str = Field(...)\n    secondaryColor: Optional[str] = None\n\nclass TwoToneColorPalette(TwoToneColorPaletteSetter):\n    secondaryColor: str = Field(...)\n\nclass RenderMeta(BaseModel):\n    type: Union[str, IconDefinition] = Field(...)\n    theme: Optional[ThemeType] = None\n    twoToneColor: Optional[str] = None\n\nclass Point(BaseModel):\n    x: float = Field(...)\n    y: float = Field(...)\n\nclass NzScrollToOptions(BaseModel):\n    # Scroll container, default as window\n    easing: Optional[EasyingFn] = None = Field(..., description='Scroll container, default as window')\n    # Animation duration, default as 450\n    duration: Optional[float] = None = Field(..., description='Animation duration, default as 450')\n\nclass PreloadOption(BaseModel):\n    src: str = Field(...)\n    srcset: Optional[str] = None\n\n# Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\nclass MonacoEnvironment(BaseModel):\n    globalAPI: Optional[bool] = None\n    baseUrl: Optional[str] = None\n\nclass NzConfig(BaseModel):\n    affix: Optional[AffixConfig] = None\n    select: Optional[SelectConfig] = None\n    alert: Optional[AlertConfig] = None\n    anchor: Optional[AnchorConfig] = None\n    avatar: Optional[AvatarConfig] = None\n    backTop: Optional[BackTopConfig] = None\n    badge: Optional[BadgeConfig] = None\n    button: Optional[ButtonConfig] = None\n    card: Optional[CardConfig] = None\n    carousel: Optional[CarouselConfig] = None\n    cascader: Optional[CascaderConfig] = None\n    codeEditor: Optional[CodeEditorConfig] = None\n    collapse: Optional[CollapseConfig] = None\n    collapsePanel: Optional[CollapsePanelConfig] = None\n    datePicker: Optional[DatePickerConfig] = None\n    descriptions: Optional[DescriptionsConfig] = None\n    drawer: Optional[DrawerConfig] = None\n    dropDown: Optional[DropDownConfig] = None\n    empty: Optional[EmptyConfig] = None\n    filterTrigger: Optional[FilterTriggerConfig] = None\n    form: Optional[FormConfig] = None\n    icon: Optional[IconConfig] = None\n    message: Optional[MessageConfig] = None\n    modal: Optional[ModalConfig] = None\n    notification: Optional[NotificationConfig] = None\n    pageHeader: Optional[PageHeaderConfig] = None\n    pagination: Optional[PaginationConfig] = None\n    progress: Optional[ProgressConfig] = None\n    rate: Optional[RateConfig] = None\n    segmented: Optional[SegmentedConfig] = None\n    space: Optional[SpaceConfig] = None\n    spin: Optional[SpinConfig] = None\n    switch: Optional[SwitchConfig] = None\n    table: Optional[TableConfig] = None\n    tabs: Optional[TabsConfig] = None\n    timePicker: Optional[TimePickerConfig] = None\n    tree: Optional[TreeConfig] = None\n    treeSelect: Optional[TreeSelectConfig] = None\n    typography: Optional[TypographyConfig] = None\n    image: Optional[ImageConfig] = None\n    popconfirm: Optional[PopConfirmConfig] = None\n    popover: Optional[PopoverConfig] = None\n    imageExperimental: Optional[ImageExperimentalConfig] = None\n    theme: Optional[Theme] = None\n    prefixCls: Optional[PrefixCls] = None\n\nclass PrefixCls(BaseModel):\n    prefixCls: Optional[str] = None\n    iconPrefixCls: Optional[str] = None\n\nclass Theme(BaseModel):\n    primaryColor: Optional[str] = None\n    infoColor: Optional[str] = None\n    successColor: Optional[str] = None\n    processingColor: Optional[str] = None\n    errorColor: Optional[str] = None\n    warningColor: Optional[str] = None\n\nclass SelectConfig(BaseModel):\n    nzBorderless: Optional[bool] = None\n    nzSuffixIcon: Optional[Union[TemplateRef<NzSafeAny>, str, null]] = None\n    nzBackdrop: Optional[bool] = None\n    nzOptionHeightPx: Optional[float] = None\n\nclass AffixConfig(BaseModel):\n    nzOffsetBottom: Optional[float] = None\n    nzOffsetTop: Optional[float] = None\n\nclass AlertConfig(BaseModel):\n    nzCloseable: Optional[bool] = None\n    nzShowIcon: Optional[bool] = None\n\nclass AvatarConfig(BaseModel):\n    nzShape: Optional[NzShapeSCType] = None\n    nzSize: Optional[Union[NzSizeLDSType, float]] = None\n    nzGap: Optional[float] = None\n\nclass AnchorConfig(BaseModel):\n    nzBounds: Optional[float] = None\n    nzOffsetBottom: Optional[float] = None\n    nzOffsetTop: Optional[float] = None\n    nzShowInkInFixed: Optional[bool] = None\n\nclass BackTopConfig(BaseModel):\n    nzVisibilityHeight: Optional[float] = None\n\nclass BadgeConfig(BaseModel):\n    nzColor: Optional[float] = None\n    nzOverflowCount: Optional[float] = None\n    nzShowZero: Optional[float] = None\n\nclass ButtonConfig(BaseModel):\n    nzSize: Optional[Union['large', 'default', 'small']] = None\n\nclass CodeEditorConfig(BaseModel):\n    assetsRoot: Optional[Union[str, SafeUrl]] = None\n    extraConfig: Optional[NzSafeAny] = None\n    defaultEditorOption: Optional[NzSafeAny] = None\n    useStaticLoading: Optional[bool] = None\n    monacoEnvironment: Optional[MonacoEnvironment] = None\n\nclass CardConfig(BaseModel):\n    nzSize: Optional[NzSizeDSType] = None\n    nzHoverable: Optional[bool] = None\n    nzBordered: Optional[bool] = None\n\nclass CarouselConfig(BaseModel):\n    nzAutoPlay: Optional[bool] = None\n    nzAutoPlaySpeed: Optional[bool] = None\n    nzDots: Optional[bool] = None\n    nzEffect: Optional[Union['scrollx', 'fade', str]] = None\n    nzEnableSwipe: Optional[bool] = None\n    nzVertical: Optional[bool] = None\n    nzLoop: Optional[bool] = None\n\nclass CascaderConfig(BaseModel):\n    nzSize: Optional[str] = None\n    nzBackdrop: Optional[bool] = None\n\nclass CollapseConfig(BaseModel):\n    nzAccordion: Optional[bool] = None\n    nzBordered: Optional[bool] = None\n    nzGhost: Optional[bool] = None\n\nclass CollapsePanelConfig(BaseModel):\n    nzShowArrow: Optional[bool] = None\n\nclass DatePickerConfig(BaseModel):\n    nzSeparator: Optional[str] = None\n    nzSuffixIcon: Optional[Union[str, TemplateRef<NzSafeAny>]] = None\n    nzBackdrop: Optional[bool] = None\n\nclass DescriptionsConfig(BaseModel):\n    nzBordered: Optional[bool] = None\n    nzColumn: Optional[Union[Partial<Record<NzBreakpointEnum, number>>, float]] = None\n    nzSize: Optional[Union['default', 'middle', 'small']] = None\n    nzColon: Optional[bool] = None\n\nclass DrawerConfig(BaseModel):\n    nzMask: Optional[bool] = None\n    nzMaskClosable: Optional[bool] = None\n    nzCloseOnNavigation: Optional[bool] = None\n    nzDirection: Optional[Direction] = None\n\nclass DropDownConfig(BaseModel):\n    nzBackdrop: Optional[bool] = None\n\nclass EmptyConfig(BaseModel):\n    nzDefaultEmptyContent: Optional[Union[Type<NzSafeAny>, TemplateRef<string>, str, undefined]] = None\n\nclass FilterTriggerConfig(BaseModel):\n    nzBackdrop: Optional[bool] = None\n\nclass FormConfig(BaseModel):\n    nzNoColon: Optional[bool] = None\n    nzAutoTips: Optional[Record<string, Record<string, string>>] = None\n    nzTooltipIcon: Optional[Union[str, Dict[str, Any]]] = None\n\nclass IconConfig(BaseModel):\n    nzTheme: Optional[Union['fill', 'outline', 'twotone']] = None\n    nzTwotoneColor: Optional[str] = None\n\nclass MessageConfig(BaseModel):\n    nzAnimate: Optional[bool] = None\n    nzDuration: Optional[float] = None\n    nzMaxStack: Optional[float] = None\n    nzPauseOnHover: Optional[bool] = None\n    nzTop: Optional[Union[float, str]] = None\n    nzDirection: Optional[Direction] = None\n\nclass ModalConfig(BaseModel):\n    nzMask: Optional[bool] = None\n    nzMaskClosable: Optional[bool] = None\n    nzCloseOnNavigation: Optional[bool] = None\n    nzDirection: Optional[Direction] = None\n\nclass NotificationConfig(MessageConfig):\n    nzTop: Optional[Union[str, float]] = None\n    nzBottom: Optional[Union[str, float]] = None\n    nzPlacement: Optional[Union['topLeft', 'topRight', 'bottomLeft', 'bottomRight', 'top', 'bottom']] = None\n\nclass PageHeaderConfig(BaseModel):\n    nzGhost: bool = Field(...)\n\nclass PaginationConfig(BaseModel):\n    nzSize: Optional[Union['default', 'small']] = None\n    nzPageSizeOptions: Optional[List[List[float]]] = None\n    nzShowSizeChanger: Optional[bool] = None\n    nzShowQuickJumper: Optional[bool] = None\n    nzSimple: Optional[bool] = None\n\nclass ProgressConfig(BaseModel):\n    nzGapDegree: Optional[float] = None\n    nzGapPosition: Optional[Union['top', 'right', 'bottom', 'left']] = None\n    nzShowInfo: Optional[bool] = None\n    nzStrokeSwitch: Optional[float] = None\n    nzStrokeWidth: Optional[float] = None\n    nzSize: Optional[Union['default', 'small']] = None\n    nzStrokeLinecap: Optional[Union['round', 'square']] = None\n    nzStrokeColor: Optional[str] = None\n\nclass RateConfig(BaseModel):\n    nzAllowClear: Optional[bool] = None\n    nzAllowHalf: Optional[bool] = None\n\nclass SegmentedConfig(BaseModel):\n    nzSize: Optional[NzSizeLDSType] = None\n\nclass SpaceConfig(BaseModel):\n    nzSize: Optional[Union['small', 'middle', 'large', float, List[Union['small', 'middle', 'large', float]]]] = None\n\nclass SpinConfig(BaseModel):\n    nzIndicator: Optional[TemplateRef<NzSafeAny>] = None\n\nclass SwitchConfig(BaseModel):\n    nzSize: NzSizeDSType = Field(...)\n\nclass TableConfig(BaseModel):\n    nzBordered: Optional[bool] = None\n    nzSize: Optional[NzSizeMDSType] = None\n    nzShowQuickJumper: Optional[bool] = None\n    nzLoadingIndicator: Optional[TemplateRef<NzSafeAny>] = None\n    nzShowSizeChanger: Optional[bool] = None\n    nzSimple: Optional[bool] = None\n    nzHideOnSinglePage: Optional[bool] = None\n    # @see {@link NzTableSortOrder}\n    nzSortDirections: Optional[List[List[Union[str, 'ascend', 'descend', null]]]] = None = Field(..., description='@see {@link NzTableSortOrder}')\n\nclass TabsConfig(BaseModel):\n    nzAnimated: Optional[Union[bool, Dict[str, Any]]] = None\n    nzSize: Optional[NzSizeLDSType] = None\n    nzType: Optional[Union['line', 'card']] = None\n    nzTabBarGutter: Optional[float] = None\n    nzShowPagination: Optional[bool] = None\n\nclass TimePickerConfig(BaseModel):\n    nzAllowEmpty: Optional[bool] = None\n    nzClearText: Optional[str] = None\n    nzNowText: Optional[str] = None\n    nzOkText: Optional[str] = None\n    nzFormat: Optional[str] = None\n    nzHourStep: Optional[float] = None\n    nzMinuteStep: Optional[float] = None\n    nzSecondStep: Optional[float] = None\n    nzPopupClassName: Optional[str] = None\n    nzUse12Hours: Optional[str] = None\n    nzSuffixIcon: Optional[Union[str, TemplateRef<NzSafeAny>]] = None\n    nzBackdrop: Optional[bool] = None\n\nclass TreeConfig(BaseModel):\n    nzBlockNode: Optional[bool] = None\n    nzShowIcon: Optional[bool] = None\n    nzHideUnMatched: Optional[bool] = None\n\nclass TreeSelectConfig(BaseModel):\n    nzShowIcon: Optional[str] = None\n    nzShowLine: Optional[bool] = None\n    nzDropdownMatchSelectWidth: Optional[bool] = None\n    nzHideUnMatched: Optional[bool] = None\n    nzSize: Optional[Union['large', 'small', 'default']] = None\n    nzBackdrop: Optional[bool] = None\n\nclass TypographyConfig(BaseModel):\n    nzEllipsisRows: Optional[float] = None\n    nzCopyTooltips: Optional[Union[[NzTSType, NzTSType], null]] = None\n    nzCopyIcons: [NzTSType, NzTSType] = Field(...)\n    nzEditTooltip: Optional[Union[null, NzTSType]] = None\n    nzEditIcon: NzTSType = Field(...)\n\nclass ImageConfig(BaseModel):\n    nzFallback: Optional[str] = None\n    nzPlaceholder: Optional[str] = None\n    nzDisablePreview: Optional[str] = None\n    nzCloseOnNavigation: Optional[bool] = None\n    nzDirection: Optional[Direction] = None\n    nzScaleStep: Optional[float] = None\n\nclass ImageExperimentalConfig(BaseModel):\n    nzFallback: Optional[str] = None\n    nzPlaceholder: Optional[str] = None\n    nzDisablePreview: Optional[str] = None\n    nzCloseOnNavigation: Optional[bool] = None\n    nzDirection: Optional[Direction] = None\n    nzAutoSrcset: Optional[bool] = None\n\nclass PopConfirmConfig(BaseModel):\n    nzPopconfirmBackdrop: Optional[bool] = None\n    nzAutofocus: Optional[Union[null, 'ok', 'cancel']] = None\n\nclass PopoverConfig(BaseModel):\n    nzPopoverBackdrop: Optional[bool] = None\n\nclass NzAnimatedInterface(BaseModel):\n    inkBar: bool = Field(...)\n    tabPane: bool = Field(...)\n\nclass NzTabScrollListOffset(BaseModel):\n    x: float = Field(...)\n    y: float = Field(...)\n\nclass NzTabWheelScrollEvent(BaseModel):\n    type: 'wheel' = Field(...)\n    event: WheelEvent = Field(...)\n\nclass NzTabTouchScrollEvent(BaseModel):\n    type: Union['touchstart', 'touchmove', 'touchend'] = Field(...)\n    event: TouchEvent = Field(...)\n\nclass TabTemplateContext(BaseModel):\n    visible: bool = Field(...)\n\nclass Rules(BaseModel):\n    other: typeof other = Field(...)\n    block: Record<BlockKeys, RegExp> = Field(...)\n    inline: Record<InlineKeys, RegExp> = Field(...)\n\nclass TokenizerThis(BaseModel):\n    lexer: _Lexer = Field(...)\n\nclass TokenizerExtension(BaseModel):\n    name: str = Field(...)\n    level: Union["block", "inline"] = Field(...)\n    start: Optional[TokenizerStartFunction] = None\n    tokenizer: TokenizerExtensionFunction = Field(...)\n    childTokens: Optional[List[List[str]]] = None\n\nclass RendererThis(BaseModel):\n    parser: _Parser<ParserOutput, RendererOutput> = Field(...)\n\nclass RendererExtension(BaseModel):\n    name: str = Field(...)\n    renderer: RendererExtensionFunction<ParserOutput, RendererOutput> = Field(...)\n\nclass MarkedExtension(BaseModel):\n    # True will tell marked to await any walkTokens functions before parsing the tokens and returning an HTML string.\n    async: Optional[bool] = None = Field(..., description='True will tell marked to await any walkTokens functions before parsing the tokens and returning an HTML string.')\n    # Enable GFM line breaks. This option requires the gfm option to be true.\n    breaks: Optional[bool] = None = Field(..., description='Enable GFM line breaks. This option requires the gfm option to be true.')\n    # Add tokenizers and renderers to marked\n    extensions: Optional[Union[List[TokenizerAndRendererExtension<ParserOutput, RendererOutput>], null]] = None = Field(..., description='Add tokenizers and renderers to marked')\n    # Enable GitHub flavored markdown.\n    gfm: Optional[bool] = None = Field(..., description='Enable GitHub flavored markdown.')\n    # Hooks are methods that hook into some part of marked.
preprocess is called to process markdown before sending it to marked.
processAllTokens is called with the TokensList before walkTokens.
postprocess is called to process html after marked has finished parsing.
provideLexer is called to provide a function to tokenize markdown.
provideParser is called to provide a function to parse tokens.\n    hooks: Optional[Union[HooksObject<ParserOutput, RendererOutput>, null]] = None = Field(..., description='Hooks are methods that hook into some part of marked.
preprocess is called to process markdown before sending it to marked.
processAllTokens is called with the TokensList before walkTokens.
postprocess is called to process html after marked has finished parsing.
provideLexer is called to provide a function to tokenize markdown.
provideParser is called to provide a function to parse tokens.')\n    # Conform to obscure parts of markdown.pl as much as possible. Don't fix any of the original markdown bugs or poor behavior.\n    pedantic: Optional[bool] = None = Field(..., description='Conform to obscure parts of markdown.pl as much as possible. Don\'t fix any of the original markdown bugs or poor behavior.')\n    # Type: object Default: new Renderer()
An object containing functions to render tokens to HTML.\n    renderer: Optional[Union[RendererObject<ParserOutput, RendererOutput>, null]] = None = Field(..., description='Type: object Default: new Renderer()
An object containing functions to render tokens to HTML.')\n    # Shows an HTML error message when rendering fails.\n    silent: Optional[bool] = None = Field(..., description='Shows an HTML error message when rendering fails.')\n    # The tokenizer defines how to turn markdown text into tokens.\n    tokenizer: Optional[Union[TokenizerObject, null]] = None = Field(..., description='The tokenizer defines how to turn markdown text into tokens.')\n    # The walkTokens function gets called with every token.
Child tokens are called before moving on to sibling tokens.
Each token is passed by reference so updates are persisted when passed to the parser.
The return value of the function is ignored.\n    walkTokens: Optional[Union[Union[((token: Token) => void, Promise<void>)], null]] = None = Field(..., description='The walkTokens function gets called with every token.
Child tokens are called before moving on to sibling tokens.
Each token is passed by reference so updates are persisted when passed to the parser.
The return value of the function is ignored.')\n\nclass MarkedOptions(Omit):\n    # Hooks are methods that hook into some part of marked.\n    hooks: Optional[Union[_Hooks<ParserOutput, RendererOutput>, null]] = None = Field(..., description='Hooks are methods that hook into some part of marked.')\n    # Type: object Default: new Renderer()
An object containing functions to render tokens to HTML.\n    renderer: Optional[Union[_Renderer<ParserOutput, RendererOutput>, null]] = None = Field(..., description='Type: object Default: new Renderer()
An object containing functions to render tokens to HTML.')\n    # The tokenizer defines how to turn markdown text into tokens.\n    tokenizer: Optional[Union[_Tokenizer<ParserOutput, RendererOutput>, null]] = None = Field(..., description='The tokenizer defines how to turn markdown text into tokens.')\n    # Custom extensions\n    extensions: Optional[Union[null, Dict[str, Any]]] = None = Field(..., description='Custom extensions')\n    # walkTokens function returns array of values for Promise.all\n    walkTokens: Optional[Union[null, Union[((token: Token) => void, Promise<void>, (void, Promise<void>)[])]]] = None = Field(..., description='walkTokens function returns array of values for Promise.all')\n\nclass ClipboardOptions(BaseModel):\n    buttonComponent: Optional[Type<unknown>] = None\n\nclass ClipboardRenderOptions(ClipboardOptions):\n    buttonTemplate: Optional[TemplateRef<unknown>] = None\n\nclass RenderMathInElementSpecificOptionsDelimiters(BaseModel):\n    # A string which starts the math expression (i.e. the left delimiter)\n    left: str = Field(..., description='A string which starts the math expression (i.e. the left delimiter)')\n    # A string which ends the math expression (i.e. the right delimiter)\n    right: str = Field(..., description='A string which ends the math expression (i.e. the right delimiter)')\n    # A boolean of whether the math in the expression should be rendered in display mode or not\n    display: bool = Field(..., description='A boolean of whether the math in the expression should be rendered in display mode or not')\n\nclass RenderMathInElementSpecificOptions(BaseModel):\n    # A list of delimiters to look for math
@default [
  {left: "$$", right: "$$", display: true},
  {left: "\\(", right: "\\)", display: false},
  {left: "\\[", right: "\\]", display: true}
]\n    delimiters: Optional[Union[ReadonlyArray<RenderMathInElementSpecificOptionsDelimiters>, undefined]] = None = Field(..., description='A list of delimiters to look for math
@default [
  {left: "$$", right: "$$", display: true},
  {left: "\\(", right: "\\)", display: false},
  {left: "\\[", right: "\\]", display: true}
]')\n    # A list of DOM node types to ignore when recursing through
@default ["script", "noscript", "style", "textarea", "pre", "code"]\n    ignoredTags: Optional[Union[ReadonlyArray<keyof HTMLElementTagNameMap>, undefined]] = None = Field(..., description='A list of DOM node types to ignore when recursing through
@default ["script", "noscript", "style", "textarea", "pre", "code"]')\n    # A list of DOM node class names to ignore when recursing through
@default []\n    ignoredClasses: Optional[Union[List[str], undefined]] = None = Field(..., description='A list of DOM node class names to ignore when recursing through
@default []')\n\nclass ParseOptions(BaseModel):\n    decodeHtml: Optional[bool] = None\n    inline: Optional[bool] = None\n    emoji: Optional[bool] = None\n    mermaid: Optional[bool] = None\n    markedOptions: Optional[MarkedOptions] = None\n    disableSanitizer: Optional[bool] = None\n\nclass RenderOptions(BaseModel):\n    clipboard: Optional[bool] = None\n    clipboardOptions: Optional[ClipboardRenderOptions] = None\n    katex: Optional[bool] = None\n    katexOptions: Optional[KatexOptions] = None\n    mermaid: Optional[bool] = None\n    mermaidOptions: Optional[MermaidAPI.MermaidConfig] = None\n\nclass TypedValueProvider(BaseModel):\n    provide: T = Field(...)\n    useValue: InjectionTokenType<T> = Field(...)\n\nclass TypedFactoryProvider(BaseModel):\n    provide: T = Field(...)\n    useFactory: (...args: any[]) => InjectionTokenType<T> = Field(...)\n    deps: Optional[List[List[any]]] = None\n\nclass MarkdownModuleConfig(BaseModel):\n    loader: Optional[Provider] = None\n    clipboardOptions: Optional[TypedProvider<typeof CLIPBOARD_OPTIONS>] = None\n    markedOptions: Optional[TypedProvider<typeof MARKED_OPTIONS>] = None\n    markedExtensions: Optional[List[List[MultiTypedProvider<typeof MARKED_EXTENSIONS>]]] = None\n    mermaidOptions: Optional[TypedProvider<typeof MERMAID_OPTIONS>] = None\n    sanitize: Optional[SecurityContext] = None\n\nclass NzWaveConfig(BaseModel):\n    disabled: Optional[bool] = None\n\nclass NzIconfontOption(BaseModel):\n    scriptUrl: str = Field(...)\n\n# | 'javascript' | 'typescript'\nclass CodeFileInfo(BaseModel):\n    fileName: str = Field(...)\n    content: CodeContent\n\nclass TestSample(BaseModel):\n    input: MdCodeContent\n    realOutput: MdCodeContent\n    expectOutput: Optional[MdCodeContent] = None\n\nclass Submit(BaseModel):\n    score: Union[float, null] = Field(...)\n    time: datetime = Field(...)\n    testSample: List[List[TestSample]] = Field(...)\n    submitCode: List[List[CodeFileInfo]] = Field(...)\n\nclass Complexity(BaseModel):\n    time: str = Field(...)\n    space: str = Field(...)\n\nclass AssignData(BaseModel):\n    assignId: AssignId = Field(...)\n    title: str = Field(...)\n    description: MdContent\n    # ! 但是实际上只会有一个文件\n    assignOriginalCode: List[List[CodeFileInfo]] = Field(..., description='! 但是实际上只会有一个文件')\n    ddl: Optional[datetime] = None\n    submit: Optional[Submit] = None\n\nclass BasicAnalysis(BaseModel):\n    resolution: Optional[MatrixAnalysisProps] = None\n    knowledgeAnalysis: Optional[MatrixAnalysisProps] = None\n\nclass AiGenAnalysis(BaseModel):\n    codeAnalysis: Optional[MatrixAnalysisProps] = None\n    learningSuggestions: Optional[MatrixAnalysisProps] = None\n\nclass Analysis(BaseModel):\n    basic: BasicAnalysis = Field(...)\n    aiGen: Optional[AiGenAnalysis] = None\n\nclass TodoCourse(BaseModel):\n    courseId: CourseId = Field(...)\n    courseName: str = Field(...)\n    assignment: List[List[AssignmentListItem]] = Field(...)\n\nclass AssignmentListItem(BaseModel):\n    assignId: AssignId = Field(...)\n    assignmentName: str = Field(...)\n    type: Union['choose', 'program'] = Field(...)\n    score: Union[float, null] = Field(...)\n    ddl: Union[datetime, null] = Field(...)\n\n# Polyfills for the explicit resource management types added in TypeScript 5.2. TODO: remove once this package no longer supports TS 5.1, and replace with a <reference> to TypeScript's disposable library in index.d.ts.\nclass SymbolConstructor(BaseModel):\n    dispose: unique symbol = Field(...)\n    asyncDispose: unique symbol = Field(...)\n\nclass Disposable(BaseModel):\n    pass\n\nclass AsyncDisposable(BaseModel):\n    pass\n\n# Polyfill for ES2022's .at() method on string/array prototypes, added to TypeScript in 4.6.\nclass RelativeIndexable(BaseModel):\n    pass\n\nclass String(RelativeIndexable):\n    pass\n\nclass Array(RelativeIndexable):\n    pass\n\nclass ReadonlyArray(RelativeIndexable):\n    pass\n\nclass Int8Array(RelativeIndexable):\n    pass\n\nclass Uint8Array(RelativeIndexable):\n    pass\n\nclass Uint8ClampedArray(RelativeIndexable):\n    pass\n\nclass Int16Array(RelativeIndexable):\n    pass\n\nclass Uint16Array(RelativeIndexable):\n    pass\n\nclass Int32Array(RelativeIndexable):\n    pass\n\nclass Uint32Array(RelativeIndexable):\n    pass\n\nclass Float32Array(RelativeIndexable):\n    pass\n\nclass Float64Array(RelativeIndexable):\n    pass\n\nclass BigInt64Array(RelativeIndexable):\n    pass\n\nclass BigUint64Array(RelativeIndexable):\n    pass\n\n# Backwards-compatible iterator interfaces, augmented with iterator helper methods by lib.esnext.iterator in TypeScript 5.6. The IterableIterator interface does not contain these methods, which creates assignability issues in places where IteratorObjects are expected (eg. DOM-compatible APIs) if lib.esnext.iterator is loaded. Also ensures that iterators returned by the Node API, which inherit from Iterator.prototype, correctly expose the iterator helper methods if lib.esnext.iterator is loaded. TODO: remove once this package no longer supports TS 5.5, and replace NodeJS.BuiltinIteratorReturn with BuiltinIteratorReturn. Placeholders for TS <5.6\nclass IteratorObject(BaseModel):\n    pass\n\nclass AsyncIteratorObject(BaseModel):\n    pass\n\nclass ErrorConstructor(BaseModel):\n    # The `Error.stackTraceLimit` property specifies the number of stack frames
collected by a stack trace (whether generated by `new Error().stack` or
`Error.captureStackTrace(obj)`).
The default value is `10` but may be set to any valid JavaScript number. Changes
will affect any stack trace captured _after_ the value has been changed.
If set to a non-number value, or set to a negative number, stack traces will
not capture any frames.\n    stackTraceLimit: float = Field(..., description='The `Error.stackTraceLimit` property specifies the number of stack frames
collected by a stack trace (whether generated by `new Error().stack` or
`Error.captureStackTrace(obj)`).
The default value is `10` but may be set to any valid JavaScript number. Changes
will affect any stack trace captured _after_ the value has been changed.
If set to a non-number value, or set to a negative number, stack traces will
not capture any frames.')\n\nclass AbortController(BaseModel):\n    signal: AbortSignal = Field(...)\n\nclass AbortSignal(EventTarget):\n    aborted: bool = Field(...)\n    onabort: Union[((this: AbortSignal, ev: Event) => any), null] = Field(...)\n    reason: any = Field(...)\n\nclass DOMException(Error):\n    code: float = Field(...)\n    message: str = Field(...)\n    name: str = Field(...)\n    INDEX_SIZE_ERR: 1 = Field(...)\n    DOMSTRING_SIZE_ERR: 2 = Field(...)\n    HIERARCHY_REQUEST_ERR: 3 = Field(...)\n    WRONG_DOCUMENT_ERR: 4 = Field(...)\n    INVALID_CHARACTER_ERR: 5 = Field(...)\n    NO_DATA_ALLOWED_ERR: 6 = Field(...)\n    NO_MODIFICATION_ALLOWED_ERR: 7 = Field(...)\n    NOT_FOUND_ERR: 8 = Field(...)\n    NOT_SUPPORTED_ERR: 9 = Field(...)\n    INUSE_ATTRIBUTE_ERR: 10 = Field(...)\n    INVALID_STATE_ERR: 11 = Field(...)\n    SYNTAX_ERR: 12 = Field(...)\n    INVALID_MODIFICATION_ERR: 13 = Field(...)\n    NAMESPACE_ERR: 14 = Field(...)\n    INVALID_ACCESS_ERR: 15 = Field(...)\n    VALIDATION_ERR: 16 = Field(...)\n    TYPE_MISMATCH_ERR: 17 = Field(...)\n    SECURITY_ERR: 18 = Field(...)\n    NETWORK_ERR: 19 = Field(...)\n    ABORT_ERR: 20 = Field(...)\n    URL_MISMATCH_ERR: 21 = Field(...)\n    QUOTA_EXCEEDED_ERR: 22 = Field(...)\n    TIMEOUT_ERR: 23 = Field(...)\n    INVALID_NODE_TYPE_ERR: 24 = Field(...)\n    DATA_CLONE_ERR: 25 = Field(...)\n\nclass AddEventListenerOptions(EventListenerOptions):\n    once: Optional[bool] = None\n    passive: Optional[bool] = None\n    signal: Optional[AbortSignal] = None\n\nclass CustomEvent(Event):\n    detail: T = Field(...)\n\nclass CustomEventInit(EventInit):\n    detail: Optional[T] = None\n\nclass Event(BaseModel):\n    bubbles: bool = Field(...)\n    cancelBubble: bool = Field(...)\n    cancelable: bool = Field(...)\n    composed: bool = Field(...)\n    currentTarget: Union[EventTarget, null] = Field(...)\n    defaultPrevented: bool = Field(...)\n    eventPhase: Union[0, 2] = Field(...)\n    isTrusted: bool = Field(...)\n    returnValue: bool = Field(...)\n    srcElement: Union[EventTarget, null] = Field(...)\n    target: Union[EventTarget, null] = Field(...)\n    timeStamp: float = Field(...)\n    type: str = Field(...)\n\nclass EventInit(BaseModel):\n    bubbles: Optional[bool] = None\n    cancelable: Optional[bool] = None\n    composed: Optional[bool] = None\n\nclass EventListener(BaseModel):\n    pass\n\nclass EventListenerObject(BaseModel):\n    pass\n\nclass EventListenerOptions(BaseModel):\n    capture: Optional[bool] = None\n\nclass EventTarget(BaseModel):\n    pass\n\nclass BlobPropertyBag(BaseModel):\n    type: Optional[str] = None\n    endings: Optional[Union['native', 'transparent']] = None\n\nclass FilePropertyBag(BlobPropertyBag):\n    # The last modified date of the file as the number of milliseconds since the Unix epoch (January 1, 1970 at midnight). Files without a known last modified date return the current date.\n    lastModified: Optional[float] = None = Field(..., description='The last modified date of the file as the number of milliseconds since the Unix epoch (January 1, 1970 at midnight). Files without a known last modified date return the current date.')\n\nclass SpecIterator(BaseModel):\n    pass\n\nclass SpecIterableIterator(SpecIterator):\n    pass\n\nclass SpecIterable(BaseModel):\n    pass\n\nclass RequestInit(BaseModel):\n    method: Optional[str] = None\n    keepalive: Optional[bool] = None\n    headers: Optional[HeadersInit] = None\n    body: Optional[Union[BodyInit, null]] = None\n    redirect: Optional[RequestRedirect] = None\n    integrity: Optional[str] = None\n    signal: Optional[Union[AbortSignal, null]] = None\n    credentials: Optional[RequestCredentials] = None\n    mode: Optional[RequestMode] = None\n    referrer: Optional[str] = None\n    referrerPolicy: Optional[ReferrerPolicy] = None\n    window: Optional[null] = None\n    dispatcher: Optional[Dispatcher] = None\n    duplex: Optional[RequestDuplex] = None\n\nclass ResponseInit(BaseModel):\n    status: Optional[float] = None\n    statusText: Optional[str] = None\n    headers: Optional[HeadersInit] = None\n\nclass Interceptable(Dispatcher):\n    pass\n\nclass PendingInterceptor(MockDispatch):\n    origin: str = Field(...)\n\nclass PendingInterceptorsFormatter(BaseModel):\n    pass\n\nclass Cookie(BaseModel):\n    name: str = Field(...)\n    value: str = Field(...)\n    expires: Optional[Union[datetime, float]] = None\n    maxAge: Optional[float] = None\n    domain: Optional[str] = None\n    path: Optional[str] = None\n    secure: Optional[bool] = None\n    httpOnly: Optional[bool] = None\n    sameSite: Optional[Union['Strict', 'Lax', 'None']] = None\n    unparsed: Optional[List[List[str]]] = None\n\nclass EventInit(BaseModel):\n    bubbles: Optional[bool] = None\n    cancelable: Optional[bool] = None\n    composed: Optional[bool] = None\n\nclass EventListenerOptions(BaseModel):\n    capture: Optional[bool] = None\n\nclass AddEventListenerOptions(EventListenerOptions):\n    once: Optional[bool] = None\n    passive: Optional[bool] = None\n    signal: Optional[AbortSignal] = None\n\nclass EventListenerObject(BaseModel):\n    pass\n\nclass EventListener(BaseModel):\n    pass\n\nclass WebSocketEventMap(BaseModel):\n    close: CloseEvent = Field(...)\n    error: ErrorEvent = Field(...)\n    message: MessageEvent = Field(...)\n    open: Event = Field(...)\n\nclass WebSocket(EventTarget):\n    binaryType: BinaryType = Field(...)\n    bufferedAmount: float = Field(...)\n    extensions: str = Field(...)\n    onclose: Union[((this: WebSocket, ev: WebSocketEventMap['close']) => any), null] = Field(...)\n    onerror: Union[((this: WebSocket, ev: WebSocketEventMap['error']) => any), null] = Field(...)\n    onmessage: Union[((this: WebSocket, ev: WebSocketEventMap['message']) => any), null] = Field(...)\n    onopen: Union[((this: WebSocket, ev: WebSocketEventMap['open']) => any), null] = Field(...)\n    protocol: str = Field(...)\n    readyState: float = Field(...)\n    url: str = Field(...)\n    CLOSED: float = Field(...)\n    CLOSING: float = Field(...)\n    CONNECTING: float = Field(...)\n    OPEN: float = Field(...)\n\nclass CloseEventInit(EventInit):\n    code: Optional[float] = None\n    reason: Optional[str] = None\n    wasClean: Optional[bool] = None\n\nclass CloseEvent(Event):\n    code: float = Field(...)\n    reason: str = Field(...)\n    wasClean: bool = Field(...)\n\nclass MessageEventInit(EventInit):\n    data: Optional[T] = None\n    lastEventId: Optional[str] = None\n    origin: Optional[str] = None\n    ports: Optional[List[List[(typeof MessagePort)]]] = None\n    source: Optional[Union[typeof MessagePort, null]] = None\n\nclass MessageEvent(Event):\n    data: T = Field(...)\n    lastEventId: str = Field(...)\n    origin: str = Field(...)\n    ports: ReadonlyArray<typeof MessagePort> = Field(...)\n    source: Union[typeof MessagePort, null] = Field(...)\n\nclass ErrorEventInit(EventInit):\n    message: Optional[str] = None\n    filename: Optional[str] = None\n    lineno: Optional[float] = None\n    colno: Optional[float] = None\n    error: Optional[any] = None\n\nclass ErrorEvent(Event):\n    message: str = Field(...)\n    filename: str = Field(...)\n    lineno: float = Field(...)\n    colno: float = Field(...)\n    error: any = Field(...)\n\nclass WebSocketInit(BaseModel):\n    protocols: Optional[Union[str, List[str]]] = None\n    dispatcher: Optional[Dispatcher] = None\n    headers: Optional[HeadersInit] = None\n\nclass EventSourceEventMap(BaseModel):\n    error: ErrorEvent = Field(...)\n    message: MessageEvent = Field(...)\n    open: Event = Field(...)\n\nclass EventSource(EventTarget):\n    CLOSED: 2 = Field(...)\n    CONNECTING: 0 = Field(...)\n    OPEN: 1 = Field(...)\n    onerror: (this: EventSource, ev: ErrorEvent) => any = Field(...)\n    onmessage: (this: EventSource, ev: MessageEvent) => any = Field(...)\n    onopen: (this: EventSource, ev: Event) => any = Field(...)\n    readyState: Union[0, 1, 2] = Field(...)\n    url: str = Field(...)\n    withCredentials: bool = Field(...)\n\nclass EventSourceInit(BaseModel):\n    withCredentials: Optional[bool] = None\n    dispatcher: Optional[Dispatcher] = None\n\nclass ProgressEventInit(EventInit):\n    lengthComputable: Optional[bool] = None\n    loaded: Optional[float] = None\n    total: Optional[float] = None\n\n# / <reference types="node" />\nclass MIMEType(BaseModel):\n    type: str = Field(...)\n    subtype: str = Field(...)\n    parameters: Map<string, string> = Field(...)\n    essence: str = Field(...)\n\nclass CacheStorage(BaseModel):\n    pass\n\nclass Cache(BaseModel):\n    pass\n\nclass CacheQueryOptions(BaseModel):\n    ignoreSearch: Optional[bool] = None\n    ignoreMethod: Optional[bool] = None\n    ignoreVary: Optional[bool] = None\n\nclass MultiCacheQueryOptions(CacheQueryOptions):\n    cacheName: Optional[str] = None\n\n# 类型别名\nPropertyKey = Union[str, float, symbol]\n# Extracts the type of the 'this' parameter of a function type, or 'unknown' if the function type has no 'this' parameter.\nThisParameterType = T extends (this: infer U, ...args: never) => any ? U : unknown\n# Removes the 'this' parameter from a function type.\nOmitThisParameter = unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T\nPromiseConstructorLike = Union[new <T>(executor: (resolve: (value: T, PromiseLike<T>) => void, reject: (reason?: any) => void) => void) => PromiseLike<T>]\n# Recursively unwraps the "awaited type" of a type. Non-promise "thenables" should resolve to `never`. This emulates the behavior of `await`.\nAwaited = Union[T extends null, undefined ? T : // special case for `null, undefined` when not in `--strictNullChecks` mode
    T extends object & { then(onfulfilled: infer F, ...args: infer _): any; } ? // `await` only unwraps object types with a callable `then`. Non-object types are not unwrapped
        F extends ((value: infer V, ...args: infer _) => any) ? // if the argument to `then` is callable, extracts the first argument
            Awaited<V> : // recursively unwrap the value
        never : // the argument to `then` was not callable
    T]\n# Make all properties in T optional\nPartial = Dict[str, Any]\n# Make all properties in T required\nRequired = Dict[str, Any]\n# Make all properties in T readonly\nReadonly = Dict[str, Any]\n# From T, pick a set of properties whose keys are in the union K\nPick = Dict[str, Any]\n# Construct a type with a set of properties K of type T\nRecord = Dict[str, Any]\n# Exclude from T those types that are assignable to U\nExclude = T extends U ? never : T\n# Extract from T those types that are assignable to U\nExtract = T extends U ? T : never\n# Construct a type with the properties of T except for those in type K.\nOmit = Pick<T, Exclude<keyof T, K>>\n# Exclude null and undefined from T\nNonNullable = T & {}\n# Obtain the parameters of a function type in a tuple\nParameters = T extends (...args: infer P) => any ? P : never\n# Obtain the parameters of a constructor function type in a tuple\nConstructorParameters = T extends abstract new (...args: infer P) => any ? P : never\n# Obtain the return type of a function type\nReturnType = T extends (...args: any) => infer R ? R : any\n# Obtain the return type of a constructor function type\nInstanceType = T extends abstract new (...args: any) => infer R ? R : any\n# Convert string literal type to uppercase\nUppercase = intrinsic\n# Convert string literal type to lowercase\nLowercase = intrinsic\n# Convert first character of string literal type to uppercase\nCapitalize = intrinsic\n# Convert first character of string literal type to lowercase\nUncapitalize = intrinsic\n# Marker for non-inference type position\nNoInfer = intrinsic\nWeakKey = WeakKeyTypes[keyof WeakKeyTypes]\nArrayBufferLike = ArrayBufferTypes[keyof ArrayBufferTypes]\nNodeFilter = Union[((node: Node) => number), Dict[str, Any]]\nXPathNSResolver = Union[((prefix: string, null) => string, null), { lookupNamespaceURI(prefix: string, null): string, null; }]\nSVGMatrix = DOMMatrix\nWebKitCSSMatrix = DOMMatrix\nSVGPoint = DOMPoint\nSVGRect = DOMRect\nwebkitURL = URL\n# @deprecated Directly use HTMLElementTagNameMap or SVGElementTagNameMap as appropriate, instead.\nElementTagNameMap = HTMLElementTagNameMap & Pick<SVGElementTagNameMap, Exclude<keyof SVGElementTagNameMap, keyof HTMLElementTagNameMap>>\nAlgorithmIdentifier = Union[Algorithm, str]\nAllowSharedBufferSource = Union[ArrayBufferLike, ArrayBufferView<ArrayBufferLike>]\nAutoFill = Union[AutoFillBase, `${OptionalPrefixToken<AutoFillSection>}${OptionalPrefixToken<AutoFillAddressKind>}${AutoFillField}${OptionalPostfixToken<AutoFillCredentialField>}`]\nAutoFillField = Union[AutoFillNormalField, `${OptionalPrefixToken<AutoFillContactKind>}${AutoFillContactField}`]\nAutoFillSection = `section-${string}`\nBase64URLString = str\nBigInteger = Uint8Array<ArrayBuffer>\nBlobPart = Union[BufferSource, Blob, str]\nBodyInit = Union[ReadableStream, XMLHttpRequestBodyInit]\nBufferSource = Union[ArrayBufferView<ArrayBuffer>, ArrayBuffer]\nCOSEAlgorithmIdentifier = float\nCSSKeywordish = Union[str, CSSKeywordValue]\nCSSNumberish = Union[float, CSSNumericValue]\nCSSPerspectiveValue = Union[CSSNumericValue, CSSKeywordish]\nCSSUnparsedSegment = Union[str, CSSVariableReferenceValue]\nCanvasImageSource = Union[HTMLOrSVGImageElement, HTMLVideoElement, HTMLCanvasElement, ImageBitmap, OffscreenCanvas, VideoFrame]\nClipboardItemData = Union[Promise<string, Blob>]\nClipboardItems = List[ClipboardItem]\nConstrainBoolean = Union[bool, ConstrainBooleanParameters]\nConstrainDOMString = Union[str, List[str], ConstrainDOMStringParameters]\nConstrainDouble = Union[float, ConstrainDoubleRange]\nConstrainULong = Union[float, ConstrainULongRange]\nCookieList = List[CookieListItem]\nDOMHighResTimeStamp = float\nEpochTimeStamp = float\nEventListenerOrEventListenerObject = Union[EventListener, EventListenerObject]\nFileSystemWriteChunkType = Union[BufferSource, Blob, str, WriteParams]\nFloat32List = List[Union[Float32Array<ArrayBufferLike>, GLfloat]]\nFormDataEntryValue = Union[File, str]\nGLbitfield = float\nGLboolean = bool\nGLclampf = float\nGLenum = float\nGLfloat = float\nGLint = float\nGLint64 = float\nGLintptr = float\nGLsizei = float\nGLsizeiptr = float\nGLuint = float\nGLuint64 = float\nHTMLOrSVGImageElement = Union[HTMLImageElement, SVGImageElement]\nHTMLOrSVGScriptElement = Union[HTMLScriptElement, SVGScriptElement]\nHashAlgorithmIdentifier = AlgorithmIdentifier\nHeadersInit = Union[List[[string, string]], Record<string, string>, Headers]\nIDBValidKey = List[Union[float, str, datetime, BufferSource, IDBValidKey]]\nImageBitmapSource = Union[CanvasImageSource, Blob, ImageData]\nImageBufferSource = Union[AllowSharedBufferSource, ReadableStream]\nImageDataArray = Uint8ClampedArray<ArrayBuffer>\nInt32List = List[Union[Int32Array<ArrayBufferLike>, GLint]]\nLineAndPositionSetting = Union[float, AutoKeyword]\nMediaProvider = Union[MediaStream, MediaSource, Blob]\nMessageEventSource = Union[WindowProxy, MessagePort, ServiceWorker]\nMutationRecordType = Union["attributes", "characterData", "childList"]\nNamedCurve = str\nOffscreenRenderingContext = Union[OffscreenCanvasRenderingContext2D, ImageBitmapRenderingContext, WebGLRenderingContext, WebGL2RenderingContext]\nOnBeforeUnloadEventHandler = Union[OnBeforeUnloadEventHandlerNonNull, null]\nOnErrorEventHandler = Union[OnErrorEventHandlerNonNull, null]\nOptionalPostfixToken = Union[` ${T}`, ""]\nOptionalPrefixToken = Union[`${T} `, ""]\nPerformanceEntryList = List[PerformanceEntry]\nPublicKeyCredentialClientCapabilities = Record<string, boolean>\nPublicKeyCredentialJSON = any\nRTCRtpTransform = RTCRtpScriptTransform\nReadableStreamController = Union[ReadableStreamDefaultController<T>, ReadableByteStreamController]\nReadableStreamReadResult = Union[ReadableStreamReadValueResult<T>, ReadableStreamReadDoneResult<T>]\nReadableStreamReader = Union[ReadableStreamDefaultReader<T>, ReadableStreamBYOBReader]\nRenderingContext = Union[CanvasRenderingContext2D, ImageBitmapRenderingContext, WebGLRenderingContext, WebGL2RenderingContext]\nReportList = List[Report]\nRequestInfo = Union[Request, str]\nTexImageSource = Union[ImageBitmap, ImageData, HTMLImageElement, HTMLCanvasElement, HTMLVideoElement, OffscreenCanvas, VideoFrame]\nTimerHandler = Union[str, Function]\nTransferable = Union[OffscreenCanvas, ImageBitmap, MessagePort, MediaSourceHandle, ReadableStream, WritableStream, TransformStream, AudioData, VideoFrame, RTCDataChannel, ArrayBuffer]\nUint32List = List[Union[Uint32Array<ArrayBufferLike>, GLuint]]\nVibratePattern = List[Union[float, float]]\nWindowProxy = Window\nXMLHttpRequestBodyInit = Union[Blob, BufferSource, FormData, URLSearchParams, str]\nAlignSetting = Union["center", "end", "left", "right", "start"]\nAlphaOption = Union["discard", "keep"]\nAnimationPlayState = Union["finished", "idle", "paused", "running"]\nAnimationReplaceState = Union["active", "persisted", "removed"]\nAppendMode = Union["segments", "sequence"]\nAttestationConveyancePreference = Union["direct", "enterprise", "indirect", "none"]\nAudioContextLatencyCategory = Union["balanced", "interactive", "playback"]\nAudioContextState = Union["closed", "interrupted", "running", "suspended"]\nAudioSampleFormat = Union["f32", "f32-planar", "s16", "s16-planar", "s32", "s32-planar", "u8", "u8-planar"]\nAuthenticatorAttachment = Union["cross-platform", "platform"]\nAuthenticatorTransport = Union["ble", "hybrid", "internal", "nfc", "usb"]\nAutoFillAddressKind = Union["billing", "shipping"]\nAutoFillBase = Union["", "off", "on"]\nAutoFillContactField = Union["email", "tel", "tel-area-code", "tel-country-code", "tel-extension", "tel-local", "tel-local-prefix", "tel-local-suffix", "tel-national"]\nAutoFillContactKind = Union["home", "mobile", "work"]\nAutoFillCredentialField = "webauthn"\nAutoFillNormalField = Union["additional-name", "address-level1", "address-level2", "address-level3", "address-level4", "address-line1", "address-line2", "address-line3", "bday-day", "bday-month", "bday-year", "cc-csc", "cc-exp", "cc-exp-month", "cc-exp-year", "cc-family-name", "cc-given-name", "cc-name", "cc-number", "cc-type", "country", "country-name", "current-password", "family-name", "given-name", "honorific-prefix", "honorific-suffix", "name", "new-password", "one-time-code", "organization", "postal-code", "street-address", "transaction-amount", "transaction-currency", "username"]\nAutoKeyword = "auto"\nAutomationRate = Union["a-rate", "k-rate"]\nAvcBitstreamFormat = Union["annexb", "avc"]\nBinaryType = Union["arraybuffer", "blob"]\nBiquadFilterType = Union["allpass", "bandpass", "highpass", "highshelf", "lowpass", "lowshelf", "notch", "peaking"]\nBitrateMode = Union["constant", "variable"]\nCSSMathOperator = Union["clamp", "invert", "max", "min", "negate", "product", "sum"]\nCSSNumericBaseType = Union["angle", "flex", "frequency", "length", "percent", "resolution", "time"]\nCanPlayTypeResult = Union["", "maybe", "probably"]\nCanvasDirection = Union["inherit", "ltr", "rtl"]\nCanvasFillRule = Union["evenodd", "nonzero"]\nCanvasFontKerning = Union["auto", "none", "normal"]\nCanvasFontStretch = Union["condensed", "expanded", "extra-condensed", "extra-expanded", "normal", "semi-condensed", "semi-expanded", "ultra-condensed", "ultra-expanded"]\nCanvasFontVariantCaps = Union["all-petite-caps", "all-small-caps", "normal", "petite-caps", "small-caps", "titling-caps", "unicase"]\nCanvasLineCap = Union["butt", "round", "square"]\nCanvasLineJoin = Union["bevel", "miter", "round"]\nCanvasTextAlign = Union["center", "end", "left", "right", "start"]\nCanvasTextBaseline = Union["alphabetic", "bottom", "hanging", "ideographic", "middle", "top"]\nCanvasTextRendering = Union["auto", "geometricPrecision", "optimizeLegibility", "optimizeSpeed"]\nChannelCountMode = Union["clamped-max", "explicit", "max"]\nChannelInterpretation = Union["discrete", "speakers"]\nClientTypes = Union["all", "sharedworker", "window", "worker"]\nCodecState = Union["closed", "configured", "unconfigured"]\nColorGamut = Union["p3", "rec2020", "srgb"]\nColorSpaceConversion = Union["default", "none"]\nCompositeOperation = Union["accumulate", "add", "replace"]\nCompositeOperationOrAuto = Union["accumulate", "add", "auto", "replace"]\nCompressionFormat = Union["deflate", "deflate-raw", "gzip"]\nCookieSameSite = Union["lax", "none", "strict"]\nCredentialMediationRequirement = Union["conditional", "optional", "required", "silent"]\nDOMParserSupportedType = Union["application/xhtml+xml", "application/xml", "image/svg+xml", "text/html", "text/xml"]\nDirectionSetting = Union["", "lr", "rl"]\nDisplayCaptureSurfaceType = Union["browser", "monitor", "window"]\nDistanceModelType = Union["exponential", "inverse", "linear"]\nDocumentReadyState = Union["complete", "interactive", "loading"]\nDocumentVisibilityState = Union["hidden", "visible"]\nEncodedAudioChunkType = Union["delta", "key"]\nEncodedVideoChunkType = Union["delta", "key"]\nEndOfStreamError = Union["decode", "network"]\nEndingType = Union["native", "transparent"]\nFileSystemHandleKind = Union["directory", "file"]\nFillLightMode = Union["auto", "flash", "off"]\nFillMode = Union["auto", "backwards", "both", "forwards", "none"]\nFontDisplay = Union["auto", "block", "fallback", "optional", "swap"]\nFontFaceLoadStatus = Union["error", "loaded", "loading", "unloaded"]\nFontFaceSetLoadStatus = Union["loaded", "loading"]\nFullscreenNavigationUI = Union["auto", "hide", "show"]\nGamepadHapticEffectType = Union["dual-rumble", "trigger-rumble"]\nGamepadHapticsResult = Union["complete", "preempted"]\nGamepadMappingType = Union["", "standard", "xr-standard"]\nGlobalCompositeOperation = Union["color", "color-burn", "color-dodge", "copy", "darken", "destination-atop", "destination-in", "destination-out", "destination-over", "difference", "exclusion", "hard-light", "hue", "lighten", "lighter", "luminosity", "multiply", "overlay", "saturation", "screen", "soft-light", "source-atop", "source-in", "source-out", "source-over", "xor"]\nHardwareAcceleration = Union["no-preference", "prefer-hardware", "prefer-software"]\nHdrMetadataType = Union["smpteSt2086", "smpteSt2094-10", "smpteSt2094-40"]\nHighlightType = Union["grammar-error", "highlight", "spelling-error"]\nIDBCursorDirection = Union["next", "nextunique", "prev", "prevunique"]\nIDBRequestReadyState = Union["done", "pending"]\nIDBTransactionDurability = Union["default", "relaxed", "strict"]\nIDBTransactionMode = Union["readonly", "readwrite", "versionchange"]\nImageOrientation = Union["flipY", "from-image", "none"]\nImageSmoothingQuality = Union["high", "low", "medium"]\nInsertPosition = Union["afterbegin", "afterend", "beforebegin", "beforeend"]\nIterationCompositeOperation = Union["accumulate", "replace"]\nKeyFormat = Union["jwk", "pkcs8", "raw", "spki"]\nKeyType = Union["private", "public", "secret"]\nKeyUsage = Union["decrypt", "deriveBits", "deriveKey", "encrypt", "sign", "unwrapKey", "verify", "wrapKey"]\nLatencyMode = Union["quality", "realtime"]\nLineAlignSetting = Union["center", "end", "start"]\nLockMode = Union["exclusive", "shared"]\nLoginStatus = Union["logged-in", "logged-out"]\nMIDIPortConnectionState = Union["closed", "open", "pending"]\nMIDIPortDeviceState = Union["connected", "disconnected"]\nMIDIPortType = Union["input", "output"]\nMediaDecodingType = Union["file", "media-source", "webrtc"]\nMediaDeviceKind = Union["audioinput", "audiooutput", "videoinput"]\nMediaEncodingType = Union["record", "webrtc"]\nMediaKeyMessageType = Union["individualization-request", "license-release", "license-renewal", "license-request"]\nMediaKeySessionClosedReason = Union["closed-by-application", "hardware-context-reset", "internal-error", "release-acknowledged", "resource-evicted"]\nMediaKeySessionType = Union["persistent-license", "temporary"]\nMediaKeyStatus = Union["expired", "internal-error", "output-downscaled", "output-restricted", "released", "status-pending", "usable", "usable-in-future"]\nMediaKeysRequirement = Union["not-allowed", "optional", "required"]\nMediaSessionAction = Union["nexttrack", "pause", "play", "previoustrack", "seekbackward", "seekforward", "seekto", "skipad", "stop"]\nMediaSessionPlaybackState = Union["none", "paused", "playing"]\nMediaStreamTrackState = Union["ended", "live"]\nNavigationTimingType = Union["back_forward", "navigate", "prerender", "reload"]\nNavigationType = Union["push", "reload", "replace", "traverse"]\nNotificationDirection = Union["auto", "ltr", "rtl"]\nNotificationPermission = Union["default", "denied", "granted"]\nOffscreenRenderingContextId = Union["2d", "bitmaprenderer", "webgl", "webgl2", "webgpu"]\nOpusBitstreamFormat = Union["ogg", "opus"]\nOrientationType = Union["landscape-primary", "landscape-secondary", "portrait-primary", "portrait-secondary"]\nOscillatorType = Union["custom", "sawtooth", "sine", "square", "triangle"]\nOverSampleType = Union["2x", "4x", "none"]\nPanningModelType = Union["HRTF", "equalpower"]\nPaymentComplete = Union["fail", "success", "unknown"]\nPaymentShippingType = Union["delivery", "pickup", "shipping"]\nPermissionName = Union["camera", "geolocation", "microphone", "midi", "notifications", "persistent-storage", "push", "screen-wake-lock", "storage-access"]\nPermissionState = Union["denied", "granted", "prompt"]\nPlaybackDirection = Union["alternate", "alternate-reverse", "normal", "reverse"]\nPositionAlignSetting = Union["auto", "center", "line-left", "line-right"]\nPredefinedColorSpace = Union["display-p3", "srgb"]\nPremultiplyAlpha = Union["default", "none", "premultiply"]\nPresentationStyle = Union["attachment", "inline", "unspecified"]\nPublicKeyCredentialType = "public-key"\nPushEncryptionKeyName = Union["auth", "p256dh"]\nRTCBundlePolicy = Union["balanced", "max-bundle", "max-compat"]\nRTCDataChannelState = Union["closed", "closing", "connecting", "open"]\nRTCDegradationPreference = Union["balanced", "maintain-framerate", "maintain-resolution"]\nRTCDtlsRole = Union["client", "server", "unknown"]\nRTCDtlsTransportState = Union["closed", "connected", "connecting", "failed", "new"]\nRTCEncodedVideoFrameType = Union["delta", "empty", "key"]\nRTCErrorDetailType = Union["data-channel-failure", "dtls-failure", "fingerprint-failure", "hardware-encoder-error", "hardware-encoder-not-available", "sctp-failure", "sdp-syntax-error"]\nRTCIceCandidateType = Union["host", "prflx", "relay", "srflx"]\nRTCIceComponent = Union["rtcp", "rtp"]\nRTCIceConnectionState = Union["checking", "closed", "completed", "connected", "disconnected", "failed", "new"]\nRTCIceGathererState = Union["complete", "gathering", "new"]\nRTCIceGatheringState = Union["complete", "gathering", "new"]\nRTCIceProtocol = Union["tcp", "udp"]\nRTCIceRole = Union["controlled", "controlling", "unknown"]\nRTCIceTcpCandidateType = Union["active", "passive", "so"]\nRTCIceTransportPolicy = Union["all", "relay"]\nRTCIceTransportState = Union["checking", "closed", "completed", "connected", "disconnected", "failed", "new"]\nRTCPeerConnectionState = Union["closed", "connected", "connecting", "disconnected", "failed", "new"]\nRTCPriorityType = Union["high", "low", "medium", "very-low"]\nRTCQualityLimitationReason = Union["bandwidth", "cpu", "none", "other"]\nRTCRtcpMuxPolicy = "require"\nRTCRtpTransceiverDirection = Union["inactive", "recvonly", "sendonly", "sendrecv", "stopped"]\nRTCSctpTransportState = Union["closed", "connected", "connecting"]\nRTCSdpType = Union["answer", "offer", "pranswer", "rollback"]\nRTCSignalingState = Union["closed", "have-local-offer", "have-local-pranswer", "have-remote-offer", "have-remote-pranswer", "stable"]\nRTCStatsIceCandidatePairState = Union["failed", "frozen", "in-progress", "inprogress", "succeeded", "waiting"]\nRTCStatsType = Union["candidate-pair", "certificate", "codec", "data-channel", "inbound-rtp", "local-candidate", "media-playout", "media-source", "outbound-rtp", "peer-connection", "remote-candidate", "remote-inbound-rtp", "remote-outbound-rtp", "transport"]\nReadableStreamReaderMode = "byob"\nReadableStreamType = "bytes"\nReadyState = Union["closed", "ended", "open"]\nRecordingState = Union["inactive", "paused", "recording"]\nRedEyeReduction = Union["always", "controllable", "never"]\nReferrerPolicy = Union["", "no-referrer", "no-referrer-when-downgrade", "origin", "origin-when-cross-origin", "same-origin", "strict-origin", "strict-origin-when-cross-origin", "unsafe-url"]\nRemotePlaybackState = Union["connected", "connecting", "disconnected"]\nRequestCache = Union["default", "force-cache", "no-cache", "no-store", "only-if-cached", "reload"]\nRequestCredentials = Union["include", "omit", "same-origin"]\nRequestDestination = Union["", "audio", "audioworklet", "document", "embed", "font", "frame", "iframe", "image", "manifest", "object", "paintworklet", "report", "script", "sharedworker", "style", "track", "video", "worker", "xslt"]\nRequestMode = Union["cors", "navigate", "no-cors", "same-origin"]\nRequestPriority = Union["auto", "high", "low"]\nRequestRedirect = Union["error", "follow", "manual"]\nResidentKeyRequirement = Union["discouraged", "preferred", "required"]\nResizeObserverBoxOptions = Union["border-box", "content-box", "device-pixel-content-box"]\nResizeQuality = Union["high", "low", "medium", "pixelated"]\nResponseType = Union["basic", "cors", "default", "error", "opaque", "opaqueredirect"]\nScrollBehavior = Union["auto", "instant", "smooth"]\nScrollLogicalPosition = Union["center", "end", "nearest", "start"]\nScrollRestoration = Union["auto", "manual"]\nScrollSetting = Union["", "up"]\nSecurityPolicyViolationEventDisposition = Union["enforce", "report"]\nSelectionMode = Union["end", "preserve", "select", "start"]\nServiceWorkerState = Union["activated", "activating", "installed", "installing", "parsed", "redundant"]\nServiceWorkerUpdateViaCache = Union["all", "imports", "none"]\nShadowRootMode = Union["closed", "open"]\nSlotAssignmentMode = Union["manual", "named"]\nSpeechSynthesisErrorCode = Union["audio-busy", "audio-hardware", "canceled", "interrupted", "invalid-argument", "language-unavailable", "network", "not-allowed", "synthesis-failed", "synthesis-unavailable", "text-too-long", "voice-unavailable"]\nTextTrackKind = Union["captions", "chapters", "descriptions", "metadata", "subtitles"]\nTextTrackMode = Union["disabled", "hidden", "showing"]\nTouchType = Union["direct", "stylus"]\nTransferFunction = Union["hlg", "pq", "srgb"]\nUserVerificationRequirement = Union["discouraged", "preferred", "required"]\nVideoColorPrimaries = Union["bt470bg", "bt709", "smpte170m"]\nVideoEncoderBitrateMode = Union["constant", "quantizer", "variable"]\nVideoFacingModeEnum = Union["environment", "left", "right", "user"]\nVideoMatrixCoefficients = Union["bt470bg", "bt709", "rgb", "smpte170m"]\nVideoPixelFormat = Union["BGRA", "BGRX", "I420", "I420A", "I422", "I444", "NV12", "RGBA", "RGBX"]\nVideoTransferCharacteristics = Union["bt709", "iec61966-2-1", "smpte170m"]\nWakeLockType = "screen"\nWebGLPowerPreference = Union["default", "high-performance", "low-power"]\nWebTransportCongestionControl = Union["default", "low-latency", "throughput"]\nWebTransportErrorSource = Union["session", "stream"]\nWorkerType = Union["classic", "module"]\nWriteCommandType = Union["seek", "truncate", "write"]\nXMLHttpRequestResponseType = Union["", "arraybuffer", "blob", "document", "json", "text"]\nIteratorResult = Union[IteratorYieldResult<T>, IteratorReturnResult<TReturn>]\n# Defines the `TReturn` type used for built-in iterators produced by `Array`, `Map`, `Set`, and others.
This is `undefined` when `strictBuiltInIteratorReturn` is `true`; otherwise, this is `any`.\nBuiltinIteratorReturn = intrinsic\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/>\nFlatArray = {
    done: Arr;
    recur: Arr extends ReadonlyArray<infer InnerArr> ? FlatArray<InnerArr, [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][Depth]>
        : Arr;
}[Depth extends -1 ? "done" : "recur"]\nPromiseSettledResult = Union[PromiseFulfilledResult<T>, PromiseRejectedResult]\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/> The decorator context types provided to class element decorators.\nClassMemberDecoratorContext = Union[ClassMethodDecoratorContext, ClassGetterDecoratorContext, ClassSetterDecoratorContext, ClassFieldDecoratorContext, ClassAccessorDecoratorContext]\n# The decorator context types provided to any decorator.\nDecoratorContext = Union[ClassDecoratorContext, ClassMemberDecoratorContext]\nDecoratorMetadataObject = Record<PropertyKey, unknown> & object\nDecoratorMetadata = Union[typeof globalThis extends { Symbol: { readonly metadata: symbol; }; } ? DecoratorMetadataObject : DecoratorMetadataObject, undefined]\n# ! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
**************************************************************************** / <reference no-default-lib="true"/>\nClassDecorator = Union[<TFunction extends Function>(target: TFunction) => TFunction, void]\nPropertyDecorator = Union[(target: Object, propertyKey: string, symbol) => void]\nMethodDecorator = Union[<T>(target: Object, propertyKey: string, symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T>, void]\nParameterDecorator = Union[(target: Object, propertyKey: string, symbol, undefined, parameterIndex: number) => void]\nID = str\nCourseId = ID\nAssignId = ID\n# @license Angular v20.1.6
(c) 2010-2025 Google LLC. https://angular.io/
License: MIT A comparison function which can determine if two values are equal.\nValueEqualityFn = (a: T, b: T) => boolean\nVersion = number & {
    __brand: 'Version';
}\nReactiveHookFn = (node: ReactiveNode) => void\nActionInfoInternal = [name: string, element: Element]\n# A function that is called to handle events captured by the EventContract.\nDispatcher = (eventInfo: EventInfo, globalDispatch?: boolean) => void\n# A function that handles an event dispatched from the browser.
eventType: May differ from `event.type` if JSAction uses a
short-hand name or is patching over an non-bubbling event with a bubbling
variant.
event: The native browser event.
container: The container for this dispatch.\nEventHandler = (eventType: string, event: Event, container: Element) => void\n# A reactive value which notifies consumers of any changes.
Signals are functions which returns their current value. To access the current value of a signal,
call it.
Ordinary values can be turned into `Signal`s with the `signal` function.
@publicApi 17.0\nSignal = (() => T) & {
    [SIGNAL]: unknown;
}\n# A comparison function which can determine if two values are equal.\nValueEqualityFn = (a: T, b: T) => boolean\n# Returns a writable type version of type.
USAGE:
Given:
```ts
interface Person {readonly name: string}
```
We would like to get a read/write version of `Person`.
```ts
const WritablePerson = Writable<Person>;
```
The result is that you can do:
```ts
const readonlyPerson: Person = {name: 'Marry'};
readonlyPerson.name = 'John'; // TypeError
(readonlyPerson as WritablePerson).name = 'John'; // OK
// Error: Correctly detects that `Person` did not have `age` property.
(readonlyPerson as WritablePerson).age = 30;
```\nWritable = Dict[str, Any]\n# Describes how an `Injector` should be configured as static (that is, without reflection).
A static provider provides tokens to an injector for various types of dependencies.
@see {@link Injector.create()}
@see [Dependency Injection Guide](guide/di/dependency-injection-providers).
@publicApi\nStaticProvider = List[Union[ValueProvider, ExistingProvider, StaticClassProvider, ConstructorProvider, FactoryProvider, any]]\n# Describes how the `Injector` should be configured.
@see [Dependency Injection Guide](guide/di/dependency-injection.
@see {@link StaticProvider}
@publicApi\nProvider = List[Union[TypeProvider, ValueProvider, ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, any]]\n# Describes a function that is used to process provider lists (such as provider
overrides).\nProcessProvidersFunction = List[(providers: Provider[]) => Provider]\n# Providers that were imported from NgModules via the `importProvidersFrom` function.
These providers are meant for use in an application injector (or other environment injectors) and
should not be used in component injectors.
This type cannot be directly implemented. It's returned from the `importProvidersFrom` function
and serves to prevent the extracted NgModule providers from being used in the wrong contexts.
@see {@link importProvidersFrom}
@publicApi
@deprecated replaced by `EnvironmentProviders`\nImportedNgModuleProviders = EnvironmentProviders\n# @description
Token that can be used to retrieve an instance from an injector or through a query.
@publicApi\nProviderToken = Union[Type<T>, AbstractType<T>, InjectionToken<T>]\n# Shorthand for an event listener callback function to reduce duplication.\nEventCallback = (event?: any) => any\nTimeStampName = str\nDevToolsColor = Union['primary', 'primary-light', 'primary-dark', 'secondary', 'secondary-light', 'secondary-dark', 'tertiary', 'tertiary-light', 'tertiary-dark', 'error']\nFactoryOrValue = Union[T, (() => T)]\nTeardownLogic = Union[Subscription, Unsubscribable, (() => void), void]\n# @deprecated Do not use. Most likely you want to use `ObservableInput`. Will be removed in v8.\nSubscribableOrPromise = Union[Subscribable<T>, Subscribable<never>, PromiseLike<T>, InteropObservable<T>]\n# Valid types that can be converted to observables.\nObservableInput = Union[Observable<T>, InteropObservable<T>, AsyncIterable<T>, PromiseLike<T>, ArrayLike<T>, Iterable<T>, ReadableStreamLike<T>]\n# @deprecated Renamed to {@link InteropObservable }. Will be removed in v8.\nObservableLike = InteropObservable<T>\n# Valid observable notification types.\nObservableNotification = Union[NextNotification<T>, ErrorNotification, CompleteNotification]\nPartialObserver = Union[NextObserver<T>, ErrorObserver<T>, CompletionObserver<T>]\n# Extracts the type from an `ObservableInput<any>`. If you have
`O extends ObservableInput<any>` and you pass in `Observable<number>`, or
`Promise<number>`, etc, it will type as `number`.\nObservedValueOf = O extends ObservableInput<infer T> ? T : never\n# Extracts a union of element types from an `ObservableInput<any>[]`.
If you have `O extends ObservableInput<any>[]` and you pass in
`Observable<string>[]` or `Promise<string>[]` you would get
back a type of `string`.
If you pass in `[Observable<string>, Observable<number>]` you would
get back a type of `string | number`.\nObservedValueUnionFromArray = X extends Array<ObservableInput<infer T>> ? T : never\n# @deprecated Renamed to {@link ObservedValueUnionFromArray}. Will be removed in v8.\nObservedValuesFromArray = ObservedValueUnionFromArray<X>\n# Extracts a tuple of element types from an `ObservableInput<any>[]`.
If you have `O extends ObservableInput<any>[]` and you pass in
`[Observable<string>, Observable<number>]` you would get back a type
of `[string, number]`.\nObservedValueTupleFromArray = Dict[str, Any]\n# Used to infer types from arguments to functions like {@link forkJoin}.
So that you can have `forkJoin([Observable<A>, PromiseLike<B>]): Observable<[A, B]>`
et al.\nObservableInputTuple = Dict[str, Any]\n# Constructs a new tuple with the specified type at the head.
If you declare `Cons<A, [B, C]>` you will get back `[A, B, C]`.\nCons = ((arg: X, ...rest: Y) => any) extends (...args: infer U) => any ? U : never\n# Extracts the head of a tuple.
If you declare `Head<[A, B, C]>` you will get back `A`.\nHead = ((...args: X) => any) extends (arg: infer U, ...rest: any[]) => any ? U : never\n# Extracts the tail of a tuple.
If you declare `Tail<[A, B, C]>` you will get back `[B, C]`.\nTail = ((...args: X) => any) extends (arg: any, ...rest: infer U) => any ? U : never\n# Extracts the generic value from an Array type.
If you have `T extends Array<any>`, and pass a `string[]` to it,
`ValueFromArray<T>` will return the actual type of `string`.\nValueFromArray = A extends Array<infer T> ? T : never\n# Gets the value type from an {@link ObservableNotification}, if possible.\nValueFromNotification = Union[T extends {
    kind: 'N', 'E', 'C';
} ? T extends NextNotification<any> ? T extends {
    value: infer V;
} ? V : undefined : never : never]\n# A simple type to represent a gamut of "falsy" values... with a notable exception:
`NaN` is "falsy" however, it is not and cannot be typed via TypeScript. See
comments here: https://github.com/microsoft/TypeScript/issues/28682#issuecomment-707142417\nFalsy = Union[null, undefined, false, 0, -0, 0n, '']\nTruthyTypesOf = T extends Falsy ? never : T\nTimerHandle = Union[float, ReturnType<typeof setTimeout>]\nobservableToBeFn = (marbles: string, values?: any, errorValue?: any) => void\nsubscriptionLogsToBeFn = Union[(marbles: string, string[]) => void]\n# This is just a type that we're using to identify `any` being passed to
function overloads. This is used because of situations like {@link forkJoin},
where it could return an `Observable<T[]>` or an `Observable<{ [key: K]: T }>`,
so `forkJoin(any)` would mean we need to return `Observable<unknown>`.\nAnyCatcher = typeof anyCatcherSymbol\nNodeEventHandler = (...args: any[]) => void\nConditionFunc = (state: S) => boolean\nIterateFunc = (state: S) => S\nResultFunc = (state: S) => T\nSignalBaseGetter = (() => T) & {
    readonly [SIGNAL]: unknown;
}\nSignalSetter = (newValue: T) => void\nSignalUpdater = (updateFn: (value: T) => T) => void\nConstructor = Function & {
    prototype: T;
}\n# Type union of NotFound and NotFoundError.\nNotFound = Union[typeof NOT_FOUND, NotFoundError]\n# @fileoverview
While Angular only uses Trusted Types internally for the time being,
references to Trusted Types could leak into our core.d.ts, which would force
anyone compiling against @angular/core to provide the @types/trusted-types
package in their compilation unit.
Until https://github.com/microsoft/TypeScript/issues/30024 is resolved, we
will keep Angular's public API surface free of references to Trusted Types.
For internal and semi-private APIs that need to reference Trusted Types, the
minimal type definitions for the Trusted Types API provided by this module
should be used instead. They are marked as "declare" to prevent them from
being renamed by compiler optimization.
Adapted from
https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/trusted-types/index.d.ts
but restricted to the API surface used within Angular.\nTrustedHTML = string & {
    __brand__: 'TrustedHTML';
}\nTrustedScript = string & {
    __brand__: 'TrustedScript';
}\nTrustedScriptURL = string & {
    __brand__: 'TrustedScriptURL';
}\n# Function used to sanitize the value before writing it into the renderer.\nSanitizerFn = Union[(value: any, tagName?: string, propName?: string) => string, TrustedHTML, TrustedScript, TrustedScriptURL]\nI18nNode = Union[I18nTextNode, I18nElementNode, I18nICUNode, I18nPlaceholderNode]\n# Value stored in the `TData` which is needed to re-concatenate the styling.
See: `TStylingKeyPrimitive` and `TStylingStatic`\nTStylingKey = Union[TStylingKeyPrimitive, TStylingStatic]\n# The primitive portion (`TStylingStatic` removed) of the value stored in the `TData` which is
needed to re-concatenate the styling.
- `string`: Stores the property name. Used with `ɵɵstyleProp`/`ɵɵclassProp` instruction.
- `null`: Represents map, so there is no name. Used with `ɵɵstyleMap`/`ɵɵclassMap`.
- `false`: Represents an ignore case. This happens when `ɵɵstyleProp`/`ɵɵclassProp` instruction
  is combined with directive which shadows its input `@Input('class')`. That way the binding
  should not participate in the styling resolution.\nTStylingKeyPrimitive = Union[str, null, false]\n# This is a branded number which contains previous and next index.
When we come across styling instructions we need to store the `TStylingKey` in the correct
order so that we can re-concatenate the styling value in the desired priority.
The insertion can happen either at the:
- end of template as in the case of coming across additional styling instruction in the template
- in front of the template in the case of coming across additional instruction in the
  `hostBindings`.
We use `TStylingRange` to store the previous and next index into the `TData` where the template
bindings can be found.
- bit 0 is used to mark that the previous index has a duplicate for current value.
- bit 1 is used to mark that the next index has a duplicate for the current value.
- bits 2-16 are used to encode the next/tail of the template.
- bits 17-32 are used to encode the previous/head of template.
NODE: *duplicate* false implies that it is statically known that this binding will not collide
with other bindings and therefore there is no need to check other bindings. For example the
bindings in `<div [style.color]="exp" [style.width]="exp">` will never collide and will have
their bits set accordingly. Previous duplicate means that we may need to check previous if the
current binding is `null`. Next duplicate means that we may need to check next bindings if the
current binding is not `null`.
NOTE: `0` has special significance and represents `null` as in no additional pointer.\nTStylingRange = number & {
    __brand__: 'TStylingRange';
}\n# Expresses a single CSS Selector.
Beginning of array
- First index: element name
- Subsequent odd indices: attr keys
- Subsequent even indices: attr values
After SelectorFlags.CLASS flag
- Class name values
SelectorFlags.NOT flag
- Changes the mode to NOT
- Can be combined with other flags to set the element / attr / class mode
e.g. SelectorFlags.NOT | SelectorFlags.ELEMENT
Example:
Original: `div.foo.bar[attr1=val1][attr2]`
Parsed: ['div', 'attr1', 'val1', 'attr2', '', SelectorFlags.CLASS, 'foo', 'bar']
Original: 'div[attr1]:not(.foo[attr2])
Parsed: [
 'div', 'attr1', '',
 SelectorFlags.NOT | SelectorFlags.ATTRIBUTE 'attr2', '', SelectorFlags.CLASS, 'foo'
]
See more examples in node_selector_matcher_spec.ts\nCssSelector = List[Union[(string, SelectorFlags)]]\n# A list of CssSelectors.
A directive or component can have multiple selectors. This type is used for
directive defs so any of the selectors in the list will match that directive.
Original: 'form, [ngForm]'
Parsed: [['form'], ['', 'ngForm', '']]\nCssSelectorList = List[CssSelector]\n# List of slots for a projection. A slot can be either based on a parsed CSS selector
which will be used to determine nodes which are projected into that slot.
When set to "*", the slot is reserved and can be used for multi-slot projection
using {@link ViewContainerRef#createComponent}. The last slot that specifies the
wildcard selector will retrieve all projectable nodes which do not match any selector.\nProjectionSlots = List[Union[(CssSelectorList, '*')]]\n# A combination of:
- Attribute names and values.
- Special markers acting as flags to alter attributes processing.
- Parsed ngProjectAs selectors.\nTAttributes = List[Union[(string, AttributeMarker, CssSelector)]]\n# Constants that are associated with a view. Includes:
- Attribute arrays.
- Local definition arrays.
- Translated messages (i18n).\nTConstants = List[Union[(TAttributes, string)]]\n# Factory function that returns an array of consts. Consts can be represented as a function in
case any additional statements are required to define consts in the list. An example is i18n
where additional i18n calls are generated, which should be executed when consts are requested
for the first time.\nTConstantsFactory = () => TConstants\n# TConstants type that describes how the `consts` field is generated on ComponentDef: it can be
either an array or a factory function that returns that array.\nTConstantsOrFactory = Union[TConstants, TConstantsFactory]\n# See `TNode.insertBeforeIndex`\nInsertBeforeIndex = List[Union[null, float, float]]\n# Maps the public names of outputs available on a specific node to the index
of the directive instance that defines the output, for example:
```
{
  "publicName": [0, 5]
}
```\nNodeOutputBindings = Record<string, number[]>\n# Maps the public names of inputs applied to a specific node to the index of the
directive instance to which the input value should be written, for example:
```
{
  "publicName": [0, 5]
}
```\nNodeInputBindings = Record<string, number[]>\n# This array contains information about input properties that
need to be set once from attribute data. It's ordered by
directive index (relative to element) so it's simple to
look up a specific directive's initial input data.
Within each sub-array:
i+0: public name
i+1: initial value
If a directive on a node does not have any input properties
that should be set from attributes, its index is set to null
to avoid a sparse array.
e.g. [null, ['role-min', 'minified-input', 'button']]\nInitialInputData = List[Union[(InitialInputs, null)]]\n# Used by InitialInputData to store input properties
that should be set once from attributes.
i+0: attribute name
i+1: minified/internal input name
i+2: input flags
i+3: initial value
e.g. ['role-min', 'minified-input', 'button']\nInitialInputs = List[str]\n# Represents inputs coming from a host directive and exposed on a TNode.
- The key is the public name of an input as it is exposed on the specific node.
- The value is an array where:
  - i+0: Index of the host directive that should be written to.
  - i+1: Public name of the input as it was defined on the host directive before aliasing.\nHostDirectiveInputs = Union[Record<string, (number, string)[]>]\n# Represents outputs coming from a host directive and exposed on a TNode.
- The key is the public name of an output as it is exposed on the specific node.
- The value is an array where:
  - i+0: Index of the host directive on which the output is defined..
  - i+1: Public name of the output as it was defined on the host directive before aliasing.\nHostDirectiveOutputs = Union[Record<string, (number, string)[]>]\n# Represents a map between a class reference and the index at which its directive is available on
a specific TNode. The value can be either:
  1. A number means that there's only one selector-matched directive on the node and it
     doesn't have any host directives.
  2. An array means that there's a selector-matched directive and it has host directives.
     The array is structured as follows:
       - 0: Index of the selector-matched directive.
       - 1: Start index of the range within which the host directives are defined.
       - 2: End of the host directive range.
Example:
```
Map {
  [NoHostDirectives]: 5,
  [HasHostDirectives]: [10, 6, 8],
}
```\nDirectiveIndexMap = Union[Map<Type<unknown>, number, [directiveIndex: number, hostDirectivesStart: number, hostDirectivesEnd: number]>]\n# Type representing a set of TNodes that can have local refs (`#foo`) placed on them.\nTNodeWithLocalRefs = Union[TContainerNode, TElementNode, TElementContainerNode]\n# Type for a function that extracts a value for a local refs.
Example:
- `<div #nativeDivEl>` - `nativeDivEl` should point to the native `<div>` element;
- `<ng-template #tplRef>` - `tplRef` should point to the `TemplateRef` instance;\nLocalRefExtractor = (tNode: TNodeWithLocalRefs, currentView: LView) => any\nInjectorScope = Union['root', 'platform', 'environment']\n# Definition of what a view queries function should look like.\nViewQueriesFunction = <U extends T>(rf: RenderFlags, ctx: U) => void\n# Definition of what a content queries function should look like.\nContentQueriesFunction = <U extends T>(rf: RenderFlags, ctx: U, directiveIndex: number) => void\n# Data produced after host directives are resolved for a node.\nHostDirectiveResolution = Union[[
    matches: DirectiveDef<unknown>[],
    hostDirectiveDefs: HostDirectiveDefs, null,
    hostDirectiveRanges: HostDirectiveRanges, null
]]\n# Map that tracks a selector-matched directive to the range within which its host directives
are declared. Host directives for a specific directive are always contiguous within the runtime.
Note that both the start and end are inclusive and they're both **after** `tNode.directiveStart`.\nHostDirectiveRanges = Map<DirectiveDef<unknown>, [start: number, end: number]>\n# Mapping between a directive that was used as a host directive
and the configuration that was used to define it as such.\nHostDirectiveDefs = Map<DirectiveDef<unknown>, HostDirectiveDef>\n# Value that can be used to configure a host directive.\nHostDirectiveConfig = Union[Type<unknown>, Dict[str, Any]]\n# Function that can be used to transform incoming input values.\nInputTransformFunction = (value: any) => any\n# Type used for directiveDefs on component definition.
The function is necessary to be able to support forward declarations.\nDirectiveDefListOrFactory = Union[(() => DirectiveDefList), DirectiveDefList]\nDirectiveDefList = List[Union[(DirectiveDef<any>, ComponentDef<any>)]]\nDependencyType = Union[DirectiveType<any>, ComponentType<any>, PipeType<any>, Type<any>]\nDependencyTypeList = List[DependencyType]\nTypeOrFactory = Union[T, (() => T)]\nHostBindingsFunction = <U extends T>(rf: RenderFlags, ctx: U) => void\n# Type used for PipeDefs on component definition.
The function is necessary to be able to support forward declarations.\nPipeDefListOrFactory = Union[(() => PipeDefList), PipeDefList]\nPipeDefList = List[PipeDef<any>]\n# The array element type passed to:
 - NgModule's annotation imports/exports/declarations fields
 - standalone component annotation imports field\nRawScopeInfoFromDecorator = List[Union[Type<any>, ModuleWithProviders<any>, (() => Type<any>), (() => ModuleWithProviders<any>), any]]\n# Describes the shape of a function generated by the compiler
to download dependencies that can be defer-loaded.\nDependencyResolverFn = () => Array<Promise<DependencyType>>\n# Configuration object for a loading block as it is stored in the component constants.\nDeferredLoadingBlockConfig = Union[[minimumTime: number, null, afterTime: number, null]]\n# Configuration object for a placeholder block as it is stored in the component constants.\nDeferredPlaceholderBlockConfig = Union[[minimumTime: number, null]]\n# Describes all possible hydration trigger details specified in a template.\nHydrateTriggerDetails = HydrateTimerTriggerDetails\nAfterRenderHook = (value?: unknown) => unknown\nAfterRenderHooks = Union[[
    AfterRenderHook, undefined,
    AfterRenderHook, undefined,
    AfterRenderHook, undefined,
    AfterRenderHook, undefined
]]\n# An effect can, optionally, register a cleanup function. If registered, the cleanup is executed
before the next effect run. The cleanup function makes it possible to "cancel" any work that the
previous effect run might have started.
@publicApi 20.0\nEffectCleanupFn = () => void\n# A callback passed to the effect function that makes it possible to register cleanup logic.
@publicApi 20.0\nEffectCleanupRegisterFn = (cleanupFn: EffectCleanupFn) => void\n# The goal here is to make sure that the browser DOM API is the Renderer.
We do this by defining a subset of DOM API to be the renderer and then
use that at runtime for rendering.
At runtime we can then use the DOM api directly, in server or web-worker
it will be easy to implement such API.\nGlobalTargetName = Union['document', 'window', 'body']\nGlobalTargetResolver = (element: any) => EventTarget\n# Single hook callback function.\nHookFn = () => void\n# Information necessary to call a hook. E.g. the callback that
needs to invoked and the index at which to find its context.\nHookEntry = Union[float, HookFn]\n# Array of hooks that should be executed for a view and their directive indices.
For each node of the view, the following data is stored:
1) Node index (optional)
2) A series of number/function pairs where:
 - even indices are directive indices
 - odd indices are hook functions
Special cases:
 - a negative directive index flags an init hook (ngOnInit, ngAfterContentInit, ngAfterViewInit)\nHookData = List[HookEntry]\n# Array of destroy hooks that should be executed for a view and their directive indices.
The array is set up as a series of number/function or number/(number|function)[]:
- Even indices represent the context with which hooks should be called.
- Odd indices are the hook functions themselves. If a value at an odd index is an array,
  it represents the destroy hooks of a `multi` provider where:
    - Even indices represent the index of the provider for which we've registered a destroy hook,
      inside of the `multi` provider array.
    - Odd indices are the destroy hook functions.
For example:
LView: `[0, 1, 2, AService, 4, [BService, CService, DService]]`
destroyHooks: `[3, AService.ngOnDestroy, 5, [0, BService.ngOnDestroy, 2, DService.ngOnDestroy]]`
In the example above `AService` is a type provider with an `ngOnDestroy`, whereas `BService`,
`CService` and `DService` are part of a `multi` provider where only `BService` and `DService`
have an `ngOnDestroy` hook.\nDestroyHookData = List[Union[(HookEntry, HookData)]]\n# Static data that corresponds to the instance-specific data array on an LView.
Each node's static data is stored in tData at the same index that it's stored
in the data array.  Any nodes that do not have static data store a null value in
tData to avoid a sparse array.
Each pipe's definition is stored here at the same index as its pipe instance in
the data array.
Each host property's name is stored here at the same index as its value in the
data array.
Each property binding name is stored here at the same index as its value in
the data array. If the binding is an interpolation, the static string values
are stored parallel to the dynamic values. Example:
id="prefix {{ v0 }} a {{ v1 }} b {{ v2 }} suffix"
LView       |   TView.data
------------------------
 v0 value   |   'a'
 v1 value   |   'b'
 v2 value   |   id � prefix � suffix
Injector bloom filters are also stored here.\nTData = List[Union[(TNode, PipeDef<any>, DirectiveDef<any>, ComponentDef<any>, float, TStylingRange, TStylingKey, ProviderToken<any>, TI18n, I18nUpdateOpCodes, TIcu, null, str, TDeferBlockDetails)]]\n# @publicApi\nɵɵDirectiveDeclaration = unknown\n# @publicApi\nɵɵComponentDeclaration = unknown\n# @publicApi\nɵɵNgModuleDeclaration = unknown\n# @publicApi\nɵɵPipeDeclaration = unknown\n# @publicApi\nɵɵInjectorDeclaration = unknown\n# @publicApi\nɵɵFactoryDeclaration = unknown\n# An object literal of this type is used to represent the metadata of a constructor dependency.
The type itself is never referred to from generated code.
@publicApi\nCtorDependency = Union[{
    /**
     * If an `@Attribute` decorator is used, this represents the injected attribute's name. If the
     * attribute name is a dynamic expression instead of a string literal, this will be the unknown
     * type.
     */
    attribute?: string, unknown;
    /**
     * If `@Optional()` is used, this key is set to true.
     */
    optional?: true;
    /**
     * If `@Host` is used, this key is set to true.
     */
    host?: true;
    /**
     * If `@Self` is used, this key is set to true.
     */
    self?: true;
    /**
     * If `@SkipSelf` is used, this key is set to true.
     */
    skipSelf?: true;
}, null]\n# A boolean-valued function over a value, possibly including context information
regarding that value's position in an array.
@publicApi\nPredicate = (value: T) => boolean\nNavigationTypeString = Union['reload', 'push', 'replace', 'traverse']\n# String value capturing the status of a `Resource`.
Possible statuses are:
`idle` - The resource has no valid request and will not perform any loading. `value()` will be
`undefined`.
`loading` - The resource is currently loading a new value as a result of a change in its reactive
dependencies. `value()` will be `undefined`.
`reloading` - The resource is currently reloading a fresh value for the same reactive
dependencies. `value()` will continue to return the previously fetched value during the reloading
operation.
`error` - Loading failed with an error. `value()` will be `undefined`.
`resolved` - Loading has completed and the resource has the value returned from the loader.
`local` - The resource's value was set locally via `.set()` or `.update()`.
@experimental\nResourceStatus = Union['idle', 'error', 'loading', 'reloading', 'resolved', 'local']\n# Loading function for a `Resource`.
@experimental\nResourceLoader = (param: ResourceLoaderParams<R>) => PromiseLike<T>\n# Streaming loader for a `Resource`.
@experimental\nResourceStreamingLoader = (param: ResourceLoaderParams<R>) => PromiseLike<Signal<ResourceStreamItem<T>>>\n# @experimental\nResourceOptions = Union[PromiseResourceOptions<T, R>, StreamingResourceOptions<T, R>]\n# @experimental\nResourceStreamItem = Union[Dict[str, Any], Dict[str, Any]]\n# Signal input options without the transform option.
@publicApi 19.0\nInputOptionsWithoutTransform = Omit<InputOptions<T, T>, 'transform'> & {
    transform?: undefined;
}\n# Signal input options with the transform option required.
@publicAPI\nInputOptionsWithTransform = Required<Pick<InputOptions<T, TransformT>, 'transform'>> & InputOptions<T, TransformT>\n# Retrieves the write type of an `InputSignal` and `InputSignalWithTransform`.\nɵUnwrapInputSignalWriteType = Field extends InputSignalWithTransform<any, infer WriteT> ? WriteT : never\n# Unwraps all `InputSignal`/`InputSignalWithTransform` class fields of
the given directive.\nɵUnwrapDirectiveSignalInputs = Dict[str, Any]\n# A source of providers for the `importProvidersFrom` function.
@publicApi\nImportProvidersSource = Union[Type$1<unknown>, ModuleWithProviders<unknown>, List[ImportProvidersSource]]\n# Internal type for a single provider in a deep provider array.\nSingleProvider = Union[TypeProvider, ValueProvider, ClassProvider, ConstructorProvider, ExistingProvider, FactoryProvider, StaticClassProvider]\n# Type of the ContentChildren metadata.
@Annotation
@publicApi\nContentChildren = Query\n# Type of the ContentChild metadata.
@publicApi\nContentChild = Query\n# Type of the ViewChildren metadata.
@publicApi\nViewChildren = Query\n# Type of the ViewChild metadata.
@publicApi\nViewChild = Query\n# A type describing supported iterable types.
@publicApi\nNgIterable = List[Union[T>, Iterable<T]]\n# Injectable providers used in `@Injectable` decorator.
@publicApi\nInjectableProvider = Union[ValueSansProvider, ExistingSansProvider, StaticClassSansProvider, ConstructorSansProvider, FactorySansProvider, ClassSansProvider]\n# An argument list containing the first non-never type in the given type array, or an empty
argument list if there are no non-never types in the type array.\nɵFirstAvailable = List[T extends [infer H, ...infer R] ? [H] extends [never] ? ɵFirstAvailable<R> : [H] :]\n# An argument list containing the first non-never type in the given type array, or an empty
argument list if there are no non-never types in the type array.\nɵFirstAvailableSignal = List[T extends [infer H, ...infer R] ? [H] extends [never] ? ɵFirstAvailableSignal<R> : [Signal<H>] :]\n# Map of inputs for a given directive/component.
Given:
```ts
class MyComponent {
  @Input()
  publicInput1: string;
  @Input('publicInput2')
  declaredInput2: string;
  @Input({transform: (value: boolean) => value ? 1 : 0})
  transformedInput3: number;
  signalInput = input(3);
}
```
is described as:
```ts
{
  publicInput1: 'publicInput1',
  declaredInput2: [InputFlags.None, 'declaredInput2', 'publicInput2'],
  transformedInput3: [
    InputFlags.None,
    'transformedInput3',
    'transformedInput3',
    (value: boolean) => value ? 1 : 0
  ],
  signalInput: [InputFlags.SignalBased, "signalInput"],
}
```
Which the minifier may translate to:
```ts
{
  minifiedPublicInput1: 'publicInput1',
  minifiedDeclaredInput2: [InputFlags.None, 'publicInput2', 'declaredInput2'],
  minifiedTransformedInput3: [
    InputFlags.None,
    'transformedInput3',
    'transformedInput3',
    (value: boolean) => value ? 1 : 0
  ],
  minifiedSignalInput: [InputFlags.SignalBased, "signalInput"],
}
```
This allows the render to re-construct the minified, public, and declared names
of properties.
NOTE:
 - Because declared and public name are usually same we only generate the array
   `['declared', 'public']` format when they differ, or there is a transform.
 - The reason why this API and `outputs` API is not the same is that `NgOnChanges` has
   inconsistent behavior in that it uses declared names rather than minified or public.\nDirectiveInputs = Union[{
    [P in keyof T]?: string, [
        flags: InputFlags,
        publicName: string,
        declaredName?: string,
        transform?: InputTransformFunction
    ];
}]\n# A type-safe key to use with `TransferState`.
Example:
```ts
const COUNTER_KEY = makeStateKey<number>('counter');
let value = 10;
transferState.set(COUNTER_KEY, value);
```
@publicApi\nStateKey = string & {
    __not_a_string: never;
    __value_type?: T;
}\nHydrationInfo = Union[{
    status: HydrationStatus.Hydrated, HydrationStatus.Skipped;
}, {
    status: HydrationStatus.Mismatched;
    actualNodeDetails: string, null;
    expectedNodeDetails: string, null;
}]\nHydratedNode = {
    [HYDRATION_INFO_KEY]?: HydrationInfo;
} & Element\n# All potential debug metadata types across all frameworks.\nDirectiveDebugMetadata = Union[AngularDirectiveDebugMetadata, AcxDirectiveDebugMetadata, AngularComponentDebugMetadata, AcxComponentDebugMetadata, WizComponentDebugMetadata]\n# !
@license
Copyright Google LLC All Rights Reserved.
Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://angular.dev/license Represents `import.meta` plus some information that's not in the built-in types.\nImportMetaExtended = ImportMeta & {
    hot?: {
        send?: (name: string, payload: unknown) => void;
    };
}\nType = Function\nOpaqueValue = unknown\nLegacyInputPartialMapping = Union[str, [bindingPropertyName: string, classPropertyName: string, transformFunction?: Function]]\nR3DeclareTemplateDependencyFacade = Union[{
    kind: string;
} & (R3DeclareDirectiveDependencyFacade, R3DeclarePipeDependencyFacade, R3DeclareNgModuleDependencyFacade)]\nChangeDetectionStrategy = float\nExternalGlobalUtilsFunctions = keyof NgGlobalPublishUtils\n# Defines the framework-agnostic `ng` global type, not just the `@angular/core` implementation.
`typeof globalUtilsFunctions` is specifically the `@angular/core` implementation, so we
overwrite some properties to make them more framework-agnostic. Longer term, we should define
the `ng` global type as an interface implemented by `globalUtilsFunctions` rather than a type
derived from it.\nFrameworkAgnosticGlobalUtils = Union[Omit<typeof globalUtilsFunctions, 'getDirectiveMetadata'> & {
    getDirectiveMetadata(directiveOrComponentInstance: any): DirectiveDebugMetadata, null;
}]\n# Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\nNzSafeAny = any\n# Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\nFunctionProp = (...args: NzSafeAny[]) => T\n# Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\nNzDirectionVHType = Union['vertical', 'horizontal']\nNzFourDirectionType = Union['top', 'bottom', 'left', 'right']\n# Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\nNgClassType = Union[str, List[str], NgClassInterface]\n# Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\nNzSizeLDSType = Union['large', 'default', 'small']\nNzSizeLMSType = Union['large', 'middle', 'small']\nNzSizeMDSType = Union['middle', 'default', 'small']\nNzSizeDSType = Union['default', 'small']\n# Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE A joined type of string and `TemplateRef<void>`.\nNzTSType = Union[str, TemplateRef<void>]\n# Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\nNzShapeSCType = Union['square', 'circle']\n# Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\nCompareWith = (o1: NzSafeAny, o2: NzSafeAny) => boolean\n# Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\nOnTouchedType = () => NzSafeAny\nOnChangeType = (value: NzSafeAny) => void\n# Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\nBooleanInput = Union[bool, str, undefined, null]\nNumberInput = Union[float, str, undefined, null]\n# Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\nNzStatus = Union['', 'error', 'warning']\nNzValidateStatus = Union['', 'success', 'warning', 'error', 'validating']\n# Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\nNzVariant = Union['outlined', 'filled', 'borderless', 'underlined']\nNumberSymbol = (typeof NumberSymbol)[keyof typeof NumberSymbol]\n# Represents an image loader function. Image loader functions are used by the
NgOptimizedImage directive to produce full image URL based on the image name and its width.
@publicApi\nImageLoader = (config: ImageLoaderConfig) => string\n# How to handle a navigation request to the current URL. One of:
- `'ignore'` : The router ignores the request if it is the same as the current state.
- `'reload'` : The router processes the URL even if it is not different from the current state.
One example of when you might want to use this option is if a `canMatch` guard depends on the
application state and initially rejects navigation to a route. After fixing the state, you want
to re-navigate to the same URL so that the route with the `canMatch` guard can activate.
Note that this only configures whether or not the Route reprocesses the URL and triggers related
actions and events like redirects, guards, and resolvers. By default, the router re-uses a
component instance when it re-navigates to the same component type without visiting a different
component first. This behavior is configured by the `RouteReuseStrategy`. In order to reload
routed components on same url navigation, you need to set `onSameUrlNavigation` to `'reload'`
_and_ provide a `RouteReuseStrategy` which returns `false` for `shouldReuseRoute`. Additionally,
resolvers and most guards for routes do not run unless the path or path params have changed
(configured by `runGuardsAndResolvers`).
@publicApi
@see {@link RouteReuseStrategy}
@see {@link RunGuardsAndResolvers}
@see {@link NavigationBehaviorOptions}
@see {@link RouterConfigOptions}\nOnSameUrlNavigation = Union['reload', 'ignore']\n# The `InjectionToken` and `@Injectable` classes for guards are deprecated in favor
of plain JavaScript functions instead. Dependency injection can still be achieved using the
[`inject`](api/core/inject) function from `@angular/core` and an injectable class can be used as
a functional guard using [`inject`](api/core/inject): `canActivate: [() =>
inject(myGuard).canActivate()]`.
@deprecated
@see {@link CanMatchFn}
@see {@link CanLoadFn}
@see {@link CanActivateFn}
@see {@link CanActivateChildFn}
@see {@link CanDeactivateFn}
@see {@link /api/core/inject inject}
@publicApi\nDeprecatedGuard = Union[ProviderToken<any>, str]\n# The `InjectionToken` and `@Injectable` classes for resolvers are deprecated in favor
of plain JavaScript functions instead. Dependency injection can still be achieved using the
[`inject`](api/core/inject) function from `@angular/core` and an injectable class can be used as
a functional guard using [`inject`](api/core/inject): `myResolvedData: () => inject(MyResolver).resolve()`.
@deprecated
@see {@link ResolveFn}
@see {@link /api/core/inject inject}
@publicApi\nDeprecatedResolve = Union[DeprecatedGuard, any]\n# The supported types that can be returned from a `Router` guard.
@see [Routing guide](guide/routing/common-router-tasks#preventing-unauthorized-access)
@publicApi\nGuardResult = Union[bool, UrlTree, RedirectCommand]\n# Type used to represent a value which may be synchronous or async.
@publicApi\nMaybeAsync = Union[T, Observable<T>, Promise<T>]\n# Represents a route configuration for the Router service.
An array of `Route` objects, used in `Router.config` and for nested route configurations
in `Route.children`.
@see {@link Route}
@see {@link Router}
@see [Router configuration guide](guide/routing/router-reference#configuration)
@publicApi\nRoutes = List[Route]\n# A function for matching a route against URLs. Implement a custom URL matcher
for `Route.matcher` when a combination of `path` and `pathMatch`
is not expressive enough. Cannot be used together with `path` and `pathMatch`.
The function takes the following arguments and returns a `UrlMatchResult` object.
* *segments* : An array of URL segments.
* *group* : A segment group.
* *route* : The route to match against.
The following example implementation matches HTML files.
```ts
export function htmlFiles(url: UrlSegment[]) {
  return url.length === 1 && url[0].path.endsWith('.html') ? ({consumed: url}) : null;
}
export const routes = [{ matcher: htmlFiles, component: AnyComponent }];
```
@publicApi\nUrlMatcher = Union[(segments: UrlSegment[], group: UrlSegmentGroup, route: Route) => UrlMatchResult, null]\n# A function that is called to resolve a collection of lazy-loaded routes.
Must be an arrow function of the following form:
`() => import('...').then(mod => mod.MODULE)`
or
`() => import('...').then(mod => mod.ROUTES)`
For example:
```ts
[{
  path: 'lazy',
  loadChildren: () => import('./lazy-route/lazy.module').then(mod => mod.LazyModule),
}];
```
or
```ts
[{
  path: 'lazy',
  loadChildren: () => import('./lazy-route/lazy.routes').then(mod => mod.ROUTES),
}];
```
If the lazy-loaded routes are exported via a `default` export, the `.then` can be omitted:
```ts
[{
  path: 'lazy',
  loadChildren: () => import('./lazy-route/lazy.routes'),
}];
```
@see {@link Route#loadChildren}
@publicApi\nLoadChildrenCallback = Union[() => Type<any>, NgModuleFactory<any>, Routes, Observable<Type<any>, Routes, DefaultExport<Type<any>>, DefaultExport<Routes>>, Promise<NgModuleFactory<any>, Type<any>, Routes, DefaultExport<Type<any>>, DefaultExport<Routes>>]\n# A function that returns a set of routes to load.
@see {@link LoadChildrenCallback}
@publicApi\nLoadChildren = LoadChildrenCallback\n# How to handle query parameters in a router link.
One of:
- `"merge"` : Merge new parameters with current parameters.
- `"preserve"` : Preserve current parameters.
- `"replace"` : Replace current parameters with new parameters. This is the default behavior.
- `""` : For legacy reasons, the same as `'replace'`.
@see {@link UrlCreationOptions#queryParamsHandling}
@see {@link RouterLink}
@publicApi\nQueryParamsHandling = Union['merge', 'preserve', 'replace', '']\n# The type for the function that can be used to handle redirects when the path matches a `Route` config.
The `RedirectFunction` does _not_ have access to the full
`ActivatedRouteSnapshot` interface. Some data are not accurately known
at the route matching phase. For example, resolvers are not run until
later, so any resolved title would not be populated. The same goes for lazy
loaded components. This is also true for all the snapshots up to the
root, so properties that include parents (root, parent, pathFromRoot)
are also excluded. And naturally, the full route matching hasn't yet
happened so firstChild and children are not available either.
@see {@link Route#redirectTo}
@publicApi\nRedirectFunction = Union[(redirectData: Pick<ActivatedRouteSnapshot, 'routeConfig', 'url', 'params', 'queryParams', 'fragment', 'data', 'outlet', 'title'>) => MaybeAsync<string, UrlTree>]\n# A policy for when to run guards and resolvers on a route.
Guards and/or resolvers will always run when a route is activated or deactivated. When a route is
unchanged, the default behavior is the same as `paramsChange`.
`paramsChange` : Rerun the guards and resolvers when path or
path param changes. This does not include query parameters. This option is the default.
- `always` : Run on every execution.
- `pathParamsChange` : Rerun guards and resolvers when the path params
change. This does not compare matrix or query parameters.
- `paramsOrQueryParamsChange` : Run when path, matrix, or query parameters change.
- `pathParamsOrQueryParamsChange` : Rerun guards and resolvers when the path params
change or query params have changed. This does not include matrix parameters.
@see {@link Route#runGuardsAndResolvers}
@publicApi\nRunGuardsAndResolvers = Union['pathParamsChange', 'pathParamsOrQueryParamsChange', 'paramsChange', 'paramsOrQueryParamsChange', 'always', ((from: ActivatedRouteSnapshot, to: ActivatedRouteSnapshot) => boolean)]\n# The signature of a function used as a `canActivate` guard on a `Route`.
If all guards return `true`, navigation continues. If any guard returns `false`,
navigation is cancelled. If any guard returns a `UrlTree`, the current navigation
is cancelled and a new navigation begins to the `UrlTree` returned from the guard.
The following example implements and uses a `CanActivateFn` that checks whether the
current user has permission to activate the requested route.
```ts
@Injectable()
class UserToken {}
@Injectable()
class PermissionsService {
  canActivate(currentUser: UserToken, userId: string): boolean {
    return true;
  }
  canMatch(currentUser: UserToken): boolean {
    return true;
  }
}
const canActivateTeam: CanActivateFn = (
  route: ActivatedRouteSnapshot,
  state: RouterStateSnapshot,
) => {
  return inject(PermissionsService).canActivate(inject(UserToken), route.params['id']);
};
```
Here, the defined guard function is provided as part of the `Route` object
in the router configuration:
```ts
bootstrapApplication(App, {
   providers: [
     provideRouter([
       {
         path: 'team/:id',
         component: TeamComponent,
         canActivate: [canActivateTeam],
       },
     ]),
   ],
 });
```
@publicApi
@see {@link Route}\nCanActivateFn = (route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => MaybeAsync<GuardResult>\n# The signature of a function used as a `canActivateChild` guard on a `Route`.
If all guards return `true`, navigation continues. If any guard returns `false`,
navigation is cancelled. If any guard returns a `UrlTree`, the current navigation
is cancelled and a new navigation begins to the `UrlTree` returned from the guard.
The following example implements a `canActivate` function that checks whether the
current user has permission to activate the requested route.
{@example router/route_functional_guards.ts region="CanActivateChildFn"}
@publicApi
@see {@link Route}\nCanActivateChildFn = (childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot) => MaybeAsync<GuardResult>\n# The signature of a function used as a `canDeactivate` guard on a `Route`.
If all guards return `true`, navigation continues. If any guard returns `false`,
navigation is cancelled. If any guard returns a `UrlTree`, the current navigation
is cancelled and a new navigation begins to the `UrlTree` returned from the guard.
The following example implements and uses a `CanDeactivateFn` that checks whether the
user component has unsaved changes before navigating away from the route.
{@example router/route_functional_guards.ts region="CanDeactivateFn"}
@publicApi
@see {@link Route}\nCanDeactivateFn = (component: T, currentRoute: ActivatedRouteSnapshot, currentState: RouterStateSnapshot, nextState: RouterStateSnapshot) => MaybeAsync<GuardResult>\n# The signature of a function used as a `canMatch` guard on a `Route`.
If all guards return `true`, navigation continues and the `Router` will use the `Route` during
activation. If any guard returns `false`, the `Route` is skipped for matching and other `Route`
configurations are processed instead.
The following example implements and uses a `CanMatchFn` that checks whether the
current user has permission to access the team page.
{@example router/route_functional_guards.ts region="CanMatchFn"}
@param route The route configuration.
@param segments The URL segments that have not been consumed by previous parent route evaluations.
@publicApi
@see {@link Route}\nCanMatchFn = (route: Route, segments: UrlSegment[]) => MaybeAsync<GuardResult>\n# Function type definition for a data provider.
A data provider can be used with the router to resolve data during navigation.
The router waits for the data to be resolved before the route is finally activated.
A resolver can also redirect a `RedirectCommand` and the Angular router will use
it to redirect the current navigation to the new destination.
@usageNotes
The following example implements a function that retrieves the data
needed to activate the requested route.
```ts
interface Hero {
  name: string;
}
@Injectable()
export class HeroService {
  getHero(id: string) {
    return {name: `Superman-${id}`};
  }
}
export const heroResolver: ResolveFn<Hero> = (
  route: ActivatedRouteSnapshot,
  state: RouterStateSnapshot,
) => {
  return inject(HeroService).getHero(route.paramMap.get('id')!);
};
bootstrapApplication(App, {
  providers: [
    provideRouter([
      {
        path: 'detail/:id',
        component: HeroDetailComponent,
        resolve: {hero: heroResolver},
      },
    ]),
  ],
});
```
And you can access to your resolved data from `HeroComponent`:
```ts
@Component({template: ''})
export class HeroDetailComponent {
  private activatedRoute = inject(ActivatedRoute);
  ngOnInit() {
    this.activatedRoute.data.subscribe(({hero}) => {
      // do something with your resolved data ...
    });
  }
}
```
If resolved data cannot be retrieved, you may want to redirect the user
to a new page instead:
```ts
export const heroResolver: ResolveFn<Hero> = async (
  route: ActivatedRouteSnapshot,
  state: RouterStateSnapshot,
) => {
  const router = inject(Router);
  const heroService = inject(HeroService);
  try {
    return await heroService.getHero(route.paramMap.get('id')!);
  } catch {
    return new RedirectCommand(router.parseUrl('/404'));
  }
};
```
When both guard and resolvers are specified, the resolvers are not executed until
all guards have run and succeeded.
For example, consider the following route configuration:
```ts
{
 path: 'base'
 canActivate: [baseGuard],
 resolve: {data: baseDataResolver}
 children: [
  {
    path: 'child',
    canActivate: [childGuard],
    component: ChildComponent,
    resolve: {childData: childDataResolver}
   }
 ]
}
```
The order of execution is: baseGuard, childGuard, baseDataResolver, childDataResolver.
@publicApi
@see {@link Route}\nResolveFn = Union[(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) => MaybeAsync<T, RedirectCommand>]\n# The signature of a function used as a `canLoad` guard on a `Route`.
@publicApi
@see {@link CanLoad}
@see {@link Route}
@see {@link CanMatch}
@deprecated Use `Route.canMatch` and `CanMatchFn` instead\nCanLoadFn = (route: Route, segments: UrlSegment[]) => MaybeAsync<GuardResult>\n# Identifies the call or event that triggered a navigation.
* 'imperative': Triggered by `router.navigateByUrl()` or `router.navigate()`.
* 'popstate' : Triggered by a `popstate` event.
* 'hashchange'-: Triggered by a `hashchange` event.
@publicApi\nNavigationTrigger = Union['imperative', 'popstate', 'hashchange']\n# Router events that allow you to track the lifecycle of the router.
The events occur in the following sequence:
* [NavigationStart](api/router/NavigationStart): Navigation starts.
* [RouteConfigLoadStart](api/router/RouteConfigLoadStart): Before
the router [lazy loads](guide/routing/common-router-tasks#lazy-loading) a route configuration.
* [RouteConfigLoadEnd](api/router/RouteConfigLoadEnd): After a route has been lazy loaded.
* [RoutesRecognized](api/router/RoutesRecognized): When the router parses the URL
and the routes are recognized.
* [GuardsCheckStart](api/router/GuardsCheckStart): When the router begins the *guards*
phase of routing.
* [ChildActivationStart](api/router/ChildActivationStart): When the router
begins activating a route's children.
* [ActivationStart](api/router/ActivationStart): When the router begins activating a route.
* [GuardsCheckEnd](api/router/GuardsCheckEnd): When the router finishes the *guards*
phase of routing successfully.
* [ResolveStart](api/router/ResolveStart): When the router begins the *resolve*
phase of routing.
* [ResolveEnd](api/router/ResolveEnd): When the router finishes the *resolve*
phase of routing successfully.
* [ChildActivationEnd](api/router/ChildActivationEnd): When the router finishes
activating a route's children.
* [ActivationEnd](api/router/ActivationEnd): When the router finishes activating a route.
* [NavigationEnd](api/router/NavigationEnd): When navigation ends successfully.
* [NavigationCancel](api/router/NavigationCancel): When navigation is canceled.
* [NavigationError](api/router/NavigationError): When navigation fails
due to an unexpected error.
* [Scroll](api/router/Scroll): When the user scrolls.
@publicApi\nEvent = Union[NavigationStart, NavigationEnd, NavigationCancel, NavigationError, RoutesRecognized, GuardsCheckStart, GuardsCheckEnd, RouteConfigLoadStart, RouteConfigLoadEnd, ChildActivationStart, ChildActivationEnd, ActivationStart, ActivationEnd, Scroll, ResolveStart, ResolveEnd, NavigationSkipped]\n# Allowed values in an `ExtraOptions` object that configure
when the router performs the initial navigation operation.
* 'enabledNonBlocking' - (default) The initial navigation starts after the
root component has been created. The bootstrap is not blocked on the completion of the initial
navigation.
* 'enabledBlocking' - The initial navigation starts before the root component is created.
The bootstrap is blocked until the initial navigation is complete. This value should be set in
case you use [server-side rendering](guide/ssr), but do not enable [hydration](guide/hydration)
for your application.
* 'disabled' - The initial navigation is not performed. The location listener is set up before
the root component gets created. Use if there is a reason to have
more control over when the router starts its initial navigation due to some complex
initialization logic.
@see {@link /api/router/RouterModule#forRoot forRoot}
@publicApi\nInitialNavigation = Union['disabled', 'enabledBlocking', 'enabledNonBlocking']\n# Set of config options available during the application bootstrap operation.
@publicApi
@deprecated
`ApplicationConfig` has moved, please import `ApplicationConfig` from `@angular/core` instead.\nApplicationConfig = ApplicationConfig$1\n# Union type for all possible events on the response stream.
Typed according to the expected type of the response.
@publicApi\nHttpEvent = Union[HttpSentEvent, HttpHeaderResponse, HttpResponse<T>, HttpProgressEvent, HttpUserEvent<T>]\n# Represents the next interceptor in an interceptor chain, or the real backend if there are no
further interceptors.
Most interceptors will delegate to this function, and either modify the outgoing request or the
response when it arrives. Within the scope of the current request, however, this function may be
called any number of times, for any number of downstream requests. Such downstream requests need
not be to the same URL or even the same origin as the current request. It is also valid to not
call the downstream handler at all, and process the current request entirely within the
interceptor.
This function should only be called within the scope of the request that's currently being
intercepted. Once that request is complete, this downstream handler function should not be
called.
@publicApi
@see [HTTP Guide](guide/http/interceptors)\nHttpHandlerFn = (req: HttpRequest<unknown>) => Observable<HttpEvent<unknown>>\n# An interceptor for HTTP requests made via `HttpClient`.
`HttpInterceptorFn`s are middleware functions which `HttpClient` calls when a request is made.
These functions have the opportunity to modify the outgoing request or any response that comes
back, as well as block, redirect, or otherwise change the request or response semantics.
An `HttpHandlerFn` representing the next interceptor (or the backend which will make a real HTTP
request) is provided. Most interceptors will delegate to this function, but that is not required
(see `HttpHandlerFn` for more details).
`HttpInterceptorFn`s are executed in an [injection context](guide/di/dependency-injection-context).
They have access to `inject()` via the `EnvironmentInjector` from which they were configured.
@see [HTTP Guide](guide/http/interceptors)
@see {@link withInterceptors}
@usageNotes
Here is a noop interceptor that passes the request through without modifying it:
```ts
export const noopInterceptor: HttpInterceptorFn = (req: HttpRequest<unknown>, next:
HttpHandlerFn) => {
  return next(modifiedReq);
};
```
If you want to alter a request, clone it first and modify the clone before passing it to the
`next()` handler function.
Here is a basic interceptor that adds a bearer token to the headers
```ts
export const authenticationInterceptor: HttpInterceptorFn = (req: HttpRequest<unknown>, next:
HttpHandlerFn) => {
   const userToken = 'MY_TOKEN'; const modifiedReq = req.clone({
     headers: req.headers.set('Authorization', `Bearer ${userToken}`),
   });
   return next(modifiedReq);
};
```\nHttpInterceptorFn = (req: HttpRequest<unknown>, next: HttpHandlerFn) => Observable<HttpEvent<unknown>>\n# Represents the attributes of an HTML `<meta>` element. The element itself is
represented by the internal `HTMLMetaElement`.
@see [HTML meta tag](https://developer.mozilla.org/docs/Web/HTML/Element/meta)
@see {@link Meta}
@publicApi\nMetaDefinition = Dict[str, Any]\n# Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.
@publicApi
@deprecated The hammerjs integration is deprecated. Replace it by your own implementation.\nHammerLoader = () => Promise<void>\n# A type alias for providers returned by `withInMemoryScrolling` for use with `provideRouter`.
@see {@link withInMemoryScrolling}
@see {@link provideRouter}
@publicApi\nInMemoryScrollingFeature = RouterFeature<RouterFeatureKind.InMemoryScrollingFeature>\n# A type alias for providers returned by `withEnabledBlockingInitialNavigation` for use with
`provideRouter`.
@see {@link withEnabledBlockingInitialNavigation}
@see {@link provideRouter}
@publicApi\nEnabledBlockingInitialNavigationFeature = RouterFeature<RouterFeatureKind.EnabledBlockingInitialNavigationFeature>\n# A type alias for providers returned by `withEnabledBlockingInitialNavigation` or
`withDisabledInitialNavigation` functions for use with `provideRouter`.
@see {@link withEnabledBlockingInitialNavigation}
@see {@link withDisabledInitialNavigation}
@see {@link provideRouter}
@publicApi\nInitialNavigationFeature = Union[EnabledBlockingInitialNavigationFeature, DisabledInitialNavigationFeature]\n# A type alias for providers returned by `withDisabledInitialNavigation` for use with
`provideRouter`.
@see {@link withDisabledInitialNavigation}
@see {@link provideRouter}
@publicApi\nDisabledInitialNavigationFeature = RouterFeature<RouterFeatureKind.DisabledInitialNavigationFeature>\n# A type alias for providers returned by `withDebugTracing` for use with `provideRouter`.
@see {@link withDebugTracing}
@see {@link provideRouter}
@publicApi\nDebugTracingFeature = RouterFeature<RouterFeatureKind.DebugTracingFeature>\n# A type alias that represents a feature which enables preloading in Router.
The type is used to describe the return value of the `withPreloading` function.
@see {@link withPreloading}
@see {@link provideRouter}
@publicApi\nPreloadingFeature = RouterFeature<RouterFeatureKind.PreloadingFeature>\n# A type alias for providers returned by `withRouterConfig` for use with `provideRouter`.
@see {@link withRouterConfig}
@see {@link provideRouter}
@publicApi\nRouterConfigurationFeature = RouterFeature<RouterFeatureKind.RouterConfigurationFeature>\n# A type alias for providers returned by `withHashLocation` for use with `provideRouter`.
@see {@link withHashLocation}
@see {@link provideRouter}
@publicApi\nRouterHashLocationFeature = RouterFeature<RouterFeatureKind.RouterHashLocationFeature>\n# A type alias for providers returned by `withNavigationErrorHandler` for use with `provideRouter`.
@see {@link withNavigationErrorHandler}
@see {@link provideRouter}
@publicApi\nNavigationErrorHandlerFeature = RouterFeature<RouterFeatureKind.NavigationErrorHandlerFeature>\n# A type alias for providers returned by `withComponentInputBinding` for use with `provideRouter`.
@see {@link withComponentInputBinding}
@see {@link provideRouter}
@publicApi\nComponentInputBindingFeature = RouterFeature<RouterFeatureKind.ComponentInputBindingFeature>\n# A type alias for providers returned by `withViewTransitions` for use with `provideRouter`.
@see {@link withViewTransitions}
@see {@link provideRouter}
@publicApi\nViewTransitionsFeature = RouterFeature<RouterFeatureKind.ViewTransitionsFeature>\n# A type alias that represents all Router features available for use with `provideRouter`.
Features can be enabled by adding special functions to the `provideRouter` call.
See documentation for each symbol to find corresponding function name. See also `provideRouter`
documentation on how to use those functions.
@see {@link provideRouter}
@publicApi\nRouterFeatures = Union[PreloadingFeature, DebugTracingFeature, InitialNavigationFeature, InMemoryScrollingFeature, RouterConfigurationFeature, NavigationErrorHandlerFeature, ComponentInputBindingFeature, ViewTransitionsFeature, RouterHashLocationFeature]\n# Modifier keys handled by the ListKeyManager.\nListKeyManagerModifierKey = Union['altKey', 'ctrlKey', 'metaKey', 'shiftKey']\nFocusOrigin = Union['touch', 'mouse', 'keyboard', 'program', null]\nTreeKeyManagerFactory = Union[(items: Observable<T[]>, QueryList<T>, T[], options: TreeKeyManagerOptions<T>) => TreeKeyManagerStrategy<T>]\n# Type describing the allowed values for a number input
@docs-private\nNumberInput = Union[str, float, null, undefined]\n# Possible politeness levels.\nAriaLivePoliteness = Union['off', 'polite', 'assertive']\n# The input modalities detected by this service. Null is used if the input modality is unknown.\nInputModality = Union['keyboard', 'mouse', 'touch', null]\nDirection = Union['ltr', 'rtl']\nThemeType = Union['fill', 'outline', 'twotone']\nDelta = Point\nEasyingFn = (t: number, b: number, c: number, d: number) => number\nBreakpointMap = Record<NzBreakpointEnum, string>\nBreakpointBooleanMap = Record<NzBreakpointEnum, boolean>\nNzBreakpointKey = keyof typeof NzBreakpointEnum\nPreloadDisposeHandle = () => void\nNzConfigKey = keyof NzConfig\n# Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\nNzTabPosition = Union['top', 'bottom', 'left', 'right']\nNzTabType = Union['line', 'card', 'editable-card']\nNzTabsCanDeactivateFn = Union[(fromIndex: number, toIndex: number) => Observable<boolean>, Promise<boolean>, bool]\nNzTabPositionMode = Union['horizontal', 'vertical']\nNzTabScrollListOffsetEvent = NzTabScrollListOffset & {
    event: Event;
}\nNzTabScrollEvent = Union[NzTabTouchScrollEvent, NzTabWheelScrollEvent]\nNzTabScrollEventHandlerFun = (event: T) => void\n# Generated by dts-bundle-generator v9.5.1\nMarkedToken = Union[(Tokens.Blockquote, Tokens.Br, Tokens.Code, Tokens.Codespan, Tokens.Def, Tokens.Del, Tokens.Em, Tokens.Escape, Tokens.Heading, Tokens.Hr, Tokens.HTML, Tokens.Image, Tokens.Link, Tokens.List, Tokens.ListItem, Tokens.Paragraph, Tokens.Space, Tokens.Strong, Tokens.Table, Tokens.Tag, Tokens.Text)]\nToken = Union[(MarkedToken, Tokens.Generic)]\nLinks = Union[Record<string, Pick<Tokens.Link, Tokens.Image, "href", "title">>]\nTokensList = Token[] & {
	links: Links;
}\nBlockKeys = keyof typeof blockNormal\nInlineKeys = keyof typeof inlineNormal\nTokenizerExtensionFunction = Union[List[(this: TokenizerThis, src: string, tokens: Token], TokensList) => Tokens.Generic, undefined]\nTokenizerStartFunction = Union[(this: TokenizerThis, src: string) => number, void]\nRendererExtensionFunction = Union[(this: RendererThis<ParserOutput, RendererOutput>, token: Tokens.Generic) => RendererOutput, false, undefined]\nTokenizerAndRendererExtension = Union[TokenizerExtension, RendererExtension<ParserOutput, RendererOutput>, (TokenizerExtension & RendererExtension<ParserOutput, RendererOutput>)]\nHooksApi = Union[Omit<_Hooks<ParserOutput, RendererOutput>, "constructor", "options", "block">]\nHooksObject = Union[{
	[K in keyof HooksApi<ParserOutput, RendererOutput>]?: (this: _Hooks<ParserOutput, RendererOutput>, ...args: Parameters<HooksApi<ParserOutput, RendererOutput>[K]>) => ReturnType<HooksApi<ParserOutput, RendererOutput>[K]>, Promise<ReturnType<HooksApi<ParserOutput, RendererOutput>[K]>>;
}]\nRendererApi = Union[Omit<_Renderer<ParserOutput, RendererOutput>, "constructor", "options", "parser">]\nRendererObject = Union[{
	[K in keyof RendererApi<ParserOutput, RendererOutput>]?: (this: _Renderer<ParserOutput, RendererOutput>, ...args: Parameters<RendererApi<ParserOutput, RendererOutput>[K]>) => ReturnType<RendererApi<ParserOutput, RendererOutput>[K]>, false;
}]\nTokenizerApi = Union[Omit<_Tokenizer<ParserOutput, RendererOutput>, "constructor", "options", "rules", "lexer">]\nTokenizerObject = Union[{
	[K in keyof TokenizerApi<ParserOutput, RendererOutput>]?: (this: _Tokenizer<ParserOutput, RendererOutput>, ...args: Parameters<TokenizerApi<ParserOutput, RendererOutput>[K]>) => ReturnType<TokenizerApi<ParserOutput, RendererOutput>[K]>, false;
}]\nMaybePromise = Union[void, Promise<void>]\n# renderMathInElement options contain KaTeX render options and renderMathInElement specific options\nKatexOptions = KatexSpecificOptions & RenderMathInElementSpecificOptions\nMarkdownPipeOptions = ParseOptions & RenderOptions\nInjectionTokenType = T extends InjectionToken<infer R> ? R : unknown\nTypedProvider = Union[TypedValueProvider<T>, TypedFactoryProvider<T>]\nMultiTypedProvider = TypedProvider<T> & {
    multi: true;
}\n# Use of this source code is governed by an MIT-style license that can be
found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\nNzSpaceDirection = Union['vertical', 'horizontal']\nNzSpaceAlign = Union['start', 'end', 'center', 'baseline']\nNzSpaceType = Union['small', 'middle', 'large']\nNzSpaceSize = Union[NzSpaceType, float]\nNzButtonType = Union['primary', 'default', 'dashed', 'link', 'text', null]\nNzButtonShape = Union['circle', 'round', null]\nNzButtonSize = NzSizeLDSType\nMdContent = str\n# ! MdCodeContent 需要手动加上 ```[语言类型]...```\nMdCodeContent = str\n# ! CodeContent 不需要\nCodeContent = str\nJSONStr = str\nCodeLanguage = 'c_cpp'\nSubmitScoreStatus = Union['not-submitted', 'not-passed', 'passed', 'full-score']\nAssignTransProps = Union[Omit<AssignData, 'assignOriginalCode', 'submit'> & {
  assignOriginalCode: JSONStr
  testSample: string
  ddl: string
}]\nAllCourse = Omit<TodoCourse, 'assigment'> & {
  completed: boolean
  assignment?: AssignmentListItem[]
}\nCourseTransProps = Omit<AllCourse, 'assignment'> & {
  assignmentIds: string // 逗号分隔
}\n_AbortController = typeof globalThis extends { onmessage: any } ? {} : AbortController\n_AbortSignal = typeof globalThis extends { onmessage: any } ? {} : AbortSignal\n_DOMException = typeof globalThis extends { onmessage: any } ? {} : DOMException\n_CustomEvent = typeof globalThis extends { onmessage: any } ? {} : CustomEvent<T>\n_Event = typeof globalThis extends { onmessage: any } ? {} : Event\n_EventTarget = typeof globalThis extends { onmessage: any } ? {} : EventTarget\n# The header type declaration of `undici`.\nIncomingHttpHeaders = Union[Record<string, string, List[str], undefined>]\nRequestInfo = Union[str, URL, Request]\nBodyInit = Union[ArrayBuffer, AsyncIterable<Uint8Array>, Blob, FormData, Iterable<Uint8Array>, NodeJS.ArrayBufferView, URLSearchParams, null, str]\nHeadersInit = Union[List[List[str]], Record<string, string, ReadonlyArray<string>>, Headers]\nRequestCache = Union['default', 'force-cache', 'no-cache', 'no-store', 'only-if-cached', 'reload']\nRequestCredentials = Union['omit', 'include', 'same-origin']\nRequestDestination = Union['', 'audio', 'audioworklet', 'document', 'embed', 'font', 'image', 'manifest', 'object', 'paintworklet', 'report', 'script', 'sharedworker', 'style', 'track', 'video', 'worker', 'xslt']\nReferrerPolicy = Union['', 'no-referrer', 'no-referrer-when-downgrade', 'origin', 'origin-when-cross-origin', 'same-origin', 'strict-origin', 'strict-origin-when-cross-origin', 'unsafe-url']\nRequestMode = Union['cors', 'navigate', 'no-cors', 'same-origin']\nRequestRedirect = Union['error', 'follow', 'manual']\nRequestDuplex = 'half'\nResponseType = Union['basic', 'cors', 'default', 'error', 'opaque', 'opaqueredirect']\nResponseRedirectStatus = Union[301, 302, 303, 307, 308]\n# A `string` or `File` that represents a single value from a set of `FormData` key-value pairs.\nFormDataEntryValue = Union[str, File]\nClientConnectOptions = Omit<Dispatcher.ConnectOptions, "origin">\nAbortSignal = unknown\nPoolConnectOptions = Omit<Dispatcher.ConnectOptions, "origin">\nBalancedPoolConnectOptions = Omit<Dispatcher.ConnectOptions, "origin">\n# / <reference types="node" /> See https://github.com/nodejs/undici/issues/1740\nDOMException = typeof globalThis extends { DOMException: infer T }
 ? T
 : any\nEventListenerOrEventListenerObject = Union[EventListener, EventListenerObject]\nBinaryType = Union['blob', 'arraybuffer']\n_EventSource = typeof globalThis extends { onmessage: any } ? {} : undici.EventSource\n_FormData = typeof globalThis extends { onmessage: any } ? {} : undici.FormData\n_Headers = typeof globalThis extends { onmessage: any } ? {} : undici.Headers\n_MessageEvent = typeof globalThis extends { onmessage: any } ? {} : undici.MessageEvent\n_Request = typeof globalThis extends { onmessage: any } ? {} : undici.Request\n_RequestInit = typeof globalThis extends { onmessage: any } ? {} : undici.RequestInit\n_Response = typeof globalThis extends { onmessage: any } ? {} : undici.Response\n_ResponseInit = typeof globalThis extends { onmessage: any } ? {} : undici.ResponseInit\n_WebSocket = typeof globalThis extends { onmessage: any } ? {} : undici.WebSocket\n# If lib.dom.d.ts or lib.webworker.d.ts is loaded, then use the global types. Otherwise, use the types from node.\n_Blob = typeof globalThis extends { onmessage: any; Blob: any } ? {} : import("buffer").Blob\n_File = typeof globalThis extends { onmessage: any; File: any } ? {} : import("buffer").File\n_ByteLengthQueuingStrategy = typeof globalThis extends { onmessage: any } ? {}
    : import("stream/web").ByteLengthQueuingStrategy\n_CompressionStream = typeof globalThis extends { onmessage: any; ReportingObserver: any } ? {}
    : import("stream/web").CompressionStream\n_CountQueuingStrategy = typeof globalThis extends { onmessage: any } ? {}
    : import("stream/web").CountQueuingStrategy\n_DecompressionStream = typeof globalThis extends { onmessage: any; ReportingObserver: any } ? {}
    : import("stream/web").DecompressionStream\n_QueuingStrategy = typeof globalThis extends { onmessage: any } ? {}
    : import("stream/web").QueuingStrategy<T>\n_ReadableByteStreamController = typeof globalThis extends { onmessage: any } ? {}
    : import("stream/web").ReadableByteStreamController\n_ReadableStream = typeof globalThis extends { onmessage: any } ? {}
    : import("stream/web").ReadableStream<R>\n_ReadableStreamBYOBReader = typeof globalThis extends { onmessage: any } ? {}
    : import("stream/web").ReadableStreamBYOBReader\n_ReadableStreamBYOBRequest = typeof globalThis extends { onmessage: any } ? {}
    : import("stream/web").ReadableStreamBYOBRequest\n_ReadableStreamDefaultController = typeof globalThis extends { onmessage: any } ? {}
    : import("stream/web").ReadableStreamDefaultController<R>\n_ReadableStreamDefaultReader = typeof globalThis extends { onmessage: any } ? {}
    : import("stream/web").ReadableStreamDefaultReader<R>\n_TextDecoderStream = typeof globalThis extends { onmessage: any } ? {}
    : import("stream/web").TextDecoderStream\n_TextEncoderStream = typeof globalThis extends { onmessage: any } ? {}
    : import("stream/web").TextEncoderStream\n_TransformStream = typeof globalThis extends { onmessage: any } ? {}
    : import("stream/web").TransformStream<I, O>\n_TransformStreamDefaultController = typeof globalThis extends { onmessage: any } ? {}
    : import("stream/web").TransformStreamDefaultController<O>\n_WritableStream = typeof globalThis extends { onmessage: any } ? {}
    : import("stream/web").WritableStream<W>\n_WritableStreamDefaultController = typeof globalThis extends { onmessage: any } ? {}
    : import("stream/web").WritableStreamDefaultController\n_WritableStreamDefaultWriter = typeof globalThis extends { onmessage: any } ? {}
    : import("stream/web").WritableStreamDefaultWriter<W>